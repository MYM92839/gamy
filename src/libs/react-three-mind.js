import bD, { useState as la, useEffect as JE, forwardRef as nl, useRef as ZE, useCallback as Ga, useImperativeHandle as rl, useMemo as hl, Suspense as HR } from "react";
import { useThree as xR, Canvas as qR } from "@react-three/fiber";
import { Matrix4 as En, Vector3 as HD, Quaternion as VR } from "three";
import { atom as Ve, useSetAtom as ft, useAtomValue as fE } from "jotai";
import { Html as WR } from "@react-three/drei";
import TR from "react-webcam";
function ZR(C, A) {
  for (var g = 0; g < A.length; g++) {
    const I = A[g];
    if (typeof I != "string" && !Array.isArray(I)) {
      for (const B in I)
        if (B !== "default" && !(B in C)) {
          const Q = Object.getOwnPropertyDescriptor(I, B);
          Q && Object.defineProperty(C, B, Q.get ? Q : { enumerable: !0, get: () => I[B] });
        }
    }
  }
  return Object.freeze(Object.defineProperty(C, Symbol.toStringTag, { value: "Module" }));
}
var Ae = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function XR(C) {
  return C && C.__esModule && Object.prototype.hasOwnProperty.call(C, "default") ? C.default : C;
}
function OR(C) {
  if (C.__esModule)
    return C;
  var A = C.default;
  if (typeof A == "function") {
    var g = function I() {
      if (this instanceof I) {
        var B = [null];
        return B.push.apply(B, arguments), new (Function.bind.apply(A, B))();
      }
      return A.apply(this, arguments);
    };
    g.prototype = A.prototype;
  } else
    g = {};
  return Object.defineProperty(g, "__esModule", { value: !0 }), Object.keys(C).forEach(function(I) {
    var B = Object.getOwnPropertyDescriptor(C, I);
    Object.defineProperty(g, I, B.get ? B : { enumerable: !0, get: function() {
      return C[I];
    } });
  }), g;
}
var xD, on = { exports: {} }, ki = {}, qD, Lt = {};
process.env.NODE_ENV === "production" ? on.exports = function() {
  if (xD)
    return ki;
  xD = 1;
  var C = bD, A = Symbol.for("react.element"), g = Symbol.for("react.fragment"), I = Object.prototype.hasOwnProperty, B = C.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, Q = { key: !0, ref: !0, __self: !0, __source: !0 };
  function E(i, o, t) {
    var e, s = {}, a = null, r = null;
    for (e in t !== void 0 && (a = "" + t), o.key !== void 0 && (a = "" + o.key), o.ref !== void 0 && (r = o.ref), o)
      I.call(o, e) && !Q.hasOwnProperty(e) && (s[e] = o[e]);
    if (i && i.defaultProps)
      for (e in o = i.defaultProps)
        s[e] === void 0 && (s[e] = o[e]);
    return { $$typeof: A, type: i, key: a, ref: r, props: s, _owner: B.current };
  }
  return ki.Fragment = g, ki.jsx = E, ki.jsxs = E, ki;
}() : on.exports = (qD || (qD = 1, process.env.NODE_ENV !== "production" && function() {
  var C = bD, A = Symbol.for("react.element"), g = Symbol.for("react.portal"), I = Symbol.for("react.fragment"), B = Symbol.for("react.strict_mode"), Q = Symbol.for("react.profiler"), E = Symbol.for("react.provider"), i = Symbol.for("react.context"), o = Symbol.for("react.forward_ref"), t = Symbol.for("react.suspense"), e = Symbol.for("react.suspense_list"), s = Symbol.for("react.memo"), a = Symbol.for("react.lazy"), r = Symbol.for("react.offscreen"), h = Symbol.iterator, w = "@@iterator", G = C.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  function D(oA) {
    for (var qA = arguments.length, uA = new Array(qA > 1 ? qA - 1 : 0), TA = 1; TA < qA; TA++)
      uA[TA - 1] = arguments[TA];
    (function(og, Dg, Rg) {
      var KA = G.ReactDebugCurrentFrame.getStackAddendum();
      KA !== "" && (Dg += "%s", Rg = Rg.concat([KA]));
      var u = Rg.map(function(Qg) {
        return String(Qg);
      });
      u.unshift("Warning: " + Dg), Function.prototype.apply.call(console[og], console, u);
    })("error", oA, uA);
  }
  var l, d = !1, N = !1, k = !1, p = !1, Y = !1;
  function M(oA) {
    return oA.displayName || "Context";
  }
  function L(oA) {
    if (oA == null)
      return null;
    if (typeof oA.tag == "number" && D("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof oA == "function")
      return oA.displayName || oA.name || null;
    if (typeof oA == "string")
      return oA;
    switch (oA) {
      case I:
        return "Fragment";
      case g:
        return "Portal";
      case Q:
        return "Profiler";
      case B:
        return "StrictMode";
      case t:
        return "Suspense";
      case e:
        return "SuspenseList";
    }
    if (typeof oA == "object")
      switch (oA.$$typeof) {
        case i:
          return M(oA) + ".Consumer";
        case E:
          return M(oA._context) + ".Provider";
        case o:
          return function(Dg, Rg, KA) {
            var u = Dg.displayName;
            if (u)
              return u;
            var Qg = Rg.displayName || Rg.name || "";
            return Qg !== "" ? KA + "(" + Qg + ")" : KA;
          }(oA, oA.render, "ForwardRef");
        case s:
          var qA = oA.displayName || null;
          return qA !== null ? qA : L(oA.type) || "Memo";
        case a:
          var uA = oA, TA = uA._payload, og = uA._init;
          try {
            return L(og(TA));
          } catch {
            return null;
          }
      }
    return null;
  }
  l = Symbol.for("react.module.reference");
  var m, x, T, Z, $, AA, P, _ = Object.assign, QA = 0;
  function tA() {
  }
  tA.__reactDisabledLog = !0;
  var O, rA = G.ReactCurrentDispatcher;
  function eA(oA, qA, uA) {
    if (O === void 0)
      try {
        throw Error();
      } catch (og) {
        var TA = og.stack.trim().match(/\n( *(at )?)/);
        O = TA && TA[1] || "";
      }
    return `
` + O + oA;
  }
  var DA, GA = !1, NA = typeof WeakMap == "function" ? WeakMap : Map;
  function UA(oA, qA) {
    if (!oA || GA)
      return "";
    var uA, TA = DA.get(oA);
    if (TA !== void 0)
      return TA;
    GA = !0;
    var og, Dg = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0, og = rA.current, rA.current = null, function() {
      if (QA === 0) {
        m = console.log, x = console.info, T = console.warn, Z = console.error, $ = console.group, AA = console.groupCollapsed, P = console.groupEnd;
        var Fg = { configurable: !0, enumerable: !0, value: tA, writable: !0 };
        Object.defineProperties(console, { info: Fg, log: Fg, warn: Fg, error: Fg, group: Fg, groupCollapsed: Fg, groupEnd: Fg });
      }
      QA++;
    }();
    try {
      if (qA) {
        var Rg = function() {
          throw Error();
        };
        if (Object.defineProperty(Rg.prototype, "props", { set: function() {
          throw Error();
        } }), typeof Reflect == "object" && Reflect.construct) {
          try {
            Reflect.construct(Rg, []);
          } catch (Fg) {
            uA = Fg;
          }
          Reflect.construct(oA, [], Rg);
        } else {
          try {
            Rg.call();
          } catch (Fg) {
            uA = Fg;
          }
          oA.call(Rg.prototype);
        }
      } else {
        try {
          throw Error();
        } catch (Fg) {
          uA = Fg;
        }
        oA();
      }
    } catch (Fg) {
      if (Fg && uA && typeof Fg.stack == "string") {
        for (var KA = Fg.stack.split(`
`), u = uA.stack.split(`
`), Qg = KA.length - 1, ug = u.length - 1; Qg >= 1 && ug >= 0 && KA[Qg] !== u[ug]; )
          ug--;
        for (; Qg >= 1 && ug >= 0; Qg--, ug--)
          if (KA[Qg] !== u[ug]) {
            if (Qg !== 1 || ug !== 1)
              do
                if (Qg--, --ug < 0 || KA[Qg] !== u[ug]) {
                  var ng = `
` + KA[Qg].replace(" at new ", " at ");
                  return oA.displayName && ng.includes("<anonymous>") && (ng = ng.replace("<anonymous>", oA.displayName)), typeof oA == "function" && DA.set(oA, ng), ng;
                }
              while (Qg >= 1 && ug >= 0);
            break;
          }
      }
    } finally {
      GA = !1, rA.current = og, function() {
        if (--QA == 0) {
          var Fg = { configurable: !0, enumerable: !0, writable: !0 };
          Object.defineProperties(console, { log: _({}, Fg, { value: m }), info: _({}, Fg, { value: x }), warn: _({}, Fg, { value: T }), error: _({}, Fg, { value: Z }), group: _({}, Fg, { value: $ }), groupCollapsed: _({}, Fg, { value: AA }), groupEnd: _({}, Fg, { value: P }) });
        }
        QA < 0 && D("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }(), Error.prepareStackTrace = Dg;
    }
    var vg = oA ? oA.displayName || oA.name : "", OA = vg ? eA(vg) : "";
    return typeof oA == "function" && DA.set(oA, OA), OA;
  }
  function pA(oA, qA, uA) {
    if (oA == null)
      return "";
    if (typeof oA == "function")
      return UA(oA, !(!(TA = oA.prototype) || !TA.isReactComponent));
    var TA;
    if (typeof oA == "string")
      return eA(oA);
    switch (oA) {
      case t:
        return eA("Suspense");
      case e:
        return eA("SuspenseList");
    }
    if (typeof oA == "object")
      switch (oA.$$typeof) {
        case o:
          return UA(oA.render, !1);
        case s:
          return pA(oA.type, qA, uA);
        case a:
          var og = oA, Dg = og._payload, Rg = og._init;
          try {
            return pA(Rg(Dg), qA, uA);
          } catch {
          }
      }
    return "";
  }
  DA = new NA();
  var XA = Object.prototype.hasOwnProperty, WA = {}, PA = G.ReactDebugCurrentFrame;
  function fA(oA) {
    if (oA) {
      var qA = oA._owner, uA = pA(oA.type, oA._source, qA ? qA.type : null);
      PA.setExtraStackFrame(uA);
    } else
      PA.setExtraStackFrame(null);
  }
  var gg = Array.isArray;
  function Bg(oA) {
    return gg(oA);
  }
  function lg(oA) {
    return "" + oA;
  }
  function jA(oA) {
    if (function(qA) {
      try {
        return lg(qA), !1;
      } catch {
        return !0;
      }
    }(oA))
      return D("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", function(qA) {
        return typeof Symbol == "function" && Symbol.toStringTag && qA[Symbol.toStringTag] || qA.constructor.name || "Object";
      }(oA)), lg(oA);
  }
  var eg, rg, Wg, Yg = G.ReactCurrentOwner, Xg = { key: !0, ref: !0, __self: !0, __source: !0 };
  Wg = {};
  var hg = function(oA, qA, uA, TA, og, Dg, Rg) {
    var KA = { $$typeof: A, type: oA, key: qA, ref: uA, props: Rg, _owner: Dg, _store: {} };
    return Object.defineProperty(KA._store, "validated", { configurable: !1, enumerable: !1, writable: !0, value: !1 }), Object.defineProperty(KA, "_self", { configurable: !1, enumerable: !1, writable: !1, value: TA }), Object.defineProperty(KA, "_source", { configurable: !1, enumerable: !1, writable: !1, value: og }), Object.freeze && (Object.freeze(KA.props), Object.freeze(KA)), KA;
  };
  function wI(oA, qA, uA, TA, og) {
    var Dg, Rg = {}, KA = null, u = null;
    for (Dg in uA !== void 0 && (jA(uA), KA = "" + uA), function(ng) {
      if (XA.call(ng, "key")) {
        var vg = Object.getOwnPropertyDescriptor(ng, "key").get;
        if (vg && vg.isReactWarning)
          return !1;
      }
      return ng.key !== void 0;
    }(qA) && (jA(qA.key), KA = "" + qA.key), function(ng) {
      if (XA.call(ng, "ref")) {
        var vg = Object.getOwnPropertyDescriptor(ng, "ref").get;
        if (vg && vg.isReactWarning)
          return !1;
      }
      return ng.ref !== void 0;
    }(qA) && (u = qA.ref, function(ng, vg) {
      if (typeof ng.ref == "string" && Yg.current && vg && Yg.current.stateNode !== vg) {
        var OA = L(Yg.current.type);
        Wg[OA] || (D('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', L(Yg.current.type), ng.ref), Wg[OA] = !0);
      }
    }(qA, og)), qA)
      XA.call(qA, Dg) && !Xg.hasOwnProperty(Dg) && (Rg[Dg] = qA[Dg]);
    if (oA && oA.defaultProps) {
      var Qg = oA.defaultProps;
      for (Dg in Qg)
        Rg[Dg] === void 0 && (Rg[Dg] = Qg[Dg]);
    }
    if (KA || u) {
      var ug = typeof oA == "function" ? oA.displayName || oA.name || "Unknown" : oA;
      KA && function(ng, vg) {
        var OA = function() {
          eg || (eg = !0, D("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", vg));
        };
        OA.isReactWarning = !0, Object.defineProperty(ng, "key", { get: OA, configurable: !0 });
      }(Rg, ug), u && function(ng, vg) {
        var OA = function() {
          rg || (rg = !0, D("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", vg));
        };
        OA.isReactWarning = !0, Object.defineProperty(ng, "ref", { get: OA, configurable: !0 });
      }(Rg, ug);
    }
    return hg(oA, KA, u, og, TA, Yg.current, Rg);
  }
  var yI, FI = G.ReactCurrentOwner, VI = G.ReactDebugCurrentFrame;
  function JI(oA) {
    if (oA) {
      var qA = oA._owner, uA = pA(oA.type, oA._source, qA ? qA.type : null);
      VI.setExtraStackFrame(uA);
    } else
      VI.setExtraStackFrame(null);
  }
  function fI(oA) {
    return typeof oA == "object" && oA !== null && oA.$$typeof === A;
  }
  function nI() {
    if (FI.current) {
      var oA = L(FI.current.type);
      if (oA)
        return `

Check the render method of \`` + oA + "`.";
    }
    return "";
  }
  yI = !1;
  var dI = {};
  function gI(oA, qA) {
    if (oA._store && !oA._store.validated && oA.key == null) {
      oA._store.validated = !0;
      var uA = function(og) {
        var Dg = nI();
        if (!Dg) {
          var Rg = typeof og == "string" ? og : og.displayName || og.name;
          Rg && (Dg = `

Check the top-level render call using <` + Rg + ">.");
        }
        return Dg;
      }(qA);
      if (!dI[uA]) {
        dI[uA] = !0;
        var TA = "";
        oA && oA._owner && oA._owner !== FI.current && (TA = " It was passed a child from " + L(oA._owner.type) + "."), JI(oA), D('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', uA, TA), JI(null);
      }
    }
  }
  function pI(oA, qA) {
    if (typeof oA == "object") {
      if (Bg(oA))
        for (var uA = 0; uA < oA.length; uA++) {
          var TA = oA[uA];
          fI(TA) && gI(TA, qA);
        }
      else if (fI(oA))
        oA._store && (oA._store.validated = !0);
      else if (oA) {
        var og = function(KA) {
          if (KA === null || typeof KA != "object")
            return null;
          var u = h && KA[h] || KA[w];
          return typeof u == "function" ? u : null;
        }(oA);
        if (typeof og == "function" && og !== oA.entries)
          for (var Dg, Rg = og.call(oA); !(Dg = Rg.next()).done; )
            fI(Dg.value) && gI(Dg.value, qA);
      }
    }
  }
  function bC(oA) {
    var qA, uA = oA.type;
    if (uA != null && typeof uA != "string") {
      if (typeof uA == "function")
        qA = uA.propTypes;
      else {
        if (typeof uA != "object" || uA.$$typeof !== o && uA.$$typeof !== s)
          return;
        qA = uA.propTypes;
      }
      if (qA) {
        var TA = L(uA);
        (function(og, Dg, Rg, KA, u) {
          var Qg = Function.call.bind(XA);
          for (var ug in og)
            if (Qg(og, ug)) {
              var ng = void 0;
              try {
                if (typeof og[ug] != "function") {
                  var vg = Error((KA || "React class") + ": " + Rg + " type `" + ug + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof og[ug] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw vg.name = "Invariant Violation", vg;
                }
                ng = og[ug](Dg, ug, KA, Rg, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (OA) {
                ng = OA;
              }
              !ng || ng instanceof Error || (fA(u), D("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", KA || "React class", Rg, ug, typeof ng), fA(null)), ng instanceof Error && !(ng.message in WA) && (WA[ng.message] = !0, fA(u), D("Failed %s type: %s", Rg, ng.message), fA(null));
            }
        })(qA, oA.props, "prop", TA, oA);
      } else
        uA.PropTypes === void 0 || yI || (yI = !0, D("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", L(uA) || "Unknown"));
      typeof uA.getDefaultProps != "function" || uA.getDefaultProps.isReactClassApproved || D("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
  }
  function Og(oA, qA, uA, TA, og, Dg) {
    var Rg = function(OA) {
      return typeof OA == "string" || typeof OA == "function" || !!(OA === I || OA === Q || Y || OA === B || OA === t || OA === e || p || OA === r || d || N || k) || typeof OA == "object" && OA !== null && (OA.$$typeof === a || OA.$$typeof === s || OA.$$typeof === E || OA.$$typeof === i || OA.$$typeof === o || OA.$$typeof === l || OA.getModuleId !== void 0);
    }(oA);
    if (!Rg) {
      var KA = "";
      (oA === void 0 || typeof oA == "object" && oA !== null && Object.keys(oA).length === 0) && (KA += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
      var u, Qg = function(OA) {
        return OA !== void 0 ? `

Check your code at ` + OA.fileName.replace(/^.*[\\\/]/, "") + ":" + OA.lineNumber + "." : "";
      }(og);
      KA += Qg || nI(), oA === null ? u = "null" : Bg(oA) ? u = "array" : oA !== void 0 && oA.$$typeof === A ? (u = "<" + (L(oA.type) || "Unknown") + " />", KA = " Did you accidentally export a JSX literal instead of a component?") : u = typeof oA, D("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", u, KA);
    }
    var ug = wI(oA, qA, uA, og, Dg);
    if (ug == null)
      return ug;
    if (Rg) {
      var ng = qA.children;
      if (ng !== void 0)
        if (TA)
          if (Bg(ng)) {
            for (var vg = 0; vg < ng.length; vg++)
              pI(ng[vg], oA);
            Object.freeze && Object.freeze(ng);
          } else
            D("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
        else
          pI(ng, oA);
    }
    return oA === I ? function(OA) {
      for (var Fg = Object.keys(OA.props), cB = 0; cB < Fg.length; cB++) {
        var YB = Fg[cB];
        if (YB !== "children" && YB !== "key") {
          JI(OA), D("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", YB), JI(null);
          break;
        }
      }
      OA.ref !== null && (JI(OA), D("Invalid attribute `ref` supplied to `React.Fragment`."), JI(null));
    }(ug) : bC(ug), ug;
  }
  var EA = function(oA, qA, uA) {
    return Og(oA, qA, uA, !1);
  }, UB = function(oA, qA, uA) {
    return Og(oA, qA, uA, !0);
  };
  Lt.Fragment = I, Lt.jsx = EA, Lt.jsxs = UB;
}()), Lt);
var hC = on.exports;
const bB = [[0, -3.406404, 5.979507], [0, -1.126865, 7.475604], [0, -2.089024, 6.058267], [-0.463928, 0.955357, 6.633583], [0, -0.46317, 7.58658], [0, 0.365669, 7.24287], [0, 2.473255, 5.788627], [-4.253081, 2.577646, 3.279702], [0, 4.019042, 5.284764], [0, 4.885979, 5.385258], [0, 8.261778, 4.481535], [0, -3.706811, 5.864924], [0, -3.918301, 5.56943], [0, -3.994436, 5.219482], [0, -4.5424, 5.404754], [0, -4.745577, 5.529457], [0, -5.019567, 5.601448], [0, -5.365123, 5.535441], [0, -6.149624, 5.071372], [0, -1.501095, 7.112196], [-0.416106, -1.466449, 6.447657], [-7.08796, 5.434801, 0.09962], [-2.628639, 2.035898, 3.848121], [-3.198363, 1.985815, 3.796952], [-3.775151, 2.039402, 3.646194], [-4.465819, 2.42295, 3.155168], [-2.164289, 2.189867, 3.851822], [-3.208229, 3.223926, 4.115822], [-2.673803, 3.205337, 4.092203], [-3.745193, 3.165286, 3.972409], [-4.161018, 3.059069, 3.719554], [-5.062006, 1.934418, 2.776093], [-2.266659, -7.425768, 4.389812], [-4.445859, 2.663991, 3.173422], [-7.21453, 2.263009, 0.07315], [-5.799793, 2.349546, 2.204059], [-2.844939, -0.720868, 4.43313], [-0.711452, -3.329355, 5.877044], [-0.606033, -3.924562, 5.444923], [-1.431615, -3.500953, 5.496189], [-1.91491, -3.803146, 5.02893], [-1.131043, -3.973937, 5.189648], [-1.563548, -4.082763, 4.842263], [-2.650112, -5.003649, 4.188483], [-0.427049, -1.094134, 7.360529], [-0.496396, -0.475659, 7.440358], [-5.253307, 3.881582, 3.363159], [-1.718698, 0.974609, 4.558359], [-1.608635, -0.942516, 5.814193], [-1.651267, -0.610868, 5.581319], [-4.765501, -0.701554, 3.534632], [-0.478306, 0.295766, 7.101013], [-3.734964, 4.50823, 4.550454], [-4.588603, 4.302037, 4.048484], [-6.279331, 6.615427, 1.42585], [-1.220941, 4.142165, 5.106035], [-2.193489, 3.100317, 4.000575], [-3.102642, -4.352984, 4.095905], [-6.719682, -4.788645, -1.745401], [-1.193824, -1.306795, 5.737747], [-0.729766, -1.593712, 5.833208], [-2.456206, -4.342621, 4.283884], [-2.204823, -4.304508, 4.162499], [-4.985894, 4.802461, 3.751977], [-1.592294, -1.257709, 5.456949], [-2.644548, 4.524654, 4.921559], [-2.760292, 5.100971, 5.01599], [-3.523964, 8.005976, 3.729163], [-5.599763, 5.71547, 2.724259], [-3.063932, 6.566144, 4.529981], [-5.720968, 4.254584, 2.830852], [-6.374393, 4.78559, 1.591691], [-0.672728, -3.688016, 5.737804], [-1.26256, -3.787691, 5.417779], [-1.732553, -3.952767, 5.000579], [-1.043625, -1.464973, 5.662455], [-2.321234, -4.329069, 4.258156], [-2.056846, -4.477671, 4.520883], [-2.153084, -4.276322, 4.038093], [-0.946874, -1.035249, 6.512274], [-1.469132, -4.036351, 4.604908], [-1.02434, -3.989851, 4.926693], [-0.533422, -3.993222, 5.138202], [-0.76972, -6.095394, 4.985883], [-0.699606, -5.29185, 5.448304], [-0.669687, -4.94977, 5.509612], [-0.630947, -4.695101, 5.449371], [-0.583218, -4.517982, 5.339869], [-1.53717, -4.423206, 4.74547], [-1.6156, -4.475942, 4.813632], [-1.729053, -4.61868, 4.854463], [-1.838624, -4.828746, 4.823737], [-2.36825, -3.106237, 4.868096], [-7.542244, -1.049282, -2.431321], [0, -1.724003, 6.60139], [-1.826614, -4.399531, 4.399021], [-1.929558, -4.411831, 4.497052], [-0.597442, -2.013686, 5.866456], [-1.405627, -1.714196, 5.241087], [-0.662449, -1.819321, 5.863759], [-2.34234, 0.572222, 4.294303], [-3.327324, 0.104863, 4.11386], [-1.726175, -0.919165, 5.273355], [-5.133204, 7.485602, 2.660442], [-4.538641, 6.319907, 3.683424], [-3.986562, 5.109487, 4.466315], [-2.169681, -5.440433, 4.455874], [-1.395634, 5.011963, 5.316032], [-1.6195, 6.599217, 4.921106], [-1.891399, 8.236377, 4.274997], [-4.195832, 2.235205, 3.375099], [-5.733342, 1.411738, 2.431726], [-1.859887, 2.355757, 3.843181], [-4.988612, 3.074654, 3.083858], [-1.303263, 1.416453, 4.831091], [-1.305757, -0.672779, 6.415959], [-6.46517, 0.937119, 1.689873], [-5.258659, 0.945811, 2.974312], [-4.432338, 0.722096, 3.522615], [-3.300681, 0.861641, 3.872784], [-2.430178, 1.131492, 4.039035], [-1.820731, 1.467954, 4.224124], [-0.563221, 2.307693, 5.566789], [-6.338145, -0.529279, 1.881175], [-5.587698, 3.208071, 2.687839], [-0.242624, -1.462857, 7.071491], [-1.611251, 0.339326, 4.895421], [-7.743095, 2.364999, -2.005167], [-1.391142, 1.851048, 4.448999], [-1.785794, -0.978284, 4.85047], [-4.670959, 2.664461, 3.084075], [-1.33397, -0.283761, 6.097047], [-7.270895, -2.890917, -2.252455], [-1.856432, 2.585245, 3.757904], [-0.923388, 0.073076, 6.671944], [-5.000589, -6.135128, 1.892523], [-5.085276, -7.17859, 0.714711], [-7.159291, -0.81182, -0.072044], [-5.843051, -5.248023, 0.924091], [-6.847258, 3.662916, 0.724695], [-2.412942, -8.258853, 4.119213], [-0.179909, -1.689864, 6.573301], [-2.103655, -0.163946, 4.566119], [-6.407571, 2.236021, 1.560843], [-3.670075, 2.360153, 3.63523], [-3.177186, 2.294265, 3.775704], [-2.196121, -4.598322, 4.479786], [-6.234883, -1.94443, 1.663542], [-1.292924, -9.29592, 4.094063], [-3.210651, -8.533278, 2.802001], [-4.068926, -7.993109, 1.925119], [0, 6.54539, 5.027311], [0, -9.403378, 4.264492], [-2.724032, 2.315802, 3.777151], [-2.28846, 2.398891, 3.697603], [-1.998311, 2.496547, 3.689148], [-6.13004, 3.399261, 2.038516], [-2.28846, 2.886504, 3.775031], [-2.724032, 2.96181, 3.871767], [-3.177186, 2.964136, 3.876973], [-3.670075, 2.927714, 3.724325], [-4.018389, 2.857357, 3.482983], [-7.555811, 4.106811, -0.991917], [-4.018389, 2.483695, 3.440898], [0, -2.521945, 5.932265], [-1.776217, -2.683946, 5.213116], [-1.222237, -1.182444, 5.952465], [-0.731493, -2.536683, 5.815343], [0, 3.271027, 5.236015], [-4.135272, -6.996638, 2.67197], [-3.311811, -7.660815, 3.382963], [-1.313701, -8.639995, 4.702456], [-5.940524, -6.223629, -0.631468], [-1.998311, 2.743838, 3.74403], [-0.901447, 1.236992, 5.754256], [0, -8.765243, 4.891441], [-2.308977, -8.974196, 3.60907], [-6.954154, -2.439843, -0.131163], [-1.098819, -4.458788, 5.120727], [-1.181124, -4.579996, 5.189564], [-1.255818, -4.787901, 5.237051], [-1.325085, -5.106507, 5.20501], [-1.546388, -5.819392, 4.757893], [-1.953754, -4.183892, 4.431713], [-2.117802, -4.137093, 4.555096], [-2.285339, -4.051196, 4.582438], [-2.85016, -3.66572, 4.484994], [-5.278538, -2.238942, 2.861224], [-0.946709, 1.907628, 5.196779], [-1.314173, 3.104912, 4.231404], [-1.78, 2.86, 3.881555], [-1.84511, -4.09888, 4.247264], [-5.436187, -4.030482, 2.109852], [-0.766444, 3.182131, 4.861453], [-1.938616, -6.61441, 4.521085], [0, 1.059413, 6.774605], [-0.516573, 1.583572, 6.148363], [0, 1.728369, 6.31675], [-1.246815, 0.230297, 5.681036], [0, -7.942194, 5.181173], [0, -6.991499, 5.153478], [-0.997827, -6.930921, 4.979576], [-3.288807, -5.382514, 3.795752], [-2.311631, -1.566237, 4.590085], [-2.68025, -6.111567, 4.096152], [-3.832928, -1.537326, 4.137731], [-2.96186, -2.274215, 4.440943], [-4.386901, -2.683286, 3.643886], [-1.217295, -7.834465, 4.969286], [-1.542374, -0.136843, 5.201008], [-3.878377, -6.041764, 3.311079], [-3.084037, -6.809842, 3.814195], [-3.747321, -4.503545, 3.726453], [-6.094129, -3.205991, 1.473482], [-4.588995, -4.728726, 2.983221], [-6.583231, -3.941269, 0.070268], [-3.49258, -3.19582, 4.130198], [-1.255543, 0.802341, 5.307551], [-1.126122, -0.933602, 6.538785], [-1.443109, -1.142774, 5.905127], [-0.923043, -0.529042, 7.003423], [-1.755386, 3.529117, 4.327696], [-2.632589, 3.713828, 4.364629], [-3.388062, 3.721976, 4.309028], [-4.075766, 3.675413, 4.076063], [-4.62291, 3.474691, 3.646321], [-5.171755, 2.535753, 2.670867], [-7.297331, 0.763172, -0.048769], [-4.706828, 1.651, 3.109532], [-4.071712, 1.476821, 3.476944], [-3.269817, 1.470659, 3.731945], [-2.527572, 1.617311, 3.865444], [-1.970894, 1.858505, 3.961782], [-1.579543, 2.097941, 4.084996], [-7.664182, 0.673132, -2.435867], [-1.397041, -1.340139, 5.630378], [-0.884838, 0.65874, 6.233232], [-0.767097, -0.968035, 7.077932], [-0.460213, -1.334106, 6.787447], [-0.748618, -1.067994, 6.798303], [-1.236408, -1.585568, 5.48049], [-0.387306, -1.40999, 6.957705], [-0.319925, -1.607931, 6.508676], [-1.639633, 2.556298, 3.863736], [-1.255645, 2.467144, 4.2038], [-1.031362, 2.382663, 4.615849], [-4.253081, 2.772296, 3.315305], [-4.53, 2.91, 3.339685], [0.463928, 0.955357, 6.633583], [4.253081, 2.577646, 3.279702], [0.416106, -1.466449, 6.447657], [7.08796, 5.434801, 0.09962], [2.628639, 2.035898, 3.848121], [3.198363, 1.985815, 3.796952], [3.775151, 2.039402, 3.646194], [4.465819, 2.42295, 3.155168], [2.164289, 2.189867, 3.851822], [3.208229, 3.223926, 4.115822], [2.673803, 3.205337, 4.092203], [3.745193, 3.165286, 3.972409], [4.161018, 3.059069, 3.719554], [5.062006, 1.934418, 2.776093], [2.266659, -7.425768, 4.389812], [4.445859, 2.663991, 3.173422], [7.21453, 2.263009, 0.07315], [5.799793, 2.349546, 2.204059], [2.844939, -0.720868, 4.43313], [0.711452, -3.329355, 5.877044], [0.606033, -3.924562, 5.444923], [1.431615, -3.500953, 5.496189], [1.91491, -3.803146, 5.02893], [1.131043, -3.973937, 5.189648], [1.563548, -4.082763, 4.842263], [2.650112, -5.003649, 4.188483], [0.427049, -1.094134, 7.360529], [0.496396, -0.475659, 7.440358], [5.253307, 3.881582, 3.363159], [1.718698, 0.974609, 4.558359], [1.608635, -0.942516, 5.814193], [1.651267, -0.610868, 5.581319], [4.765501, -0.701554, 3.534632], [0.478306, 0.295766, 7.101013], [3.734964, 4.50823, 4.550454], [4.588603, 4.302037, 4.048484], [6.279331, 6.615427, 1.42585], [1.220941, 4.142165, 5.106035], [2.193489, 3.100317, 4.000575], [3.102642, -4.352984, 4.095905], [6.719682, -4.788645, -1.745401], [1.193824, -1.306795, 5.737747], [0.729766, -1.593712, 5.833208], [2.456206, -4.342621, 4.283884], [2.204823, -4.304508, 4.162499], [4.985894, 4.802461, 3.751977], [1.592294, -1.257709, 5.456949], [2.644548, 4.524654, 4.921559], [2.760292, 5.100971, 5.01599], [3.523964, 8.005976, 3.729163], [5.599763, 5.71547, 2.724259], [3.063932, 6.566144, 4.529981], [5.720968, 4.254584, 2.830852], [6.374393, 4.78559, 1.591691], [0.672728, -3.688016, 5.737804], [1.26256, -3.787691, 5.417779], [1.732553, -3.952767, 5.000579], [1.043625, -1.464973, 5.662455], [2.321234, -4.329069, 4.258156], [2.056846, -4.477671, 4.520883], [2.153084, -4.276322, 4.038093], [0.946874, -1.035249, 6.512274], [1.469132, -4.036351, 4.604908], [1.02434, -3.989851, 4.926693], [0.533422, -3.993222, 5.138202], [0.76972, -6.095394, 4.985883], [0.699606, -5.29185, 5.448304], [0.669687, -4.94977, 5.509612], [0.630947, -4.695101, 5.449371], [0.583218, -4.517982, 5.339869], [1.53717, -4.423206, 4.74547], [1.6156, -4.475942, 4.813632], [1.729053, -4.61868, 4.854463], [1.838624, -4.828746, 4.823737], [2.36825, -3.106237, 4.868096], [7.542244, -1.049282, -2.431321], [1.826614, -4.399531, 4.399021], [1.929558, -4.411831, 4.497052], [0.597442, -2.013686, 5.866456], [1.405627, -1.714196, 5.241087], [0.662449, -1.819321, 5.863759], [2.34234, 0.572222, 4.294303], [3.327324, 0.104863, 4.11386], [1.726175, -0.919165, 5.273355], [5.133204, 7.485602, 2.660442], [4.538641, 6.319907, 3.683424], [3.986562, 5.109487, 4.466315], [2.169681, -5.440433, 4.455874], [1.395634, 5.011963, 5.316032], [1.6195, 6.599217, 4.921106], [1.891399, 8.236377, 4.274997], [4.195832, 2.235205, 3.375099], [5.733342, 1.411738, 2.431726], [1.859887, 2.355757, 3.843181], [4.988612, 3.074654, 3.083858], [1.303263, 1.416453, 4.831091], [1.305757, -0.672779, 6.415959], [6.46517, 0.937119, 1.689873], [5.258659, 0.945811, 2.974312], [4.432338, 0.722096, 3.522615], [3.300681, 0.861641, 3.872784], [2.430178, 1.131492, 4.039035], [1.820731, 1.467954, 4.224124], [0.563221, 2.307693, 5.566789], [6.338145, -0.529279, 1.881175], [5.587698, 3.208071, 2.687839], [0.242624, -1.462857, 7.071491], [1.611251, 0.339326, 4.895421], [7.743095, 2.364999, -2.005167], [1.391142, 1.851048, 4.448999], [1.785794, -0.978284, 4.85047], [4.670959, 2.664461, 3.084075], [1.33397, -0.283761, 6.097047], [7.270895, -2.890917, -2.252455], [1.856432, 2.585245, 3.757904], [0.923388, 0.073076, 6.671944], [5.000589, -6.135128, 1.892523], [5.085276, -7.17859, 0.714711], [7.159291, -0.81182, -0.072044], [5.843051, -5.248023, 0.924091], [6.847258, 3.662916, 0.724695], [2.412942, -8.258853, 4.119213], [0.179909, -1.689864, 6.573301], [2.103655, -0.163946, 4.566119], [6.407571, 2.236021, 1.560843], [3.670075, 2.360153, 3.63523], [3.177186, 2.294265, 3.775704], [2.196121, -4.598322, 4.479786], [6.234883, -1.94443, 1.663542], [1.292924, -9.29592, 4.094063], [3.210651, -8.533278, 2.802001], [4.068926, -7.993109, 1.925119], [2.724032, 2.315802, 3.777151], [2.28846, 2.398891, 3.697603], [1.998311, 2.496547, 3.689148], [6.13004, 3.399261, 2.038516], [2.28846, 2.886504, 3.775031], [2.724032, 2.96181, 3.871767], [3.177186, 2.964136, 3.876973], [3.670075, 2.927714, 3.724325], [4.018389, 2.857357, 3.482983], [7.555811, 4.106811, -0.991917], [4.018389, 2.483695, 3.440898], [1.776217, -2.683946, 5.213116], [1.222237, -1.182444, 5.952465], [0.731493, -2.536683, 5.815343], [4.135272, -6.996638, 2.67197], [3.311811, -7.660815, 3.382963], [1.313701, -8.639995, 4.702456], [5.940524, -6.223629, -0.631468], [1.998311, 2.743838, 3.74403], [0.901447, 1.236992, 5.754256], [2.308977, -8.974196, 3.60907], [6.954154, -2.439843, -0.131163], [1.098819, -4.458788, 5.120727], [1.181124, -4.579996, 5.189564], [1.255818, -4.787901, 5.237051], [1.325085, -5.106507, 5.20501], [1.546388, -5.819392, 4.757893], [1.953754, -4.183892, 4.431713], [2.117802, -4.137093, 4.555096], [2.285339, -4.051196, 4.582438], [2.85016, -3.66572, 4.484994], [5.278538, -2.238942, 2.861224], [0.946709, 1.907628, 5.196779], [1.314173, 3.104912, 4.231404], [1.78, 2.86, 3.881555], [1.84511, -4.09888, 4.247264], [5.436187, -4.030482, 2.109852], [0.766444, 3.182131, 4.861453], [1.938616, -6.61441, 4.521085], [0.516573, 1.583572, 6.148363], [1.246815, 0.230297, 5.681036], [0.997827, -6.930921, 4.979576], [3.288807, -5.382514, 3.795752], [2.311631, -1.566237, 4.590085], [2.68025, -6.111567, 4.096152], [3.832928, -1.537326, 4.137731], [2.96186, -2.274215, 4.440943], [4.386901, -2.683286, 3.643886], [1.217295, -7.834465, 4.969286], [1.542374, -0.136843, 5.201008], [3.878377, -6.041764, 3.311079], [3.084037, -6.809842, 3.814195], [3.747321, -4.503545, 3.726453], [6.094129, -3.205991, 1.473482], [4.588995, -4.728726, 2.983221], [6.583231, -3.941269, 0.070268], [3.49258, -3.19582, 4.130198], [1.255543, 0.802341, 5.307551], [1.126122, -0.933602, 6.538785], [1.443109, -1.142774, 5.905127], [0.923043, -0.529042, 7.003423], [1.755386, 3.529117, 4.327696], [2.632589, 3.713828, 4.364629], [3.388062, 3.721976, 4.309028], [4.075766, 3.675413, 4.076063], [4.62291, 3.474691, 3.646321], [5.171755, 2.535753, 2.670867], [7.297331, 0.763172, -0.048769], [4.706828, 1.651, 3.109532], [4.071712, 1.476821, 3.476944], [3.269817, 1.470659, 3.731945], [2.527572, 1.617311, 3.865444], [1.970894, 1.858505, 3.961782], [1.579543, 2.097941, 4.084996], [7.664182, 0.673132, -2.435867], [1.397041, -1.340139, 5.630378], [0.884838, 0.65874, 6.233232], [0.767097, -0.968035, 7.077932], [0.460213, -1.334106, 6.787447], [0.748618, -1.067994, 6.798303], [1.236408, -1.585568, 5.48049], [0.387306, -1.40999, 6.957705], [0.319925, -1.607931, 6.508676], [1.639633, 2.556298, 3.863736], [1.255645, 2.467144, 4.2038], [1.031362, 2.382663, 4.615849], [4.253081, 2.772296, 3.315305], [4.53, 2.91, 3.339685]], LB = [[0.499977, 0.347466], [0.500026, 0.452513], [0.499974, 0.397628], [0.482113, 0.528021], [0.500151, 0.472844], [0.49991, 0.501747], [0.499523, 0.598938], [0.289712, 0.619236], [0.499955, 0.687602], [0.499987, 0.730081], [0.500023, 0.89295], [0.500023, 0.333766], [0.500016, 0.320776], [0.500023, 0.307652], [0.499977, 0.304722], [0.499977, 0.294066], [0.499977, 0.280615], [0.499977, 0.262981], [0.499968, 0.218629], [0.499816, 0.437019], [0.473773, 0.42609], [0.104907, 0.745859], [0.36593, 0.590424], [0.338758, 0.586975], [0.31112, 0.59054], [0.274658, 0.610869], [0.393362, 0.596294], [0.345234, 0.655989], [0.370094, 0.653924], [0.319322, 0.652735], [0.297903, 0.646409], [0.247792, 0.58919], [0.396889, 0.157245], [0.280098, 0.6244], [0.10631, 0.600044], [0.209925, 0.608647], [0.355808, 0.465594], [0.471751, 0.349596], [0.474155, 0.319808], [0.439785, 0.342771], [0.414617, 0.333459], [0.450374, 0.319139], [0.428771, 0.317309], [0.374971, 0.272195], [0.486717, 0.452371], [0.485301, 0.472605], [0.257765, 0.68551], [0.401223, 0.544828], [0.429819, 0.451385], [0.421352, 0.466259], [0.276896, 0.467943], [0.48337, 0.500413], [0.337212, 0.717117], [0.296392, 0.706757], [0.169295, 0.806186], [0.44758, 0.69739], [0.39239, 0.646112], [0.35449, 0.303216], [0.067305, 0.269895], [0.442739, 0.427174], [0.457098, 0.415208], [0.381974, 0.305289], [0.392389, 0.305797], [0.277076, 0.728068], [0.422552, 0.436767], [0.385919, 0.718636], [0.383103, 0.74416], [0.331431, 0.880286], [0.229924, 0.767997], [0.364501, 0.810886], [0.229622, 0.700459], [0.173287, 0.721252], [0.472879, 0.333802], [0.446828, 0.331473], [0.422762, 0.32611], [0.445308, 0.419934], [0.388103, 0.306039], [0.403039, 0.29346], [0.403629, 0.306047], [0.460042, 0.442861], [0.431158, 0.307634], [0.452182, 0.307634], [0.475387, 0.307634], [0.465828, 0.22081], [0.472329, 0.263774], [0.473087, 0.282143], [0.473122, 0.295374], [0.473033, 0.304722], [0.427942, 0.304722], [0.426479, 0.29646], [0.423162, 0.288154], [0.418309, 0.279937], [0.390095, 0.360427], [0.013954, 0.439966], [0.499914, 0.419853], [0.4132, 0.3046], [0.409626, 0.298177], [0.46808, 0.398465], [0.422729, 0.414015], [0.46308, 0.406216], [0.37212, 0.526586], [0.334562, 0.503927], [0.411671, 0.453035], [0.242176, 0.852324], [0.290777, 0.798554], [0.327338, 0.743473], [0.39951, 0.251079], [0.441728, 0.738324], [0.429765, 0.812166], [0.412198, 0.891099], [0.288955, 0.601048], [0.218937, 0.564589], [0.412782, 0.60103], [0.257135, 0.64456], [0.427685, 0.562039], [0.44834, 0.463064], [0.17856, 0.542446], [0.247308, 0.542806], [0.286267, 0.532325], [0.332828, 0.539288], [0.368756, 0.552793], [0.398964, 0.567345], [0.47641, 0.594194], [0.189241, 0.476076], [0.228962, 0.651049], [0.490726, 0.437599], [0.40467, 0.514867], [0.019469, 0.598436], [0.426243, 0.579569], [0.396993, 0.451203], [0.26647, 0.623023], [0.439121, 0.481042], [0.032314, 0.355643], [0.419054, 0.612845], [0.462783, 0.494253], [0.238979, 0.220255], [0.198221, 0.168062], [0.10755, 0.459245], [0.18361, 0.259743], [0.13441, 0.666317], [0.385764, 0.116846], [0.490967, 0.420622], [0.382385, 0.491427], [0.174399, 0.602329], [0.318785, 0.603765], [0.343364, 0.599403], [0.3961, 0.289783], [0.187885, 0.411462], [0.430987, 0.055935], [0.318993, 0.101715], [0.266248, 0.130299], [0.500023, 0.809424], [0.499977, 0.045547], [0.36617, 0.601178], [0.393207, 0.604463], [0.410373, 0.60892], [0.194993, 0.657898], [0.388665, 0.637716], [0.365962, 0.644029], [0.343364, 0.644643], [0.318785, 0.64166], [0.301415, 0.636844], [0.058133, 0.680924], [0.301415, 0.612551], [0.499988, 0.381566], [0.415838, 0.375804], [0.445682, 0.433923], [0.465844, 0.379359], [0.499923, 0.648476], [0.288719, 0.180054], [0.335279, 0.14718], [0.440512, 0.097581], [0.128294, 0.208059], [0.408772, 0.626106], [0.455607, 0.548199], [0.499877, 0.09101], [0.375437, 0.075808], [0.11421, 0.384978], [0.448662, 0.304722], [0.44802, 0.295368], [0.447112, 0.284192], [0.444832, 0.269206], [0.430012, 0.233191], [0.406787, 0.314327], [0.400738, 0.318931], [0.3924, 0.322297], [0.367856, 0.336081], [0.247923, 0.398667], [0.45277, 0.57915], [0.436392, 0.640113], [0.416164, 0.631286], [0.413386, 0.307634], [0.228018, 0.316428], [0.468268, 0.647329], [0.411362, 0.195673], [0.499989, 0.530175], [0.479154, 0.557346], [0.499974, 0.560363], [0.432112, 0.506411], [0.499886, 0.133083], [0.499913, 0.178271], [0.456549, 0.180799], [0.344549, 0.254561], [0.378909, 0.42599], [0.374293, 0.219815], [0.319688, 0.429262], [0.357155, 0.39573], [0.295284, 0.378419], [0.44775, 0.137523], [0.410986, 0.491277], [0.313951, 0.224692], [0.354128, 0.187447], [0.324548, 0.296007], [0.189096, 0.3537], [0.279777, 0.285342], [0.133823, 0.317299], [0.336768, 0.355267], [0.429884, 0.533478], [0.455528, 0.451377], [0.437114, 0.441104], [0.467288, 0.470075], [0.414712, 0.66478], [0.377046, 0.677222], [0.344108, 0.679849], [0.312876, 0.677668], [0.283526, 0.66681], [0.241246, 0.617214], [0.102986, 0.531237], [0.267612, 0.57544], [0.297879, 0.566824], [0.333434, 0.566122], [0.366427, 0.573884], [0.396012, 0.583304], [0.420121, 0.589772], [7561e-6, 0.519223], [0.432949, 0.430482], [0.458639, 0.520911], [0.473466, 0.454256], [0.476088, 0.43617], [0.468472, 0.444943], [0.433991, 0.417638], [0.483518, 0.437016], [0.482483, 0.422151], [0.42645, 0.610201], [0.438999, 0.603505], [0.450067, 0.599566], [0.289712, 0.631747], [0.27667, 0.636627], [0.517862, 0.528052], [0.710288, 0.619236], [0.526227, 0.42609], [0.895093, 0.745859], [0.63407, 0.590424], [0.661242, 0.586975], [0.68888, 0.59054], [0.725342, 0.610869], [0.60663, 0.596295], [0.654766, 0.655989], [0.629906, 0.653924], [0.680678, 0.652735], [0.702097, 0.646409], [0.752212, 0.589195], [0.602918, 0.157137], [0.719902, 0.6244], [0.893693, 0.60004], [0.790082, 0.608646], [0.643998, 0.465512], [0.528249, 0.349596], [0.52585, 0.319809], [0.560215, 0.342771], [0.585384, 0.333459], [0.549626, 0.319139], [0.571228, 0.317308], [0.624852, 0.271901], [0.51305, 0.452718], [0.515097, 0.472748], [0.742247, 0.685493], [0.598631, 0.545021], [0.570338, 0.451425], [0.578632, 0.466377], [0.723087, 0.467946], [0.516446, 0.500361], [0.662801, 0.717082], [0.703624, 0.706729], [0.830705, 0.806186], [0.552386, 0.697432], [0.60761, 0.646112], [0.645429, 0.303293], [0.932695, 0.269895], [0.557261, 0.427174], [0.542902, 0.415208], [0.618026, 0.305289], [0.607591, 0.305797], [0.722943, 0.728037], [0.577414, 0.436833], [0.614083, 0.718613], [0.616907, 0.744114], [0.668509, 0.880086], [0.770092, 0.767979], [0.635536, 0.810751], [0.770391, 0.700444], [0.826722, 0.721245], [0.527121, 0.333802], [0.553172, 0.331473], [0.577238, 0.32611], [0.554692, 0.419934], [0.611897, 0.306039], [0.596961, 0.29346], [0.596371, 0.306047], [0.539958, 0.442861], [0.568842, 0.307634], [0.547818, 0.307634], [0.524613, 0.307634], [0.53409, 0.220859], [0.527671, 0.263774], [0.526913, 0.282143], [0.526878, 0.295374], [0.526967, 0.304722], [0.572058, 0.304722], [0.573521, 0.29646], [0.576838, 0.288154], [0.581691, 0.279937], [0.609945, 0.36009], [0.986046, 0.439966], [0.5868, 0.3046], [0.590372, 0.298177], [0.531915, 0.398463], [0.577268, 0.414065], [0.536915, 0.406214], [0.627543, 0.526648], [0.665586, 0.504049], [0.588354, 0.453138], [0.757824, 0.852324], [0.70925, 0.798492], [0.672684, 0.743419], [0.600409, 0.250995], [0.558266, 0.738328], [0.570304, 0.812129], [0.588166, 0.890956], [0.711045, 0.601048], [0.78107, 0.564595], [0.587247, 0.601068], [0.74287, 0.644554], [0.572156, 0.562348], [0.551868, 0.46343], [0.821442, 0.542444], [0.752702, 0.542818], [0.713757, 0.532373], [0.667113, 0.539327], [0.631101, 0.552846], [0.600862, 0.567527], [0.523481, 0.594373], [0.810748, 0.476074], [0.771046, 0.651041], [0.509127, 0.437282], [0.595293, 0.514976], [0.980531, 0.598436], [0.5735, 0.58], [0.602995, 0.451312], [0.73353, 0.623023], [0.560611, 0.480983], [0.967686, 0.355643], [0.580985, 0.61284], [0.537728, 0.494615], [0.760966, 0.220247], [0.801779, 0.168062], [0.892441, 0.459239], [0.816351, 0.25974], [0.865595, 0.666313], [0.614074, 0.116754], [0.508953, 0.420562], [0.617942, 0.491684], [0.825608, 0.602325], [0.681215, 0.603765], [0.656636, 0.599403], [0.6039, 0.289783], [0.812086, 0.411461], [0.568013, 0.055435], [0.681008, 0.101715], [0.733752, 0.130299], [0.63383, 0.601178], [0.606793, 0.604463], [0.58966, 0.608938], [0.805016, 0.657892], [0.611335, 0.637716], [0.634038, 0.644029], [0.656636, 0.644643], [0.681215, 0.64166], [0.698585, 0.636844], [0.941867, 0.680924], [0.698585, 0.612551], [0.584177, 0.375893], [0.554318, 0.433923], [0.534154, 0.37936], [0.711218, 0.180025], [0.66463, 0.147129], [0.5591, 0.097368], [0.871706, 0.208059], [0.591234, 0.626106], [0.544341, 0.548416], [0.624563, 0.075808], [0.88577, 0.384971], [0.551338, 0.304722], [0.55198, 0.295368], [0.552888, 0.284192], [0.555168, 0.269206], [0.569944, 0.232965], [0.593203, 0.314324], [0.599262, 0.318931], [0.6076, 0.322297], [0.631938, 0.3365], [0.752033, 0.398685], [0.547226, 0.579605], [0.563544, 0.640172], [0.583841, 0.631286], [0.586614, 0.307634], [0.771915, 0.316422], [0.531597, 0.647517], [0.588371, 0.195559], [0.520797, 0.557435], [0.567985, 0.506521], [0.543283, 0.180745], [0.655317, 0.254485], [0.621009, 0.425982], [0.62556, 0.219688], [0.680198, 0.429281], [0.642764, 0.395662], [0.704663, 0.37847], [0.552012, 0.137408], [0.589072, 0.491363], [0.685945, 0.224643], [0.645735, 0.18736], [0.675343, 0.296022], [0.810858, 0.353695], [0.720122, 0.285333], [0.866152, 0.317295], [0.663187, 0.355403], [0.570082, 0.533674], [0.544562, 0.451624], [0.562759, 0.441215], [0.531987, 0.46986], [0.585271, 0.664823], [0.622953, 0.677221], [0.655896, 0.679837], [0.687132, 0.677654], [0.716482, 0.666799], [0.758757, 0.617213], [0.897013, 0.531231], [0.732392, 0.575453], [0.702114, 0.566837], [0.666525, 0.566134], [0.633505, 0.573912], [0.603876, 0.583413], [0.579658, 0.590055], [0.99244, 0.519223], [0.567192, 0.43058], [0.541366, 0.521101], [0.526564, 0.453882], [0.523913, 0.43617], [0.531529, 0.444943], [0.566036, 0.417671], [0.516311, 0.436946], [0.517472, 0.422123], [0.573595, 0.610193], [0.560698, 0.604668], [0.549756, 0.600249], [0.710288, 0.631747], [0.72333, 0.636627]], Dl = [173, 155, 133, 246, 33, 7, 382, 398, 362, 263, 466, 249, 308, 415, 324, 78, 95, 191, 356, 389, 264, 127, 34, 162, 368, 264, 389, 139, 162, 34, 267, 0, 302, 37, 72, 0, 11, 302, 0, 11, 0, 72, 349, 451, 350, 120, 121, 231, 452, 350, 451, 232, 231, 121, 267, 302, 269, 37, 39, 72, 303, 269, 302, 73, 72, 39, 357, 343, 350, 128, 121, 114, 277, 350, 343, 47, 114, 121, 350, 452, 357, 121, 128, 232, 453, 357, 452, 233, 232, 128, 299, 333, 297, 69, 67, 104, 332, 297, 333, 103, 104, 67, 175, 152, 396, 175, 171, 152, 377, 396, 152, 148, 152, 171, 381, 384, 382, 154, 155, 157, 398, 382, 384, 173, 157, 155, 280, 347, 330, 50, 101, 118, 348, 330, 347, 119, 118, 101, 269, 303, 270, 39, 40, 73, 304, 270, 303, 74, 73, 40, 9, 336, 151, 9, 151, 107, 337, 151, 336, 108, 107, 151, 344, 278, 360, 115, 131, 48, 279, 360, 278, 49, 48, 131, 262, 431, 418, 32, 194, 211, 424, 418, 431, 204, 211, 194, 304, 408, 270, 74, 40, 184, 409, 270, 408, 185, 184, 40, 272, 310, 407, 42, 183, 80, 415, 407, 310, 191, 80, 183, 322, 270, 410, 92, 186, 40, 409, 410, 270, 185, 40, 186, 347, 449, 348, 118, 119, 229, 450, 348, 449, 230, 229, 119, 434, 432, 430, 214, 210, 212, 422, 430, 432, 202, 212, 210, 313, 314, 18, 83, 18, 84, 17, 18, 314, 17, 84, 18, 307, 375, 306, 77, 76, 146, 291, 306, 375, 61, 146, 76, 259, 387, 260, 29, 30, 160, 388, 260, 387, 161, 160, 30, 286, 414, 384, 56, 157, 190, 398, 384, 414, 173, 190, 157, 418, 424, 406, 194, 182, 204, 335, 406, 424, 106, 204, 182, 367, 416, 364, 138, 135, 192, 434, 364, 416, 214, 192, 135, 391, 423, 327, 165, 98, 203, 358, 327, 423, 129, 203, 98, 298, 301, 284, 68, 54, 71, 251, 284, 301, 21, 71, 54, 4, 275, 5, 4, 5, 45, 281, 5, 275, 51, 45, 5, 254, 373, 253, 24, 23, 144, 374, 253, 373, 145, 144, 23, 320, 321, 307, 90, 77, 91, 375, 307, 321, 146, 91, 77, 280, 425, 411, 50, 187, 205, 427, 411, 425, 207, 205, 187, 421, 313, 200, 201, 200, 83, 18, 200, 313, 18, 83, 200, 335, 321, 406, 106, 182, 91, 405, 406, 321, 181, 91, 182, 405, 321, 404, 181, 180, 91, 320, 404, 321, 90, 91, 180, 17, 314, 16, 17, 16, 84, 315, 16, 314, 85, 84, 16, 425, 266, 426, 205, 206, 36, 423, 426, 266, 203, 36, 206, 369, 396, 400, 140, 176, 171, 377, 400, 396, 148, 171, 176, 391, 269, 322, 165, 92, 39, 270, 322, 269, 40, 39, 92, 417, 465, 413, 193, 189, 245, 464, 413, 465, 244, 245, 189, 257, 258, 386, 27, 159, 28, 385, 386, 258, 158, 28, 159, 260, 388, 467, 30, 247, 161, 466, 467, 388, 246, 161, 247, 248, 456, 419, 3, 196, 236, 399, 419, 456, 174, 236, 196, 333, 298, 332, 104, 103, 68, 284, 332, 298, 54, 68, 103, 285, 8, 417, 55, 193, 8, 168, 417, 8, 168, 8, 193, 340, 261, 346, 111, 117, 31, 448, 346, 261, 228, 31, 117, 285, 417, 441, 55, 221, 193, 413, 441, 417, 189, 193, 221, 327, 460, 326, 98, 97, 240, 328, 326, 460, 99, 240, 97, 277, 355, 329, 47, 100, 126, 371, 329, 355, 142, 126, 100, 309, 392, 438, 79, 218, 166, 439, 438, 392, 219, 166, 218, 381, 382, 256, 154, 26, 155, 341, 256, 382, 112, 155, 26, 360, 279, 420, 131, 198, 49, 429, 420, 279, 209, 49, 198, 365, 364, 379, 136, 150, 135, 394, 379, 364, 169, 135, 150, 355, 277, 437, 126, 217, 47, 343, 437, 277, 114, 47, 217, 443, 444, 282, 223, 52, 224, 283, 282, 444, 53, 224, 52, 281, 275, 363, 51, 134, 45, 440, 363, 275, 220, 45, 134, 431, 262, 395, 211, 170, 32, 369, 395, 262, 140, 32, 170, 337, 299, 338, 108, 109, 69, 297, 338, 299, 67, 69, 109, 335, 273, 321, 106, 91, 43, 375, 321, 273, 146, 43, 91, 348, 450, 349, 119, 120, 230, 451, 349, 450, 231, 230, 120, 467, 359, 342, 247, 113, 130, 446, 342, 359, 226, 130, 113, 282, 283, 334, 52, 105, 53, 293, 334, 283, 63, 53, 105, 250, 458, 462, 20, 242, 238, 461, 462, 458, 241, 238, 242, 276, 353, 300, 46, 70, 124, 383, 300, 353, 156, 124, 70, 325, 292, 324, 96, 95, 62, 308, 324, 292, 78, 62, 95, 283, 276, 293, 53, 63, 46, 300, 293, 276, 70, 46, 63, 447, 264, 345, 227, 116, 34, 372, 345, 264, 143, 34, 116, 352, 345, 346, 123, 117, 116, 340, 346, 345, 111, 116, 117, 1, 19, 274, 1, 44, 19, 354, 274, 19, 125, 19, 44, 248, 281, 456, 3, 236, 51, 363, 456, 281, 134, 51, 236, 425, 426, 427, 205, 207, 206, 436, 427, 426, 216, 206, 207, 380, 381, 252, 153, 22, 154, 256, 252, 381, 26, 154, 22, 391, 393, 269, 165, 39, 167, 267, 269, 393, 37, 167, 39, 199, 428, 200, 199, 200, 208, 421, 200, 428, 201, 208, 200, 330, 329, 266, 101, 36, 100, 371, 266, 329, 142, 100, 36, 422, 432, 273, 202, 43, 212, 287, 273, 432, 57, 212, 43, 290, 250, 328, 60, 99, 20, 462, 328, 250, 242, 20, 99, 258, 286, 385, 28, 158, 56, 384, 385, 286, 157, 56, 158, 342, 446, 353, 113, 124, 226, 265, 353, 446, 35, 226, 124, 257, 386, 259, 27, 29, 159, 387, 259, 386, 160, 159, 29, 430, 422, 431, 210, 211, 202, 424, 431, 422, 204, 202, 211, 445, 342, 276, 225, 46, 113, 353, 276, 342, 124, 113, 46, 424, 422, 335, 204, 106, 202, 273, 335, 422, 43, 202, 106, 306, 292, 307, 76, 77, 62, 325, 307, 292, 96, 62, 77, 366, 447, 352, 137, 123, 227, 345, 352, 447, 116, 227, 123, 302, 268, 303, 72, 73, 38, 271, 303, 268, 41, 38, 73, 371, 358, 266, 142, 36, 129, 423, 266, 358, 203, 129, 36, 327, 294, 460, 98, 240, 64, 455, 460, 294, 235, 64, 240, 294, 331, 278, 64, 48, 102, 279, 278, 331, 49, 102, 48, 303, 271, 304, 73, 74, 41, 272, 304, 271, 42, 41, 74, 427, 436, 434, 207, 214, 216, 432, 434, 436, 212, 216, 214, 304, 272, 408, 74, 184, 42, 407, 408, 272, 183, 42, 184, 394, 430, 395, 169, 170, 210, 431, 395, 430, 211, 210, 170, 395, 369, 378, 170, 149, 140, 400, 378, 369, 176, 140, 149, 296, 334, 299, 66, 69, 105, 333, 299, 334, 104, 105, 69, 417, 168, 351, 193, 122, 168, 6, 351, 168, 6, 168, 122, 280, 411, 352, 50, 123, 187, 376, 352, 411, 147, 187, 123, 319, 320, 325, 89, 96, 90, 307, 325, 320, 77, 90, 96, 285, 295, 336, 55, 107, 65, 296, 336, 295, 66, 65, 107, 404, 320, 403, 180, 179, 90, 319, 403, 320, 89, 90, 179, 330, 348, 329, 101, 100, 119, 349, 329, 348, 120, 119, 100, 334, 293, 333, 105, 104, 63, 298, 333, 293, 68, 63, 104, 323, 454, 366, 93, 137, 234, 447, 366, 454, 227, 234, 137, 16, 315, 15, 16, 15, 85, 316, 15, 315, 86, 85, 15, 429, 279, 358, 209, 129, 49, 331, 358, 279, 102, 49, 129, 15, 316, 14, 15, 14, 86, 317, 14, 316, 87, 86, 14, 8, 285, 9, 8, 9, 55, 336, 9, 285, 107, 55, 9, 329, 349, 277, 100, 47, 120, 350, 277, 349, 121, 120, 47, 252, 253, 380, 22, 153, 23, 374, 380, 253, 145, 23, 153, 402, 403, 318, 178, 88, 179, 319, 318, 403, 89, 179, 88, 351, 6, 419, 122, 196, 6, 197, 419, 6, 197, 6, 196, 324, 318, 325, 95, 96, 88, 319, 325, 318, 89, 88, 96, 397, 367, 365, 172, 136, 138, 364, 365, 367, 135, 138, 136, 288, 435, 397, 58, 172, 215, 367, 397, 435, 138, 215, 172, 438, 439, 344, 218, 115, 219, 278, 344, 439, 48, 219, 115, 271, 311, 272, 41, 42, 81, 310, 272, 311, 80, 81, 42, 5, 281, 195, 5, 195, 51, 248, 195, 281, 3, 51, 195, 273, 287, 375, 43, 146, 57, 291, 375, 287, 61, 57, 146, 396, 428, 175, 171, 175, 208, 199, 175, 428, 199, 208, 175, 268, 312, 271, 38, 41, 82, 311, 271, 312, 81, 82, 41, 444, 445, 283, 224, 53, 225, 276, 283, 445, 46, 225, 53, 254, 339, 373, 24, 144, 110, 390, 373, 339, 163, 110, 144, 295, 282, 296, 65, 66, 52, 334, 296, 282, 105, 52, 66, 346, 448, 347, 117, 118, 228, 449, 347, 448, 229, 228, 118, 454, 356, 447, 234, 227, 127, 264, 447, 356, 34, 127, 227, 336, 296, 337, 107, 108, 66, 299, 337, 296, 69, 66, 108, 151, 337, 10, 151, 10, 108, 338, 10, 337, 109, 108, 10, 278, 439, 294, 48, 64, 219, 455, 294, 439, 235, 219, 64, 407, 415, 292, 183, 62, 191, 308, 292, 415, 78, 191, 62, 358, 371, 429, 129, 209, 142, 355, 429, 371, 126, 142, 209, 345, 372, 340, 116, 111, 143, 265, 340, 372, 35, 143, 111, 388, 390, 466, 161, 246, 163, 249, 466, 390, 7, 163, 246, 352, 346, 280, 123, 50, 117, 347, 280, 346, 118, 117, 50, 295, 442, 282, 65, 52, 222, 443, 282, 442, 223, 222, 52, 19, 94, 354, 19, 125, 94, 370, 354, 94, 141, 94, 125, 295, 285, 442, 65, 222, 55, 441, 442, 285, 221, 55, 222, 419, 197, 248, 196, 3, 197, 195, 248, 197, 195, 197, 3, 359, 263, 255, 130, 25, 33, 249, 255, 263, 7, 33, 25, 275, 274, 440, 45, 220, 44, 457, 440, 274, 237, 44, 220, 300, 383, 301, 70, 71, 156, 368, 301, 383, 139, 156, 71, 417, 351, 465, 193, 245, 122, 412, 465, 351, 188, 122, 245, 466, 263, 467, 246, 247, 33, 359, 467, 263, 130, 33, 247, 389, 251, 368, 162, 139, 21, 301, 368, 251, 71, 21, 139, 374, 386, 380, 145, 153, 159, 385, 380, 386, 158, 159, 153, 379, 394, 378, 150, 149, 169, 395, 378, 394, 170, 169, 149, 351, 419, 412, 122, 188, 196, 399, 412, 419, 174, 196, 188, 426, 322, 436, 206, 216, 92, 410, 436, 322, 186, 92, 216, 387, 373, 388, 160, 161, 144, 390, 388, 373, 163, 144, 161, 393, 326, 164, 167, 164, 97, 2, 164, 326, 2, 97, 164, 354, 370, 461, 125, 241, 141, 462, 461, 370, 242, 141, 241, 0, 267, 164, 0, 164, 37, 393, 164, 267, 167, 37, 164, 11, 12, 302, 11, 72, 12, 268, 302, 12, 38, 12, 72, 386, 374, 387, 159, 160, 145, 373, 387, 374, 144, 145, 160, 12, 13, 268, 12, 38, 13, 312, 268, 13, 82, 13, 38, 293, 300, 298, 63, 68, 70, 301, 298, 300, 71, 70, 68, 340, 265, 261, 111, 31, 35, 446, 261, 265, 226, 35, 31, 380, 385, 381, 153, 154, 158, 384, 381, 385, 157, 158, 154, 280, 330, 425, 50, 205, 101, 266, 425, 330, 36, 101, 205, 423, 391, 426, 203, 206, 165, 322, 426, 391, 92, 165, 206, 429, 355, 420, 209, 198, 126, 437, 420, 355, 217, 126, 198, 391, 327, 393, 165, 167, 98, 326, 393, 327, 97, 98, 167, 457, 438, 440, 237, 220, 218, 344, 440, 438, 115, 218, 220, 382, 362, 341, 155, 112, 133, 463, 341, 362, 243, 133, 112, 457, 461, 459, 237, 239, 241, 458, 459, 461, 238, 241, 239, 434, 430, 364, 214, 135, 210, 394, 364, 430, 169, 210, 135, 414, 463, 398, 190, 173, 243, 362, 398, 463, 133, 243, 173, 262, 428, 369, 32, 140, 208, 396, 369, 428, 171, 208, 140, 457, 274, 461, 237, 241, 44, 354, 461, 274, 125, 44, 241, 316, 403, 317, 86, 87, 179, 402, 317, 403, 178, 179, 87, 315, 404, 316, 85, 86, 180, 403, 316, 404, 179, 180, 86, 314, 405, 315, 84, 85, 181, 404, 315, 405, 180, 181, 85, 313, 406, 314, 83, 84, 182, 405, 314, 406, 181, 182, 84, 418, 406, 421, 194, 201, 182, 313, 421, 406, 83, 182, 201, 366, 401, 323, 137, 93, 177, 361, 323, 401, 132, 177, 93, 408, 407, 306, 184, 76, 183, 292, 306, 407, 62, 183, 76, 408, 306, 409, 184, 185, 76, 291, 409, 306, 61, 76, 185, 410, 409, 287, 186, 57, 185, 291, 287, 409, 61, 185, 57, 436, 410, 432, 216, 212, 186, 287, 432, 410, 57, 186, 212, 434, 416, 427, 214, 207, 192, 411, 427, 416, 187, 192, 207, 264, 368, 372, 34, 143, 139, 383, 372, 368, 156, 139, 143, 457, 459, 438, 237, 218, 239, 309, 438, 459, 79, 239, 218, 352, 376, 366, 123, 137, 147, 401, 366, 376, 177, 147, 137, 4, 1, 275, 4, 45, 1, 274, 275, 1, 44, 1, 45, 428, 262, 421, 208, 201, 32, 418, 421, 262, 194, 32, 201, 327, 358, 294, 98, 64, 129, 331, 294, 358, 102, 129, 64, 367, 435, 416, 138, 192, 215, 433, 416, 435, 213, 215, 192, 455, 439, 289, 235, 59, 219, 392, 289, 439, 166, 219, 59, 328, 462, 326, 99, 97, 242, 370, 326, 462, 141, 242, 97, 326, 370, 2, 97, 2, 141, 94, 2, 370, 94, 141, 2, 460, 455, 305, 240, 75, 235, 289, 305, 455, 59, 235, 75, 448, 339, 449, 228, 229, 110, 254, 449, 339, 24, 110, 229, 261, 446, 255, 31, 25, 226, 359, 255, 446, 130, 226, 25, 449, 254, 450, 229, 230, 24, 253, 450, 254, 23, 24, 230, 450, 253, 451, 230, 231, 23, 252, 451, 253, 22, 23, 231, 451, 252, 452, 231, 232, 22, 256, 452, 252, 26, 22, 232, 256, 341, 452, 26, 232, 112, 453, 452, 341, 233, 112, 232, 413, 464, 414, 189, 190, 244, 463, 414, 464, 243, 244, 190, 441, 413, 286, 221, 56, 189, 414, 286, 413, 190, 189, 56, 441, 286, 442, 221, 222, 56, 258, 442, 286, 28, 56, 222, 442, 258, 443, 222, 223, 28, 257, 443, 258, 27, 28, 223, 444, 443, 259, 224, 29, 223, 257, 259, 443, 27, 223, 29, 259, 260, 444, 29, 224, 30, 445, 444, 260, 225, 30, 224, 260, 467, 445, 30, 225, 247, 342, 445, 467, 113, 247, 225, 250, 309, 458, 20, 238, 79, 459, 458, 309, 239, 79, 238, 290, 305, 392, 60, 166, 75, 289, 392, 305, 59, 75, 166, 460, 305, 328, 240, 99, 75, 290, 328, 305, 60, 75, 99, 376, 433, 401, 147, 177, 213, 435, 401, 433, 215, 213, 177, 250, 290, 309, 20, 79, 60, 392, 309, 290, 166, 60, 79, 411, 416, 376, 187, 147, 192, 433, 376, 416, 213, 192, 147, 341, 463, 453, 112, 233, 243, 464, 453, 463, 244, 243, 233, 453, 464, 357, 233, 128, 244, 465, 357, 464, 245, 244, 128, 412, 343, 465, 188, 245, 114, 357, 465, 343, 128, 114, 245, 437, 343, 399, 217, 174, 114, 412, 399, 343, 188, 114, 174, 363, 440, 360, 134, 131, 220, 344, 360, 440, 115, 220, 131, 456, 420, 399, 236, 174, 198, 437, 399, 420, 217, 198, 174, 456, 363, 420, 236, 198, 134, 360, 420, 363, 131, 134, 198, 361, 401, 288, 132, 58, 177, 435, 288, 401, 215, 177, 58, 353, 265, 383, 124, 156, 35, 372, 383, 265, 143, 35, 156, 255, 249, 339, 25, 110, 7, 390, 339, 249, 163, 7, 110, 261, 255, 448, 31, 228, 25, 339, 448, 255, 110, 25, 228, 14, 317, 13, 14, 13, 87, 312, 13, 317, 82, 87, 13, 317, 402, 312, 87, 82, 178, 311, 312, 402, 81, 178, 82, 402, 318, 311, 178, 81, 88, 310, 311, 318, 80, 88, 81, 318, 324, 310, 88, 80, 95, 415, 310, 324, 191, 95, 80], cl = [[4, 0.070909939706326], [6, 0.032100144773722], [10, 0.008446550928056], [33, 0.058724168688059], [54, 0.007667080033571], [67, 0.009078059345484], [117, 0.009791937656701], [119, 0.014565368182957], [121, 0.018591361120343], [127, 0.005197994410992], [129, 0.120625205338001], [132, 0.005560018587857], [133, 0.05328618362546], [136, 0.066890455782413], [143, 0.014816547743976], [147, 0.014262833632529], [198, 0.025462191551924], [205, 0.047252278774977], [263, 0.058724168688059], [284, 0.007667080033571], [297, 0.009078059345484], [346, 0.009791937656701], [348, 0.014565368182957], [350, 0.018591361120343], [356, 0.005197994410992], [358, 0.120625205338001], [361, 0.005560018587857], [362, 0.05328618362546], [365, 0.066890455782413], [372, 0.014816547743976], [376, 0.014262833632529], [420, 0.025462191551924], [425, 0.047252278774977]];
var vR = {};
(function() {
  var C;
  function A(F) {
    var K = 0;
    return function() {
      return K < F.length ? { done: !1, value: F[K++] } : { done: !0 };
    };
  }
  var g = typeof Object.defineProperties == "function" ? Object.defineProperty : function(F, K, J) {
    return F == Array.prototype || F == Object.prototype || (F[K] = J.value), F;
  }, I = function(F) {
    F = [typeof globalThis == "object" && globalThis, F, typeof window == "object" && window, typeof self == "object" && self, typeof Ae == "object" && Ae];
    for (var K = 0; K < F.length; ++K) {
      var J = F[K];
      if (J && J.Math == Math)
        return J;
    }
    throw Error("Cannot find global object");
  }(this);
  function B(F, K) {
    if (K)
      A: {
        var J = I;
        F = F.split(".");
        for (var V = 0; V < F.length - 1; V++) {
          var BA = F[V];
          if (!(BA in J))
            break A;
          J = J[BA];
        }
        (K = K(V = J[F = F[F.length - 1]])) != V && K != null && g(J, F, { configurable: !0, writable: !0, value: K });
      }
  }
  function Q(F) {
    return (F = { next: F })[Symbol.iterator] = function() {
      return this;
    }, F;
  }
  function E(F) {
    var K = typeof Symbol < "u" && Symbol.iterator && F[Symbol.iterator];
    return K ? K.call(F) : { next: A(F) };
  }
  function i(F) {
    if (!(F instanceof Array)) {
      F = E(F);
      for (var K, J = []; !(K = F.next()).done; )
        J.push(K.value);
      F = J;
    }
    return F;
  }
  B("Symbol", function(F) {
    function K(BA, j) {
      this.g = BA, g(this, "description", { configurable: !0, writable: !0, value: j });
    }
    if (F)
      return F;
    K.prototype.toString = function() {
      return this.g;
    };
    var J = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", V = 0;
    return function BA(j) {
      if (this instanceof BA)
        throw new TypeError("Symbol is not a constructor");
      return new K(J + (j || "") + "_" + V++, j);
    };
  }), B("Symbol.iterator", function(F) {
    if (F)
      return F;
    F = Symbol("Symbol.iterator");
    for (var K = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), J = 0; J < K.length; J++) {
      var V = I[K[J]];
      typeof V == "function" && typeof V.prototype[F] != "function" && g(V.prototype, F, { configurable: !0, writable: !0, value: function() {
        return Q(A(this));
      } });
    }
    return F;
  });
  var o, t = typeof Object.create == "function" ? Object.create : function(F) {
    function K() {
    }
    return K.prototype = F, new K();
  };
  if (typeof Object.setPrototypeOf == "function")
    o = Object.setPrototypeOf;
  else {
    var e;
    A: {
      var s = {};
      try {
        s.__proto__ = { a: !0 }, e = s.a;
        break A;
      } catch {
      }
      e = !1;
    }
    o = e ? function(F, K) {
      if (F.__proto__ = K, F.__proto__ !== K)
        throw new TypeError(F + " is not extensible");
      return F;
    } : null;
  }
  var a = o;
  function r(F, K) {
    if (F.prototype = t(K.prototype), F.prototype.constructor = F, a)
      a(F, K);
    else
      for (var J in K)
        if (J != "prototype")
          if (Object.defineProperties) {
            var V = Object.getOwnPropertyDescriptor(K, J);
            V && Object.defineProperty(F, J, V);
          } else
            F[J] = K[J];
    F.ea = K.prototype;
  }
  function h() {
    this.l = !1, this.i = null, this.h = void 0, this.g = 1, this.s = this.m = 0, this.j = null;
  }
  function w(F) {
    if (F.l)
      throw new TypeError("Generator is already running");
    F.l = !0;
  }
  function G(F, K) {
    F.j = { U: K, V: !0 }, F.g = F.m || F.s;
  }
  function D(F, K, J) {
    return F.g = J, { value: K };
  }
  function l(F) {
    this.g = new h(), this.h = F;
  }
  function d(F, K, J, V) {
    try {
      var BA = K.call(F.g.i, J);
      if (!(BA instanceof Object))
        throw new TypeError("Iterator result " + BA + " is not an object");
      if (!BA.done)
        return F.g.l = !1, BA;
      var j = BA.value;
    } catch (sA) {
      return F.g.i = null, G(F.g, sA), N(F);
    }
    return F.g.i = null, V.call(F.g, j), N(F);
  }
  function N(F) {
    for (; F.g.g; )
      try {
        var K = F.h(F.g);
        if (K)
          return F.g.l = !1, { value: K.value, done: !1 };
      } catch (J) {
        F.g.h = void 0, G(F.g, J);
      }
    if (F.g.l = !1, F.g.j) {
      if (K = F.g.j, F.g.j = null, K.V)
        throw K.U;
      return { value: K.return, done: !0 };
    }
    return { value: void 0, done: !0 };
  }
  function k(F) {
    this.next = function(K) {
      return w(F.g), F.g.i ? K = d(F, F.g.i.next, K, F.g.o) : (F.g.o(K), K = N(F)), K;
    }, this.throw = function(K) {
      return w(F.g), F.g.i ? K = d(F, F.g.i.throw, K, F.g.o) : (G(F.g, K), K = N(F)), K;
    }, this.return = function(K) {
      return function(J, V) {
        w(J.g);
        var BA = J.g.i;
        return BA ? d(J, "return" in BA ? BA.return : function(j) {
          return { value: j, done: !0 };
        }, V, J.g.return) : (J.g.return(V), N(J));
      }(F, K);
    }, this[Symbol.iterator] = function() {
      return this;
    };
  }
  function p(F, K) {
    return K = new k(new l(K)), a && F.prototype && a(K, F.prototype), K;
  }
  h.prototype.o = function(F) {
    this.h = F;
  }, h.prototype.return = function(F) {
    this.j = { return: F }, this.g = this.s;
  };
  var Y = typeof Object.assign == "function" ? Object.assign : function(F, K) {
    for (var J = 1; J < arguments.length; J++) {
      var V = arguments[J];
      if (V)
        for (var BA in V)
          Object.prototype.hasOwnProperty.call(V, BA) && (F[BA] = V[BA]);
    }
    return F;
  };
  B("Object.assign", function(F) {
    return F || Y;
  }), B("Promise", function(F) {
    function K(sA) {
      this.h = 0, this.i = void 0, this.g = [], this.o = !1;
      var wA = this.j();
      try {
        sA(wA.resolve, wA.reject);
      } catch (dA) {
        wA.reject(dA);
      }
    }
    function J() {
      this.g = null;
    }
    function V(sA) {
      return sA instanceof K ? sA : new K(function(wA) {
        wA(sA);
      });
    }
    if (F)
      return F;
    J.prototype.h = function(sA) {
      if (this.g == null) {
        this.g = [];
        var wA = this;
        this.i(function() {
          wA.l();
        });
      }
      this.g.push(sA);
    };
    var BA = I.setTimeout;
    J.prototype.i = function(sA) {
      BA(sA, 0);
    }, J.prototype.l = function() {
      for (; this.g && this.g.length; ) {
        var sA = this.g;
        this.g = [];
        for (var wA = 0; wA < sA.length; ++wA) {
          var dA = sA[wA];
          sA[wA] = null;
          try {
            dA();
          } catch (ZA) {
            this.j(ZA);
          }
        }
      }
      this.g = null;
    }, J.prototype.j = function(sA) {
      this.i(function() {
        throw sA;
      });
    }, K.prototype.j = function() {
      function sA(ZA) {
        return function(Ng) {
          dA || (dA = !0, ZA.call(wA, Ng));
        };
      }
      var wA = this, dA = !1;
      return { resolve: sA(this.C), reject: sA(this.l) };
    }, K.prototype.C = function(sA) {
      if (sA === this)
        this.l(new TypeError("A Promise cannot resolve to itself"));
      else if (sA instanceof K)
        this.F(sA);
      else {
        A:
          switch (typeof sA) {
            case "object":
              var wA = sA != null;
              break A;
            case "function":
              wA = !0;
              break A;
            default:
              wA = !1;
          }
        wA ? this.u(sA) : this.m(sA);
      }
    }, K.prototype.u = function(sA) {
      var wA = void 0;
      try {
        wA = sA.then;
      } catch (dA) {
        return void this.l(dA);
      }
      typeof wA == "function" ? this.G(wA, sA) : this.m(sA);
    }, K.prototype.l = function(sA) {
      this.s(2, sA);
    }, K.prototype.m = function(sA) {
      this.s(1, sA);
    }, K.prototype.s = function(sA, wA) {
      if (this.h != 0)
        throw Error("Cannot settle(" + sA + ", " + wA + "): Promise already settled in state" + this.h);
      this.h = sA, this.i = wA, this.h === 2 && this.D(), this.A();
    }, K.prototype.D = function() {
      var sA = this;
      BA(function() {
        if (sA.B()) {
          var wA = I.console;
          wA !== void 0 && wA.error(sA.i);
        }
      }, 1);
    }, K.prototype.B = function() {
      if (this.o)
        return !1;
      var sA = I.CustomEvent, wA = I.Event, dA = I.dispatchEvent;
      return dA === void 0 || (typeof sA == "function" ? sA = new sA("unhandledrejection", { cancelable: !0 }) : typeof wA == "function" ? sA = new wA("unhandledrejection", { cancelable: !0 }) : (sA = I.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection", !1, !0, sA), sA.promise = this, sA.reason = this.i, dA(sA));
    }, K.prototype.A = function() {
      if (this.g != null) {
        for (var sA = 0; sA < this.g.length; ++sA)
          j.h(this.g[sA]);
        this.g = null;
      }
    };
    var j = new J();
    return K.prototype.F = function(sA) {
      var wA = this.j();
      sA.J(wA.resolve, wA.reject);
    }, K.prototype.G = function(sA, wA) {
      var dA = this.j();
      try {
        sA.call(wA, dA.resolve, dA.reject);
      } catch (ZA) {
        dA.reject(ZA);
      }
    }, K.prototype.then = function(sA, wA) {
      function dA(SA, LA) {
        return typeof SA == "function" ? function(Ig) {
          try {
            ZA(SA(Ig));
          } catch (mA) {
            Ng(mA);
          }
        } : LA;
      }
      var ZA, Ng, Eg = new K(function(SA, LA) {
        ZA = SA, Ng = LA;
      });
      return this.J(dA(sA, ZA), dA(wA, Ng)), Eg;
    }, K.prototype.catch = function(sA) {
      return this.then(void 0, sA);
    }, K.prototype.J = function(sA, wA) {
      function dA() {
        switch (ZA.h) {
          case 1:
            sA(ZA.i);
            break;
          case 2:
            wA(ZA.i);
            break;
          default:
            throw Error("Unexpected state: " + ZA.h);
        }
      }
      var ZA = this;
      this.g == null ? j.h(dA) : this.g.push(dA), this.o = !0;
    }, K.resolve = V, K.reject = function(sA) {
      return new K(function(wA, dA) {
        dA(sA);
      });
    }, K.race = function(sA) {
      return new K(function(wA, dA) {
        for (var ZA = E(sA), Ng = ZA.next(); !Ng.done; Ng = ZA.next())
          V(Ng.value).J(wA, dA);
      });
    }, K.all = function(sA) {
      var wA = E(sA), dA = wA.next();
      return dA.done ? V([]) : new K(function(ZA, Ng) {
        function Eg(Ig) {
          return function(mA) {
            SA[Ig] = mA, --LA == 0 && ZA(SA);
          };
        }
        var SA = [], LA = 0;
        do
          SA.push(void 0), LA++, V(dA.value).J(Eg(SA.length - 1), Ng), dA = wA.next();
        while (!dA.done);
      });
    }, K;
  }), B("Object.is", function(F) {
    return F || function(K, J) {
      return K === J ? K !== 0 || 1 / K == 1 / J : K != K && J != J;
    };
  }), B("Array.prototype.includes", function(F) {
    return F || function(K, J) {
      var V = this;
      V instanceof String && (V = String(V));
      var BA = V.length;
      for (0 > (J = J || 0) && (J = Math.max(J + BA, 0)); J < BA; J++) {
        var j = V[J];
        if (j === K || Object.is(j, K))
          return !0;
      }
      return !1;
    };
  }), B("String.prototype.includes", function(F) {
    return F || function(K, J) {
      if (this == null)
        throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");
      if (K instanceof RegExp)
        throw new TypeError("First argument to String.prototype.includes must not be a regular expression");
      return this.indexOf(K, J || 0) !== -1;
    };
  }), B("Array.prototype.keys", function(F) {
    return F || function() {
      return function(K, J) {
        K instanceof String && (K += "");
        var V = 0, BA = !1, j = { next: function() {
          if (!BA && V < K.length) {
            var sA = V++;
            return { value: J(sA, K[sA]), done: !1 };
          }
          return BA = !0, { done: !0, value: void 0 };
        } };
        return j[Symbol.iterator] = function() {
          return j;
        }, j;
      }(this, function(K) {
        return K;
      });
    };
  });
  var M = this || self;
  function L(F, K) {
    F = F.split(".");
    var J, V = M;
    for ((F[0] in V) || V.execScript === void 0 || V.execScript("var " + F[0]); F.length && (J = F.shift()); )
      F.length || K === void 0 ? V = V[J] && V[J] !== Object.prototype[J] ? V[J] : V[J] = {} : V[J] = K;
  }
  function m(F, K) {
    return K = String.fromCharCode.apply(null, K), F == null ? K : F + K;
  }
  var x, T, Z = typeof TextDecoder < "u", $ = typeof TextEncoder < "u";
  function AA(F) {
    if ($)
      F = (T || (T = new TextEncoder())).encode(F);
    else {
      var K = void 0;
      K = K !== void 0 && K;
      for (var J = 0, V = new Uint8Array(3 * F.length), BA = 0; BA < F.length; BA++) {
        var j = F.charCodeAt(BA);
        if (128 > j)
          V[J++] = j;
        else {
          if (2048 > j)
            V[J++] = j >> 6 | 192;
          else {
            if (55296 <= j && 57343 >= j) {
              if (56319 >= j && BA < F.length) {
                var sA = F.charCodeAt(++BA);
                if (56320 <= sA && 57343 >= sA) {
                  j = 1024 * (j - 55296) + sA - 56320 + 65536, V[J++] = j >> 18 | 240, V[J++] = j >> 12 & 63 | 128, V[J++] = j >> 6 & 63 | 128, V[J++] = 63 & j | 128;
                  continue;
                }
                BA--;
              }
              if (K)
                throw Error("Found an unpaired surrogate");
              j = 65533;
            }
            V[J++] = j >> 12 | 224, V[J++] = j >> 6 & 63 | 128;
          }
          V[J++] = 63 & j | 128;
        }
      }
      F = V.subarray(0, J);
    }
    return F;
  }
  var P = {}, _ = null;
  function QA(F, K) {
    K === void 0 && (K = 0), O(), K = P[K];
    for (var J = Array(Math.floor(F.length / 3)), V = K[64] || "", BA = 0, j = 0; BA < F.length - 2; BA += 3) {
      var sA = F[BA], wA = F[BA + 1], dA = F[BA + 2], ZA = K[sA >> 2];
      sA = K[(3 & sA) << 4 | wA >> 4], wA = K[(15 & wA) << 2 | dA >> 6], dA = K[63 & dA], J[j++] = ZA + sA + wA + dA;
    }
    switch (ZA = 0, dA = V, F.length - BA) {
      case 2:
        dA = K[(15 & (ZA = F[BA + 1])) << 2] || V;
      case 1:
        F = F[BA], J[j] = K[F >> 2] + K[(3 & F) << 4 | ZA >> 4] + dA + V;
    }
    return J.join("");
  }
  function tA(F) {
    var K = F.length, J = 3 * K / 4;
    J % 3 ? J = Math.floor(J) : "=.".indexOf(F[K - 1]) != -1 && (J = "=.".indexOf(F[K - 2]) != -1 ? J - 2 : J - 1);
    var V = new Uint8Array(J), BA = 0;
    return function(j, sA) {
      function wA(LA) {
        for (; dA < j.length; ) {
          var Ig = j.charAt(dA++), mA = _[Ig];
          if (mA != null)
            return mA;
          if (!/^[\s\xa0]*$/.test(Ig))
            throw Error("Unknown base64 encoding at char: " + Ig);
        }
        return LA;
      }
      O();
      for (var dA = 0; ; ) {
        var ZA = wA(-1), Ng = wA(0), Eg = wA(64), SA = wA(64);
        if (SA === 64 && ZA === -1)
          break;
        sA(ZA << 2 | Ng >> 4), Eg != 64 && (sA(Ng << 4 & 240 | Eg >> 2), SA != 64 && sA(Eg << 6 & 192 | SA));
      }
    }(F, function(j) {
      V[BA++] = j;
    }), V.subarray(0, BA);
  }
  function O() {
    if (!_) {
      _ = {};
      for (var F = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), K = ["+/=", "+/", "-_=", "-_.", "-_"], J = 0; 5 > J; J++) {
        var V = F.concat(K[J].split(""));
        P[J] = V;
        for (var BA = 0; BA < V.length; BA++) {
          var j = V[BA];
          _[j] === void 0 && (_[j] = BA);
        }
      }
    }
  }
  var rA, eA = typeof Uint8Array.prototype.slice == "function";
  function DA(F, K, J) {
    return K === J ? rA || (rA = new Uint8Array(0)) : eA ? F.slice(K, J) : new Uint8Array(F.subarray(K, J));
  }
  var GA = 0;
  function NA(F, K) {
    K = (K = K === void 0 ? {} : K).v !== void 0 && K.v, this.h = null, this.g = this.j = this.l = 0, this.m = !1, this.v = K, F && UA(this, F);
  }
  function UA(F, K) {
    K = K.constructor === Uint8Array ? K : K.constructor === ArrayBuffer || K.constructor === Array ? new Uint8Array(K) : K.constructor === String ? tA(K) : K instanceof Uint8Array ? new Uint8Array(K.buffer, K.byteOffset, K.byteLength) : new Uint8Array(0), F.h = K, F.l = 0, F.j = F.h.length, F.g = F.l;
  }
  function pA(F) {
    for (var K = 128, J = 0, V = 0, BA = 0; 4 > BA && 128 <= K; BA++)
      J |= (127 & (K = F.h[F.g++])) << 7 * BA;
    if (128 <= K && (J |= (127 & (K = F.h[F.g++])) << 28, V |= (127 & K) >> 4), 128 <= K)
      for (BA = 0; 5 > BA && 128 <= K; BA++)
        V |= (127 & (K = F.h[F.g++])) << 7 * BA + 3;
    if (128 > K)
      return F = J >>> 0, (V = 2147483648 & (K = V >>> 0)) && (K = ~K >>> 0, (F = 1 + ~F >>> 0) == 0 && (K = K + 1 >>> 0)), F = 4294967296 * K + (F >>> 0), V ? -F : F;
    F.m = !0;
  }
  NA.prototype.reset = function() {
    this.g = this.l;
  }, NA.prototype.i = function() {
    var F = this.h, K = F[this.g], J = 127 & K;
    return 128 > K ? (this.g += 1, J) : (J |= (127 & (K = F[this.g + 1])) << 7, 128 > K ? (this.g += 2, J) : (J |= (127 & (K = F[this.g + 2])) << 14, 128 > K ? (this.g += 3, J) : (J |= (127 & (K = F[this.g + 3])) << 21, 128 > K ? (this.g += 4, J) : (J |= (15 & (K = F[this.g + 4])) << 28, 128 > K ? (this.g += 5, J >>> 0) : (this.g += 5, 128 <= F[this.g++] && 128 <= F[this.g++] && 128 <= F[this.g++] && 128 <= F[this.g++] && this.g++, J)))));
  }, NA.prototype.o = function() {
    var F = this.h[this.g], K = this.h[this.g + 1], J = this.h[this.g + 2], V = this.h[this.g + 3];
    return this.g += 4, F = 2 * ((J = (F << 0 | K << 8 | J << 16 | V << 24) >>> 0) >> 31) + 1, K = J >>> 23 & 255, J &= 8388607, K == 255 ? J ? NaN : 1 / 0 * F : K == 0 ? F * Math.pow(2, -149) * J : F * Math.pow(2, K - 150) * (J + Math.pow(2, 23));
  };
  var XA = [];
  function WA() {
    this.g = new Uint8Array(64), this.h = 0;
  }
  function PA(F, K) {
    for (; 127 < K; )
      F.push(127 & K | 128), K >>>= 7;
    F.push(K);
  }
  function fA(F) {
    var K = {}, J = K.N !== void 0 && K.N;
    this.o = { v: K.v !== void 0 && K.v }, this.N = J, K = this.o, XA.length ? (J = XA.pop(), K && (J.v = K.v), F && UA(J, F), F = J) : F = new NA(F, K), this.g = F, this.m = this.g.g, this.h = this.i = this.l = -1, this.j = !1;
  }
  function gg(F) {
    var K = F.g;
    if ((K = K.g == K.j) || (K = F.j) || (K = (K = F.g).m || 0 > K.g || K.g > K.j), K)
      return !1;
    F.m = F.g.g;
    var J = 7 & (K = F.g.i());
    return J != 0 && J != 5 && J != 1 && J != 2 && J != 3 && J != 4 ? (F.j = !0, !1) : (F.i = K, F.l = K >>> 3, F.h = J, !0);
  }
  function Bg(F) {
    switch (F.h) {
      case 0:
        if (F.h != 0)
          Bg(F);
        else {
          for (F = F.g; 128 & F.h[F.g]; )
            F.g++;
          F.g++;
        }
        break;
      case 1:
        F.h != 1 ? Bg(F) : (F = F.g).g += 8;
        break;
      case 2:
        if (F.h != 2)
          Bg(F);
        else {
          var K = F.g.i();
          (F = F.g).g += K;
        }
        break;
      case 5:
        F.h != 5 ? Bg(F) : (F = F.g).g += 4;
        break;
      case 3:
        for (K = F.l; ; ) {
          if (!gg(F)) {
            F.j = !0;
            break;
          }
          if (F.h == 4) {
            F.l != K && (F.j = !0);
            break;
          }
          Bg(F);
        }
        break;
      default:
        F.j = !0;
    }
  }
  function lg(F, K, J) {
    var V = F.g.j, BA = F.g.i(), j = F.g.g + BA;
    if (F.g.j = j, J(K, F), (J = j - F.g.g) !== 0)
      throw Error("Message parsing ended unexpectedly. Expected to read " + BA + " bytes, instead read " + (BA - J) + " bytes, either the data ended unexpectedly or the message misreported its own length");
    return F.g.g = j, F.g.j = V, K;
  }
  function jA(F) {
    return F.g.o();
  }
  function eg(F) {
    var K, J = F.g.i(), V = (F = F.g).g;
    if (F.g += J, F = F.h, Z)
      (K = x) || (K = x = new TextDecoder("utf-8", { fatal: !1 })), K = K.decode(F.subarray(V, V + J));
    else {
      J = V + J;
      for (var BA, j, sA, wA = [], dA = null; V < J; )
        128 > (BA = F[V++]) ? wA.push(BA) : 224 > BA ? V >= J ? wA.push(65533) : (j = F[V++], 194 > BA || (192 & j) != 128 ? (V--, wA.push(65533)) : wA.push((31 & BA) << 6 | 63 & j)) : 240 > BA ? V >= J - 1 ? wA.push(65533) : (192 & (j = F[V++])) != 128 || BA === 224 && 160 > j || BA === 237 && 160 <= j || (192 & (K = F[V++])) != 128 ? (V--, wA.push(65533)) : wA.push((15 & BA) << 12 | (63 & j) << 6 | 63 & K) : 244 >= BA ? V >= J - 2 ? wA.push(65533) : (192 & (j = F[V++])) != 128 || j - 144 + (BA << 28) >> 30 || (192 & (K = F[V++])) != 128 || (192 & (sA = F[V++])) != 128 ? (V--, wA.push(65533)) : (BA = (7 & BA) << 18 | (63 & j) << 12 | (63 & K) << 6 | 63 & sA, BA -= 65536, wA.push(55296 + (BA >> 10 & 1023), 56320 + (1023 & BA))) : wA.push(65533), 8192 <= wA.length && (dA = m(dA, wA), wA.length = 0);
      K = m(dA, wA);
    }
    return K;
  }
  function rg(F, K, J) {
    var V = F.g.i();
    for (V = F.g.g + V; F.g.g < V; )
      J.push(K.call(F.g));
  }
  function Wg(F, K) {
    F.h == 2 ? rg(F, NA.prototype.o, K) : K.push(jA(F));
  }
  function Yg() {
    this.h = [], this.i = 0, this.g = new WA();
  }
  function Xg(F, K) {
    K.length !== 0 && (F.h.push(K), F.i += K.length);
  }
  function hg(F) {
    var K = F.i + F.g.length();
    if (K === 0)
      return new Uint8Array(0);
    K = new Uint8Array(K);
    for (var J = F.h, V = J.length, BA = 0, j = 0; j < V; j++) {
      var sA = J[j];
      sA.length !== 0 && (K.set(sA, BA), BA += sA.length);
    }
    return (V = (J = F.g).h) !== 0 && (K.set(J.g.subarray(0, V), BA), J.h = 0), F.h = [K], K;
  }
  function wI(F, K, J) {
    if (J != null) {
      PA(F.g, 8 * K + 5), F = F.g;
      var V = J;
      (V = (J = 0 > V ? 1 : 0) ? -V : V) === 0 ? 0 < 1 / V ? GA = 0 : GA = 2147483648 : isNaN(V) ? GA = 2147483647 : 34028234663852886e22 < V ? GA = (J << 31 | 2139095040) >>> 0 : 11754943508222875e-54 > V ? (V = Math.round(V / Math.pow(2, -149)), GA = (J << 31 | V) >>> 0) : (K = Math.floor(Math.log(V) / Math.LN2), V *= Math.pow(2, -K), 16777216 <= (V = Math.round(8388608 * V)) && ++K, GA = (J << 31 | K + 127 << 23 | 8388607 & V) >>> 0), J = GA, F.push(J >>> 0 & 255), F.push(J >>> 8 & 255), F.push(J >>> 16 & 255), F.push(J >>> 24 & 255);
    }
  }
  WA.prototype.push = function(F) {
    if (!(this.h + 1 < this.g.length)) {
      var K = this.g;
      this.g = new Uint8Array(Math.ceil(1 + 2 * this.g.length)), this.g.set(K);
    }
    this.g[this.h++] = F;
  }, WA.prototype.length = function() {
    return this.h;
  }, WA.prototype.end = function() {
    var F = this.g, K = this.h;
    return this.h = 0, DA(F, 0, K);
  }, fA.prototype.reset = function() {
    this.g.reset(), this.h = this.l = -1;
  };
  var yI = typeof Uint8Array == "function";
  function FI(F, K, J) {
    if (F != null)
      return typeof F == "object" ? yI && F instanceof Uint8Array ? J(F) : VI(F, K, J) : K(F);
  }
  function VI(F, K, J) {
    if (Array.isArray(F)) {
      for (var V = Array(F.length), BA = 0; BA < F.length; BA++)
        V[BA] = FI(F[BA], K, J);
      return Array.isArray(F) && F.W && dI(V), V;
    }
    for (BA in V = {}, F)
      V[BA] = FI(F[BA], K, J);
    return V;
  }
  function JI(F) {
    return typeof F == "number" ? isFinite(F) ? F : String(F) : F;
  }
  var fI, nI = { W: { value: !0, configurable: !0 } };
  function dI(F) {
    return Array.isArray(F) && !Object.isFrozen(F) && Object.defineProperties(F, nI), F;
  }
  function gI(F, K, J) {
    var V = fI;
    if (fI = null, F || (F = V), V = this.constructor.ca, F || (F = V ? [V] : []), this.j = V ? 0 : -1, this.m = this.g = null, this.h = F, F = (V = this.h.length) - 1, !V || (V = this.h[F]) === null || typeof V != "object" || Array.isArray(V) || yI && V instanceof Uint8Array ? K !== void 0 && -1 < K ? (this.l = Math.max(K, F + 1 - this.j), this.i = null) : this.l = Number.MAX_VALUE : (this.l = F - this.j, this.i = V), J)
      for (K = 0; K < J.length; K++)
        (F = J[K]) < this.l ? (F += this.j, (V = this.h[F]) ? dI(V) : this.h[F] = pI) : (bC(this), (V = this.i[F]) ? dI(V) : this.i[F] = pI);
  }
  var pI = Object.freeze(dI([]));
  function bC(F) {
    var K = F.l + F.j;
    F.h[K] || (F.i = F.h[K] = {});
  }
  function Og(F, K, J) {
    return K === -1 ? null : J !== void 0 && J || K >= F.l ? F.i ? F.i[K] : void 0 : F.h[K + F.j];
  }
  function EA(F, K) {
    var J = J !== void 0 && J, V = Og(F, K, J);
    return V == null && (V = pI), V === pI && uA(F, K, V = dI([]), J), V;
  }
  function UB(F) {
    var K = EA(F, 3);
    if (F.m || (F.m = {}), !F.m[3]) {
      for (var J = 0; J < K.length; J++)
        K[J] = +K[J];
      F.m[3] = !0;
    }
    return K;
  }
  function oA(F, K, J) {
    return (F = Og(F, K)) == null ? J : F;
  }
  function qA(F, K, J) {
    return (F = (F = Og(F, K)) == null ? F : +F) == null ? J === void 0 ? 0 : J : F;
  }
  function uA(F, K, J, V) {
    V !== void 0 && V || K >= F.l ? (bC(F), F.i[K] = J) : F.h[K + F.j] = J;
  }
  function TA(F, K, J) {
    if (J === -1)
      return null;
    if (F.g || (F.g = {}), !F.g[J]) {
      var V = Og(F, J, !1);
      V && (F.g[J] = new K(V));
    }
    return F.g[J];
  }
  function og(F, K) {
    F.g || (F.g = {});
    var J = F.g[1];
    if (!J) {
      var V = EA(F, 1);
      J = [];
      for (var BA = 0; BA < V.length; BA++)
        J[BA] = new K(V[BA]);
      F.g[1] = J;
    }
    return J;
  }
  function Dg(F, K, J) {
    var V = V !== void 0 && V;
    F.g || (F.g = {});
    var BA = J && KA(J);
    F.g[K] = J, uA(F, K, BA, V);
  }
  function Rg(F, K, J, V) {
    var BA = og(F, J);
    K = K || new J(), F = EA(F, 1), V != null ? (BA.splice(V, 0, K), F.splice(V, 0, KA(K))) : (BA.push(K), F.push(KA(K)));
  }
  function KA(F, K) {
    if (F.g)
      for (var J in F.g) {
        var V = F.g[J];
        if (Array.isArray(V))
          for (var BA = 0; BA < V.length; BA++)
            V[BA] && KA(V[BA]);
        else
          V && KA(V);
      }
    return F.h;
  }
  function u(F, K) {
    if (F = F.o) {
      Xg(K, K.g.end());
      for (var J = 0; J < F.length; J++)
        Xg(K, F[J]);
    }
  }
  function Qg(F, K) {
    if (K.h == 4)
      return !1;
    var J = K.m;
    return Bg(K), K.N || (K = DA(K.g.h, J, K.g.g), (J = F.o) ? J.push(K) : F.o = [K]), !0;
  }
  function ug(F) {
    gI.call(this, F, -1, vg);
  }
  function ng(F, K) {
    for (; gg(K); )
      switch (K.i) {
        case 8:
          var J = K.g.i();
          uA(F, 1, J);
          break;
        case 16:
          uA(F, 2, J = K.g.i());
          break;
        case 29:
        case 26:
          Wg(K, F.getPackedDataList());
          break;
        case 32:
          uA(F, 4, J = pA(K.g));
          break;
        default:
          if (!Qg(F, K))
            return F;
      }
    return F;
  }
  gI.prototype.toJSON = function() {
    return VI(KA(this), JI, QA);
  }, gI.prototype.toString = function() {
    return KA(this).toString();
  }, r(ug, gI), ug.prototype.getRows = function() {
    return Og(this, 1);
  }, ug.prototype.getCols = function() {
    return Og(this, 2);
  }, ug.prototype.getPackedDataList = function() {
    return UB(this);
  }, ug.prototype.getLayout = function() {
    return oA(this, 4, 0);
  };
  var vg = [3];
  function OA(F, K) {
    var J = void 0;
    return new (J || (J = Promise))(function(V, BA) {
      function j(dA) {
        try {
          wA(K.next(dA));
        } catch (ZA) {
          BA(ZA);
        }
      }
      function sA(dA) {
        try {
          wA(K.throw(dA));
        } catch (ZA) {
          BA(ZA);
        }
      }
      function wA(dA) {
        dA.done ? V(dA.value) : new J(function(ZA) {
          ZA(dA.value);
        }).then(j, sA);
      }
      wA((K = K.apply(F, void 0)).next());
    });
  }
  function Fg(F) {
    gI.call(this, F);
  }
  function cB(F, K) {
    for (; gg(K); )
      switch (K.i) {
        case 8:
          var J = K.g.i();
          uA(F, 1, J);
          break;
        case 21:
          uA(F, 2, J = jA(K));
          break;
        case 26:
          uA(F, 3, J = eg(K));
          break;
        case 34:
          uA(F, 4, J = eg(K));
          break;
        default:
          if (!Qg(F, K))
            return F;
      }
    return F;
  }
  function YB(F) {
    gI.call(this, F, -1, ea);
  }
  r(Fg, gI), r(YB, gI), YB.prototype.addClassification = function(F, K) {
    return Rg(this, F, Fg, K), this;
  };
  var ea = [1];
  function IB(F) {
    gI.call(this, F);
  }
  function hi(F, K) {
    for (; gg(K); )
      switch (K.i) {
        case 13:
          var J = jA(K);
          uA(F, 1, J);
          break;
        case 21:
          uA(F, 2, J = jA(K));
          break;
        case 29:
          uA(F, 3, J = jA(K));
          break;
        case 37:
          uA(F, 4, J = jA(K));
          break;
        case 45:
          uA(F, 5, J = jA(K));
          break;
        default:
          if (!Qg(F, K))
            return F;
      }
    return F;
  }
  function lE(F) {
    gI.call(this, F, -1, GE);
  }
  function Di(F) {
    A: {
      var K = new lE();
      for (F = new fA(F); gg(F); )
        if (F.i === 10)
          Rg(K, lg(F, new IB(), hi), IB, void 0);
        else if (!Qg(K, F))
          break A;
    }
    return K;
  }
  r(IB, gI), r(lE, gI);
  var GE = [1];
  function _I(F) {
    gI.call(this, F);
  }
  function HC(F) {
    gI.call(this, F, -1, Gt);
  }
  function ci(F, K) {
    for (; gg(K); )
      switch (K.i) {
        case 8:
          var J = pA(K.g);
          uA(F, 1, J);
          break;
        case 16:
          uA(F, 2, J = pA(K.g));
          break;
        case 29:
        case 26:
          Wg(K, F.getVertexBufferList());
          break;
        case 32:
        case 34:
          J = K;
          var V = F.getIndexBufferList();
          J.h == 2 ? rg(J, NA.prototype.i, V) : V.push(J.g.i());
          break;
        default:
          if (!Qg(F, K))
            return F;
      }
    return F;
  }
  r(_I, gI), r(HC, gI), HC.prototype.getVertexType = function() {
    return oA(this, 1, 0);
  }, HC.prototype.getPrimitiveType = function() {
    return oA(this, 2, 0);
  }, HC.prototype.getVertexBufferList = function() {
    return UB(this);
  }, HC.prototype.getIndexBufferList = function() {
    return EA(this, 4);
  };
  var Gt = [3, 4];
  function rI(F) {
    gI.call(this, F);
  }
  function JB(F, K, J) {
    if (J = F.createShader(J === 0 ? F.VERTEX_SHADER : F.FRAGMENT_SHADER), F.shaderSource(J, K), F.compileShader(J), !F.getShaderParameter(J, F.COMPILE_STATUS))
      throw Error(`Could not compile WebGL shader.

` + F.getShaderInfoLog(J));
    return J;
  }
  function Mg(F) {
    return og(F, Fg).map(function(K) {
      return { index: oA(K, 1, 0), Y: qA(K, 2), label: Og(K, 3) != null ? oA(K, 3, "") : void 0, displayName: Og(K, 4) != null ? oA(K, 4, "") : void 0 };
    });
  }
  function xC(F) {
    return { x: qA(F, 1), y: qA(F, 2), z: qA(F, 3), visibility: Og(F, 4) != null ? qA(F, 4) : void 0 };
  }
  function wi(F, K) {
    this.h = F, this.g = K, this.l = 0;
  }
  function yE(F, K, J) {
    return function(V, BA) {
      var j = V.g;
      if (V.m === void 0) {
        var sA = JB(j, `
  attribute vec2 aVertex;
  attribute vec2 aTex;
  varying vec2 vTex;
  void main(void) {
    gl_Position = vec4(aVertex, 0.0, 1.0);
    vTex = aTex;
  }`, 0), wA = JB(j, `
  precision mediump float;
  varying vec2 vTex;
  uniform sampler2D sampler0;
  void main(){
    gl_FragColor = texture2D(sampler0, vTex);
  }`, 1), dA = j.createProgram();
        if (j.attachShader(dA, sA), j.attachShader(dA, wA), j.linkProgram(dA), !j.getProgramParameter(dA, j.LINK_STATUS))
          throw Error(`Could not compile WebGL program.

` + j.getProgramInfoLog(dA));
        sA = V.m = dA, j.useProgram(sA), wA = j.getUniformLocation(sA, "sampler0"), V.j = { I: j.getAttribLocation(sA, "aVertex"), H: j.getAttribLocation(sA, "aTex"), da: wA }, V.s = j.createBuffer(), j.bindBuffer(j.ARRAY_BUFFER, V.s), j.enableVertexAttribArray(V.j.I), j.vertexAttribPointer(V.j.I, 2, j.FLOAT, !1, 0, 0), j.bufferData(j.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), j.STATIC_DRAW), j.bindBuffer(j.ARRAY_BUFFER, null), V.o = j.createBuffer(), j.bindBuffer(j.ARRAY_BUFFER, V.o), j.enableVertexAttribArray(V.j.H), j.vertexAttribPointer(V.j.H, 2, j.FLOAT, !1, 0, 0), j.bufferData(j.ARRAY_BUFFER, new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]), j.STATIC_DRAW), j.bindBuffer(j.ARRAY_BUFFER, null), j.uniform1i(wA, 0);
      }
      sA = V.j, j.useProgram(V.m), j.canvas.width = BA.width, j.canvas.height = BA.height, j.viewport(0, 0, BA.width, BA.height), j.activeTexture(j.TEXTURE0), V.h.bindTexture2d(BA.glName), j.enableVertexAttribArray(sA.I), j.bindBuffer(j.ARRAY_BUFFER, V.s), j.vertexAttribPointer(sA.I, 2, j.FLOAT, !1, 0, 0), j.enableVertexAttribArray(sA.H), j.bindBuffer(j.ARRAY_BUFFER, V.o), j.vertexAttribPointer(sA.H, 2, j.FLOAT, !1, 0, 0), j.bindFramebuffer(j.DRAW_FRAMEBUFFER ? j.DRAW_FRAMEBUFFER : j.FRAMEBUFFER, null), j.clearColor(0, 0, 0, 0), j.clear(j.COLOR_BUFFER_BIT), j.colorMask(!0, !0, !0, !0), j.drawArrays(j.TRIANGLE_FAN, 0, 4), j.disableVertexAttribArray(sA.I), j.disableVertexAttribArray(sA.H), j.bindBuffer(j.ARRAY_BUFFER, null), V.h.bindTexture2d(0);
    }(F, K), typeof F.g.canvas.transferToImageBitmap == "function" ? Promise.resolve(F.g.canvas.transferToImageBitmap()) : J ? Promise.resolve(F.g.canvas) : typeof createImageBitmap == "function" ? createImageBitmap(F.g.canvas) : (F.i === void 0 && (F.i = document.createElement("canvas")), new Promise(function(V) {
      F.i.height = F.g.canvas.height, F.i.width = F.g.canvas.width, F.i.getContext("2d", {}).drawImage(F.g.canvas, 0, 0, F.g.canvas.width, F.g.canvas.height), V(F.i);
    }));
  }
  function li(F) {
    this.g = F;
  }
  r(rI, gI), rI.prototype.getMesh = function() {
    return TA(this, HC, 1);
  }, rI.prototype.getPoseTransformMatrix = function() {
    return TA(this, ug, 2);
  };
  var yt = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]);
  function dt(F, K) {
    return K + F;
  }
  function _B(F, K) {
    window[F] = K;
  }
  function Gi(F) {
    if (this.g = F, this.listeners = {}, this.j = {}, this.F = {}, this.m = {}, this.s = {}, this.G = this.o = this.R = !0, this.C = Promise.resolve(), this.P = "", this.B = {}, this.locateFile = F && F.locateFile || dt, typeof window == "object")
      var K = window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/";
    else {
      if (typeof location > "u")
        throw Error("solutions can only be loaded on a web page or in a web worker");
      K = location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/";
    }
    if (this.S = K, F.options)
      for (var J = (K = E(Object.keys(F.options))).next(); !J.done; J = K.next()) {
        J = J.value;
        var V = F.options[J].default;
        V !== void 0 && (this.j[J] = typeof V == "function" ? V() : V);
      }
  }
  function sa(F) {
    return OA(F, function K() {
      var J, V, BA, j, sA, wA, dA, ZA, Ng, Eg, SA, LA = this;
      return p(K, function(Ig) {
        switch (Ig.g) {
          case 1:
            return J = LA, LA.R ? (V = function(mA, _A) {
              return mA.g.files === void 0 ? [] : typeof mA.g.files == "function" ? mA.g.files(_A) : mA.g.files;
            }(LA, LA.j), D(Ig, function() {
              return OA(this, function mA() {
                return p(mA, function(_A) {
                  switch (_A.g) {
                    case 1:
                      return _A.m = 2, D(_A, WebAssembly.instantiate(yt), 4);
                    case 4:
                      _A.g = 3, _A.m = 0;
                      break;
                    case 2:
                      return _A.m = 0, _A.j = null, _A.return(!1);
                    case 3:
                      return _A.return(!0);
                  }
                });
              });
            }(), 2)) : Ig.return();
          case 2:
            if (BA = Ig.h, typeof window == "object")
              return _B("createMediapipeSolutionsWasm", { locateFile: LA.locateFile }), _B("createMediapipeSolutionsPackedAssets", { locateFile: LA.locateFile }), wA = V.filter(function(mA) {
                return mA.data !== void 0;
              }), dA = V.filter(function(mA) {
                return mA.data === void 0;
              }), ZA = Promise.all(wA.map(function(mA) {
                var _A = yi(J, mA.url);
                if (mA.path !== void 0) {
                  var Gg = mA.path;
                  _A = _A.then(function(Hg) {
                    return J.overrideFile(Gg, Hg), Promise.resolve(Hg);
                  });
                }
                return _A;
              })), Ng = Promise.all(dA.map(function(mA) {
                return mA.simd === void 0 || mA.simd && BA || !mA.simd && !BA ? function(_A) {
                  var Gg = document.createElement("script");
                  return Gg.setAttribute("src", _A), Gg.setAttribute("crossorigin", "anonymous"), new Promise(function(Hg) {
                    Gg.addEventListener("load", function() {
                      Hg();
                    }, !1), Gg.addEventListener("error", function() {
                      Hg();
                    }, !1), document.body.appendChild(Gg);
                  });
                }(J.locateFile(mA.url, J.S)) : Promise.resolve();
              })).then(function() {
                return OA(J, function mA() {
                  var _A, Gg, Hg = this;
                  return p(mA, function($g) {
                    if ($g.g == 1)
                      return _A = window.createMediapipeSolutionsWasm, Gg = window.createMediapipeSolutionsPackedAssets, D($g, _A(Gg), 2);
                    Hg.h = $g.h, $g.g = 0;
                  });
                });
              }), Eg = OA(J, function mA() {
                var _A = this;
                return p(mA, function(Gg) {
                  return _A.g.graph && _A.g.graph.url ? Gg = D(Gg, yi(_A, _A.g.graph.url), 0) : (Gg.g = 0, Gg = void 0), Gg;
                });
              }), D(Ig, Promise.all([Ng, ZA, Eg]), 7);
            if (typeof importScripts != "function")
              throw Error("solutions can only be loaded on a web page or in a web worker");
            return j = V.filter(function(mA) {
              return mA.simd === void 0 || mA.simd && BA || !mA.simd && !BA;
            }).map(function(mA) {
              return J.locateFile(mA.url, J.S);
            }), importScripts.apply(null, i(j)), D(Ig, createMediapipeSolutionsWasm(Module), 6);
          case 6:
            LA.h = Ig.h, LA.l = new OffscreenCanvas(1, 1), LA.h.canvas = LA.l, sA = LA.h.GL.createContext(LA.l, { antialias: !1, alpha: !1, ba: typeof WebGL2RenderingContext < "u" ? 2 : 1 }), LA.h.GL.makeContextCurrent(sA), Ig.g = 4;
            break;
          case 7:
            if (LA.l = document.createElement("canvas"), !(SA = LA.l.getContext("webgl2", {})) && !(SA = LA.l.getContext("webgl", {})))
              return alert("Failed to create WebGL canvas context when passing video frame."), Ig.return();
            LA.D = SA, LA.h.canvas = LA.l, LA.h.createContext(LA.l, !0, !0, {});
          case 4:
            LA.i = new LA.h.SolutionWasm(), LA.R = !1, Ig.g = 0;
        }
      });
    });
  }
  function yi(F, K) {
    return OA(F, function J() {
      var V, BA, j = this;
      return p(J, function(sA) {
        return K in j.F ? sA.return(j.F[K]) : (V = j.locateFile(K, ""), BA = fetch(V).then(function(wA) {
          return wA.arrayBuffer();
        }), j.F[K] = BA, sA.return(BA));
      });
    });
  }
  function kQ(F, K, J) {
    return OA(F, function V() {
      var BA, j, sA, wA, dA, ZA, Ng, Eg, SA, LA, Ig, mA, _A, Gg, Hg = this;
      return p(V, function($g) {
        switch ($g.g) {
          case 1:
            if (!J)
              return $g.return(K);
            for (BA = {}, j = 0, sA = E(Object.keys(J)), wA = sA.next(); !wA.done; wA = sA.next())
              dA = wA.value, typeof (ZA = J[dA]) != "string" && ZA.type === "texture" && K[ZA.stream] !== void 0 && ++j;
            1 < j && (Hg.G = !1), Ng = E(Object.keys(J)), wA = Ng.next();
          case 2:
            if (wA.done) {
              $g.g = 4;
              break;
            }
            if (Eg = wA.value, typeof (SA = J[Eg]) == "string")
              return _A = BA, Gg = Eg, D($g, function(AQ, Nt, gQ) {
                return OA(AQ, function ra() {
                  var pQ, BB = this;
                  return p(ra, function(IQ) {
                    return typeof gQ == "number" || gQ instanceof Uint8Array || gQ instanceof BB.h.Uint8BlobList ? IQ.return(gQ) : gQ instanceof BB.h.Texture2dDataOut ? ((pQ = BB.s[Nt]) || (pQ = new wi(BB.h, BB.D), BB.s[Nt] = pQ), IQ.return(yE(pQ, gQ, BB.G))) : IQ.return(void 0);
                  });
                });
              }(Hg, Eg, K[SA]), 14);
            if (LA = K[SA.stream], SA.type === "detection_list") {
              if (LA) {
                for (var WI = LA.getRectList(), tI = LA.getLandmarksList(), yg = LA.getClassificationsList(), Jg = [], cg = 0; cg < WI.size(); ++cg) {
                  var kg = WI.get(cg);
                  A: {
                    var xg = new _I();
                    for (kg = new fA(kg); gg(kg); )
                      switch (kg.i) {
                        case 13:
                          var II = jA(kg);
                          uA(xg, 1, II);
                          break;
                        case 21:
                          uA(xg, 2, II = jA(kg));
                          break;
                        case 29:
                          uA(xg, 3, II = jA(kg));
                          break;
                        case 37:
                          uA(xg, 4, II = jA(kg));
                          break;
                        case 45:
                          uA(xg, 5, II = jA(kg));
                          break;
                        case 48:
                          uA(xg, 6, II = pA(kg.g));
                          break;
                        default:
                          if (!Qg(xg, kg))
                            break A;
                      }
                  }
                  xg = { Z: qA(xg, 1), $: qA(xg, 2), height: qA(xg, 3), width: qA(xg, 4), rotation: qA(xg, 5, 0), X: oA(xg, 6, 0) }, kg = og(Di(tI.get(cg)), IB).map(xC);
                  var qC = yg.get(cg);
                  A:
                    for (II = new YB(), qC = new fA(qC); gg(qC); )
                      if (qC.i === 10)
                        II.addClassification(lg(qC, new Fg(), cB));
                      else if (!Qg(II, qC))
                        break A;
                  xg = { T: xg, O: kg, M: Mg(II) }, Jg.push(xg);
                }
                WI = Jg;
              } else
                WI = [];
              BA[Eg] = WI, $g.g = 7;
              break;
            }
            if (SA.type === "proto_list") {
              if (LA) {
                for (WI = Array(LA.size()), tI = 0; tI < LA.size(); tI++)
                  WI[tI] = LA.get(tI);
                LA.delete();
              } else
                WI = [];
              BA[Eg] = WI, $g.g = 7;
              break;
            }
            if (LA === void 0) {
              $g.g = 3;
              break;
            }
            if (SA.type === "float_list") {
              BA[Eg] = LA, $g.g = 7;
              break;
            }
            if (SA.type === "proto") {
              BA[Eg] = LA, $g.g = 7;
              break;
            }
            if (SA.type !== "texture")
              throw Error("Unknown output config type: '" + SA.type + "'");
            return (Ig = Hg.s[Eg]) || (Ig = new wi(Hg.h, Hg.D), Hg.s[Eg] = Ig), D($g, yE(Ig, LA, Hg.G), 13);
          case 13:
            mA = $g.h, BA[Eg] = mA;
          case 7:
            SA.transform && BA[Eg] && (BA[Eg] = SA.transform(BA[Eg])), $g.g = 3;
            break;
          case 14:
            _A[Gg] = $g.h;
          case 3:
            wA = Ng.next(), $g.g = 2;
            break;
          case 4:
            return $g.return(BA);
        }
      });
    });
  }
  function KQ(F, K) {
    for (var J = K.name || "$", V = [].concat(i(K.wants)), BA = new F.h.StringList(), j = E(K.wants), sA = j.next(); !sA.done; sA = j.next())
      BA.push_back(sA.value);
    j = F.h.PacketListener.implement({ onResults: function(wA) {
      for (var dA = {}, ZA = 0; ZA < K.wants.length; ++ZA)
        dA[V[ZA]] = wA.get(ZA);
      var Ng = F.listeners[J];
      Ng && (F.C = kQ(F, dA, K.outs).then(function(Eg) {
        Eg = Ng(Eg);
        for (var SA = 0; SA < K.wants.length; ++SA) {
          var LA = dA[V[SA]];
          typeof LA == "object" && LA.hasOwnProperty && LA.hasOwnProperty("delete") && LA.delete();
        }
        Eg && (F.C = Eg);
      }));
    } }), F.i.attachMultiListener(BA, j), BA.delete();
  }
  function di(F) {
    F = function(BA) {
      A: {
        var j = new rI();
        for (BA = new fA(BA); gg(BA); )
          switch (BA.i) {
            case 10:
              var sA = lg(BA, new HC(), ci);
              Dg(j, 1, sA);
              break;
            case 18:
              Dg(j, 2, sA = lg(BA, new ug(), ng));
              break;
            default:
              if (!Qg(j, BA))
                break A;
          }
      }
      return j;
    }(F);
    var K = F.getMesh();
    if (!K)
      return F;
    var J = new Float32Array(K.getVertexBufferList());
    K.getVertexBufferList = function() {
      return J;
    };
    var V = new Uint32Array(K.getIndexBufferList());
    return K.getIndexBufferList = function() {
      return V;
    }, F;
  }
  (C = Gi.prototype).close = function() {
    return this.i && this.i.delete(), Promise.resolve();
  }, C.reset = function() {
    return OA(this, function F() {
      var K = this;
      return p(F, function(J) {
        K.i && (K.i.reset(), K.m = {}, K.s = {}), J.g = 0;
      });
    });
  }, C.setOptions = function(F, K) {
    var J = this;
    if (K = K || this.g.options) {
      for (var V = [], BA = [], j = {}, sA = E(Object.keys(F)), wA = sA.next(); !wA.done; j = { K: j.K, L: j.L }, wA = sA.next()) {
        var dA = wA.value;
        dA in this.j && this.j[dA] === F[dA] || (this.j[dA] = F[dA], (wA = K[dA]) !== void 0 && (wA.onChange && (j.K = wA.onChange, j.L = F[dA], V.push(function(ZA) {
          return function() {
            return OA(J, function Ng() {
              var Eg = this;
              return p(Ng, function(SA) {
                if (SA.g == 1)
                  return D(SA, ZA.K(ZA.L), 2);
                SA.h === !0 && (Eg.o = !0), SA.g = 0;
              });
            });
          };
        }(j))), wA.graphOptionXref && (dA = { valueNumber: wA.type === 1 ? F[dA] : 0, valueBoolean: wA.type === 0 && F[dA], valueString: wA.type === 2 ? F[dA] : "" }, wA = Object.assign(Object.assign(Object.assign({}, { calculatorName: "", calculatorIndex: 0 }), wA.graphOptionXref), dA), BA.push(wA))));
      }
      V.length === 0 && BA.length === 0 || (this.o = !0, this.A = (this.A === void 0 ? [] : this.A).concat(BA), this.u = (this.u === void 0 ? [] : this.u).concat(V));
    }
  }, C.initialize = function() {
    return OA(this, function F() {
      var K = this;
      return p(F, function(J) {
        return J.g == 1 ? D(J, sa(K), 2) : J.g != 3 ? D(J, OA(K, function V() {
          var BA, j, sA, wA, dA, ZA, Ng, Eg, SA = this;
          return p(V, function(LA) {
            if (LA.g == 1)
              return SA.g.graph && SA.g.graph.url && SA.P === SA.g.graph.url ? LA.return() : (SA.o = !0, SA.g.graph && SA.g.graph.url ? (SA.P = SA.g.graph.url, D(LA, yi(SA, SA.g.graph.url), 3)) : void (LA.g = 2));
            for (LA.g != 2 && (BA = LA.h, SA.i.loadGraph(BA)), j = E(Object.keys(SA.B)), sA = j.next(); !sA.done; sA = j.next())
              wA = sA.value, SA.i.overrideFile(wA, SA.B[wA]);
            if (SA.B = {}, SA.g.listeners)
              for (dA = E(SA.g.listeners), ZA = dA.next(); !ZA.done; ZA = dA.next())
                Ng = ZA.value, KQ(SA, Ng);
            Eg = SA.j, SA.j = {}, SA.setOptions(Eg), LA.g = 0;
          });
        }), 3) : D(J, function(V) {
          return OA(V, function BA() {
            var j, sA, wA, dA, ZA, Ng, Eg = this;
            return p(BA, function(SA) {
              switch (SA.g) {
                case 1:
                  if (!Eg.o)
                    return SA.return();
                  if (!Eg.u) {
                    SA.g = 2;
                    break;
                  }
                  j = E(Eg.u), sA = j.next();
                case 3:
                  if (sA.done) {
                    SA.g = 5;
                    break;
                  }
                  return D(SA, (0, sA.value)(), 4);
                case 4:
                  sA = j.next(), SA.g = 3;
                  break;
                case 5:
                  Eg.u = void 0;
                case 2:
                  if (Eg.A) {
                    for (wA = new Eg.h.GraphOptionChangeRequestList(), dA = E(Eg.A), ZA = dA.next(); !ZA.done; ZA = dA.next())
                      Ng = ZA.value, wA.push_back(Ng);
                    Eg.i.changeOptions(wA), wA.delete(), Eg.A = void 0;
                  }
                  Eg.o = !1, SA.g = 0;
              }
            });
          });
        }(K), 0);
      });
    });
  }, C.overrideFile = function(F, K) {
    this.i ? this.i.overrideFile(F, K) : this.B[F] = K;
  }, C.clearOverriddenFiles = function() {
    this.B = {}, this.i && this.i.clearOverriddenFiles();
  }, C.send = function(F, K) {
    return OA(this, function J() {
      var V, BA, j, sA, wA, dA, ZA, Ng, Eg, SA = this;
      return p(J, function(LA) {
        switch (LA.g) {
          case 1:
            return SA.g.inputs ? (V = 1e3 * (K ?? performance.now()), D(LA, SA.C, 2)) : LA.return();
          case 2:
            return D(LA, SA.initialize(), 3);
          case 3:
            for (BA = new SA.h.PacketDataList(), j = E(Object.keys(F)), sA = j.next(); !sA.done; sA = j.next())
              if (wA = sA.value, dA = SA.g.inputs[wA]) {
                A: {
                  var Ig = SA, mA = F[wA];
                  switch (dA.type) {
                    case "video":
                      var _A = Ig.m[dA.stream];
                      if (_A || (_A = new wi(Ig.h, Ig.D), Ig.m[dA.stream] = _A), (Ig = _A).l === 0 && (Ig.l = Ig.h.createTexture()), typeof HTMLVideoElement < "u" && mA instanceof HTMLVideoElement) {
                        var Gg = mA.videoWidth;
                        _A = mA.videoHeight;
                      } else
                        typeof HTMLImageElement < "u" && mA instanceof HTMLImageElement ? (Gg = mA.naturalWidth, _A = mA.naturalHeight) : (Gg = mA.width, _A = mA.height);
                      _A = { glName: Ig.l, width: Gg, height: _A }, (Gg = Ig.g).canvas.width = _A.width, Gg.canvas.height = _A.height, Gg.activeTexture(Gg.TEXTURE0), Ig.h.bindTexture2d(Ig.l), Gg.texImage2D(Gg.TEXTURE_2D, 0, Gg.RGBA, Gg.RGBA, Gg.UNSIGNED_BYTE, mA), Ig.h.bindTexture2d(0), Ig = _A;
                      break A;
                    case "detections":
                      for ((_A = Ig.m[dA.stream]) || (_A = new li(Ig.h), Ig.m[dA.stream] = _A), (Ig = _A).data || (Ig.data = new Ig.g.DetectionListData()), Ig.data.reset(mA.length), _A = 0; _A < mA.length; ++_A) {
                        Gg = mA[_A];
                        var Hg = Ig.data, $g = Hg.setBoundingBox, WI = _A, tI = Gg.T, yg = new _I();
                        uA(yg, 1, tI.Z), uA(yg, 2, tI.$), uA(yg, 3, tI.height), uA(yg, 4, tI.width), uA(yg, 5, tI.rotation), uA(yg, 6, tI.X);
                        var Jg = tI = new Yg();
                        wI(Jg, 1, Og(yg, 1)), wI(Jg, 2, Og(yg, 2)), wI(Jg, 3, Og(yg, 3)), wI(Jg, 4, Og(yg, 4)), wI(Jg, 5, Og(yg, 5));
                        var cg = Og(yg, 6);
                        if (cg != null && cg != null) {
                          PA(Jg.g, 48);
                          var kg = Jg.g, xg = cg;
                          cg = 0 > xg;
                          var II = (xg = Math.abs(xg)) >>> 0;
                          for (xg = Math.floor((xg - II) / 4294967296), xg >>>= 0, cg && (xg = ~xg >>> 0, 4294967295 < (II = 1 + (~II >>> 0)) && (II = 0, 4294967295 < ++xg && (xg = 0))), cg = GA = II, II = xg; 0 < II || 127 < cg; )
                            kg.push(127 & cg | 128), cg = (cg >>> 7 | II << 25) >>> 0, II >>>= 7;
                          kg.push(cg);
                        }
                        if (u(yg, Jg), tI = hg(tI), $g.call(Hg, WI, tI), Gg.O)
                          for (Hg = 0; Hg < Gg.O.length; ++Hg)
                            Jg = !!(yg = Gg.O[Hg]).visibility, WI = ($g = Ig.data).addNormalizedLandmark, tI = _A, yg = Object.assign(Object.assign({}, yg), { visibility: Jg ? yg.visibility : 0 }), uA(Jg = new IB(), 1, yg.x), uA(Jg, 2, yg.y), uA(Jg, 3, yg.z), yg.visibility && uA(Jg, 4, yg.visibility), wI(kg = yg = new Yg(), 1, Og(Jg, 1)), wI(kg, 2, Og(Jg, 2)), wI(kg, 3, Og(Jg, 3)), wI(kg, 4, Og(Jg, 4)), wI(kg, 5, Og(Jg, 5)), u(Jg, kg), yg = hg(yg), WI.call($g, tI, yg);
                        if (Gg.M)
                          for (Hg = 0; Hg < Gg.M.length; ++Hg) {
                            if (WI = ($g = Ig.data).addClassification, tI = _A, yg = Gg.M[Hg], uA(Jg = new Fg(), 2, yg.Y), yg.index && uA(Jg, 1, yg.index), yg.label && uA(Jg, 3, yg.label), yg.displayName && uA(Jg, 4, yg.displayName), kg = yg = new Yg(), (II = Og(Jg, 1)) != null && II != null)
                              if (PA(kg.g, 8), cg = kg.g, 0 <= II)
                                PA(cg, II);
                              else {
                                for (xg = 0; 9 > xg; xg++)
                                  cg.push(127 & II | 128), II >>= 7;
                                cg.push(1);
                              }
                            wI(kg, 2, Og(Jg, 2)), (cg = Og(Jg, 3)) != null && (cg = AA(cg), PA(kg.g, 26), PA(kg.g, cg.length), Xg(kg, kg.g.end()), Xg(kg, cg)), (cg = Og(Jg, 4)) != null && (cg = AA(cg), PA(kg.g, 34), PA(kg.g, cg.length), Xg(kg, kg.g.end()), Xg(kg, cg)), u(Jg, kg), yg = hg(yg), WI.call($g, tI, yg);
                          }
                      }
                      Ig = Ig.data;
                      break A;
                    default:
                      Ig = {};
                  }
                }
                switch (ZA = Ig, Ng = dA.stream, dA.type) {
                  case "video":
                    BA.pushTexture2d(Object.assign(Object.assign({}, ZA), { stream: Ng, timestamp: V }));
                    break;
                  case "detections":
                    (Eg = ZA).stream = Ng, Eg.timestamp = V, BA.pushDetectionList(Eg);
                    break;
                  default:
                    throw Error("Unknown input config type: '" + dA.type + "'");
                }
              }
            return SA.i.send(BA), D(LA, SA.C, 4);
          case 4:
            BA.delete(), LA.g = 0;
        }
      });
    });
  }, C.onResults = function(F, K) {
    this.listeners[K || "$"] = F;
  }, L("Solution", Gi), L("OptionType", { BOOL: 0, NUMBER: 1, aa: 2, 0: "BOOL", 1: "NUMBER", 2: "STRING" });
  var aa = { files: [{ url: "face_mesh_solution_packed_assets_loader.js" }, { simd: !0, url: "face_mesh_solution_simd_wasm_bin.js" }, { simd: !1, url: "face_mesh_solution_wasm_bin.js" }], graph: { url: "face_mesh.binarypb" }, listeners: [{ wants: ["multi_face_geometry", "image_transformed", "multi_face_landmarks"], outs: { image: "image_transformed", multiFaceGeometry: { type: "proto_list", stream: "multi_face_geometry", transform: function(F) {
    return F.map(di);
  } }, multiFaceLandmarks: { type: "proto_list", stream: "multi_face_landmarks", transform: function(F) {
    return F.map(function(K) {
      return og(Di(K), IB).map(xC);
    });
  } } } }], inputs: { image: { type: "video", stream: "input_frames_gpu" } }, options: { useCpuInference: { type: 0, graphOptionXref: { calculatorType: "InferenceCalculator", fieldName: "use_cpu_inference" }, default: "iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document }, enableFaceGeometry: { type: 0, graphOptionXref: { calculatorName: "EnableFaceGeometryConstant", calculatorType: "ConstantSidePacketCalculator", fieldName: "bool_value" } }, selfieMode: { type: 0, graphOptionXref: { calculatorType: "GlScalerCalculator", calculatorIndex: 1, fieldName: "flip_horizontal" } }, maxNumFaces: { type: 1, graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorNumFaces", fieldName: "int_value" } }, refineLandmarks: { type: 0, graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorRefineLandmarks", fieldName: "bool_value" } }, minDetectionConfidence: { type: 1, graphOptionXref: { calculatorType: "TensorsToDetectionsCalculator", calculatorName: "facelandmarkfrontgpu__facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator", fieldName: "min_score_thresh" } }, minTrackingConfidence: { type: 1, graphOptionXref: { calculatorType: "ThresholdingCalculator", calculatorName: "facelandmarkfrontgpu__facelandmarkgpu__ThresholdingCalculator", fieldName: "threshold" } }, cameraNear: { type: 1, graphOptionXref: { calculatorType: "FaceGeometryEnvGeneratorCalculator", fieldName: "near" } }, cameraFar: { type: 1, graphOptionXref: { calculatorType: "FaceGeometryEnvGeneratorCalculator", fieldName: "far" } }, cameraVerticalFovDegrees: { type: 1, graphOptionXref: { calculatorType: "FaceGeometryEnvGeneratorCalculator", fieldName: "vertical_fov_degrees" } } } }, CB = [[61, 146], [146, 91], [91, 181], [181, 84], [84, 17], [17, 314], [314, 405], [405, 321], [321, 375], [375, 291], [61, 185], [185, 40], [40, 39], [39, 37], [37, 0], [0, 267], [267, 269], [269, 270], [270, 409], [409, 291], [78, 95], [95, 88], [88, 178], [178, 87], [87, 14], [14, 317], [317, 402], [402, 318], [318, 324], [324, 308], [78, 191], [191, 80], [80, 81], [81, 82], [82, 13], [13, 312], [312, 311], [311, 310], [310, 415], [415, 308]], Fi = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]], dE = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]], Ri = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]], Ft = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]], SQ = [[10, 338], [338, 297], [297, 332], [332, 284], [284, 251], [251, 389], [389, 356], [356, 454], [454, 323], [323, 361], [361, 288], [288, 397], [397, 365], [365, 379], [379, 378], [378, 400], [400, 377], [377, 152], [152, 148], [148, 176], [176, 149], [149, 150], [150, 136], [136, 172], [172, 58], [58, 132], [132, 93], [93, 234], [234, 127], [127, 162], [162, 21], [21, 54], [54, 103], [103, 67], [67, 109], [109, 10]], na = [].concat(i(CB), i(Fi), i(dE), i(Ri), i(Ft), i(SQ));
  function Rt(F) {
    F = F || {}, F = Object.assign(Object.assign({}, aa), F), this.g = new Gi(F);
  }
  (C = Rt.prototype).close = function() {
    return this.g.close(), Promise.resolve();
  }, C.onResults = function(F) {
    this.g.onResults(F);
  }, C.initialize = function() {
    return OA(this, function F() {
      var K = this;
      return p(F, function(J) {
        return D(J, K.g.initialize(), 0);
      });
    });
  }, C.reset = function() {
    this.g.reset();
  }, C.send = function(F) {
    return OA(this, function K() {
      var J = this;
      return p(K, function(V) {
        return D(V, J.g.send(F), 0);
      });
    });
  }, C.setOptions = function(F) {
    this.g.setOptions(F);
  }, L("FACE_GEOMETRY", { Layout: { COLUMN_MAJOR: 0, ROW_MAJOR: 1, 0: "COLUMN_MAJOR", 1: "ROW_MAJOR" }, PrimitiveType: { TRIANGLE: 0, 0: "TRIANGLE" }, VertexType: { VERTEX_PT: 0, 0: "VERTEX_PT" }, DEFAULT_CAMERA_PARAMS: { verticalFovDegrees: 63, near: 1, far: 1e4 } }), L("FaceMesh", Rt), L("FACEMESH_LIPS", CB), L("FACEMESH_LEFT_EYE", Fi), L("FACEMESH_LEFT_EYEBROW", dE), L("FACEMESH_LEFT_IRIS", [[474, 475], [475, 476], [476, 477], [477, 474]]), L("FACEMESH_RIGHT_EYE", Ri), L("FACEMESH_RIGHT_EYEBROW", Ft), L("FACEMESH_RIGHT_IRIS", [[469, 470], [470, 471], [471, 472], [472, 469]]), L("FACEMESH_FACE_OVAL", SQ), L("FACEMESH_CONTOURS", na), L("FACEMESH_TESSELATION", [[127, 34], [34, 139], [139, 127], [11, 0], [0, 37], [37, 11], [232, 231], [231, 120], [120, 232], [72, 37], [37, 39], [39, 72], [128, 121], [121, 47], [47, 128], [232, 121], [121, 128], [128, 232], [104, 69], [69, 67], [67, 104], [175, 171], [171, 148], [148, 175], [118, 50], [50, 101], [101, 118], [73, 39], [39, 40], [40, 73], [9, 151], [151, 108], [108, 9], [48, 115], [115, 131], [131, 48], [194, 204], [204, 211], [211, 194], [74, 40], [40, 185], [185, 74], [80, 42], [42, 183], [183, 80], [40, 92], [92, 186], [186, 40], [230, 229], [229, 118], [118, 230], [202, 212], [212, 214], [214, 202], [83, 18], [18, 17], [17, 83], [76, 61], [61, 146], [146, 76], [160, 29], [29, 30], [30, 160], [56, 157], [157, 173], [173, 56], [106, 204], [204, 194], [194, 106], [135, 214], [214, 192], [192, 135], [203, 165], [165, 98], [98, 203], [21, 71], [71, 68], [68, 21], [51, 45], [45, 4], [4, 51], [144, 24], [24, 23], [23, 144], [77, 146], [146, 91], [91, 77], [205, 50], [50, 187], [187, 205], [201, 200], [200, 18], [18, 201], [91, 106], [106, 182], [182, 91], [90, 91], [91, 181], [181, 90], [85, 84], [84, 17], [17, 85], [206, 203], [203, 36], [36, 206], [148, 171], [171, 140], [140, 148], [92, 40], [40, 39], [39, 92], [193, 189], [189, 244], [244, 193], [159, 158], [158, 28], [28, 159], [247, 246], [246, 161], [161, 247], [236, 3], [3, 196], [196, 236], [54, 68], [68, 104], [104, 54], [193, 168], [168, 8], [8, 193], [117, 228], [228, 31], [31, 117], [189, 193], [193, 55], [55, 189], [98, 97], [97, 99], [99, 98], [126, 47], [47, 100], [100, 126], [166, 79], [79, 218], [218, 166], [155, 154], [154, 26], [26, 155], [209, 49], [49, 131], [131, 209], [135, 136], [136, 150], [150, 135], [47, 126], [126, 217], [217, 47], [223, 52], [52, 53], [53, 223], [45, 51], [51, 134], [134, 45], [211, 170], [170, 140], [140, 211], [67, 69], [69, 108], [108, 67], [43, 106], [106, 91], [91, 43], [230, 119], [119, 120], [120, 230], [226, 130], [130, 247], [247, 226], [63, 53], [53, 52], [52, 63], [238, 20], [20, 242], [242, 238], [46, 70], [70, 156], [156, 46], [78, 62], [62, 96], [96, 78], [46, 53], [53, 63], [63, 46], [143, 34], [34, 227], [227, 143], [123, 117], [117, 111], [111, 123], [44, 125], [125, 19], [19, 44], [236, 134], [134, 51], [51, 236], [216, 206], [206, 205], [205, 216], [154, 153], [153, 22], [22, 154], [39, 37], [37, 167], [167, 39], [200, 201], [201, 208], [208, 200], [36, 142], [142, 100], [100, 36], [57, 212], [212, 202], [202, 57], [20, 60], [60, 99], [99, 20], [28, 158], [158, 157], [157, 28], [35, 226], [226, 113], [113, 35], [160, 159], [159, 27], [27, 160], [204, 202], [202, 210], [210, 204], [113, 225], [225, 46], [46, 113], [43, 202], [202, 204], [204, 43], [62, 76], [76, 77], [77, 62], [137, 123], [123, 116], [116, 137], [41, 38], [38, 72], [72, 41], [203, 129], [129, 142], [142, 203], [64, 98], [98, 240], [240, 64], [49, 102], [102, 64], [64, 49], [41, 73], [73, 74], [74, 41], [212, 216], [216, 207], [207, 212], [42, 74], [74, 184], [184, 42], [169, 170], [170, 211], [211, 169], [170, 149], [149, 176], [176, 170], [105, 66], [66, 69], [69, 105], [122, 6], [6, 168], [168, 122], [123, 147], [147, 187], [187, 123], [96, 77], [77, 90], [90, 96], [65, 55], [55, 107], [107, 65], [89, 90], [90, 180], [180, 89], [101, 100], [100, 120], [120, 101], [63, 105], [105, 104], [104, 63], [93, 137], [137, 227], [227, 93], [15, 86], [86, 85], [85, 15], [129, 102], [102, 49], [49, 129], [14, 87], [87, 86], [86, 14], [55, 8], [8, 9], [9, 55], [100, 47], [47, 121], [121, 100], [145, 23], [23, 22], [22, 145], [88, 89], [89, 179], [179, 88], [6, 122], [122, 196], [196, 6], [88, 95], [95, 96], [96, 88], [138, 172], [172, 136], [136, 138], [215, 58], [58, 172], [172, 215], [115, 48], [48, 219], [219, 115], [42, 80], [80, 81], [81, 42], [195, 3], [3, 51], [51, 195], [43, 146], [146, 61], [61, 43], [171, 175], [175, 199], [199, 171], [81, 82], [82, 38], [38, 81], [53, 46], [46, 225], [225, 53], [144, 163], [163, 110], [110, 144], [52, 65], [65, 66], [66, 52], [229, 228], [228, 117], [117, 229], [34, 127], [127, 234], [234, 34], [107, 108], [108, 69], [69, 107], [109, 108], [108, 151], [151, 109], [48, 64], [64, 235], [235, 48], [62, 78], [78, 191], [191, 62], [129, 209], [209, 126], [126, 129], [111, 35], [35, 143], [143, 111], [117, 123], [123, 50], [50, 117], [222, 65], [65, 52], [52, 222], [19, 125], [125, 141], [141, 19], [221, 55], [55, 65], [65, 221], [3, 195], [195, 197], [197, 3], [25, 7], [7, 33], [33, 25], [220, 237], [237, 44], [44, 220], [70, 71], [71, 139], [139, 70], [122, 193], [193, 245], [245, 122], [247, 130], [130, 33], [33, 247], [71, 21], [21, 162], [162, 71], [170, 169], [169, 150], [150, 170], [188, 174], [174, 196], [196, 188], [216, 186], [186, 92], [92, 216], [2, 97], [97, 167], [167, 2], [141, 125], [125, 241], [241, 141], [164, 167], [167, 37], [37, 164], [72, 38], [38, 12], [12, 72], [38, 82], [82, 13], [13, 38], [63, 68], [68, 71], [71, 63], [226, 35], [35, 111], [111, 226], [101, 50], [50, 205], [205, 101], [206, 92], [92, 165], [165, 206], [209, 198], [198, 217], [217, 209], [165, 167], [167, 97], [97, 165], [220, 115], [115, 218], [218, 220], [133, 112], [112, 243], [243, 133], [239, 238], [238, 241], [241, 239], [214, 135], [135, 169], [169, 214], [190, 173], [173, 133], [133, 190], [171, 208], [208, 32], [32, 171], [125, 44], [44, 237], [237, 125], [86, 87], [87, 178], [178, 86], [85, 86], [86, 179], [179, 85], [84, 85], [85, 180], [180, 84], [83, 84], [84, 181], [181, 83], [201, 83], [83, 182], [182, 201], [137, 93], [93, 132], [132, 137], [76, 62], [62, 183], [183, 76], [61, 76], [76, 184], [184, 61], [57, 61], [61, 185], [185, 57], [212, 57], [57, 186], [186, 212], [214, 207], [207, 187], [187, 214], [34, 143], [143, 156], [156, 34], [79, 239], [239, 237], [237, 79], [123, 137], [137, 177], [177, 123], [44, 1], [1, 4], [4, 44], [201, 194], [194, 32], [32, 201], [64, 102], [102, 129], [129, 64], [213, 215], [215, 138], [138, 213], [59, 166], [166, 219], [219, 59], [242, 99], [99, 97], [97, 242], [2, 94], [94, 141], [141, 2], [75, 59], [59, 235], [235, 75], [24, 110], [110, 228], [228, 24], [25, 130], [130, 226], [226, 25], [23, 24], [24, 229], [229, 23], [22, 23], [23, 230], [230, 22], [26, 22], [22, 231], [231, 26], [112, 26], [26, 232], [232, 112], [189, 190], [190, 243], [243, 189], [221, 56], [56, 190], [190, 221], [28, 56], [56, 221], [221, 28], [27, 28], [28, 222], [222, 27], [29, 27], [27, 223], [223, 29], [30, 29], [29, 224], [224, 30], [247, 30], [30, 225], [225, 247], [238, 79], [79, 20], [20, 238], [166, 59], [59, 75], [75, 166], [60, 75], [75, 240], [240, 60], [147, 177], [177, 215], [215, 147], [20, 79], [79, 166], [166, 20], [187, 147], [147, 213], [213, 187], [112, 233], [233, 244], [244, 112], [233, 128], [128, 245], [245, 233], [128, 114], [114, 188], [188, 128], [114, 217], [217, 174], [174, 114], [131, 115], [115, 220], [220, 131], [217, 198], [198, 236], [236, 217], [198, 131], [131, 134], [134, 198], [177, 132], [132, 58], [58, 177], [143, 35], [35, 124], [124, 143], [110, 163], [163, 7], [7, 110], [228, 110], [110, 25], [25, 228], [356, 389], [389, 368], [368, 356], [11, 302], [302, 267], [267, 11], [452, 350], [350, 349], [349, 452], [302, 303], [303, 269], [269, 302], [357, 343], [343, 277], [277, 357], [452, 453], [453, 357], [357, 452], [333, 332], [332, 297], [297, 333], [175, 152], [152, 377], [377, 175], [347, 348], [348, 330], [330, 347], [303, 304], [304, 270], [270, 303], [9, 336], [336, 337], [337, 9], [278, 279], [279, 360], [360, 278], [418, 262], [262, 431], [431, 418], [304, 408], [408, 409], [409, 304], [310, 415], [415, 407], [407, 310], [270, 409], [409, 410], [410, 270], [450, 348], [348, 347], [347, 450], [422, 430], [430, 434], [434, 422], [313, 314], [314, 17], [17, 313], [306, 307], [307, 375], [375, 306], [387, 388], [388, 260], [260, 387], [286, 414], [414, 398], [398, 286], [335, 406], [406, 418], [418, 335], [364, 367], [367, 416], [416, 364], [423, 358], [358, 327], [327, 423], [251, 284], [284, 298], [298, 251], [281, 5], [5, 4], [4, 281], [373, 374], [374, 253], [253, 373], [307, 320], [320, 321], [321, 307], [425, 427], [427, 411], [411, 425], [421, 313], [313, 18], [18, 421], [321, 405], [405, 406], [406, 321], [320, 404], [404, 405], [405, 320], [315, 16], [16, 17], [17, 315], [426, 425], [425, 266], [266, 426], [377, 400], [400, 369], [369, 377], [322, 391], [391, 269], [269, 322], [417, 465], [465, 464], [464, 417], [386, 257], [257, 258], [258, 386], [466, 260], [260, 388], [388, 466], [456, 399], [399, 419], [419, 456], [284, 332], [332, 333], [333, 284], [417, 285], [285, 8], [8, 417], [346, 340], [340, 261], [261, 346], [413, 441], [441, 285], [285, 413], [327, 460], [460, 328], [328, 327], [355, 371], [371, 329], [329, 355], [392, 439], [439, 438], [438, 392], [382, 341], [341, 256], [256, 382], [429, 420], [420, 360], [360, 429], [364, 394], [394, 379], [379, 364], [277, 343], [343, 437], [437, 277], [443, 444], [444, 283], [283, 443], [275, 440], [440, 363], [363, 275], [431, 262], [262, 369], [369, 431], [297, 338], [338, 337], [337, 297], [273, 375], [375, 321], [321, 273], [450, 451], [451, 349], [349, 450], [446, 342], [342, 467], [467, 446], [293, 334], [334, 282], [282, 293], [458, 461], [461, 462], [462, 458], [276, 353], [353, 383], [383, 276], [308, 324], [324, 325], [325, 308], [276, 300], [300, 293], [293, 276], [372, 345], [345, 447], [447, 372], [352, 345], [345, 340], [340, 352], [274, 1], [1, 19], [19, 274], [456, 248], [248, 281], [281, 456], [436, 427], [427, 425], [425, 436], [381, 256], [256, 252], [252, 381], [269, 391], [391, 393], [393, 269], [200, 199], [199, 428], [428, 200], [266, 330], [330, 329], [329, 266], [287, 273], [273, 422], [422, 287], [250, 462], [462, 328], [328, 250], [258, 286], [286, 384], [384, 258], [265, 353], [353, 342], [342, 265], [387, 259], [259, 257], [257, 387], [424, 431], [431, 430], [430, 424], [342, 353], [353, 276], [276, 342], [273, 335], [335, 424], [424, 273], [292, 325], [325, 307], [307, 292], [366, 447], [447, 345], [345, 366], [271, 303], [303, 302], [302, 271], [423, 266], [266, 371], [371, 423], [294, 455], [455, 460], [460, 294], [279, 278], [278, 294], [294, 279], [271, 272], [272, 304], [304, 271], [432, 434], [434, 427], [427, 432], [272, 407], [407, 408], [408, 272], [394, 430], [430, 431], [431, 394], [395, 369], [369, 400], [400, 395], [334, 333], [333, 299], [299, 334], [351, 417], [417, 168], [168, 351], [352, 280], [280, 411], [411, 352], [325, 319], [319, 320], [320, 325], [295, 296], [296, 336], [336, 295], [319, 403], [403, 404], [404, 319], [330, 348], [348, 349], [349, 330], [293, 298], [298, 333], [333, 293], [323, 454], [454, 447], [447, 323], [15, 16], [16, 315], [315, 15], [358, 429], [429, 279], [279, 358], [14, 15], [15, 316], [316, 14], [285, 336], [336, 9], [9, 285], [329, 349], [349, 350], [350, 329], [374, 380], [380, 252], [252, 374], [318, 402], [402, 403], [403, 318], [6, 197], [197, 419], [419, 6], [318, 319], [319, 325], [325, 318], [367, 364], [364, 365], [365, 367], [435, 367], [367, 397], [397, 435], [344, 438], [438, 439], [439, 344], [272, 271], [271, 311], [311, 272], [195, 5], [5, 281], [281, 195], [273, 287], [287, 291], [291, 273], [396, 428], [428, 199], [199, 396], [311, 271], [271, 268], [268, 311], [283, 444], [444, 445], [445, 283], [373, 254], [254, 339], [339, 373], [282, 334], [334, 296], [296, 282], [449, 347], [347, 346], [346, 449], [264, 447], [447, 454], [454, 264], [336, 296], [296, 299], [299, 336], [338, 10], [10, 151], [151, 338], [278, 439], [439, 455], [455, 278], [292, 407], [407, 415], [415, 292], [358, 371], [371, 355], [355, 358], [340, 345], [345, 372], [372, 340], [346, 347], [347, 280], [280, 346], [442, 443], [443, 282], [282, 442], [19, 94], [94, 370], [370, 19], [441, 442], [442, 295], [295, 441], [248, 419], [419, 197], [197, 248], [263, 255], [255, 359], [359, 263], [440, 275], [275, 274], [274, 440], [300, 383], [383, 368], [368, 300], [351, 412], [412, 465], [465, 351], [263, 467], [467, 466], [466, 263], [301, 368], [368, 389], [389, 301], [395, 378], [378, 379], [379, 395], [412, 351], [351, 419], [419, 412], [436, 426], [426, 322], [322, 436], [2, 164], [164, 393], [393, 2], [370, 462], [462, 461], [461, 370], [164, 0], [0, 267], [267, 164], [302, 11], [11, 12], [12, 302], [268, 12], [12, 13], [13, 268], [293, 300], [300, 301], [301, 293], [446, 261], [261, 340], [340, 446], [330, 266], [266, 425], [425, 330], [426, 423], [423, 391], [391, 426], [429, 355], [355, 437], [437, 429], [391, 327], [327, 326], [326, 391], [440, 457], [457, 438], [438, 440], [341, 382], [382, 362], [362, 341], [459, 457], [457, 461], [461, 459], [434, 430], [430, 394], [394, 434], [414, 463], [463, 362], [362, 414], [396, 369], [369, 262], [262, 396], [354, 461], [461, 457], [457, 354], [316, 403], [403, 402], [402, 316], [315, 404], [404, 403], [403, 315], [314, 405], [405, 404], [404, 314], [313, 406], [406, 405], [405, 313], [421, 418], [418, 406], [406, 421], [366, 401], [401, 361], [361, 366], [306, 408], [408, 407], [407, 306], [291, 409], [409, 408], [408, 291], [287, 410], [410, 409], [409, 287], [432, 436], [436, 410], [410, 432], [434, 416], [416, 411], [411, 434], [264, 368], [368, 383], [383, 264], [309, 438], [438, 457], [457, 309], [352, 376], [376, 401], [401, 352], [274, 275], [275, 4], [4, 274], [421, 428], [428, 262], [262, 421], [294, 327], [327, 358], [358, 294], [433, 416], [416, 367], [367, 433], [289, 455], [455, 439], [439, 289], [462, 370], [370, 326], [326, 462], [2, 326], [326, 370], [370, 2], [305, 460], [460, 455], [455, 305], [254, 449], [449, 448], [448, 254], [255, 261], [261, 446], [446, 255], [253, 450], [450, 449], [449, 253], [252, 451], [451, 450], [450, 252], [256, 452], [452, 451], [451, 256], [341, 453], [453, 452], [452, 341], [413, 464], [464, 463], [463, 413], [441, 413], [413, 414], [414, 441], [258, 442], [442, 441], [441, 258], [257, 443], [443, 442], [442, 257], [259, 444], [444, 443], [443, 259], [260, 445], [445, 444], [444, 260], [467, 342], [342, 445], [445, 467], [459, 458], [458, 250], [250, 459], [289, 392], [392, 290], [290, 289], [290, 328], [328, 460], [460, 290], [376, 433], [433, 435], [435, 376], [250, 290], [290, 392], [392, 250], [411, 416], [416, 433], [433, 411], [341, 463], [463, 464], [464, 341], [453, 464], [464, 465], [465, 453], [357, 465], [465, 412], [412, 357], [343, 412], [412, 399], [399, 343], [360, 363], [363, 440], [440, 360], [437, 399], [399, 456], [456, 437], [420, 456], [456, 363], [363, 420], [401, 435], [435, 288], [288, 401], [372, 383], [383, 353], [353, 372], [339, 255], [255, 249], [249, 339], [448, 261], [261, 255], [255, 448], [133, 243], [243, 190], [190, 133], [133, 155], [155, 112], [112, 133], [33, 246], [246, 247], [247, 33], [33, 130], [130, 25], [25, 33], [398, 384], [384, 286], [286, 398], [362, 398], [398, 414], [414, 362], [362, 463], [463, 341], [341, 362], [263, 359], [359, 467], [467, 263], [263, 249], [249, 255], [255, 263], [466, 467], [467, 260], [260, 466], [75, 60], [60, 166], [166, 75], [238, 239], [239, 79], [79, 238], [162, 127], [127, 139], [139, 162], [72, 11], [11, 37], [37, 72], [121, 232], [232, 120], [120, 121], [73, 72], [72, 39], [39, 73], [114, 128], [128, 47], [47, 114], [233, 232], [232, 128], [128, 233], [103, 104], [104, 67], [67, 103], [152, 175], [175, 148], [148, 152], [119, 118], [118, 101], [101, 119], [74, 73], [73, 40], [40, 74], [107, 9], [9, 108], [108, 107], [49, 48], [48, 131], [131, 49], [32, 194], [194, 211], [211, 32], [184, 74], [74, 185], [185, 184], [191, 80], [80, 183], [183, 191], [185, 40], [40, 186], [186, 185], [119, 230], [230, 118], [118, 119], [210, 202], [202, 214], [214, 210], [84, 83], [83, 17], [17, 84], [77, 76], [76, 146], [146, 77], [161, 160], [160, 30], [30, 161], [190, 56], [56, 173], [173, 190], [182, 106], [106, 194], [194, 182], [138, 135], [135, 192], [192, 138], [129, 203], [203, 98], [98, 129], [54, 21], [21, 68], [68, 54], [5, 51], [51, 4], [4, 5], [145, 144], [144, 23], [23, 145], [90, 77], [77, 91], [91, 90], [207, 205], [205, 187], [187, 207], [83, 201], [201, 18], [18, 83], [181, 91], [91, 182], [182, 181], [180, 90], [90, 181], [181, 180], [16, 85], [85, 17], [17, 16], [205, 206], [206, 36], [36, 205], [176, 148], [148, 140], [140, 176], [165, 92], [92, 39], [39, 165], [245, 193], [193, 244], [244, 245], [27, 159], [159, 28], [28, 27], [30, 247], [247, 161], [161, 30], [174, 236], [236, 196], [196, 174], [103, 54], [54, 104], [104, 103], [55, 193], [193, 8], [8, 55], [111, 117], [117, 31], [31, 111], [221, 189], [189, 55], [55, 221], [240, 98], [98, 99], [99, 240], [142, 126], [126, 100], [100, 142], [219, 166], [166, 218], [218, 219], [112, 155], [155, 26], [26, 112], [198, 209], [209, 131], [131, 198], [169, 135], [135, 150], [150, 169], [114, 47], [47, 217], [217, 114], [224, 223], [223, 53], [53, 224], [220, 45], [45, 134], [134, 220], [32, 211], [211, 140], [140, 32], [109, 67], [67, 108], [108, 109], [146, 43], [43, 91], [91, 146], [231, 230], [230, 120], [120, 231], [113, 226], [226, 247], [247, 113], [105, 63], [63, 52], [52, 105], [241, 238], [238, 242], [242, 241], [124, 46], [46, 156], [156, 124], [95, 78], [78, 96], [96, 95], [70, 46], [46, 63], [63, 70], [116, 143], [143, 227], [227, 116], [116, 123], [123, 111], [111, 116], [1, 44], [44, 19], [19, 1], [3, 236], [236, 51], [51, 3], [207, 216], [216, 205], [205, 207], [26, 154], [154, 22], [22, 26], [165, 39], [39, 167], [167, 165], [199, 200], [200, 208], [208, 199], [101, 36], [36, 100], [100, 101], [43, 57], [57, 202], [202, 43], [242, 20], [20, 99], [99, 242], [56, 28], [28, 157], [157, 56], [124, 35], [35, 113], [113, 124], [29, 160], [160, 27], [27, 29], [211, 204], [204, 210], [210, 211], [124, 113], [113, 46], [46, 124], [106, 43], [43, 204], [204, 106], [96, 62], [62, 77], [77, 96], [227, 137], [137, 116], [116, 227], [73, 41], [41, 72], [72, 73], [36, 203], [203, 142], [142, 36], [235, 64], [64, 240], [240, 235], [48, 49], [49, 64], [64, 48], [42, 41], [41, 74], [74, 42], [214, 212], [212, 207], [207, 214], [183, 42], [42, 184], [184, 183], [210, 169], [169, 211], [211, 210], [140, 170], [170, 176], [176, 140], [104, 105], [105, 69], [69, 104], [193, 122], [122, 168], [168, 193], [50, 123], [123, 187], [187, 50], [89, 96], [96, 90], [90, 89], [66, 65], [65, 107], [107, 66], [179, 89], [89, 180], [180, 179], [119, 101], [101, 120], [120, 119], [68, 63], [63, 104], [104, 68], [234, 93], [93, 227], [227, 234], [16, 15], [15, 85], [85, 16], [209, 129], [129, 49], [49, 209], [15, 14], [14, 86], [86, 15], [107, 55], [55, 9], [9, 107], [120, 100], [100, 121], [121, 120], [153, 145], [145, 22], [22, 153], [178, 88], [88, 179], [179, 178], [197, 6], [6, 196], [196, 197], [89, 88], [88, 96], [96, 89], [135, 138], [138, 136], [136, 135], [138, 215], [215, 172], [172, 138], [218, 115], [115, 219], [219, 218], [41, 42], [42, 81], [81, 41], [5, 195], [195, 51], [51, 5], [57, 43], [43, 61], [61, 57], [208, 171], [171, 199], [199, 208], [41, 81], [81, 38], [38, 41], [224, 53], [53, 225], [225, 224], [24, 144], [144, 110], [110, 24], [105, 52], [52, 66], [66, 105], [118, 229], [229, 117], [117, 118], [227, 34], [34, 234], [234, 227], [66, 107], [107, 69], [69, 66], [10, 109], [109, 151], [151, 10], [219, 48], [48, 235], [235, 219], [183, 62], [62, 191], [191, 183], [142, 129], [129, 126], [126, 142], [116, 111], [111, 143], [143, 116], [118, 117], [117, 50], [50, 118], [223, 222], [222, 52], [52, 223], [94, 19], [19, 141], [141, 94], [222, 221], [221, 65], [65, 222], [196, 3], [3, 197], [197, 196], [45, 220], [220, 44], [44, 45], [156, 70], [70, 139], [139, 156], [188, 122], [122, 245], [245, 188], [139, 71], [71, 162], [162, 139], [149, 170], [170, 150], [150, 149], [122, 188], [188, 196], [196, 122], [206, 216], [216, 92], [92, 206], [164, 2], [2, 167], [167, 164], [242, 141], [141, 241], [241, 242], [0, 164], [164, 37], [37, 0], [11, 72], [72, 12], [12, 11], [12, 38], [38, 13], [13, 12], [70, 63], [63, 71], [71, 70], [31, 226], [226, 111], [111, 31], [36, 101], [101, 205], [205, 36], [203, 206], [206, 165], [165, 203], [126, 209], [209, 217], [217, 126], [98, 165], [165, 97], [97, 98], [237, 220], [220, 218], [218, 237], [237, 239], [239, 241], [241, 237], [210, 214], [214, 169], [169, 210], [140, 171], [171, 32], [32, 140], [241, 125], [125, 237], [237, 241], [179, 86], [86, 178], [178, 179], [180, 85], [85, 179], [179, 180], [181, 84], [84, 180], [180, 181], [182, 83], [83, 181], [181, 182], [194, 201], [201, 182], [182, 194], [177, 137], [137, 132], [132, 177], [184, 76], [76, 183], [183, 184], [185, 61], [61, 184], [184, 185], [186, 57], [57, 185], [185, 186], [216, 212], [212, 186], [186, 216], [192, 214], [214, 187], [187, 192], [139, 34], [34, 156], [156, 139], [218, 79], [79, 237], [237, 218], [147, 123], [123, 177], [177, 147], [45, 44], [44, 4], [4, 45], [208, 201], [201, 32], [32, 208], [98, 64], [64, 129], [129, 98], [192, 213], [213, 138], [138, 192], [235, 59], [59, 219], [219, 235], [141, 242], [242, 97], [97, 141], [97, 2], [2, 141], [141, 97], [240, 75], [75, 235], [235, 240], [229, 24], [24, 228], [228, 229], [31, 25], [25, 226], [226, 31], [230, 23], [23, 229], [229, 230], [231, 22], [22, 230], [230, 231], [232, 26], [26, 231], [231, 232], [233, 112], [112, 232], [232, 233], [244, 189], [189, 243], [243, 244], [189, 221], [221, 190], [190, 189], [222, 28], [28, 221], [221, 222], [223, 27], [27, 222], [222, 223], [224, 29], [29, 223], [223, 224], [225, 30], [30, 224], [224, 225], [113, 247], [247, 225], [225, 113], [99, 60], [60, 240], [240, 99], [213, 147], [147, 215], [215, 213], [60, 20], [20, 166], [166, 60], [192, 187], [187, 213], [213, 192], [243, 112], [112, 244], [244, 243], [244, 233], [233, 245], [245, 244], [245, 128], [128, 188], [188, 245], [188, 114], [114, 174], [174, 188], [134, 131], [131, 220], [220, 134], [174, 217], [217, 236], [236, 174], [236, 198], [198, 134], [134, 236], [215, 177], [177, 58], [58, 215], [156, 143], [143, 124], [124, 156], [25, 110], [110, 7], [7, 25], [31, 228], [228, 25], [25, 31], [264, 356], [356, 368], [368, 264], [0, 11], [11, 267], [267, 0], [451, 452], [452, 349], [349, 451], [267, 302], [302, 269], [269, 267], [350, 357], [357, 277], [277, 350], [350, 452], [452, 357], [357, 350], [299, 333], [333, 297], [297, 299], [396, 175], [175, 377], [377, 396], [280, 347], [347, 330], [330, 280], [269, 303], [303, 270], [270, 269], [151, 9], [9, 337], [337, 151], [344, 278], [278, 360], [360, 344], [424, 418], [418, 431], [431, 424], [270, 304], [304, 409], [409, 270], [272, 310], [310, 407], [407, 272], [322, 270], [270, 410], [410, 322], [449, 450], [450, 347], [347, 449], [432, 422], [422, 434], [434, 432], [18, 313], [313, 17], [17, 18], [291, 306], [306, 375], [375, 291], [259, 387], [387, 260], [260, 259], [424, 335], [335, 418], [418, 424], [434, 364], [364, 416], [416, 434], [391, 423], [423, 327], [327, 391], [301, 251], [251, 298], [298, 301], [275, 281], [281, 4], [4, 275], [254, 373], [373, 253], [253, 254], [375, 307], [307, 321], [321, 375], [280, 425], [425, 411], [411, 280], [200, 421], [421, 18], [18, 200], [335, 321], [321, 406], [406, 335], [321, 320], [320, 405], [405, 321], [314, 315], [315, 17], [17, 314], [423, 426], [426, 266], [266, 423], [396, 377], [377, 369], [369, 396], [270, 322], [322, 269], [269, 270], [413, 417], [417, 464], [464, 413], [385, 386], [386, 258], [258, 385], [248, 456], [456, 419], [419, 248], [298, 284], [284, 333], [333, 298], [168, 417], [417, 8], [8, 168], [448, 346], [346, 261], [261, 448], [417, 413], [413, 285], [285, 417], [326, 327], [327, 328], [328, 326], [277, 355], [355, 329], [329, 277], [309, 392], [392, 438], [438, 309], [381, 382], [382, 256], [256, 381], [279, 429], [429, 360], [360, 279], [365, 364], [364, 379], [379, 365], [355, 277], [277, 437], [437, 355], [282, 443], [443, 283], [283, 282], [281, 275], [275, 363], [363, 281], [395, 431], [431, 369], [369, 395], [299, 297], [297, 337], [337, 299], [335, 273], [273, 321], [321, 335], [348, 450], [450, 349], [349, 348], [359, 446], [446, 467], [467, 359], [283, 293], [293, 282], [282, 283], [250, 458], [458, 462], [462, 250], [300, 276], [276, 383], [383, 300], [292, 308], [308, 325], [325, 292], [283, 276], [276, 293], [293, 283], [264, 372], [372, 447], [447, 264], [346, 352], [352, 340], [340, 346], [354, 274], [274, 19], [19, 354], [363, 456], [456, 281], [281, 363], [426, 436], [436, 425], [425, 426], [380, 381], [381, 252], [252, 380], [267, 269], [269, 393], [393, 267], [421, 200], [200, 428], [428, 421], [371, 266], [266, 329], [329, 371], [432, 287], [287, 422], [422, 432], [290, 250], [250, 328], [328, 290], [385, 258], [258, 384], [384, 385], [446, 265], [265, 342], [342, 446], [386, 387], [387, 257], [257, 386], [422, 424], [424, 430], [430, 422], [445, 342], [342, 276], [276, 445], [422, 273], [273, 424], [424, 422], [306, 292], [292, 307], [307, 306], [352, 366], [366, 345], [345, 352], [268, 271], [271, 302], [302, 268], [358, 423], [423, 371], [371, 358], [327, 294], [294, 460], [460, 327], [331, 279], [279, 294], [294, 331], [303, 271], [271, 304], [304, 303], [436, 432], [432, 427], [427, 436], [304, 272], [272, 408], [408, 304], [395, 394], [394, 431], [431, 395], [378, 395], [395, 400], [400, 378], [296, 334], [334, 299], [299, 296], [6, 351], [351, 168], [168, 6], [376, 352], [352, 411], [411, 376], [307, 325], [325, 320], [320, 307], [285, 295], [295, 336], [336, 285], [320, 319], [319, 404], [404, 320], [329, 330], [330, 349], [349, 329], [334, 293], [293, 333], [333, 334], [366, 323], [323, 447], [447, 366], [316, 15], [15, 315], [315, 316], [331, 358], [358, 279], [279, 331], [317, 14], [14, 316], [316, 317], [8, 285], [285, 9], [9, 8], [277, 329], [329, 350], [350, 277], [253, 374], [374, 252], [252, 253], [319, 318], [318, 403], [403, 319], [351, 6], [6, 419], [419, 351], [324, 318], [318, 325], [325, 324], [397, 367], [367, 365], [365, 397], [288, 435], [435, 397], [397, 288], [278, 344], [344, 439], [439, 278], [310, 272], [272, 311], [311, 310], [248, 195], [195, 281], [281, 248], [375, 273], [273, 291], [291, 375], [175, 396], [396, 199], [199, 175], [312, 311], [311, 268], [268, 312], [276, 283], [283, 445], [445, 276], [390, 373], [373, 339], [339, 390], [295, 282], [282, 296], [296, 295], [448, 449], [449, 346], [346, 448], [356, 264], [264, 454], [454, 356], [337, 336], [336, 299], [299, 337], [337, 338], [338, 151], [151, 337], [294, 278], [278, 455], [455, 294], [308, 292], [292, 415], [415, 308], [429, 358], [358, 355], [355, 429], [265, 340], [340, 372], [372, 265], [352, 346], [346, 280], [280, 352], [295, 442], [442, 282], [282, 295], [354, 19], [19, 370], [370, 354], [285, 441], [441, 295], [295, 285], [195, 248], [248, 197], [197, 195], [457, 440], [440, 274], [274, 457], [301, 300], [300, 368], [368, 301], [417, 351], [351, 465], [465, 417], [251, 301], [301, 389], [389, 251], [394, 395], [395, 379], [379, 394], [399, 412], [412, 419], [419, 399], [410, 436], [436, 322], [322, 410], [326, 2], [2, 393], [393, 326], [354, 370], [370, 461], [461, 354], [393, 164], [164, 267], [267, 393], [268, 302], [302, 12], [12, 268], [312, 268], [268, 13], [13, 312], [298, 293], [293, 301], [301, 298], [265, 446], [446, 340], [340, 265], [280, 330], [330, 425], [425, 280], [322, 426], [426, 391], [391, 322], [420, 429], [429, 437], [437, 420], [393, 391], [391, 326], [326, 393], [344, 440], [440, 438], [438, 344], [458, 459], [459, 461], [461, 458], [364, 434], [434, 394], [394, 364], [428, 396], [396, 262], [262, 428], [274, 354], [354, 457], [457, 274], [317, 316], [316, 402], [402, 317], [316, 315], [315, 403], [403, 316], [315, 314], [314, 404], [404, 315], [314, 313], [313, 405], [405, 314], [313, 421], [421, 406], [406, 313], [323, 366], [366, 361], [361, 323], [292, 306], [306, 407], [407, 292], [306, 291], [291, 408], [408, 306], [291, 287], [287, 409], [409, 291], [287, 432], [432, 410], [410, 287], [427, 434], [434, 411], [411, 427], [372, 264], [264, 383], [383, 372], [459, 309], [309, 457], [457, 459], [366, 352], [352, 401], [401, 366], [1, 274], [274, 4], [4, 1], [418, 421], [421, 262], [262, 418], [331, 294], [294, 358], [358, 331], [435, 433], [433, 367], [367, 435], [392, 289], [289, 439], [439, 392], [328, 462], [462, 326], [326, 328], [94, 2], [2, 370], [370, 94], [289, 305], [305, 455], [455, 289], [339, 254], [254, 448], [448, 339], [359, 255], [255, 446], [446, 359], [254, 253], [253, 449], [449, 254], [253, 252], [252, 450], [450, 253], [252, 256], [256, 451], [451, 252], [256, 341], [341, 452], [452, 256], [414, 413], [413, 463], [463, 414], [286, 441], [441, 414], [414, 286], [286, 258], [258, 441], [441, 286], [258, 257], [257, 442], [442, 258], [257, 259], [259, 443], [443, 257], [259, 260], [260, 444], [444, 259], [260, 467], [467, 445], [445, 260], [309, 459], [459, 250], [250, 309], [305, 289], [289, 290], [290, 305], [305, 290], [290, 460], [460, 305], [401, 376], [376, 435], [435, 401], [309, 250], [250, 392], [392, 309], [376, 411], [411, 433], [433, 376], [453, 341], [341, 464], [464, 453], [357, 453], [453, 465], [465, 357], [343, 357], [357, 412], [412, 343], [437, 343], [343, 399], [399, 437], [344, 360], [360, 440], [440, 344], [420, 437], [437, 456], [456, 420], [360, 420], [420, 363], [363, 360], [361, 401], [401, 288], [288, 361], [265, 372], [372, 353], [353, 265], [390, 339], [339, 249], [249, 390], [339, 448], [448, 255], [255, 339]]), L("matrixDataToMatrix", function(F) {
    for (var K = F.getCols(), J = F.getRows(), V = F.getPackedDataList(), BA = [], j = 0; j < J; j++)
      BA.push(Array(K));
    for (j = 0; j < J; j++)
      for (var sA = 0; sA < K; sA++) {
        var wA = F.getLayout() === 1 ? j * K + sA : sA * J + j;
        BA[j][sA] = V[wA];
      }
    return BA;
  }), L("VERSION", "0.4.1633559619");
}).call(Ae);
class PR {
  constructor(A) {
    this.detectResolve = null;
    let g = vR.FaceMesh;
    g === void 0 && (console.log("FaceMesh undefined, using window.FaceMesh"), g = window.FaceMesh), this.faceMesh = new g({ locateFile: (I) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh@0.4/${I}` }), console.log("flipFace", A), this.faceMesh.setOptions({ maxNumFaces: 1, refineLandmarks: !1, minDetectionConfidence: 0.5, minTrackingConfidence: 0.5, selfieMode: A }), this.faceMesh.onResults((I) => {
      this.detectResolve && this.detectResolve(I);
    });
  }
  async detect(A) {
    return await new Promise((g, I) => {
      this.detectResolve = g, this.faceMesh.send({ image: A });
    });
  }
}
var Ki, wl = (Ki = typeof document < "u" && document.currentScript ? document.currentScript.src : void 0, typeof __filename < "u" && (Ki = Ki || __filename), function(C) {
  var A, g, I = (C = C || {}) !== void 0 ? C : {};
  I.ready = new Promise(function(n, c) {
    A = n, g = c;
  });
  var B, Q = {};
  for (B in I)
    I.hasOwnProperty(B) && (Q[B] = I[B]);
  var E, i = "./this.program", o = !1, t = !1, e = !1;
  o = typeof window == "object", t = typeof importScripts == "function", e = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", E = !o && !e && !t;
  var s, a, r, h, w, G = "";
  e ? (G = t ? require("path").dirname(G) + "/" : __dirname + "/", s = function(n, c) {
    var y = MQ(n);
    return y ? c ? y : y.toString() : (h || (h = require("fs")), w || (w = require("path")), n = w.normalize(n), h.readFileSync(n, c ? null : "utf8"));
  }, r = function(n) {
    var c = s(n, !0);
    return c.buffer || (c = new Uint8Array(c)), M(c.buffer), c;
  }, process.argv.length > 1 && (i = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("uncaughtException", function(n) {
    if (!(n instanceof LD))
      throw n;
  }), process.on("unhandledRejection", hg), I.inspect = function() {
    return "[Emscripten Module object]";
  }) : E ? (typeof read < "u" && (s = function(n) {
    var c = MQ(n);
    return c ? MD(c) : read(n);
  }), r = function(n) {
    var c;
    return (c = MQ(n)) ? c : typeof readbuffer == "function" ? new Uint8Array(readbuffer(n)) : (M(typeof (c = read(n, "binary")) == "object"), c);
  }, typeof scriptArgs < "u" && scriptArgs, typeof print < "u" && (typeof console > "u" && (console = {}), console.log = print, console.warn = console.error = typeof printErr < "u" ? printErr : print)) : (o || t) && (t ? G = self.location.href : typeof document < "u" && document.currentScript && (G = document.currentScript.src), Ki && (G = Ki), G = G.indexOf("blob:") !== 0 ? G.substr(0, G.lastIndexOf("/") + 1) : "", s = function(n) {
    try {
      var c = new XMLHttpRequest();
      return c.open("GET", n, !1), c.send(null), c.responseText;
    } catch (R) {
      var y = MQ(n);
      if (y)
        return MD(y);
      throw R;
    }
  }, t && (r = function(n) {
    try {
      var c = new XMLHttpRequest();
      return c.open("GET", n, !1), c.responseType = "arraybuffer", c.send(null), new Uint8Array(c.response);
    } catch (R) {
      var y = MQ(n);
      if (y)
        return y;
      throw R;
    }
  }), a = function(n, c, y) {
    var R = new XMLHttpRequest();
    R.open("GET", n, !0), R.responseType = "arraybuffer", R.onload = function() {
      if (R.status == 200 || R.status == 0 && R.response)
        c(R.response);
      else {
        var S = MQ(n);
        S ? c(S.buffer) : y();
      }
    }, R.onerror = y, R.send(null);
  });
  var D = I.print || console.log.bind(console), l = I.printErr || console.warn.bind(console);
  for (B in Q)
    Q.hasOwnProperty(B) && (I[B] = Q[B]);
  Q = null, I.arguments && I.arguments, I.thisProgram && (i = I.thisProgram), I.quit && I.quit;
  var d, N, k = 16;
  function p(n) {
    p.shown || (p.shown = {}), p.shown[n] || (p.shown[n] = 1, l(n));
  }
  I.wasmBinary && (d = I.wasmBinary), I.noExitRuntime && I.noExitRuntime, typeof WebAssembly != "object" && hg("no native wasm support detected");
  var Y = !1;
  function M(n, c) {
    n || hg("Assertion failed: " + c);
  }
  var L = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;
  function m(n, c, y) {
    for (var R = c + y, S = c; n[S] && !(S >= R); )
      ++S;
    if (S - c > 16 && n.subarray && L)
      return L.decode(n.subarray(c, S));
    for (var U = ""; c < S; ) {
      var b = n[c++];
      if (128 & b) {
        var q = 63 & n[c++];
        if ((224 & b) != 192) {
          var H = 63 & n[c++];
          if ((b = (240 & b) == 224 ? (15 & b) << 12 | q << 6 | H : (7 & b) << 18 | q << 12 | H << 6 | 63 & n[c++]) < 65536)
            U += String.fromCharCode(b);
          else {
            var iA = b - 65536;
            U += String.fromCharCode(55296 | iA >> 10, 56320 | 1023 & iA);
          }
        } else
          U += String.fromCharCode((31 & b) << 6 | q);
      } else
        U += String.fromCharCode(b);
    }
    return U;
  }
  function x(n, c) {
    return n ? m(_, n, c) : "";
  }
  function T(n, c, y, R) {
    if (!(R > 0))
      return 0;
    for (var S = y, U = y + R - 1, b = 0; b < n.length; ++b) {
      var q = n.charCodeAt(b);
      if (q >= 55296 && q <= 57343 && (q = 65536 + ((1023 & q) << 10) | 1023 & n.charCodeAt(++b)), q <= 127) {
        if (y >= U)
          break;
        c[y++] = q;
      } else if (q <= 2047) {
        if (y + 1 >= U)
          break;
        c[y++] = 192 | q >> 6, c[y++] = 128 | 63 & q;
      } else if (q <= 65535) {
        if (y + 2 >= U)
          break;
        c[y++] = 224 | q >> 12, c[y++] = 128 | q >> 6 & 63, c[y++] = 128 | 63 & q;
      } else {
        if (y + 3 >= U)
          break;
        c[y++] = 240 | q >> 18, c[y++] = 128 | q >> 12 & 63, c[y++] = 128 | q >> 6 & 63, c[y++] = 128 | 63 & q;
      }
    }
    return c[y] = 0, y - S;
  }
  function Z(n, c, y) {
    return T(n, _, c, y);
  }
  function $(n) {
    for (var c = 0, y = 0; y < n.length; ++y) {
      var R = n.charCodeAt(y);
      R >= 55296 && R <= 57343 && (R = 65536 + ((1023 & R) << 10) | 1023 & n.charCodeAt(++y)), R <= 127 ? ++c : c += R <= 2047 ? 2 : R <= 65535 ? 3 : 4;
    }
    return c;
  }
  var AA, P, _, QA, tA, O, rA, eA, DA, GA, NA = typeof TextDecoder < "u" ? new TextDecoder("utf-16le") : void 0;
  function UA(n, c) {
    for (var y = n, R = y >> 1, S = R + c / 2; !(R >= S) && tA[R]; )
      ++R;
    if ((y = R << 1) - n > 32 && NA)
      return NA.decode(_.subarray(n, y));
    for (var U = "", b = 0; !(b >= c / 2); ++b) {
      var q = QA[n + 2 * b >> 1];
      if (q == 0)
        break;
      U += String.fromCharCode(q);
    }
    return U;
  }
  function pA(n, c, y) {
    if (y === void 0 && (y = 2147483647), y < 2)
      return 0;
    for (var R = c, S = (y -= 2) < 2 * n.length ? y / 2 : n.length, U = 0; U < S; ++U) {
      var b = n.charCodeAt(U);
      QA[c >> 1] = b, c += 2;
    }
    return QA[c >> 1] = 0, c - R;
  }
  function XA(n) {
    return 2 * n.length;
  }
  function WA(n, c) {
    for (var y = 0, R = ""; !(y >= c / 4); ) {
      var S = O[n + 4 * y >> 2];
      if (S == 0)
        break;
      if (++y, S >= 65536) {
        var U = S - 65536;
        R += String.fromCharCode(55296 | U >> 10, 56320 | 1023 & U);
      } else
        R += String.fromCharCode(S);
    }
    return R;
  }
  function PA(n, c, y) {
    if (y === void 0 && (y = 2147483647), y < 4)
      return 0;
    for (var R = c, S = R + y - 4, U = 0; U < n.length; ++U) {
      var b = n.charCodeAt(U);
      if (b >= 55296 && b <= 57343 && (b = 65536 + ((1023 & b) << 10) | 1023 & n.charCodeAt(++U)), O[c >> 2] = b, (c += 4) + 4 > S)
        break;
    }
    return O[c >> 2] = 0, c - R;
  }
  function fA(n) {
    for (var c = 0, y = 0; y < n.length; ++y) {
      var R = n.charCodeAt(y);
      R >= 55296 && R <= 57343 && ++y, c += 4;
    }
    return c;
  }
  function gg(n) {
    AA = n, I.HEAP8 = P = new Int8Array(n), I.HEAP16 = QA = new Int16Array(n), I.HEAP32 = O = new Int32Array(n), I.HEAPU8 = _ = new Uint8Array(n), I.HEAPU16 = tA = new Uint16Array(n), I.HEAPU32 = rA = new Uint32Array(n), I.HEAPF32 = eA = new Float32Array(n), I.HEAPF64 = DA = new Float64Array(n);
  }
  I.INITIAL_MEMORY;
  var Bg = [], lg = [], jA = [], eg = [], rg = 0, Wg = null;
  function Yg(n) {
    rg++, I.monitorRunDependencies && I.monitorRunDependencies(rg);
  }
  function Xg(n) {
    if (rg--, I.monitorRunDependencies && I.monitorRunDependencies(rg), rg == 0 && Wg) {
      var c = Wg;
      Wg = null, c();
    }
  }
  function hg(n) {
    I.onAbort && I.onAbort(n), l(n += ""), Y = !0, n = "abort(" + n + "). Build with -s ASSERTIONS=1 for more info.";
    var c = new WebAssembly.RuntimeError(n);
    throw g(c), c;
  }
  function wI(n, c) {
    return String.prototype.startsWith ? n.startsWith(c) : n.indexOf(c) === 0;
  }
  I.preloadedImages = {}, I.preloadedAudios = {};
  var yI = "data:application/octet-stream;base64,";
  function FI(n) {
    return wI(n, yI);
  }
  var VI = "file://";
  function JI(n) {
    return wI(n, VI);
  }
  var fI, nI, dI, gI, pI = "data:application/octet-stream;base64,";
  function bC() {
    try {
      if (d)
        return new Uint8Array(d);
      var n = MQ(pI);
      if (n)
        return n;
      if (r)
        return r(pI);
      throw "both async and sync fetching of the wasm failed";
    } catch (c) {
      hg(c);
    }
  }
  function Og(n, c) {
    if (EA.mainLoop.timingMode = n, EA.mainLoop.timingValue = c, !EA.mainLoop.func)
      return 1;
    if (n == 0)
      EA.mainLoop.scheduler = function() {
        var S = 0 | Math.max(0, EA.mainLoop.tickStartTime + c - gI());
        setTimeout(EA.mainLoop.runner, S);
      }, EA.mainLoop.method = "timeout";
    else if (n == 1)
      EA.mainLoop.scheduler = function() {
        EA.requestAnimationFrame(EA.mainLoop.runner);
      }, EA.mainLoop.method = "rAF";
    else if (n == 2) {
      if (typeof setImmediate > "u") {
        var y = [], R = "setimmediate";
        addEventListener("message", function(S) {
          S.data !== R && S.data.target !== R || (S.stopPropagation(), y.shift()());
        }, !0), setImmediate = function(S) {
          y.push(S), t ? (I.setImmediates === void 0 && (I.setImmediates = []), I.setImmediates.push(S), postMessage({ target: R })) : postMessage(R, "*");
        };
      }
      EA.mainLoop.scheduler = function() {
        setImmediate(EA.mainLoop.runner);
      }, EA.mainLoop.method = "immediate";
    }
    return 0;
  }
  FI(pI) || (fI = pI, pI = I.locateFile ? I.locateFile(fI, G) : G + fI), gI = e ? function() {
    var n = process.hrtime();
    return 1e3 * n[0] + n[1] / 1e6;
  } : typeof dateNow < "u" ? dateNow : function() {
    return performance.now();
  };
  var EA = { mainLoop: { scheduler: null, method: "", currentlyRunningMainloop: 0, func: null, arg: 0, timingMode: 0, timingValue: 0, currentFrameNumber: 0, queue: [], pause: function() {
    EA.mainLoop.scheduler = null, EA.mainLoop.currentlyRunningMainloop++;
  }, resume: function() {
    EA.mainLoop.currentlyRunningMainloop++;
    var n = EA.mainLoop.timingMode, c = EA.mainLoop.timingValue, y = EA.mainLoop.func;
    EA.mainLoop.func = null, function(R, S, U, b, q) {
      M(!EA.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters."), EA.mainLoop.func = R, EA.mainLoop.arg = b;
      var H = EA.mainLoop.currentlyRunningMainloop;
      if (EA.mainLoop.runner = function() {
        if (!Y)
          if (EA.mainLoop.queue.length > 0) {
            var iA = Date.now(), nA = EA.mainLoop.queue.shift();
            if (nA.func(nA.arg), EA.mainLoop.remainingBlockers) {
              var FA = EA.mainLoop.remainingBlockers, lA = FA % 1 == 0 ? FA - 1 : Math.floor(FA);
              nA.counted ? EA.mainLoop.remainingBlockers = lA : (lA += 0.5, EA.mainLoop.remainingBlockers = (8 * FA + lA) / 9);
            }
            if (console.log('main loop blocker "' + nA.name + '" took ' + (Date.now() - iA) + " ms"), EA.mainLoop.updateStatus(), H < EA.mainLoop.currentlyRunningMainloop)
              return;
            setTimeout(EA.mainLoop.runner, 0);
          } else
            H < EA.mainLoop.currentlyRunningMainloop || (EA.mainLoop.currentFrameNumber = EA.mainLoop.currentFrameNumber + 1 | 0, EA.mainLoop.timingMode == 1 && EA.mainLoop.timingValue > 1 && EA.mainLoop.currentFrameNumber % EA.mainLoop.timingValue != 0 ? EA.mainLoop.scheduler() : (EA.mainLoop.timingMode == 0 && (EA.mainLoop.tickStartTime = gI()), EA.mainLoop.runIter(R), H < EA.mainLoop.currentlyRunningMainloop || (typeof SDL == "object" && SDL.audio && SDL.audio.queueNewAudioData && SDL.audio.queueNewAudioData(), EA.mainLoop.scheduler())));
      }, q || (S && S > 0 ? Og(0, 1e3 / S) : Og(1, 1), EA.mainLoop.scheduler()), U)
        throw "unwind";
    }(y, 0, !1, EA.mainLoop.arg, !0), Og(n, c), EA.mainLoop.scheduler();
  }, updateStatus: function() {
    if (I.setStatus) {
      var n = I.statusMessage || "Please wait...", c = EA.mainLoop.remainingBlockers, y = EA.mainLoop.expectedBlockers;
      c ? c < y ? I.setStatus(n + " (" + (y - c) + "/" + y + ")") : I.setStatus(n) : I.setStatus("");
    }
  }, runIter: function(n) {
    if (!Y) {
      if (I.preMainLoop && I.preMainLoop() === !1)
        return;
      try {
        n();
      } catch (c) {
        if (c instanceof LD || c == "unwind")
          return;
        throw c && typeof c == "object" && c.stack && l("exception thrown: " + [c, c.stack]), c;
      }
      I.postMainLoop && I.postMainLoop();
    }
  } }, isFullscreen: !1, pointerLock: !1, moduleContextCreatedCallbacks: [], workers: [], init: function() {
    if (I.preloadPlugins || (I.preloadPlugins = []), !EA.initted) {
      EA.initted = !0;
      try {
        new Blob(), EA.hasBlobConstructor = !0;
      } catch {
        EA.hasBlobConstructor = !1, console.log("warning: no blob constructor, cannot create blobs with mimetypes");
      }
      EA.BlobBuilder = typeof MozBlobBuilder < "u" ? MozBlobBuilder : typeof WebKitBlobBuilder < "u" ? WebKitBlobBuilder : EA.hasBlobConstructor ? null : console.log("warning: no BlobBuilder"), EA.URLObject = typeof window < "u" ? window.URL ? window.URL : window.webkitURL : void 0, I.noImageDecoding || EA.URLObject !== void 0 || (console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."), I.noImageDecoding = !0);
      var n = { canHandle: function(S) {
        return !I.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(S);
      }, handle: function(S, U, b, q) {
        var H = null;
        if (EA.hasBlobConstructor)
          try {
            (H = new Blob([S], { type: EA.getMimetype(U) })).size !== S.length && (H = new Blob([new Uint8Array(S).buffer], { type: EA.getMimetype(U) }));
          } catch (lA) {
            p("Blob constructor present but fails: " + lA + "; falling back to blob builder");
          }
        if (!H) {
          var iA = new EA.BlobBuilder();
          iA.append(new Uint8Array(S).buffer), H = iA.getBlob();
        }
        var nA = EA.URLObject.createObjectURL(H), FA = new Image();
        FA.onload = function() {
          M(FA.complete, "Image " + U + " could not be decoded");
          var lA = document.createElement("canvas");
          lA.width = FA.width, lA.height = FA.height, lA.getContext("2d").drawImage(FA, 0, 0), I.preloadedImages[U] = lA, EA.URLObject.revokeObjectURL(nA), b && b(S);
        }, FA.onerror = function(lA) {
          console.log("Image " + nA + " could not be decoded"), q && q();
        }, FA.src = nA;
      } };
      I.preloadPlugins.push(n);
      var c = { canHandle: function(S) {
        return !I.noAudioDecoding && S.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 };
      }, handle: function(S, U, b, q) {
        var H = !1;
        function iA(Ag) {
          H || (H = !0, I.preloadedAudios[U] = Ag, b && b(S));
        }
        function nA() {
          H || (H = !0, I.preloadedAudios[U] = new Audio(), q && q());
        }
        if (!EA.hasBlobConstructor)
          return nA();
        try {
          var FA = new Blob([S], { type: EA.getMimetype(U) });
        } catch {
          return nA();
        }
        var lA = EA.URLObject.createObjectURL(FA), HA = new Audio();
        HA.addEventListener("canplaythrough", function() {
          iA(HA);
        }, !1), HA.onerror = function(Ag) {
          H || (console.log("warning: browser could not fully decode audio " + U + ", trying slower base64 approach"), HA.src = "data:audio/x-" + U.substr(-3) + ";base64," + function(sg) {
            for (var fg = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", ag = "", yA = 0, xA = 0, _g = 0; _g < sg.length; _g++)
              for (yA = yA << 8 | sg[_g], xA += 8; xA >= 6; ) {
                var Vg = yA >> xA - 6 & 63;
                xA -= 6, ag += fg[Vg];
              }
            return xA == 2 ? (ag += fg[(3 & yA) << 4], ag += "==") : xA == 4 && (ag += fg[(15 & yA) << 2], ag += "="), ag;
          }(S), iA(HA));
        }, HA.src = lA, EA.safeSetTimeout(function() {
          iA(HA);
        }, 1e4);
      } };
      I.preloadPlugins.push(c);
      var y = I.canvas;
      y && (y.requestPointerLock = y.requestPointerLock || y.mozRequestPointerLock || y.webkitRequestPointerLock || y.msRequestPointerLock || function() {
      }, y.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock || document.msExitPointerLock || function() {
      }, y.exitPointerLock = y.exitPointerLock.bind(document), document.addEventListener("pointerlockchange", R, !1), document.addEventListener("mozpointerlockchange", R, !1), document.addEventListener("webkitpointerlockchange", R, !1), document.addEventListener("mspointerlockchange", R, !1), I.elementPointerLock && y.addEventListener("click", function(S) {
        !EA.pointerLock && I.canvas.requestPointerLock && (I.canvas.requestPointerLock(), S.preventDefault());
      }, !1));
    }
    function R() {
      EA.pointerLock = document.pointerLockElement === I.canvas || document.mozPointerLockElement === I.canvas || document.webkitPointerLockElement === I.canvas || document.msPointerLockElement === I.canvas;
    }
  }, createContext: function(n, c, y, R) {
    if (c && I.ctx && n == I.canvas)
      return I.ctx;
    var S, U;
    if (c) {
      var b = { antialias: !1, alpha: !1, majorVersion: 1 };
      if (R)
        for (var q in R)
          b[q] = R[q];
      typeof GL < "u" && (U = GL.createContext(n, b)) && (S = GL.getContext(U).GLctx);
    } else
      S = n.getContext("2d");
    return S ? (y && (c || M(typeof GLctx > "u", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it"), I.ctx = S, c && GL.makeContextCurrent(U), I.useWebGL = c, EA.moduleContextCreatedCallbacks.forEach(function(H) {
      H();
    }), EA.init()), S) : null;
  }, destroyContext: function(n, c, y) {
  }, fullscreenHandlersInstalled: !1, lockPointer: void 0, resizeCanvas: void 0, requestFullscreen: function(n, c) {
    EA.lockPointer = n, EA.resizeCanvas = c, EA.lockPointer === void 0 && (EA.lockPointer = !0), EA.resizeCanvas === void 0 && (EA.resizeCanvas = !1);
    var y = I.canvas;
    function R() {
      EA.isFullscreen = !1;
      var U = y.parentNode;
      (document.fullscreenElement || document.mozFullScreenElement || document.msFullscreenElement || document.webkitFullscreenElement || document.webkitCurrentFullScreenElement) === U ? (y.exitFullscreen = EA.exitFullscreen, EA.lockPointer && y.requestPointerLock(), EA.isFullscreen = !0, EA.resizeCanvas ? EA.setFullscreenCanvasSize() : EA.updateCanvasDimensions(y)) : (U.parentNode.insertBefore(y, U), U.parentNode.removeChild(U), EA.resizeCanvas ? EA.setWindowedCanvasSize() : EA.updateCanvasDimensions(y)), I.onFullScreen && I.onFullScreen(EA.isFullscreen), I.onFullscreen && I.onFullscreen(EA.isFullscreen);
    }
    EA.fullscreenHandlersInstalled || (EA.fullscreenHandlersInstalled = !0, document.addEventListener("fullscreenchange", R, !1), document.addEventListener("mozfullscreenchange", R, !1), document.addEventListener("webkitfullscreenchange", R, !1), document.addEventListener("MSFullscreenChange", R, !1));
    var S = document.createElement("div");
    y.parentNode.insertBefore(S, y), S.appendChild(y), S.requestFullscreen = S.requestFullscreen || S.mozRequestFullScreen || S.msRequestFullscreen || (S.webkitRequestFullscreen ? function() {
      S.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    } : null) || (S.webkitRequestFullScreen ? function() {
      S.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
    } : null), S.requestFullscreen();
  }, exitFullscreen: function() {
    return !!EA.isFullscreen && ((document.exitFullscreen || document.cancelFullScreen || document.mozCancelFullScreen || document.msExitFullscreen || document.webkitCancelFullScreen || function() {
    }).apply(document, []), !0);
  }, nextRAF: 0, fakeRequestAnimationFrame: function(n) {
    var c = Date.now();
    if (EA.nextRAF === 0)
      EA.nextRAF = c + 1e3 / 60;
    else
      for (; c + 2 >= EA.nextRAF; )
        EA.nextRAF += 1e3 / 60;
    var y = Math.max(EA.nextRAF - c, 0);
    setTimeout(n, y);
  }, requestAnimationFrame: function(n) {
    typeof requestAnimationFrame != "function" ? (0, EA.fakeRequestAnimationFrame)(n) : requestAnimationFrame(n);
  }, safeCallback: function(n) {
    return function() {
      if (!Y)
        return n.apply(null, arguments);
    };
  }, allowAsyncCallbacks: !0, queuedAsyncCallbacks: [], pauseAsyncCallbacks: function() {
    EA.allowAsyncCallbacks = !1;
  }, resumeAsyncCallbacks: function() {
    if (EA.allowAsyncCallbacks = !0, EA.queuedAsyncCallbacks.length > 0) {
      var n = EA.queuedAsyncCallbacks;
      EA.queuedAsyncCallbacks = [], n.forEach(function(c) {
        c();
      });
    }
  }, safeRequestAnimationFrame: function(n) {
    return EA.requestAnimationFrame(function() {
      Y || (EA.allowAsyncCallbacks ? n() : EA.queuedAsyncCallbacks.push(n));
    });
  }, safeSetTimeout: function(n, c) {
    return setTimeout(function() {
      Y || (EA.allowAsyncCallbacks ? n() : EA.queuedAsyncCallbacks.push(n));
    }, c);
  }, safeSetInterval: function(n, c) {
    return setInterval(function() {
      Y || EA.allowAsyncCallbacks && n();
    }, c);
  }, getMimetype: function(n) {
    return { jpg: "image/jpeg", jpeg: "image/jpeg", png: "image/png", bmp: "image/bmp", ogg: "audio/ogg", wav: "audio/wav", mp3: "audio/mpeg" }[n.substr(n.lastIndexOf(".") + 1)];
  }, getUserMedia: function(n) {
    window.getUserMedia || (window.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia), window.getUserMedia(n);
  }, getMovementX: function(n) {
    return n.movementX || n.mozMovementX || n.webkitMovementX || 0;
  }, getMovementY: function(n) {
    return n.movementY || n.mozMovementY || n.webkitMovementY || 0;
  }, getMouseWheelDelta: function(n) {
    var c = 0;
    switch (n.type) {
      case "DOMMouseScroll":
        c = n.detail / 3;
        break;
      case "mousewheel":
        c = n.wheelDelta / 120;
        break;
      case "wheel":
        switch (c = n.deltaY, n.deltaMode) {
          case 0:
            c /= 100;
            break;
          case 1:
            c /= 3;
            break;
          case 2:
            c *= 80;
            break;
          default:
            throw "unrecognized mouse wheel delta mode: " + n.deltaMode;
        }
        break;
      default:
        throw "unrecognized mouse wheel event: " + n.type;
    }
    return c;
  }, mouseX: 0, mouseY: 0, mouseMovementX: 0, mouseMovementY: 0, touches: {}, lastTouches: {}, calculateMouseEvent: function(n) {
    if (EA.pointerLock)
      n.type != "mousemove" && "mozMovementX" in n ? EA.mouseMovementX = EA.mouseMovementY = 0 : (EA.mouseMovementX = EA.getMovementX(n), EA.mouseMovementY = EA.getMovementY(n)), typeof SDL < "u" ? (EA.mouseX = SDL.mouseX + EA.mouseMovementX, EA.mouseY = SDL.mouseY + EA.mouseMovementY) : (EA.mouseX += EA.mouseMovementX, EA.mouseY += EA.mouseMovementY);
    else {
      var c = I.canvas.getBoundingClientRect(), y = I.canvas.width, R = I.canvas.height, S = window.scrollX !== void 0 ? window.scrollX : window.pageXOffset, U = window.scrollY !== void 0 ? window.scrollY : window.pageYOffset;
      if (n.type === "touchstart" || n.type === "touchend" || n.type === "touchmove") {
        var b = n.touch;
        if (b === void 0)
          return;
        var q = b.pageX - (S + c.left), H = b.pageY - (U + c.top), iA = { x: q *= y / c.width, y: H *= R / c.height };
        if (n.type === "touchstart")
          EA.lastTouches[b.identifier] = iA, EA.touches[b.identifier] = iA;
        else if (n.type === "touchend" || n.type === "touchmove") {
          var nA = EA.touches[b.identifier];
          nA || (nA = iA), EA.lastTouches[b.identifier] = nA, EA.touches[b.identifier] = iA;
        }
        return;
      }
      var FA = n.pageX - (S + c.left), lA = n.pageY - (U + c.top);
      FA *= y / c.width, lA *= R / c.height, EA.mouseMovementX = FA - EA.mouseX, EA.mouseMovementY = lA - EA.mouseY, EA.mouseX = FA, EA.mouseY = lA;
    }
  }, asyncLoad: function(n, c, y, R) {
    var S = R ? "" : "al " + n;
    a(n, function(U) {
      M(U, 'Loading data file "' + n + '" failed (no arrayBuffer).'), c(new Uint8Array(U)), S && Xg();
    }, function(U) {
      if (!y)
        throw 'Loading data file "' + n + '" failed.';
      y();
    }), S && Yg();
  }, resizeListeners: [], updateResizeListeners: function() {
    var n = I.canvas;
    EA.resizeListeners.forEach(function(c) {
      c(n.width, n.height);
    });
  }, setCanvasSize: function(n, c, y) {
    var R = I.canvas;
    EA.updateCanvasDimensions(R, n, c), y || EA.updateResizeListeners();
  }, windowedWidth: 0, windowedHeight: 0, setFullscreenCanvasSize: function() {
    if (typeof SDL < "u") {
      var n = rA[SDL.screen >> 2];
      n |= 8388608, O[SDL.screen >> 2] = n;
    }
    EA.updateCanvasDimensions(I.canvas), EA.updateResizeListeners();
  }, setWindowedCanvasSize: function() {
    if (typeof SDL < "u") {
      var n = rA[SDL.screen >> 2];
      n &= -8388609, O[SDL.screen >> 2] = n;
    }
    EA.updateCanvasDimensions(I.canvas), EA.updateResizeListeners();
  }, updateCanvasDimensions: function(n, c, y) {
    c && y ? (n.widthNative = c, n.heightNative = y) : (c = n.widthNative, y = n.heightNative);
    var R = c, S = y;
    if (I.forcedAspectRatio && I.forcedAspectRatio > 0 && (R / S < I.forcedAspectRatio ? R = Math.round(S * I.forcedAspectRatio) : S = Math.round(R / I.forcedAspectRatio)), (document.fullscreenElement || document.mozFullScreenElement || document.msFullscreenElement || document.webkitFullscreenElement || document.webkitCurrentFullScreenElement) === n.parentNode && typeof screen < "u") {
      var U = Math.min(screen.width / R, screen.height / S);
      R = Math.round(R * U), S = Math.round(S * U);
    }
    EA.resizeCanvas ? (n.width != R && (n.width = R), n.height != S && (n.height = S), n.style !== void 0 && (n.style.removeProperty("width"), n.style.removeProperty("height"))) : (n.width != c && (n.width = c), n.height != y && (n.height = y), n.style !== void 0 && (R != c || S != y ? (n.style.setProperty("width", R + "px", "important"), n.style.setProperty("height", S + "px", "important")) : (n.style.removeProperty("width"), n.style.removeProperty("height"))));
  }, wgetRequests: {}, nextWgetRequestHandle: 0, getNextWgetRequestHandle: function() {
    var n = EA.nextWgetRequestHandle;
    return EA.nextWgetRequestHandle++, n;
  } };
  function UB(n) {
    for (; n.length > 0; ) {
      var c = n.shift();
      if (typeof c != "function") {
        var y = c.func;
        typeof y == "number" ? c.arg === void 0 ? GA.get(y)() : GA.get(y)(c.arg) : y(c.arg === void 0 ? null : c.arg);
      } else
        c(I);
    }
  }
  var oA = { DESTRUCTOR_OFFSET: 0, REFCOUNT_OFFSET: 4, TYPE_OFFSET: 8, CAUGHT_OFFSET: 12, RETHROWN_OFFSET: 13, SIZE: 16 };
  function qA(n) {
    this.excPtr = n, this.ptr = n - oA.SIZE, this.set_type = function(c) {
      O[this.ptr + oA.TYPE_OFFSET >> 2] = c;
    }, this.get_type = function() {
      return O[this.ptr + oA.TYPE_OFFSET >> 2];
    }, this.set_destructor = function(c) {
      O[this.ptr + oA.DESTRUCTOR_OFFSET >> 2] = c;
    }, this.get_destructor = function() {
      return O[this.ptr + oA.DESTRUCTOR_OFFSET >> 2];
    }, this.set_refcount = function(c) {
      O[this.ptr + oA.REFCOUNT_OFFSET >> 2] = c;
    }, this.set_caught = function(c) {
      c = c ? 1 : 0, P[this.ptr + oA.CAUGHT_OFFSET >> 0] = c;
    }, this.get_caught = function() {
      return P[this.ptr + oA.CAUGHT_OFFSET >> 0] != 0;
    }, this.set_rethrown = function(c) {
      c = c ? 1 : 0, P[this.ptr + oA.RETHROWN_OFFSET >> 0] = c;
    }, this.get_rethrown = function() {
      return P[this.ptr + oA.RETHROWN_OFFSET >> 0] != 0;
    }, this.init = function(c, y) {
      this.set_type(c), this.set_destructor(y), this.set_refcount(0), this.set_caught(!1), this.set_rethrown(!1);
    }, this.add_ref = function() {
      var c = O[this.ptr + oA.REFCOUNT_OFFSET >> 2];
      O[this.ptr + oA.REFCOUNT_OFFSET >> 2] = c + 1;
    }, this.release_ref = function() {
      var c = O[this.ptr + oA.REFCOUNT_OFFSET >> 2];
      return O[this.ptr + oA.REFCOUNT_OFFSET >> 2] = c - 1, c === 1;
    };
  }
  function uA(n) {
    return O[JD() >> 2] = n, n;
  }
  var TA = { splitPath: function(n) {
    return /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(n).slice(1);
  }, normalizeArray: function(n, c) {
    for (var y = 0, R = n.length - 1; R >= 0; R--) {
      var S = n[R];
      S === "." ? n.splice(R, 1) : S === ".." ? (n.splice(R, 1), y++) : y && (n.splice(R, 1), y--);
    }
    if (c)
      for (; y; y--)
        n.unshift("..");
    return n;
  }, normalize: function(n) {
    var c = n.charAt(0) === "/", y = n.substr(-1) === "/";
    return n = TA.normalizeArray(n.split("/").filter(function(R) {
      return !!R;
    }), !c).join("/"), n || c || (n = "."), n && y && (n += "/"), (c ? "/" : "") + n;
  }, dirname: function(n) {
    var c = TA.splitPath(n), y = c[0], R = c[1];
    return y || R ? (R && (R = R.substr(0, R.length - 1)), y + R) : ".";
  }, basename: function(n) {
    if (n === "/")
      return "/";
    var c = (n = (n = TA.normalize(n)).replace(/\/$/, "")).lastIndexOf("/");
    return c === -1 ? n : n.substr(c + 1);
  }, extname: function(n) {
    return TA.splitPath(n)[3];
  }, join: function() {
    var n = Array.prototype.slice.call(arguments, 0);
    return TA.normalize(n.join("/"));
  }, join2: function(n, c) {
    return TA.normalize(n + "/" + c);
  } }, og = { resolve: function() {
    for (var n = "", c = !1, y = arguments.length - 1; y >= -1 && !c; y--) {
      var R = y >= 0 ? arguments[y] : u.cwd();
      if (typeof R != "string")
        throw new TypeError("Arguments to path.resolve must be strings");
      if (!R)
        return "";
      n = R + "/" + n, c = R.charAt(0) === "/";
    }
    return n = TA.normalizeArray(n.split("/").filter(function(S) {
      return !!S;
    }), !c).join("/"), (c ? "/" : "") + n || ".";
  }, relative: function(n, c) {
    function y(iA) {
      for (var nA = 0; nA < iA.length && iA[nA] === ""; nA++)
        ;
      for (var FA = iA.length - 1; FA >= 0 && iA[FA] === ""; FA--)
        ;
      return nA > FA ? [] : iA.slice(nA, FA - nA + 1);
    }
    n = og.resolve(n).substr(1), c = og.resolve(c).substr(1);
    for (var R = y(n.split("/")), S = y(c.split("/")), U = Math.min(R.length, S.length), b = U, q = 0; q < U; q++)
      if (R[q] !== S[q]) {
        b = q;
        break;
      }
    var H = [];
    for (q = b; q < R.length; q++)
      H.push("..");
    return (H = H.concat(S.slice(b))).join("/");
  } }, Dg = { ttys: [], init: function() {
  }, shutdown: function() {
  }, register: function(n, c) {
    Dg.ttys[n] = { input: [], output: [], ops: c }, u.registerDevice(n, Dg.stream_ops);
  }, stream_ops: { open: function(n) {
    var c = Dg.ttys[n.node.rdev];
    if (!c)
      throw new u.ErrnoError(43);
    n.tty = c, n.seekable = !1;
  }, close: function(n) {
    n.tty.ops.flush(n.tty);
  }, flush: function(n) {
    n.tty.ops.flush(n.tty);
  }, read: function(n, c, y, R, S) {
    if (!n.tty || !n.tty.ops.get_char)
      throw new u.ErrnoError(60);
    for (var U = 0, b = 0; b < R; b++) {
      var q;
      try {
        q = n.tty.ops.get_char(n.tty);
      } catch {
        throw new u.ErrnoError(29);
      }
      if (q === void 0 && U === 0)
        throw new u.ErrnoError(6);
      if (q == null)
        break;
      U++, c[y + b] = q;
    }
    return U && (n.node.timestamp = Date.now()), U;
  }, write: function(n, c, y, R, S) {
    if (!n.tty || !n.tty.ops.put_char)
      throw new u.ErrnoError(60);
    try {
      for (var U = 0; U < R; U++)
        n.tty.ops.put_char(n.tty, c[y + U]);
    } catch {
      throw new u.ErrnoError(29);
    }
    return R && (n.node.timestamp = Date.now()), U;
  } }, default_tty_ops: { get_char: function(n) {
    if (!n.input.length) {
      var c = null;
      if (e) {
        var y = Buffer.alloc ? Buffer.alloc(256) : new Buffer(256), R = 0;
        try {
          R = h.readSync(process.stdin.fd, y, 0, 256, null);
        } catch (S) {
          if (S.toString().indexOf("EOF") == -1)
            throw S;
          R = 0;
        }
        c = R > 0 ? y.slice(0, R).toString("utf-8") : null;
      } else
        typeof window < "u" && typeof window.prompt == "function" ? (c = window.prompt("Input: ")) !== null && (c += `
`) : typeof readline == "function" && (c = readline()) !== null && (c += `
`);
      if (!c)
        return null;
      n.input = pt(c, !0);
    }
    return n.input.shift();
  }, put_char: function(n, c) {
    c === null || c === 10 ? (D(m(n.output, 0)), n.output = []) : c != 0 && n.output.push(c);
  }, flush: function(n) {
    n.output && n.output.length > 0 && (D(m(n.output, 0)), n.output = []);
  } }, default_tty1_ops: { put_char: function(n, c) {
    c === null || c === 10 ? (l(m(n.output, 0)), n.output = []) : c != 0 && n.output.push(c);
  }, flush: function(n) {
    n.output && n.output.length > 0 && (l(m(n.output, 0)), n.output = []);
  } } };
  function Rg(n) {
    for (var c = function(R, S) {
      return S || (S = k), Math.ceil(R / S) * S;
    }(n, 16384), y = ui(c); n < c; )
      P[y + n++] = 0;
    return y;
  }
  var KA = { ops_table: null, mount: function(n) {
    return KA.createNode(null, "/", 16895, 0);
  }, createNode: function(n, c, y, R) {
    if (u.isBlkdev(y) || u.isFIFO(y))
      throw new u.ErrnoError(63);
    KA.ops_table || (KA.ops_table = { dir: { node: { getattr: KA.node_ops.getattr, setattr: KA.node_ops.setattr, lookup: KA.node_ops.lookup, mknod: KA.node_ops.mknod, rename: KA.node_ops.rename, unlink: KA.node_ops.unlink, rmdir: KA.node_ops.rmdir, readdir: KA.node_ops.readdir, symlink: KA.node_ops.symlink }, stream: { llseek: KA.stream_ops.llseek } }, file: { node: { getattr: KA.node_ops.getattr, setattr: KA.node_ops.setattr }, stream: { llseek: KA.stream_ops.llseek, read: KA.stream_ops.read, write: KA.stream_ops.write, allocate: KA.stream_ops.allocate, mmap: KA.stream_ops.mmap, msync: KA.stream_ops.msync } }, link: { node: { getattr: KA.node_ops.getattr, setattr: KA.node_ops.setattr, readlink: KA.node_ops.readlink }, stream: {} }, chrdev: { node: { getattr: KA.node_ops.getattr, setattr: KA.node_ops.setattr }, stream: u.chrdev_stream_ops } });
    var S = u.createNode(n, c, y, R);
    return u.isDir(S.mode) ? (S.node_ops = KA.ops_table.dir.node, S.stream_ops = KA.ops_table.dir.stream, S.contents = {}) : u.isFile(S.mode) ? (S.node_ops = KA.ops_table.file.node, S.stream_ops = KA.ops_table.file.stream, S.usedBytes = 0, S.contents = null) : u.isLink(S.mode) ? (S.node_ops = KA.ops_table.link.node, S.stream_ops = KA.ops_table.link.stream) : u.isChrdev(S.mode) && (S.node_ops = KA.ops_table.chrdev.node, S.stream_ops = KA.ops_table.chrdev.stream), S.timestamp = Date.now(), n && (n.contents[c] = S), S;
  }, getFileDataAsRegularArray: function(n) {
    if (n.contents && n.contents.subarray) {
      for (var c = [], y = 0; y < n.usedBytes; ++y)
        c.push(n.contents[y]);
      return c;
    }
    return n.contents;
  }, getFileDataAsTypedArray: function(n) {
    return n.contents ? n.contents.subarray ? n.contents.subarray(0, n.usedBytes) : new Uint8Array(n.contents) : new Uint8Array(0);
  }, expandFileStorage: function(n, c) {
    var y = n.contents ? n.contents.length : 0;
    if (!(y >= c)) {
      c = Math.max(c, y * (y < 1048576 ? 2 : 1.125) >>> 0), y != 0 && (c = Math.max(c, 256));
      var R = n.contents;
      n.contents = new Uint8Array(c), n.usedBytes > 0 && n.contents.set(R.subarray(0, n.usedBytes), 0);
    }
  }, resizeFileStorage: function(n, c) {
    if (n.usedBytes != c) {
      if (c == 0)
        return n.contents = null, void (n.usedBytes = 0);
      if (!n.contents || n.contents.subarray) {
        var y = n.contents;
        return n.contents = new Uint8Array(c), y && n.contents.set(y.subarray(0, Math.min(c, n.usedBytes))), void (n.usedBytes = c);
      }
      if (n.contents || (n.contents = []), n.contents.length > c)
        n.contents.length = c;
      else
        for (; n.contents.length < c; )
          n.contents.push(0);
      n.usedBytes = c;
    }
  }, node_ops: { getattr: function(n) {
    var c = {};
    return c.dev = u.isChrdev(n.mode) ? n.id : 1, c.ino = n.id, c.mode = n.mode, c.nlink = 1, c.uid = 0, c.gid = 0, c.rdev = n.rdev, u.isDir(n.mode) ? c.size = 4096 : u.isFile(n.mode) ? c.size = n.usedBytes : u.isLink(n.mode) ? c.size = n.link.length : c.size = 0, c.atime = new Date(n.timestamp), c.mtime = new Date(n.timestamp), c.ctime = new Date(n.timestamp), c.blksize = 4096, c.blocks = Math.ceil(c.size / c.blksize), c;
  }, setattr: function(n, c) {
    c.mode !== void 0 && (n.mode = c.mode), c.timestamp !== void 0 && (n.timestamp = c.timestamp), c.size !== void 0 && KA.resizeFileStorage(n, c.size);
  }, lookup: function(n, c) {
    throw u.genericErrors[44];
  }, mknod: function(n, c, y, R) {
    return KA.createNode(n, c, y, R);
  }, rename: function(n, c, y) {
    if (u.isDir(n.mode)) {
      var R;
      try {
        R = u.lookupNode(c, y);
      } catch {
      }
      if (R)
        for (var S in R.contents)
          throw new u.ErrnoError(55);
    }
    delete n.parent.contents[n.name], n.name = y, c.contents[y] = n, n.parent = c;
  }, unlink: function(n, c) {
    delete n.contents[c];
  }, rmdir: function(n, c) {
    var y = u.lookupNode(n, c);
    for (var R in y.contents)
      throw new u.ErrnoError(55);
    delete n.contents[c];
  }, readdir: function(n) {
    var c = [".", ".."];
    for (var y in n.contents)
      n.contents.hasOwnProperty(y) && c.push(y);
    return c;
  }, symlink: function(n, c, y) {
    var R = KA.createNode(n, c, 41471, 0);
    return R.link = y, R;
  }, readlink: function(n) {
    if (!u.isLink(n.mode))
      throw new u.ErrnoError(28);
    return n.link;
  } }, stream_ops: { read: function(n, c, y, R, S) {
    var U = n.node.contents;
    if (S >= n.node.usedBytes)
      return 0;
    var b = Math.min(n.node.usedBytes - S, R);
    if (b > 8 && U.subarray)
      c.set(U.subarray(S, S + b), y);
    else
      for (var q = 0; q < b; q++)
        c[y + q] = U[S + q];
    return b;
  }, write: function(n, c, y, R, S, U) {
    if (c.buffer === P.buffer && (U = !1), !R)
      return 0;
    var b = n.node;
    if (b.timestamp = Date.now(), c.subarray && (!b.contents || b.contents.subarray)) {
      if (U)
        return b.contents = c.subarray(y, y + R), b.usedBytes = R, R;
      if (b.usedBytes === 0 && S === 0)
        return b.contents = c.slice(y, y + R), b.usedBytes = R, R;
      if (S + R <= b.usedBytes)
        return b.contents.set(c.subarray(y, y + R), S), R;
    }
    if (KA.expandFileStorage(b, S + R), b.contents.subarray && c.subarray)
      b.contents.set(c.subarray(y, y + R), S);
    else
      for (var q = 0; q < R; q++)
        b.contents[S + q] = c[y + q];
    return b.usedBytes = Math.max(b.usedBytes, S + R), R;
  }, llseek: function(n, c, y) {
    var R = c;
    if (y === 1 ? R += n.position : y === 2 && u.isFile(n.node.mode) && (R += n.node.usedBytes), R < 0)
      throw new u.ErrnoError(28);
    return R;
  }, allocate: function(n, c, y) {
    KA.expandFileStorage(n.node, c + y), n.node.usedBytes = Math.max(n.node.usedBytes, c + y);
  }, mmap: function(n, c, y, R, S, U) {
    if (M(c === 0), !u.isFile(n.node.mode))
      throw new u.ErrnoError(43);
    var b, q, H = n.node.contents;
    if (2 & U || H.buffer !== AA) {
      if ((R > 0 || R + y < H.length) && (H = H.subarray ? H.subarray(R, R + y) : Array.prototype.slice.call(H, R, R + y)), q = !0, !(b = Rg(y)))
        throw new u.ErrnoError(48);
      P.set(H, b);
    } else
      q = !1, b = H.byteOffset;
    return { ptr: b, allocated: q };
  }, msync: function(n, c, y, R, S) {
    if (!u.isFile(n.node.mode))
      throw new u.ErrnoError(43);
    return 2 & S || KA.stream_ops.write(n, c, 0, R, y, !1), 0;
  } } }, u = { root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: !1, ignorePermissions: !0, trackingDelegate: {}, tracking: { openFlags: { READ: 1, WRITE: 2 } }, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, lookupPath: function(n, c) {
    if (c = c || {}, !(n = og.resolve(u.cwd(), n)))
      return { path: "", node: null };
    var y = { follow_mount: !0, recurse_count: 0 };
    for (var R in y)
      c[R] === void 0 && (c[R] = y[R]);
    if (c.recurse_count > 8)
      throw new u.ErrnoError(32);
    for (var S = TA.normalizeArray(n.split("/").filter(function(FA) {
      return !!FA;
    }), !1), U = u.root, b = "/", q = 0; q < S.length; q++) {
      var H = q === S.length - 1;
      if (H && c.parent)
        break;
      if (U = u.lookupNode(U, S[q]), b = TA.join2(b, S[q]), u.isMountpoint(U) && (!H || H && c.follow_mount) && (U = U.mounted.root), !H || c.follow)
        for (var iA = 0; u.isLink(U.mode); ) {
          var nA = u.readlink(b);
          if (b = og.resolve(TA.dirname(b), nA), U = u.lookupPath(b, { recurse_count: c.recurse_count }).node, iA++ > 40)
            throw new u.ErrnoError(32);
        }
    }
    return { path: b, node: U };
  }, getPath: function(n) {
    for (var c; ; ) {
      if (u.isRoot(n)) {
        var y = n.mount.mountpoint;
        return c ? y[y.length - 1] !== "/" ? y + "/" + c : y + c : y;
      }
      c = c ? n.name + "/" + c : n.name, n = n.parent;
    }
  }, hashName: function(n, c) {
    for (var y = 0, R = 0; R < c.length; R++)
      y = (y << 5) - y + c.charCodeAt(R) | 0;
    return (n + y >>> 0) % u.nameTable.length;
  }, hashAddNode: function(n) {
    var c = u.hashName(n.parent.id, n.name);
    n.name_next = u.nameTable[c], u.nameTable[c] = n;
  }, hashRemoveNode: function(n) {
    var c = u.hashName(n.parent.id, n.name);
    if (u.nameTable[c] === n)
      u.nameTable[c] = n.name_next;
    else
      for (var y = u.nameTable[c]; y; ) {
        if (y.name_next === n) {
          y.name_next = n.name_next;
          break;
        }
        y = y.name_next;
      }
  }, lookupNode: function(n, c) {
    var y = u.mayLookup(n);
    if (y)
      throw new u.ErrnoError(y, n);
    for (var R = u.hashName(n.id, c), S = u.nameTable[R]; S; S = S.name_next) {
      var U = S.name;
      if (S.parent.id === n.id && U === c)
        return S;
    }
    return u.lookup(n, c);
  }, createNode: function(n, c, y, R) {
    var S = new u.FSNode(n, c, y, R);
    return u.hashAddNode(S), S;
  }, destroyNode: function(n) {
    u.hashRemoveNode(n);
  }, isRoot: function(n) {
    return n === n.parent;
  }, isMountpoint: function(n) {
    return !!n.mounted;
  }, isFile: function(n) {
    return (61440 & n) == 32768;
  }, isDir: function(n) {
    return (61440 & n) == 16384;
  }, isLink: function(n) {
    return (61440 & n) == 40960;
  }, isChrdev: function(n) {
    return (61440 & n) == 8192;
  }, isBlkdev: function(n) {
    return (61440 & n) == 24576;
  }, isFIFO: function(n) {
    return (61440 & n) == 4096;
  }, isSocket: function(n) {
    return (49152 & n) == 49152;
  }, flagModes: { r: 0, "r+": 2, w: 577, "w+": 578, a: 1089, "a+": 1090 }, modeStringToFlags: function(n) {
    var c = u.flagModes[n];
    if (c === void 0)
      throw new Error("Unknown file open mode: " + n);
    return c;
  }, flagsToPermissionString: function(n) {
    var c = ["r", "w", "rw"][3 & n];
    return 512 & n && (c += "w"), c;
  }, nodePermissions: function(n, c) {
    return u.ignorePermissions || (c.indexOf("r") === -1 || 292 & n.mode) && (c.indexOf("w") === -1 || 146 & n.mode) && (c.indexOf("x") === -1 || 73 & n.mode) ? 0 : 2;
  }, mayLookup: function(n) {
    var c = u.nodePermissions(n, "x");
    return c || (n.node_ops.lookup ? 0 : 2);
  }, mayCreate: function(n, c) {
    try {
      return u.lookupNode(n, c), 20;
    } catch {
    }
    return u.nodePermissions(n, "wx");
  }, mayDelete: function(n, c, y) {
    var R;
    try {
      R = u.lookupNode(n, c);
    } catch (U) {
      return U.errno;
    }
    var S = u.nodePermissions(n, "wx");
    if (S)
      return S;
    if (y) {
      if (!u.isDir(R.mode))
        return 54;
      if (u.isRoot(R) || u.getPath(R) === u.cwd())
        return 10;
    } else if (u.isDir(R.mode))
      return 31;
    return 0;
  }, mayOpen: function(n, c) {
    return n ? u.isLink(n.mode) ? 32 : u.isDir(n.mode) && (u.flagsToPermissionString(c) !== "r" || 512 & c) ? 31 : u.nodePermissions(n, u.flagsToPermissionString(c)) : 44;
  }, MAX_OPEN_FDS: 4096, nextfd: function(n, c) {
    n = n || 0, c = c || u.MAX_OPEN_FDS;
    for (var y = n; y <= c; y++)
      if (!u.streams[y])
        return y;
    throw new u.ErrnoError(33);
  }, getStream: function(n) {
    return u.streams[n];
  }, createStream: function(n, c, y) {
    u.FSStream || (u.FSStream = function() {
    }, u.FSStream.prototype = { object: { get: function() {
      return this.node;
    }, set: function(b) {
      this.node = b;
    } }, isRead: { get: function() {
      return (2097155 & this.flags) != 1;
    } }, isWrite: { get: function() {
      return (2097155 & this.flags) != 0;
    } }, isAppend: { get: function() {
      return 1024 & this.flags;
    } } });
    var R = new u.FSStream();
    for (var S in n)
      R[S] = n[S];
    n = R;
    var U = u.nextfd(c, y);
    return n.fd = U, u.streams[U] = n, n;
  }, closeStream: function(n) {
    u.streams[n] = null;
  }, chrdev_stream_ops: { open: function(n) {
    var c = u.getDevice(n.node.rdev);
    n.stream_ops = c.stream_ops, n.stream_ops.open && n.stream_ops.open(n);
  }, llseek: function() {
    throw new u.ErrnoError(70);
  } }, major: function(n) {
    return n >> 8;
  }, minor: function(n) {
    return 255 & n;
  }, makedev: function(n, c) {
    return n << 8 | c;
  }, registerDevice: function(n, c) {
    u.devices[n] = { stream_ops: c };
  }, getDevice: function(n) {
    return u.devices[n];
  }, getMounts: function(n) {
    for (var c = [], y = [n]; y.length; ) {
      var R = y.pop();
      c.push(R), y.push.apply(y, R.mounts);
    }
    return c;
  }, syncfs: function(n, c) {
    typeof n == "function" && (c = n, n = !1), u.syncFSRequests++, u.syncFSRequests > 1 && l("warning: " + u.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
    var y = u.getMounts(u.root.mount), R = 0;
    function S(b) {
      return u.syncFSRequests--, c(b);
    }
    function U(b) {
      if (b)
        return U.errored ? void 0 : (U.errored = !0, S(b));
      ++R >= y.length && S(null);
    }
    y.forEach(function(b) {
      if (!b.type.syncfs)
        return U(null);
      b.type.syncfs(b, n, U);
    });
  }, mount: function(n, c, y) {
    var R, S = y === "/", U = !y;
    if (S && u.root)
      throw new u.ErrnoError(10);
    if (!S && !U) {
      var b = u.lookupPath(y, { follow_mount: !1 });
      if (y = b.path, R = b.node, u.isMountpoint(R))
        throw new u.ErrnoError(10);
      if (!u.isDir(R.mode))
        throw new u.ErrnoError(54);
    }
    var q = { type: n, opts: c, mountpoint: y, mounts: [] }, H = n.mount(q);
    return H.mount = q, q.root = H, S ? u.root = H : R && (R.mounted = q, R.mount && R.mount.mounts.push(q)), H;
  }, unmount: function(n) {
    var c = u.lookupPath(n, { follow_mount: !1 });
    if (!u.isMountpoint(c.node))
      throw new u.ErrnoError(28);
    var y = c.node, R = y.mounted, S = u.getMounts(R);
    Object.keys(u.nameTable).forEach(function(b) {
      for (var q = u.nameTable[b]; q; ) {
        var H = q.name_next;
        S.indexOf(q.mount) !== -1 && u.destroyNode(q), q = H;
      }
    }), y.mounted = null;
    var U = y.mount.mounts.indexOf(R);
    y.mount.mounts.splice(U, 1);
  }, lookup: function(n, c) {
    return n.node_ops.lookup(n, c);
  }, mknod: function(n, c, y) {
    var R = u.lookupPath(n, { parent: !0 }).node, S = TA.basename(n);
    if (!S || S === "." || S === "..")
      throw new u.ErrnoError(28);
    var U = u.mayCreate(R, S);
    if (U)
      throw new u.ErrnoError(U);
    if (!R.node_ops.mknod)
      throw new u.ErrnoError(63);
    return R.node_ops.mknod(R, S, c, y);
  }, create: function(n, c) {
    return c = c !== void 0 ? c : 438, c &= 4095, c |= 32768, u.mknod(n, c, 0);
  }, mkdir: function(n, c) {
    return c = c !== void 0 ? c : 511, c &= 1023, c |= 16384, u.mknod(n, c, 0);
  }, mkdirTree: function(n, c) {
    for (var y = n.split("/"), R = "", S = 0; S < y.length; ++S)
      if (y[S]) {
        R += "/" + y[S];
        try {
          u.mkdir(R, c);
        } catch (U) {
          if (U.errno != 20)
            throw U;
        }
      }
  }, mkdev: function(n, c, y) {
    return y === void 0 && (y = c, c = 438), c |= 8192, u.mknod(n, c, y);
  }, symlink: function(n, c) {
    if (!og.resolve(n))
      throw new u.ErrnoError(44);
    var y = u.lookupPath(c, { parent: !0 }).node;
    if (!y)
      throw new u.ErrnoError(44);
    var R = TA.basename(c), S = u.mayCreate(y, R);
    if (S)
      throw new u.ErrnoError(S);
    if (!y.node_ops.symlink)
      throw new u.ErrnoError(63);
    return y.node_ops.symlink(y, R, n);
  }, rename: function(n, c) {
    var y, R, S = TA.dirname(n), U = TA.dirname(c), b = TA.basename(n), q = TA.basename(c);
    if (y = u.lookupPath(n, { parent: !0 }).node, R = u.lookupPath(c, { parent: !0 }).node, !y || !R)
      throw new u.ErrnoError(44);
    if (y.mount !== R.mount)
      throw new u.ErrnoError(75);
    var H, iA = u.lookupNode(y, b), nA = og.relative(n, U);
    if (nA.charAt(0) !== ".")
      throw new u.ErrnoError(28);
    if ((nA = og.relative(c, S)).charAt(0) !== ".")
      throw new u.ErrnoError(55);
    try {
      H = u.lookupNode(R, q);
    } catch {
    }
    if (iA !== H) {
      var FA = u.isDir(iA.mode), lA = u.mayDelete(y, b, FA);
      if (lA)
        throw new u.ErrnoError(lA);
      if (lA = H ? u.mayDelete(R, q, FA) : u.mayCreate(R, q))
        throw new u.ErrnoError(lA);
      if (!y.node_ops.rename)
        throw new u.ErrnoError(63);
      if (u.isMountpoint(iA) || H && u.isMountpoint(H))
        throw new u.ErrnoError(10);
      if (R !== y && (lA = u.nodePermissions(y, "w")))
        throw new u.ErrnoError(lA);
      try {
        u.trackingDelegate.willMovePath && u.trackingDelegate.willMovePath(n, c);
      } catch (HA) {
        l("FS.trackingDelegate['willMovePath']('" + n + "', '" + c + "') threw an exception: " + HA.message);
      }
      u.hashRemoveNode(iA);
      try {
        y.node_ops.rename(iA, R, q);
      } catch (HA) {
        throw HA;
      } finally {
        u.hashAddNode(iA);
      }
      try {
        u.trackingDelegate.onMovePath && u.trackingDelegate.onMovePath(n, c);
      } catch (HA) {
        l("FS.trackingDelegate['onMovePath']('" + n + "', '" + c + "') threw an exception: " + HA.message);
      }
    }
  }, rmdir: function(n) {
    var c = u.lookupPath(n, { parent: !0 }).node, y = TA.basename(n), R = u.lookupNode(c, y), S = u.mayDelete(c, y, !0);
    if (S)
      throw new u.ErrnoError(S);
    if (!c.node_ops.rmdir)
      throw new u.ErrnoError(63);
    if (u.isMountpoint(R))
      throw new u.ErrnoError(10);
    try {
      u.trackingDelegate.willDeletePath && u.trackingDelegate.willDeletePath(n);
    } catch (U) {
      l("FS.trackingDelegate['willDeletePath']('" + n + "') threw an exception: " + U.message);
    }
    c.node_ops.rmdir(c, y), u.destroyNode(R);
    try {
      u.trackingDelegate.onDeletePath && u.trackingDelegate.onDeletePath(n);
    } catch (U) {
      l("FS.trackingDelegate['onDeletePath']('" + n + "') threw an exception: " + U.message);
    }
  }, readdir: function(n) {
    var c = u.lookupPath(n, { follow: !0 }).node;
    if (!c.node_ops.readdir)
      throw new u.ErrnoError(54);
    return c.node_ops.readdir(c);
  }, unlink: function(n) {
    var c = u.lookupPath(n, { parent: !0 }).node, y = TA.basename(n), R = u.lookupNode(c, y), S = u.mayDelete(c, y, !1);
    if (S)
      throw new u.ErrnoError(S);
    if (!c.node_ops.unlink)
      throw new u.ErrnoError(63);
    if (u.isMountpoint(R))
      throw new u.ErrnoError(10);
    try {
      u.trackingDelegate.willDeletePath && u.trackingDelegate.willDeletePath(n);
    } catch (U) {
      l("FS.trackingDelegate['willDeletePath']('" + n + "') threw an exception: " + U.message);
    }
    c.node_ops.unlink(c, y), u.destroyNode(R);
    try {
      u.trackingDelegate.onDeletePath && u.trackingDelegate.onDeletePath(n);
    } catch (U) {
      l("FS.trackingDelegate['onDeletePath']('" + n + "') threw an exception: " + U.message);
    }
  }, readlink: function(n) {
    var c = u.lookupPath(n).node;
    if (!c)
      throw new u.ErrnoError(44);
    if (!c.node_ops.readlink)
      throw new u.ErrnoError(28);
    return og.resolve(u.getPath(c.parent), c.node_ops.readlink(c));
  }, stat: function(n, c) {
    var y = u.lookupPath(n, { follow: !c }).node;
    if (!y)
      throw new u.ErrnoError(44);
    if (!y.node_ops.getattr)
      throw new u.ErrnoError(63);
    return y.node_ops.getattr(y);
  }, lstat: function(n) {
    return u.stat(n, !0);
  }, chmod: function(n, c, y) {
    var R;
    if (!(R = typeof n == "string" ? u.lookupPath(n, { follow: !y }).node : n).node_ops.setattr)
      throw new u.ErrnoError(63);
    R.node_ops.setattr(R, { mode: 4095 & c | -4096 & R.mode, timestamp: Date.now() });
  }, lchmod: function(n, c) {
    u.chmod(n, c, !0);
  }, fchmod: function(n, c) {
    var y = u.getStream(n);
    if (!y)
      throw new u.ErrnoError(8);
    u.chmod(y.node, c);
  }, chown: function(n, c, y, R) {
    var S;
    if (!(S = typeof n == "string" ? u.lookupPath(n, { follow: !R }).node : n).node_ops.setattr)
      throw new u.ErrnoError(63);
    S.node_ops.setattr(S, { timestamp: Date.now() });
  }, lchown: function(n, c, y) {
    u.chown(n, c, y, !0);
  }, fchown: function(n, c, y) {
    var R = u.getStream(n);
    if (!R)
      throw new u.ErrnoError(8);
    u.chown(R.node, c, y);
  }, truncate: function(n, c) {
    if (c < 0)
      throw new u.ErrnoError(28);
    var y;
    if (!(y = typeof n == "string" ? u.lookupPath(n, { follow: !0 }).node : n).node_ops.setattr)
      throw new u.ErrnoError(63);
    if (u.isDir(y.mode))
      throw new u.ErrnoError(31);
    if (!u.isFile(y.mode))
      throw new u.ErrnoError(28);
    var R = u.nodePermissions(y, "w");
    if (R)
      throw new u.ErrnoError(R);
    y.node_ops.setattr(y, { size: c, timestamp: Date.now() });
  }, ftruncate: function(n, c) {
    var y = u.getStream(n);
    if (!y)
      throw new u.ErrnoError(8);
    if (!(2097155 & y.flags))
      throw new u.ErrnoError(28);
    u.truncate(y.node, c);
  }, utime: function(n, c, y) {
    var R = u.lookupPath(n, { follow: !0 }).node;
    R.node_ops.setattr(R, { timestamp: Math.max(c, y) });
  }, open: function(n, c, y, R, S) {
    if (n === "")
      throw new u.ErrnoError(44);
    var U;
    if (y = y === void 0 ? 438 : y, y = 64 & (c = typeof c == "string" ? u.modeStringToFlags(c) : c) ? 4095 & y | 32768 : 0, typeof n == "object")
      U = n;
    else {
      n = TA.normalize(n);
      try {
        U = u.lookupPath(n, { follow: !(131072 & c) }).node;
      } catch {
      }
    }
    var b = !1;
    if (64 & c)
      if (U) {
        if (128 & c)
          throw new u.ErrnoError(20);
      } else
        U = u.mknod(n, y, 0), b = !0;
    if (!U)
      throw new u.ErrnoError(44);
    if (u.isChrdev(U.mode) && (c &= -513), 65536 & c && !u.isDir(U.mode))
      throw new u.ErrnoError(54);
    if (!b) {
      var q = u.mayOpen(U, c);
      if (q)
        throw new u.ErrnoError(q);
    }
    512 & c && u.truncate(U, 0), c &= -131713;
    var H = u.createStream({ node: U, path: u.getPath(U), flags: c, seekable: !0, position: 0, stream_ops: U.stream_ops, ungotten: [], error: !1 }, R, S);
    H.stream_ops.open && H.stream_ops.open(H), !I.logReadFiles || 1 & c || (u.readFiles || (u.readFiles = {}), n in u.readFiles || (u.readFiles[n] = 1, l("FS.trackingDelegate error on read file: " + n)));
    try {
      if (u.trackingDelegate.onOpenFile) {
        var iA = 0;
        (2097155 & c) != 1 && (iA |= u.tracking.openFlags.READ), 2097155 & c && (iA |= u.tracking.openFlags.WRITE), u.trackingDelegate.onOpenFile(n, iA);
      }
    } catch (nA) {
      l("FS.trackingDelegate['onOpenFile']('" + n + "', flags) threw an exception: " + nA.message);
    }
    return H;
  }, close: function(n) {
    if (u.isClosed(n))
      throw new u.ErrnoError(8);
    n.getdents && (n.getdents = null);
    try {
      n.stream_ops.close && n.stream_ops.close(n);
    } catch (c) {
      throw c;
    } finally {
      u.closeStream(n.fd);
    }
    n.fd = null;
  }, isClosed: function(n) {
    return n.fd === null;
  }, llseek: function(n, c, y) {
    if (u.isClosed(n))
      throw new u.ErrnoError(8);
    if (!n.seekable || !n.stream_ops.llseek)
      throw new u.ErrnoError(70);
    if (y != 0 && y != 1 && y != 2)
      throw new u.ErrnoError(28);
    return n.position = n.stream_ops.llseek(n, c, y), n.ungotten = [], n.position;
  }, read: function(n, c, y, R, S) {
    if (R < 0 || S < 0)
      throw new u.ErrnoError(28);
    if (u.isClosed(n))
      throw new u.ErrnoError(8);
    if ((2097155 & n.flags) == 1)
      throw new u.ErrnoError(8);
    if (u.isDir(n.node.mode))
      throw new u.ErrnoError(31);
    if (!n.stream_ops.read)
      throw new u.ErrnoError(28);
    var U = S !== void 0;
    if (U) {
      if (!n.seekable)
        throw new u.ErrnoError(70);
    } else
      S = n.position;
    var b = n.stream_ops.read(n, c, y, R, S);
    return U || (n.position += b), b;
  }, write: function(n, c, y, R, S, U) {
    if (R < 0 || S < 0)
      throw new u.ErrnoError(28);
    if (u.isClosed(n))
      throw new u.ErrnoError(8);
    if (!(2097155 & n.flags))
      throw new u.ErrnoError(8);
    if (u.isDir(n.node.mode))
      throw new u.ErrnoError(31);
    if (!n.stream_ops.write)
      throw new u.ErrnoError(28);
    n.seekable && 1024 & n.flags && u.llseek(n, 0, 2);
    var b = S !== void 0;
    if (b) {
      if (!n.seekable)
        throw new u.ErrnoError(70);
    } else
      S = n.position;
    var q = n.stream_ops.write(n, c, y, R, S, U);
    b || (n.position += q);
    try {
      n.path && u.trackingDelegate.onWriteToFile && u.trackingDelegate.onWriteToFile(n.path);
    } catch (H) {
      l("FS.trackingDelegate['onWriteToFile']('" + n.path + "') threw an exception: " + H.message);
    }
    return q;
  }, allocate: function(n, c, y) {
    if (u.isClosed(n))
      throw new u.ErrnoError(8);
    if (c < 0 || y <= 0)
      throw new u.ErrnoError(28);
    if (!(2097155 & n.flags))
      throw new u.ErrnoError(8);
    if (!u.isFile(n.node.mode) && !u.isDir(n.node.mode))
      throw new u.ErrnoError(43);
    if (!n.stream_ops.allocate)
      throw new u.ErrnoError(138);
    n.stream_ops.allocate(n, c, y);
  }, mmap: function(n, c, y, R, S, U) {
    if (2 & S && !(2 & U) && (2097155 & n.flags) != 2)
      throw new u.ErrnoError(2);
    if ((2097155 & n.flags) == 1)
      throw new u.ErrnoError(2);
    if (!n.stream_ops.mmap)
      throw new u.ErrnoError(43);
    return n.stream_ops.mmap(n, c, y, R, S, U);
  }, msync: function(n, c, y, R, S) {
    return n && n.stream_ops.msync ? n.stream_ops.msync(n, c, y, R, S) : 0;
  }, munmap: function(n) {
    return 0;
  }, ioctl: function(n, c, y) {
    if (!n.stream_ops.ioctl)
      throw new u.ErrnoError(59);
    return n.stream_ops.ioctl(n, c, y);
  }, readFile: function(n, c) {
    if ((c = c || {}).flags = c.flags || 0, c.encoding = c.encoding || "binary", c.encoding !== "utf8" && c.encoding !== "binary")
      throw new Error('Invalid encoding type "' + c.encoding + '"');
    var y, R = u.open(n, c.flags), S = u.stat(n).size, U = new Uint8Array(S);
    return u.read(R, U, 0, S, 0), c.encoding === "utf8" ? y = m(U, 0) : c.encoding === "binary" && (y = U), u.close(R), y;
  }, writeFile: function(n, c, y) {
    (y = y || {}).flags = y.flags || 577;
    var R = u.open(n, y.flags, y.mode);
    if (typeof c == "string") {
      var S = new Uint8Array($(c) + 1), U = T(c, S, 0, S.length);
      u.write(R, S, 0, U, void 0, y.canOwn);
    } else {
      if (!ArrayBuffer.isView(c))
        throw new Error("Unsupported data type");
      u.write(R, c, 0, c.byteLength, void 0, y.canOwn);
    }
    u.close(R);
  }, cwd: function() {
    return u.currentPath;
  }, chdir: function(n) {
    var c = u.lookupPath(n, { follow: !0 });
    if (c.node === null)
      throw new u.ErrnoError(44);
    if (!u.isDir(c.node.mode))
      throw new u.ErrnoError(54);
    var y = u.nodePermissions(c.node, "x");
    if (y)
      throw new u.ErrnoError(y);
    u.currentPath = c.path;
  }, createDefaultDirectories: function() {
    u.mkdir("/tmp"), u.mkdir("/home"), u.mkdir("/home/web_user");
  }, createDefaultDevices: function() {
    u.mkdir("/dev"), u.registerDevice(u.makedev(1, 3), { read: function() {
      return 0;
    }, write: function(c, y, R, S, U) {
      return S;
    } }), u.mkdev("/dev/null", u.makedev(1, 3)), Dg.register(u.makedev(5, 0), Dg.default_tty_ops), Dg.register(u.makedev(6, 0), Dg.default_tty1_ops), u.mkdev("/dev/tty", u.makedev(5, 0)), u.mkdev("/dev/tty1", u.makedev(6, 0));
    var n = function() {
      if (typeof crypto == "object" && typeof crypto.getRandomValues == "function") {
        var c = new Uint8Array(1);
        return function() {
          return crypto.getRandomValues(c), c[0];
        };
      }
      if (e)
        try {
          var y = require("crypto");
          return function() {
            return y.randomBytes(1)[0];
          };
        } catch {
        }
      return function() {
        hg("randomDevice");
      };
    }();
    u.createDevice("/dev", "random", n), u.createDevice("/dev", "urandom", n), u.mkdir("/dev/shm"), u.mkdir("/dev/shm/tmp");
  }, createSpecialDirectories: function() {
    u.mkdir("/proc"), u.mkdir("/proc/self"), u.mkdir("/proc/self/fd"), u.mount({ mount: function() {
      var n = u.createNode("/proc/self", "fd", 16895, 73);
      return n.node_ops = { lookup: function(c, y) {
        var R = +y, S = u.getStream(R);
        if (!S)
          throw new u.ErrnoError(8);
        var U = { parent: null, mount: { mountpoint: "fake" }, node_ops: { readlink: function() {
          return S.path;
        } } };
        return U.parent = U, U;
      } }, n;
    } }, {}, "/proc/self/fd");
  }, createStandardStreams: function() {
    I.stdin ? u.createDevice("/dev", "stdin", I.stdin) : u.symlink("/dev/tty", "/dev/stdin"), I.stdout ? u.createDevice("/dev", "stdout", null, I.stdout) : u.symlink("/dev/tty", "/dev/stdout"), I.stderr ? u.createDevice("/dev", "stderr", null, I.stderr) : u.symlink("/dev/tty1", "/dev/stderr"), u.open("/dev/stdin", 0), u.open("/dev/stdout", 1), u.open("/dev/stderr", 1);
  }, ensureErrnoError: function() {
    u.ErrnoError || (u.ErrnoError = function(n, c) {
      this.node = c, this.setErrno = function(y) {
        this.errno = y;
      }, this.setErrno(n), this.message = "FS error";
    }, u.ErrnoError.prototype = new Error(), u.ErrnoError.prototype.constructor = u.ErrnoError, [44].forEach(function(n) {
      u.genericErrors[n] = new u.ErrnoError(n), u.genericErrors[n].stack = "<generic error, no stack>";
    }));
  }, staticInit: function() {
    u.ensureErrnoError(), u.nameTable = new Array(4096), u.mount(KA, {}, "/"), u.createDefaultDirectories(), u.createDefaultDevices(), u.createSpecialDirectories(), u.filesystems = { MEMFS: KA };
  }, init: function(n, c, y) {
    u.init.initialized = !0, u.ensureErrnoError(), I.stdin = n || I.stdin, I.stdout = c || I.stdout, I.stderr = y || I.stderr, u.createStandardStreams();
  }, quit: function() {
    u.init.initialized = !1;
    var n = I._fflush;
    n && n(0);
    for (var c = 0; c < u.streams.length; c++) {
      var y = u.streams[c];
      y && u.close(y);
    }
  }, getMode: function(n, c) {
    var y = 0;
    return n && (y |= 365), c && (y |= 146), y;
  }, findObject: function(n, c) {
    var y = u.analyzePath(n, c);
    return y.exists ? y.object : null;
  }, analyzePath: function(n, c) {
    try {
      n = (R = u.lookupPath(n, { follow: !c })).path;
    } catch {
    }
    var y = { isRoot: !1, exists: !1, error: 0, name: null, path: null, object: null, parentExists: !1, parentPath: null, parentObject: null };
    try {
      var R = u.lookupPath(n, { parent: !0 });
      y.parentExists = !0, y.parentPath = R.path, y.parentObject = R.node, y.name = TA.basename(n), R = u.lookupPath(n, { follow: !c }), y.exists = !0, y.path = R.path, y.object = R.node, y.name = R.node.name, y.isRoot = R.path === "/";
    } catch (S) {
      y.error = S.errno;
    }
    return y;
  }, createPath: function(n, c, y, R) {
    n = typeof n == "string" ? n : u.getPath(n);
    for (var S = c.split("/").reverse(); S.length; ) {
      var U = S.pop();
      if (U) {
        var b = TA.join2(n, U);
        try {
          u.mkdir(b);
        } catch {
        }
        n = b;
      }
    }
    return b;
  }, createFile: function(n, c, y, R, S) {
    var U = TA.join2(typeof n == "string" ? n : u.getPath(n), c), b = u.getMode(R, S);
    return u.create(U, b);
  }, createDataFile: function(n, c, y, R, S, U) {
    var b = c ? TA.join2(typeof n == "string" ? n : u.getPath(n), c) : n, q = u.getMode(R, S), H = u.create(b, q);
    if (y) {
      if (typeof y == "string") {
        for (var iA = new Array(y.length), nA = 0, FA = y.length; nA < FA; ++nA)
          iA[nA] = y.charCodeAt(nA);
        y = iA;
      }
      u.chmod(H, 146 | q);
      var lA = u.open(H, 577);
      u.write(lA, y, 0, y.length, 0, U), u.close(lA), u.chmod(H, q);
    }
    return H;
  }, createDevice: function(n, c, y, R) {
    var S = TA.join2(typeof n == "string" ? n : u.getPath(n), c), U = u.getMode(!!y, !!R);
    u.createDevice.major || (u.createDevice.major = 64);
    var b = u.makedev(u.createDevice.major++, 0);
    return u.registerDevice(b, { open: function(q) {
      q.seekable = !1;
    }, close: function(q) {
      R && R.buffer && R.buffer.length && R(10);
    }, read: function(q, H, iA, nA, FA) {
      for (var lA = 0, HA = 0; HA < nA; HA++) {
        var Ag;
        try {
          Ag = y();
        } catch {
          throw new u.ErrnoError(29);
        }
        if (Ag === void 0 && lA === 0)
          throw new u.ErrnoError(6);
        if (Ag == null)
          break;
        lA++, H[iA + HA] = Ag;
      }
      return lA && (q.node.timestamp = Date.now()), lA;
    }, write: function(q, H, iA, nA, FA) {
      for (var lA = 0; lA < nA; lA++)
        try {
          R(H[iA + lA]);
        } catch {
          throw new u.ErrnoError(29);
        }
      return nA && (q.node.timestamp = Date.now()), lA;
    } }), u.mkdev(S, U, b);
  }, forceLoadFile: function(n) {
    if (n.isDevice || n.isFolder || n.link || n.contents)
      return !0;
    if (typeof XMLHttpRequest < "u")
      throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
    if (!s)
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    try {
      n.contents = pt(s(n.url), !0), n.usedBytes = n.contents.length;
    } catch {
      throw new u.ErrnoError(29);
    }
  }, createLazyFile: function(n, c, y, R, S) {
    function U() {
      this.lengthKnown = !1, this.chunks = [];
    }
    if (U.prototype.get = function(nA) {
      if (!(nA > this.length - 1 || nA < 0)) {
        var FA = nA % this.chunkSize, lA = nA / this.chunkSize | 0;
        return this.getter(lA)[FA];
      }
    }, U.prototype.setDataGetter = function(nA) {
      this.getter = nA;
    }, U.prototype.cacheLength = function() {
      var nA = new XMLHttpRequest();
      if (nA.open("HEAD", y, !1), nA.send(null), !(nA.status >= 200 && nA.status < 300 || nA.status === 304))
        throw new Error("Couldn't load " + y + ". Status: " + nA.status);
      var FA, lA = Number(nA.getResponseHeader("Content-length")), HA = (FA = nA.getResponseHeader("Accept-Ranges")) && FA === "bytes", Ag = (FA = nA.getResponseHeader("Content-Encoding")) && FA === "gzip", sg = 1048576;
      HA || (sg = lA);
      var fg = this;
      fg.setDataGetter(function(ag) {
        var yA = ag * sg, xA = (ag + 1) * sg - 1;
        if (xA = Math.min(xA, lA - 1), fg.chunks[ag] === void 0 && (fg.chunks[ag] = function(_g, Vg) {
          if (_g > Vg)
            throw new Error("invalid range (" + _g + ", " + Vg + ") or no bytes requested!");
          if (Vg > lA - 1)
            throw new Error("only " + lA + " bytes available! programmer error!");
          var zg = new XMLHttpRequest();
          if (zg.open("GET", y, !1), lA !== sg && zg.setRequestHeader("Range", "bytes=" + _g + "-" + Vg), typeof Uint8Array < "u" && (zg.responseType = "arraybuffer"), zg.overrideMimeType && zg.overrideMimeType("text/plain; charset=x-user-defined"), zg.send(null), !(zg.status >= 200 && zg.status < 300 || zg.status === 304))
            throw new Error("Couldn't load " + y + ". Status: " + zg.status);
          return zg.response !== void 0 ? new Uint8Array(zg.response || []) : pt(zg.responseText || "", !0);
        }(yA, xA)), fg.chunks[ag] === void 0)
          throw new Error("doXHR failed!");
        return fg.chunks[ag];
      }), !Ag && lA || (sg = lA = 1, lA = this.getter(0).length, sg = lA, D("LazyFiles on gzip forces download of the whole file when length is accessed")), this._length = lA, this._chunkSize = sg, this.lengthKnown = !0;
    }, typeof XMLHttpRequest < "u") {
      if (!t)
        throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
      var b = new U();
      Object.defineProperties(b, { length: { get: function() {
        return this.lengthKnown || this.cacheLength(), this._length;
      } }, chunkSize: { get: function() {
        return this.lengthKnown || this.cacheLength(), this._chunkSize;
      } } });
      var q = { isDevice: !1, contents: b };
    } else
      q = { isDevice: !1, url: y };
    var H = u.createFile(n, c, q, R, S);
    q.contents ? H.contents = q.contents : q.url && (H.contents = null, H.url = q.url), Object.defineProperties(H, { usedBytes: { get: function() {
      return this.contents.length;
    } } });
    var iA = {};
    return Object.keys(H.stream_ops).forEach(function(nA) {
      var FA = H.stream_ops[nA];
      iA[nA] = function() {
        return u.forceLoadFile(H), FA.apply(null, arguments);
      };
    }), iA.read = function(nA, FA, lA, HA, Ag) {
      u.forceLoadFile(H);
      var sg = nA.node.contents;
      if (Ag >= sg.length)
        return 0;
      var fg = Math.min(sg.length - Ag, HA);
      if (sg.slice)
        for (var ag = 0; ag < fg; ag++)
          FA[lA + ag] = sg[Ag + ag];
      else
        for (ag = 0; ag < fg; ag++)
          FA[lA + ag] = sg.get(Ag + ag);
      return fg;
    }, H.stream_ops = iA, H;
  }, createPreloadedFile: function(n, c, y, R, S, U, b, q, H, iA) {
    EA.init();
    var nA = c ? og.resolve(TA.join2(n, c)) : n;
    function FA(lA) {
      function HA(sg) {
        iA && iA(), q || u.createDataFile(n, c, sg, R, S, H), U && U(), Xg();
      }
      var Ag = !1;
      I.preloadPlugins.forEach(function(sg) {
        Ag || sg.canHandle(nA) && (sg.handle(lA, nA, HA, function() {
          b && b(), Xg();
        }), Ag = !0);
      }), Ag || HA(lA);
    }
    Yg(), typeof y == "string" ? EA.asyncLoad(y, function(lA) {
      FA(lA);
    }, b) : FA(y);
  }, indexedDB: function() {
    return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  }, DB_NAME: function() {
    return "EM_FS_" + window.location.pathname;
  }, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: function(n, c, y) {
    c = c || function() {
    }, y = y || function() {
    };
    var R = u.indexedDB();
    try {
      var S = R.open(u.DB_NAME(), u.DB_VERSION);
    } catch (U) {
      return y(U);
    }
    S.onupgradeneeded = function() {
      D("creating db"), S.result.createObjectStore(u.DB_STORE_NAME);
    }, S.onsuccess = function() {
      var U = S.result.transaction([u.DB_STORE_NAME], "readwrite"), b = U.objectStore(u.DB_STORE_NAME), q = 0, H = 0, iA = n.length;
      function nA() {
        H == 0 ? c() : y();
      }
      n.forEach(function(FA) {
        var lA = b.put(u.analyzePath(FA).object.contents, FA);
        lA.onsuccess = function() {
          ++q + H == iA && nA();
        }, lA.onerror = function() {
          H++, q + H == iA && nA();
        };
      }), U.onerror = y;
    }, S.onerror = y;
  }, loadFilesFromDB: function(n, c, y) {
    c = c || function() {
    }, y = y || function() {
    };
    var R = u.indexedDB();
    try {
      var S = R.open(u.DB_NAME(), u.DB_VERSION);
    } catch (U) {
      return y(U);
    }
    S.onupgradeneeded = y, S.onsuccess = function() {
      var U = S.result;
      try {
        var b = U.transaction([u.DB_STORE_NAME], "readonly");
      } catch (lA) {
        return void y(lA);
      }
      var q = b.objectStore(u.DB_STORE_NAME), H = 0, iA = 0, nA = n.length;
      function FA() {
        iA == 0 ? c() : y();
      }
      n.forEach(function(lA) {
        var HA = q.get(lA);
        HA.onsuccess = function() {
          u.analyzePath(lA).exists && u.unlink(lA), u.createDataFile(TA.dirname(lA), TA.basename(lA), HA.result, !0, !0, !0), ++H + iA == nA && FA();
        }, HA.onerror = function() {
          iA++, H + iA == nA && FA();
        };
      }), b.onerror = y;
    }, S.onerror = y;
  } }, Qg = { mappings: {}, DEFAULT_POLLMASK: 5, umask: 511, calculateAt: function(n, c) {
    if (c[0] !== "/") {
      var y;
      if (n === -100)
        y = u.cwd();
      else {
        var R = u.getStream(n);
        if (!R)
          throw new u.ErrnoError(8);
        y = R.path;
      }
      c = TA.join2(y, c);
    }
    return c;
  }, doStat: function(n, c, y) {
    try {
      var R = n(c);
    } catch (S) {
      if (S && S.node && TA.normalize(c) !== TA.normalize(u.getPath(S.node)))
        return -54;
      throw S;
    }
    return O[y >> 2] = R.dev, O[y + 4 >> 2] = 0, O[y + 8 >> 2] = R.ino, O[y + 12 >> 2] = R.mode, O[y + 16 >> 2] = R.nlink, O[y + 20 >> 2] = R.uid, O[y + 24 >> 2] = R.gid, O[y + 28 >> 2] = R.rdev, O[y + 32 >> 2] = 0, dI = [R.size >>> 0, (nI = R.size, +Math.abs(nI) >= 1 ? nI > 0 ? (0 | Math.min(+Math.floor(nI / 4294967296), 4294967295)) >>> 0 : ~~+Math.ceil((nI - +(~~nI >>> 0)) / 4294967296) >>> 0 : 0)], O[y + 40 >> 2] = dI[0], O[y + 44 >> 2] = dI[1], O[y + 48 >> 2] = 4096, O[y + 52 >> 2] = R.blocks, O[y + 56 >> 2] = R.atime.getTime() / 1e3 | 0, O[y + 60 >> 2] = 0, O[y + 64 >> 2] = R.mtime.getTime() / 1e3 | 0, O[y + 68 >> 2] = 0, O[y + 72 >> 2] = R.ctime.getTime() / 1e3 | 0, O[y + 76 >> 2] = 0, dI = [R.ino >>> 0, (nI = R.ino, +Math.abs(nI) >= 1 ? nI > 0 ? (0 | Math.min(+Math.floor(nI / 4294967296), 4294967295)) >>> 0 : ~~+Math.ceil((nI - +(~~nI >>> 0)) / 4294967296) >>> 0 : 0)], O[y + 80 >> 2] = dI[0], O[y + 84 >> 2] = dI[1], 0;
  }, doMsync: function(n, c, y, R, S) {
    var U = _.slice(n, n + y);
    u.msync(c, U, S, y, R);
  }, doMkdir: function(n, c) {
    return (n = TA.normalize(n))[n.length - 1] === "/" && (n = n.substr(0, n.length - 1)), u.mkdir(n, c, 0), 0;
  }, doMknod: function(n, c, y) {
    switch (61440 & c) {
      case 32768:
      case 8192:
      case 24576:
      case 4096:
      case 49152:
        break;
      default:
        return -28;
    }
    return u.mknod(n, c, y), 0;
  }, doReadlink: function(n, c, y) {
    if (y <= 0)
      return -28;
    var R = u.readlink(n), S = Math.min(y, $(R)), U = P[c + S];
    return Z(R, c, y + 1), P[c + S] = U, S;
  }, doAccess: function(n, c) {
    if (-8 & c)
      return -28;
    var y;
    if (!(y = u.lookupPath(n, { follow: !0 }).node))
      return -44;
    var R = "";
    return 4 & c && (R += "r"), 2 & c && (R += "w"), 1 & c && (R += "x"), R && u.nodePermissions(y, R) ? -2 : 0;
  }, doDup: function(n, c, y) {
    var R = u.getStream(y);
    return R && u.close(R), u.open(n, c, 0, y, y).fd;
  }, doReadv: function(n, c, y, R) {
    for (var S = 0, U = 0; U < y; U++) {
      var b = O[c + 8 * U >> 2], q = O[c + (8 * U + 4) >> 2], H = u.read(n, P, b, q, R);
      if (H < 0)
        return -1;
      if (S += H, H < q)
        break;
    }
    return S;
  }, doWritev: function(n, c, y, R) {
    for (var S = 0, U = 0; U < y; U++) {
      var b = O[c + 8 * U >> 2], q = O[c + (8 * U + 4) >> 2], H = u.write(n, P, b, q, R);
      if (H < 0)
        return -1;
      S += H;
    }
    return S;
  }, varargs: void 0, get: function() {
    return Qg.varargs += 4, O[Qg.varargs - 4 >> 2];
  }, getStr: function(n) {
    return x(n);
  }, getStreamFromFD: function(n) {
    var c = u.getStream(n);
    if (!c)
      throw new u.ErrnoError(8);
    return c;
  }, get64: function(n, c) {
    return n;
  } }, ug = {};
  function ng(n) {
    for (; n.length; ) {
      var c = n.pop();
      n.pop()(c);
    }
  }
  function vg(n) {
    return this.fromWireType(rA[n >> 2]);
  }
  var OA = {}, Fg = {}, cB = {}, YB = 48, ea = 57;
  function IB(n) {
    if (n === void 0)
      return "_unknown";
    var c = (n = n.replace(/[^a-zA-Z0-9_]/g, "$")).charCodeAt(0);
    return c >= YB && c <= ea ? "_" + n : n;
  }
  function hi(n, c) {
    return n = IB(n), new Function("body", "return function " + n + `() {
    "use strict" ;    return body.apply(this, arguments);
};
`)(c);
  }
  function lE(n, c) {
    var y = hi(c, function(R) {
      this.name = c, this.message = R;
      var S = new Error(R).stack;
      S !== void 0 && (this.stack = this.toString() + `
` + S.replace(/^Error(:[^\n]*)?\n/, ""));
    });
    return y.prototype = Object.create(n.prototype), y.prototype.constructor = y, y.prototype.toString = function() {
      return this.message === void 0 ? this.name : this.name + ": " + this.message;
    }, y;
  }
  var Di = void 0;
  function GE(n) {
    throw new Di(n);
  }
  function _I(n, c, y) {
    function R(q) {
      var H = y(q);
      H.length !== n.length && GE("Mismatched type converter count");
      for (var iA = 0; iA < n.length; ++iA)
        xC(n[iA], H[iA]);
    }
    n.forEach(function(q) {
      cB[q] = c;
    });
    var S = new Array(c.length), U = [], b = 0;
    c.forEach(function(q, H) {
      Fg.hasOwnProperty(q) ? S[H] = Fg[q] : (U.push(q), OA.hasOwnProperty(q) || (OA[q] = []), OA[q].push(function() {
        S[H] = Fg[q], ++b === U.length && R(S);
      }));
    }), U.length === 0 && R(S);
  }
  var HC = {};
  function ci(n) {
    switch (n) {
      case 1:
        return 0;
      case 2:
        return 1;
      case 4:
        return 2;
      case 8:
        return 3;
      default:
        throw new TypeError("Unknown type size: " + n);
    }
  }
  var Gt = void 0;
  function rI(n) {
    for (var c = "", y = n; _[y]; )
      c += Gt[_[y++]];
    return c;
  }
  var JB = void 0;
  function Mg(n) {
    throw new JB(n);
  }
  function xC(n, c, y) {
    if (y = y || {}, !("argPackAdvance" in c))
      throw new TypeError("registerType registeredInstance requires argPackAdvance");
    var R = c.name;
    if (n || Mg('type "' + R + '" must have a positive integer typeid pointer'), Fg.hasOwnProperty(n)) {
      if (y.ignoreDuplicateRegistrations)
        return;
      Mg("Cannot register type '" + R + "' twice");
    }
    if (Fg[n] = c, delete cB[n], OA.hasOwnProperty(n)) {
      var S = OA[n];
      delete OA[n], S.forEach(function(U) {
        U();
      });
    }
  }
  function wi(n) {
    if (!(this instanceof CB) || !(n instanceof CB))
      return !1;
    for (var c = this.$$.ptrType.registeredClass, y = this.$$.ptr, R = n.$$.ptrType.registeredClass, S = n.$$.ptr; c.baseClass; )
      y = c.upcast(y), c = c.baseClass;
    for (; R.baseClass; )
      S = R.upcast(S), R = R.baseClass;
    return c === R && y === S;
  }
  function yE(n) {
    Mg(n.$$.ptrType.registeredClass.name + " instance already deleted");
  }
  var li = !1;
  function yt(n) {
  }
  function dt(n) {
    n.count.value -= 1, n.count.value === 0 && function(c) {
      c.smartPtr ? c.smartPtrType.rawDestructor(c.smartPtr) : c.ptrType.registeredClass.rawDestructor(c.ptr);
    }(n);
  }
  function _B(n) {
    return typeof FinalizationGroup > "u" ? (_B = function(c) {
      return c;
    }, n) : (li = new FinalizationGroup(function(c) {
      for (var y = c.next(); !y.done; y = c.next()) {
        var R = y.value;
        R.ptr ? dt(R) : console.warn("object already deleted: " + R.ptr);
      }
    }), _B = function(c) {
      return li.register(c, c.$$, c.$$), c;
    }, yt = function(c) {
      li.unregister(c.$$);
    }, _B(n));
  }
  function Gi() {
    if (this.$$.ptr || yE(this), this.$$.preservePointerOnDelete)
      return this.$$.count.value += 1, this;
    var n, c = _B(Object.create(Object.getPrototypeOf(this), { $$: { value: (n = this.$$, { count: n.count, deleteScheduled: n.deleteScheduled, preservePointerOnDelete: n.preservePointerOnDelete, ptr: n.ptr, ptrType: n.ptrType, smartPtr: n.smartPtr, smartPtrType: n.smartPtrType }) } }));
    return c.$$.count.value += 1, c.$$.deleteScheduled = !1, c;
  }
  function sa() {
    this.$$.ptr || yE(this), this.$$.deleteScheduled && !this.$$.preservePointerOnDelete && Mg("Object already scheduled for deletion"), yt(this), dt(this.$$), this.$$.preservePointerOnDelete || (this.$$.smartPtr = void 0, this.$$.ptr = void 0);
  }
  function yi() {
    return !this.$$.ptr;
  }
  var kQ = void 0, KQ = [];
  function di() {
    for (; KQ.length; ) {
      var n = KQ.pop();
      n.$$.deleteScheduled = !1, n.delete();
    }
  }
  function aa() {
    return this.$$.ptr || yE(this), this.$$.deleteScheduled && !this.$$.preservePointerOnDelete && Mg("Object already scheduled for deletion"), KQ.push(this), KQ.length === 1 && kQ && kQ(di), this.$$.deleteScheduled = !0, this;
  }
  function CB() {
  }
  var Fi = {};
  function dE(n, c, y) {
    if (n[c].overloadTable === void 0) {
      var R = n[c];
      n[c] = function() {
        return n[c].overloadTable.hasOwnProperty(arguments.length) || Mg("Function '" + y + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + n[c].overloadTable + ")!"), n[c].overloadTable[arguments.length].apply(this, arguments);
      }, n[c].overloadTable = [], n[c].overloadTable[R.argCount] = R;
    }
  }
  function Ri(n, c, y) {
    I.hasOwnProperty(n) ? ((y === void 0 || I[n].overloadTable !== void 0 && I[n].overloadTable[y] !== void 0) && Mg("Cannot register public name '" + n + "' twice"), dE(I, n, n), I.hasOwnProperty(y) && Mg("Cannot register multiple overloads of a function with the same number of arguments (" + y + ")!"), I[n].overloadTable[y] = c) : (I[n] = c, y !== void 0 && (I[n].numArguments = y));
  }
  function Ft(n, c, y, R, S, U, b, q) {
    this.name = n, this.constructor = c, this.instancePrototype = y, this.rawDestructor = R, this.baseClass = S, this.getActualType = U, this.upcast = b, this.downcast = q, this.pureVirtualFunctions = [];
  }
  function SQ(n, c, y) {
    for (; c !== y; )
      c.upcast || Mg("Expected null or instance of " + y.name + ", got an instance of " + c.name), n = c.upcast(n), c = c.baseClass;
    return n;
  }
  function na(n, c) {
    if (c === null)
      return this.isReference && Mg("null is not a valid " + this.name), 0;
    c.$$ || Mg('Cannot pass "' + AQ(c) + '" as a ' + this.name), c.$$.ptr || Mg("Cannot pass deleted object as a pointer of type " + this.name);
    var y = c.$$.ptrType.registeredClass;
    return SQ(c.$$.ptr, y, this.registeredClass);
  }
  function Rt(n, c) {
    var y;
    if (c === null)
      return this.isReference && Mg("null is not a valid " + this.name), this.isSmartPointer ? (y = this.rawConstructor(), n !== null && n.push(this.rawDestructor, y), y) : 0;
    c.$$ || Mg('Cannot pass "' + AQ(c) + '" as a ' + this.name), c.$$.ptr || Mg("Cannot pass deleted object as a pointer of type " + this.name), !this.isConst && c.$$.ptrType.isConst && Mg("Cannot convert argument of type " + (c.$$.smartPtrType ? c.$$.smartPtrType.name : c.$$.ptrType.name) + " to parameter type " + this.name);
    var R = c.$$.ptrType.registeredClass;
    if (y = SQ(c.$$.ptr, R, this.registeredClass), this.isSmartPointer)
      switch (c.$$.smartPtr === void 0 && Mg("Passing raw pointer to smart pointer is illegal"), this.sharingPolicy) {
        case 0:
          c.$$.smartPtrType === this ? y = c.$$.smartPtr : Mg("Cannot convert argument of type " + (c.$$.smartPtrType ? c.$$.smartPtrType.name : c.$$.ptrType.name) + " to parameter type " + this.name);
          break;
        case 1:
          y = c.$$.smartPtr;
          break;
        case 2:
          if (c.$$.smartPtrType === this)
            y = c.$$.smartPtr;
          else {
            var S = c.clone();
            y = this.rawShare(y, qC(function() {
              S.delete();
            })), n !== null && n.push(this.rawDestructor, y);
          }
          break;
        default:
          Mg("Unsupporting sharing policy");
      }
    return y;
  }
  function F(n, c) {
    if (c === null)
      return this.isReference && Mg("null is not a valid " + this.name), 0;
    c.$$ || Mg('Cannot pass "' + AQ(c) + '" as a ' + this.name), c.$$.ptr || Mg("Cannot pass deleted object as a pointer of type " + this.name), c.$$.ptrType.isConst && Mg("Cannot convert argument of type " + c.$$.ptrType.name + " to parameter type " + this.name);
    var y = c.$$.ptrType.registeredClass;
    return SQ(c.$$.ptr, y, this.registeredClass);
  }
  function K(n) {
    return this.rawGetPointee && (n = this.rawGetPointee(n)), n;
  }
  function J(n) {
    this.rawDestructor && this.rawDestructor(n);
  }
  function V(n) {
    n !== null && n.delete();
  }
  function BA(n, c, y) {
    if (c === y)
      return n;
    if (y.baseClass === void 0)
      return null;
    var R = BA(n, c, y.baseClass);
    return R === null ? null : y.downcast(R);
  }
  function j() {
    return Object.keys(dA).length;
  }
  function sA() {
    var n = [];
    for (var c in dA)
      dA.hasOwnProperty(c) && n.push(dA[c]);
    return n;
  }
  function wA(n) {
    kQ = n, KQ.length && kQ && kQ(di);
  }
  var dA = {};
  function ZA(n, c) {
    return c = function(y, R) {
      for (R === void 0 && Mg("ptr should not be undefined"); y.baseClass; )
        R = y.upcast(R), y = y.baseClass;
      return R;
    }(n, c), dA[c];
  }
  function Ng(n, c) {
    return c.ptrType && c.ptr || GE("makeClassHandle requires ptr and ptrType"), !!c.smartPtrType != !!c.smartPtr && GE("Both smartPtrType and smartPtr must be specified"), c.count = { value: 1 }, _B(Object.create(n, { $$: { value: c } }));
  }
  function Eg(n) {
    var c = this.getPointee(n);
    if (!c)
      return this.destructor(n), null;
    var y = ZA(this.registeredClass, c);
    if (y !== void 0) {
      if (y.$$.count.value === 0)
        return y.$$.ptr = c, y.$$.smartPtr = n, y.clone();
      var R = y.clone();
      return this.destructor(n), R;
    }
    function S() {
      return this.isSmartPointer ? Ng(this.registeredClass.instancePrototype, { ptrType: this.pointeeType, ptr: c, smartPtrType: this, smartPtr: n }) : Ng(this.registeredClass.instancePrototype, { ptrType: this, ptr: n });
    }
    var U, b = this.registeredClass.getActualType(c), q = Fi[b];
    if (!q)
      return S.call(this);
    U = this.isConst ? q.constPointerType : q.pointerType;
    var H = BA(c, this.registeredClass, U.registeredClass);
    return H === null ? S.call(this) : this.isSmartPointer ? Ng(U.registeredClass.instancePrototype, { ptrType: U, ptr: H, smartPtrType: this, smartPtr: n }) : Ng(U.registeredClass.instancePrototype, { ptrType: U, ptr: H });
  }
  function SA(n, c, y, R, S, U, b, q, H, iA, nA) {
    this.name = n, this.registeredClass = c, this.isReference = y, this.isConst = R, this.isSmartPointer = S, this.pointeeType = U, this.sharingPolicy = b, this.rawGetPointee = q, this.rawConstructor = H, this.rawShare = iA, this.rawDestructor = nA, S || c.baseClass !== void 0 ? this.toWireType = Rt : R ? (this.toWireType = na, this.destructorFunction = null) : (this.toWireType = F, this.destructorFunction = null);
  }
  function LA(n, c, y) {
    I.hasOwnProperty(n) || GE("Replacing nonexistant public symbol"), I[n].overloadTable !== void 0 && y !== void 0 ? I[n].overloadTable[y] = c : (I[n] = c, I[n].argCount = y);
  }
  function Ig(n, c, y) {
    return n.indexOf("j") != -1 ? function(R, S, U) {
      return U && U.length ? I["dynCall_" + R].apply(null, [S].concat(U)) : I["dynCall_" + R].call(null, S);
    }(n, c, y) : GA.get(c).apply(null, y);
  }
  function mA(n, c) {
    var y = (n = rI(n)).indexOf("j") != -1 ? function(R, S) {
      M(R.indexOf("j") >= 0, "getDynCaller should only be called with i64 sigs");
      var U = [];
      return function() {
        U.length = arguments.length;
        for (var b = 0; b < arguments.length; b++)
          U[b] = arguments[b];
        return Ig(R, S, U);
      };
    }(n, c) : GA.get(c);
    return typeof y != "function" && Mg("unknown function pointer with signature " + n + ": " + c), y;
  }
  var _A = void 0;
  function Gg(n) {
    var c = fD(n), y = rI(c);
    return fB(c), y;
  }
  function Hg(n, c) {
    var y = [], R = {};
    throw c.forEach(function S(U) {
      R[U] || Fg[U] || (cB[U] ? cB[U].forEach(S) : (y.push(U), R[U] = !0));
    }), new _A(n + ": " + y.map(Gg).join([", "]));
  }
  function $g(n, c) {
    if (!(n instanceof Function))
      throw new TypeError("new_ called with constructor type " + typeof n + " which is not a function");
    var y = hi(n.name || "unknownFunctionName", function() {
    });
    y.prototype = n.prototype;
    var R = new y(), S = n.apply(R, c);
    return S instanceof Object ? S : R;
  }
  function WI(n, c, y, R, S) {
    var U = c.length;
    U < 2 && Mg("argTypes array size mismatch! Must at least get return value and 'this' types!");
    for (var b = c[1] !== null && y !== null, q = !1, H = 1; H < c.length; ++H)
      if (c[H] !== null && c[H].destructorFunction === void 0) {
        q = !0;
        break;
      }
    var iA = c[0].name !== "void", nA = "", FA = "";
    for (H = 0; H < U - 2; ++H)
      nA += (H !== 0 ? ", " : "") + "arg" + H, FA += (H !== 0 ? ", " : "") + "arg" + H + "Wired";
    var lA = "return function " + IB(n) + "(" + nA + `) {
if (arguments.length !== ` + (U - 2) + `) {
throwBindingError('function ` + n + " called with ' + arguments.length + ' arguments, expected " + (U - 2) + ` args!');
}
`;
    q && (lA += `var destructors = [];
`);
    var HA = q ? "destructors" : "null", Ag = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"], sg = [Mg, R, S, ng, c[0], c[1]];
    for (b && (lA += "var thisWired = classParam.toWireType(" + HA + `, this);
`), H = 0; H < U - 2; ++H)
      lA += "var arg" + H + "Wired = argType" + H + ".toWireType(" + HA + ", arg" + H + "); // " + c[H + 2].name + `
`, Ag.push("argType" + H), sg.push(c[H + 2]);
    if (b && (FA = "thisWired" + (FA.length > 0 ? ", " : "") + FA), lA += (iA ? "var rv = " : "") + "invoker(fn" + (FA.length > 0 ? ", " : "") + FA + `);
`, q)
      lA += `runDestructors(destructors);
`;
    else
      for (H = b ? 1 : 2; H < c.length; ++H) {
        var fg = H === 1 ? "thisWired" : "arg" + (H - 2) + "Wired";
        c[H].destructorFunction !== null && (lA += fg + "_dtor(" + fg + "); // " + c[H].name + `
`, Ag.push(fg + "_dtor"), sg.push(c[H].destructorFunction));
      }
    return iA && (lA += `var ret = retType.fromWireType(rv);
return ret;
`), lA += `}
`, Ag.push(lA), $g(Function, Ag).apply(null, sg);
  }
  function tI(n, c) {
    for (var y = [], R = 0; R < n; R++)
      y.push(O[(c >> 2) + R]);
    return y;
  }
  function yg(n, c, y) {
    return n instanceof Object || Mg(y + ' with invalid "this": ' + n), n instanceof c.registeredClass.constructor || Mg(y + ' incompatible with "this" of type ' + n.constructor.name), n.$$.ptr || Mg("cannot call emscripten binding method " + y + " on deleted object"), SQ(n.$$.ptr, n.$$.ptrType.registeredClass, c.registeredClass);
  }
  var Jg = [], cg = [{}, { value: void 0 }, { value: null }, { value: !0 }, { value: !1 }];
  function kg(n) {
    n > 4 && --cg[n].refcount == 0 && (cg[n] = void 0, Jg.push(n));
  }
  function xg() {
    for (var n = 0, c = 5; c < cg.length; ++c)
      cg[c] !== void 0 && ++n;
    return n;
  }
  function II() {
    for (var n = 5; n < cg.length; ++n)
      if (cg[n] !== void 0)
        return cg[n];
    return null;
  }
  function qC(n) {
    switch (n) {
      case void 0:
        return 1;
      case null:
        return 2;
      case !0:
        return 3;
      case !1:
        return 4;
      default:
        var c = Jg.length ? Jg.pop() : cg.length;
        return cg[c] = { refcount: 1, value: n }, c;
    }
  }
  function AQ(n) {
    if (n === null)
      return "null";
    var c = typeof n;
    return c === "object" || c === "array" || c === "function" ? n.toString() : "" + n;
  }
  function Nt(n, c) {
    switch (c) {
      case 2:
        return function(y) {
          return this.fromWireType(eA[y >> 2]);
        };
      case 3:
        return function(y) {
          return this.fromWireType(DA[y >> 3]);
        };
      default:
        throw new TypeError("Unknown float type: " + n);
    }
  }
  function gQ(n, c, y) {
    switch (c) {
      case 0:
        return y ? function(R) {
          return P[R];
        } : function(R) {
          return _[R];
        };
      case 1:
        return y ? function(R) {
          return QA[R >> 1];
        } : function(R) {
          return tA[R >> 1];
        };
      case 2:
        return y ? function(R) {
          return O[R >> 2];
        } : function(R) {
          return rA[R >> 2];
        };
      default:
        throw new TypeError("Unknown integer type: " + n);
    }
  }
  var ra = {};
  function pQ(n) {
    var c = ra[n];
    return c === void 0 ? rI(n) : c;
  }
  var BB = [];
  function IQ(n) {
    return n || Mg("Cannot use deleted val. handle = " + n), cg[n].value;
  }
  function KD(n, c) {
    var y = Fg[n];
    return y === void 0 && Mg(c + " has unknown type " + Gg(n)), y;
  }
  function LR(n) {
    try {
      return N.grow(n - AA.byteLength + 65535 >>> 16), gg(N.buffer), 1;
    } catch {
    }
  }
  var SD = {};
  function Ni() {
    if (!Ni.strings) {
      var n = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: i || "./this.program" };
      for (var c in SD)
        n[c] = SD[c];
      var y = [];
      for (var c in n)
        y.push(c + "=" + n[c]);
      Ni.strings = y;
    }
    return Ni.strings;
  }
  function ut(n) {
    return n % 4 == 0 && (n % 100 != 0 || n % 400 == 0);
  }
  function ha(n, c) {
    for (var y = 0, R = 0; R <= c; y += n[R++])
      ;
    return y;
  }
  var kt = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Kt = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  function St(n, c) {
    for (var y = new Date(n.getTime()); c > 0; ) {
      var R = ut(y.getFullYear()), S = y.getMonth(), U = (R ? kt : Kt)[S];
      if (!(c > U - y.getDate()))
        return y.setDate(y.getDate() + c), y;
      c -= U - y.getDate() + 1, y.setDate(1), S < 11 ? y.setMonth(S + 1) : (y.setMonth(0), y.setFullYear(y.getFullYear() + 1));
    }
    return y;
  }
  function mR(n, c, y, R) {
    var S = O[R + 40 >> 2], U = { tm_sec: O[R >> 2], tm_min: O[R + 4 >> 2], tm_hour: O[R + 8 >> 2], tm_mday: O[R + 12 >> 2], tm_mon: O[R + 16 >> 2], tm_year: O[R + 20 >> 2], tm_wday: O[R + 24 >> 2], tm_yday: O[R + 28 >> 2], tm_isdst: O[R + 32 >> 2], tm_gmtoff: O[R + 36 >> 2], tm_zone: S ? x(S) : "" }, b = x(y), q = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" };
    for (var H in q)
      b = b.replace(new RegExp(H, "g"), q[H]);
    var iA = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], nA = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    function FA(yA, xA, _g) {
      for (var Vg = typeof yA == "number" ? yA.toString() : yA || ""; Vg.length < xA; )
        Vg = _g[0] + Vg;
      return Vg;
    }
    function lA(yA, xA) {
      return FA(yA, xA, "0");
    }
    function HA(yA, xA) {
      function _g(zg) {
        return zg < 0 ? -1 : zg > 0 ? 1 : 0;
      }
      var Vg;
      return (Vg = _g(yA.getFullYear() - xA.getFullYear())) === 0 && (Vg = _g(yA.getMonth() - xA.getMonth())) === 0 && (Vg = _g(yA.getDate() - xA.getDate())), Vg;
    }
    function Ag(yA) {
      switch (yA.getDay()) {
        case 0:
          return new Date(yA.getFullYear() - 1, 11, 29);
        case 1:
          return yA;
        case 2:
          return new Date(yA.getFullYear(), 0, 3);
        case 3:
          return new Date(yA.getFullYear(), 0, 2);
        case 4:
          return new Date(yA.getFullYear(), 0, 1);
        case 5:
          return new Date(yA.getFullYear() - 1, 11, 31);
        case 6:
          return new Date(yA.getFullYear() - 1, 11, 30);
      }
    }
    function sg(yA) {
      var xA = St(new Date(yA.tm_year + 1900, 0, 1), yA.tm_yday), _g = new Date(xA.getFullYear(), 0, 4), Vg = new Date(xA.getFullYear() + 1, 0, 4), zg = Ag(_g), wB = Ag(Vg);
      return HA(zg, xA) <= 0 ? HA(wB, xA) <= 0 ? xA.getFullYear() + 1 : xA.getFullYear() : xA.getFullYear() - 1;
    }
    var fg = { "%a": function(yA) {
      return iA[yA.tm_wday].substring(0, 3);
    }, "%A": function(yA) {
      return iA[yA.tm_wday];
    }, "%b": function(yA) {
      return nA[yA.tm_mon].substring(0, 3);
    }, "%B": function(yA) {
      return nA[yA.tm_mon];
    }, "%C": function(yA) {
      return lA((yA.tm_year + 1900) / 100 | 0, 2);
    }, "%d": function(yA) {
      return lA(yA.tm_mday, 2);
    }, "%e": function(yA) {
      return FA(yA.tm_mday, 2, " ");
    }, "%g": function(yA) {
      return sg(yA).toString().substring(2);
    }, "%G": function(yA) {
      return sg(yA);
    }, "%H": function(yA) {
      return lA(yA.tm_hour, 2);
    }, "%I": function(yA) {
      var xA = yA.tm_hour;
      return xA == 0 ? xA = 12 : xA > 12 && (xA -= 12), lA(xA, 2);
    }, "%j": function(yA) {
      return lA(yA.tm_mday + ha(ut(yA.tm_year + 1900) ? kt : Kt, yA.tm_mon - 1), 3);
    }, "%m": function(yA) {
      return lA(yA.tm_mon + 1, 2);
    }, "%M": function(yA) {
      return lA(yA.tm_min, 2);
    }, "%n": function() {
      return `
`;
    }, "%p": function(yA) {
      return yA.tm_hour >= 0 && yA.tm_hour < 12 ? "AM" : "PM";
    }, "%S": function(yA) {
      return lA(yA.tm_sec, 2);
    }, "%t": function() {
      return "	";
    }, "%u": function(yA) {
      return yA.tm_wday || 7;
    }, "%U": function(yA) {
      var xA = new Date(yA.tm_year + 1900, 0, 1), _g = xA.getDay() === 0 ? xA : St(xA, 7 - xA.getDay()), Vg = new Date(yA.tm_year + 1900, yA.tm_mon, yA.tm_mday);
      if (HA(_g, Vg) < 0) {
        var zg = ha(ut(Vg.getFullYear()) ? kt : Kt, Vg.getMonth() - 1) - 31, wB = 31 - _g.getDate() + zg + Vg.getDate();
        return lA(Math.ceil(wB / 7), 2);
      }
      return HA(_g, xA) === 0 ? "01" : "00";
    }, "%V": function(yA) {
      var xA, _g = new Date(yA.tm_year + 1900, 0, 4), Vg = new Date(yA.tm_year + 1901, 0, 4), zg = Ag(_g), wB = Ag(Vg), mD = St(new Date(yA.tm_year + 1900, 0, 1), yA.tm_yday);
      return HA(mD, zg) < 0 ? "53" : HA(wB, mD) <= 0 ? "01" : (xA = zg.getFullYear() < yA.tm_year + 1900 ? yA.tm_yday + 32 - zg.getDate() : yA.tm_yday + 1 - zg.getDate(), lA(Math.ceil(xA / 7), 2));
    }, "%w": function(yA) {
      return yA.tm_wday;
    }, "%W": function(yA) {
      var xA = new Date(yA.tm_year, 0, 1), _g = xA.getDay() === 1 ? xA : St(xA, xA.getDay() === 0 ? 1 : 7 - xA.getDay() + 1), Vg = new Date(yA.tm_year + 1900, yA.tm_mon, yA.tm_mday);
      if (HA(_g, Vg) < 0) {
        var zg = ha(ut(Vg.getFullYear()) ? kt : Kt, Vg.getMonth() - 1) - 31, wB = 31 - _g.getDate() + zg + Vg.getDate();
        return lA(Math.ceil(wB / 7), 2);
      }
      return HA(_g, xA) === 0 ? "01" : "00";
    }, "%y": function(yA) {
      return (yA.tm_year + 1900).toString().substring(2);
    }, "%Y": function(yA) {
      return yA.tm_year + 1900;
    }, "%z": function(yA) {
      var xA = yA.tm_gmtoff, _g = xA >= 0;
      return xA = (xA = Math.abs(xA) / 60) / 60 * 100 + xA % 60, (_g ? "+" : "-") + ("0000" + xA).slice(-4);
    }, "%Z": function(yA) {
      return yA.tm_zone;
    }, "%%": function() {
      return "%";
    } };
    for (var H in fg)
      b.indexOf(H) >= 0 && (b = b.replace(new RegExp(H, "g"), fg[H](U)));
    var ag = pt(b, !1);
    return ag.length > c ? 0 : (function(yA, xA) {
      P.set(yA, xA);
    }(ag, n), ag.length - 1);
  }
  I.requestFullscreen = function(n, c) {
    EA.requestFullscreen(n, c);
  }, I.requestAnimationFrame = function(n) {
    EA.requestAnimationFrame(n);
  }, I.setCanvasSize = function(n, c, y) {
    EA.setCanvasSize(n, c, y);
  }, I.pauseMainLoop = function() {
    EA.mainLoop.pause();
  }, I.resumeMainLoop = function() {
    EA.mainLoop.resume();
  }, I.getUserMedia = function() {
    EA.getUserMedia();
  }, I.createContext = function(n, c, y, R) {
    return EA.createContext(n, c, y, R);
  };
  var pD = function(n, c, y, R) {
    n || (n = this), this.parent = n, this.mount = n.mount, this.mounted = null, this.id = u.nextInode++, this.name = c, this.mode = y, this.node_ops = {}, this.stream_ops = {}, this.rdev = R;
  }, Da = 365, ca = 146;
  function pt(n, c, y) {
    var R = y > 0 ? y : $(n) + 1, S = new Array(R), U = T(n, S, 0, S.length);
    return c && (S.length = U), S;
  }
  function MD(n) {
    for (var c = [], y = 0; y < n.length; y++) {
      var R = n[y];
      R > 255 && (R &= 255), c.push(String.fromCharCode(R));
    }
    return c.join("");
  }
  Object.defineProperties(pD.prototype, { read: { get: function() {
    return (this.mode & Da) === Da;
  }, set: function(n) {
    n ? this.mode |= Da : this.mode &= -366;
  } }, write: { get: function() {
    return (this.mode & ca) === ca;
  }, set: function(n) {
    n ? this.mode |= ca : this.mode &= -147;
  } }, isFolder: { get: function() {
    return u.isDir(this.mode);
  } }, isDevice: { get: function() {
    return u.isChrdev(this.mode);
  } } }), u.FSNode = pD, u.staticInit(), I.FS_createPath = u.createPath, I.FS_createDataFile = u.createDataFile, I.FS_createPreloadedFile = u.createPreloadedFile, I.FS_createLazyFile = u.createLazyFile, I.FS_createDevice = u.createDevice, I.FS_unlink = u.unlink, Di = I.InternalError = lE(Error, "InternalError"), function() {
    for (var n = new Array(256), c = 0; c < 256; ++c)
      n[c] = String.fromCharCode(c);
    Gt = n;
  }(), JB = I.BindingError = lE(Error, "BindingError"), CB.prototype.isAliasOf = wi, CB.prototype.clone = Gi, CB.prototype.delete = sa, CB.prototype.isDeleted = yi, CB.prototype.deleteLater = aa, SA.prototype.getPointee = K, SA.prototype.destructor = J, SA.prototype.argPackAdvance = 8, SA.prototype.readValueFromPointer = vg, SA.prototype.deleteObject = V, SA.prototype.fromWireType = Eg, I.getInheritedInstanceCount = j, I.getLiveInheritedInstances = sA, I.flushPendingDeletes = di, I.setDelayFunction = wA, _A = I.UnboundTypeError = lE(Error, "UnboundTypeError"), I.count_emval_handles = xg, I.get_first_emval = II;
  var bR = typeof atob == "function" ? atob : function(n) {
    var c, y, R, S, U, b, q = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", H = "", iA = 0;
    n = n.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    do
      c = q.indexOf(n.charAt(iA++)) << 2 | (S = q.indexOf(n.charAt(iA++))) >> 4, y = (15 & S) << 4 | (U = q.indexOf(n.charAt(iA++))) >> 2, R = (3 & U) << 6 | (b = q.indexOf(n.charAt(iA++))), H += String.fromCharCode(c), U !== 64 && (H += String.fromCharCode(y)), b !== 64 && (H += String.fromCharCode(R));
    while (iA < n.length);
    return H;
  };
  function MQ(n) {
    if (FI(n))
      return function(c) {
        if (typeof e == "boolean" && e) {
          var y;
          try {
            y = Buffer.from(c, "base64");
          } catch {
            y = new Buffer(c, "base64");
          }
          return new Uint8Array(y.buffer, y.byteOffset, y.byteLength);
        }
        try {
          for (var R = bR(c), S = new Uint8Array(R.length), U = 0; U < R.length; ++U)
            S[U] = R.charCodeAt(U);
          return S;
        } catch {
          throw new Error("Converting base64 string to bytes failed.");
        }
      }(n.slice(yI.length));
  }
  lg.push({ func: function() {
    YD();
  } });
  var UD = { __cxa_allocate_exception: function(n) {
    return ui(n + oA.SIZE) + oA.SIZE;
  }, __cxa_atexit: function(n, c) {
  }, __cxa_throw: function(n, c, y) {
    throw new qA(n).init(c, y), n;
  }, __sys_fcntl64: function(n, c, y) {
    Qg.varargs = y;
    try {
      var R = Qg.getStreamFromFD(n);
      switch (c) {
        case 0:
          return (S = Qg.get()) < 0 ? -28 : u.open(R.path, R.flags, 0, S).fd;
        case 1:
        case 2:
        case 13:
        case 14:
          return 0;
        case 3:
          return R.flags;
        case 4:
          var S = Qg.get();
          return R.flags |= S, 0;
        case 12:
          return S = Qg.get(), QA[S + 0 >> 1] = 2, 0;
        case 16:
        case 8:
        default:
          return -28;
        case 9:
          return uA(28), -1;
      }
    } catch (U) {
      return u !== void 0 && U instanceof u.ErrnoError || hg(U), -U.errno;
    }
  }, __sys_ioctl: function(n, c, y) {
    Qg.varargs = y;
    try {
      var R = Qg.getStreamFromFD(n);
      switch (c) {
        case 21509:
        case 21505:
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508:
        case 21523:
        case 21524:
          return R.tty ? 0 : -59;
        case 21519:
          if (!R.tty)
            return -59;
          var S = Qg.get();
          return O[S >> 2] = 0, 0;
        case 21520:
          return R.tty ? -28 : -59;
        case 21531:
          return S = Qg.get(), u.ioctl(R, c, S);
        default:
          hg("bad ioctl syscall " + c);
      }
    } catch (U) {
      return u !== void 0 && U instanceof u.ErrnoError || hg(U), -U.errno;
    }
  }, __sys_open: function(n, c, y) {
    Qg.varargs = y;
    try {
      var R = Qg.getStr(n), S = Qg.get();
      return u.open(R, c, S).fd;
    } catch (U) {
      return u !== void 0 && U instanceof u.ErrnoError || hg(U), -U.errno;
    }
  }, _embind_finalize_value_array: function(n) {
    var c = ug[n];
    delete ug[n];
    var y = c.elements, R = y.length, S = y.map(function(q) {
      return q.getterReturnType;
    }).concat(y.map(function(q) {
      return q.setterArgumentType;
    })), U = c.rawConstructor, b = c.rawDestructor;
    _I([n], S, function(q) {
      return y.forEach(function(H, iA) {
        var nA = q[iA], FA = H.getter, lA = H.getterContext, HA = q[iA + R], Ag = H.setter, sg = H.setterContext;
        H.read = function(fg) {
          return nA.fromWireType(FA(lA, fg));
        }, H.write = function(fg, ag) {
          var yA = [];
          Ag(sg, fg, HA.toWireType(yA, ag)), ng(yA);
        };
      }), [{ name: c.name, fromWireType: function(H) {
        for (var iA = new Array(R), nA = 0; nA < R; ++nA)
          iA[nA] = y[nA].read(H);
        return b(H), iA;
      }, toWireType: function(H, iA) {
        if (R !== iA.length)
          throw new TypeError("Incorrect number of tuple elements for " + c.name + ": expected=" + R + ", actual=" + iA.length);
        for (var nA = U(), FA = 0; FA < R; ++FA)
          y[FA].write(nA, iA[FA]);
        return H !== null && H.push(b, nA), nA;
      }, argPackAdvance: 8, readValueFromPointer: vg, destructorFunction: b }];
    });
  }, _embind_finalize_value_object: function(n) {
    var c = HC[n];
    delete HC[n];
    var y = c.rawConstructor, R = c.rawDestructor, S = c.fields;
    _I([n], S.map(function(U) {
      return U.getterReturnType;
    }).concat(S.map(function(U) {
      return U.setterArgumentType;
    })), function(U) {
      var b = {};
      return S.forEach(function(q, H) {
        var iA = q.fieldName, nA = U[H], FA = q.getter, lA = q.getterContext, HA = U[H + S.length], Ag = q.setter, sg = q.setterContext;
        b[iA] = { read: function(fg) {
          return nA.fromWireType(FA(lA, fg));
        }, write: function(fg, ag) {
          var yA = [];
          Ag(sg, fg, HA.toWireType(yA, ag)), ng(yA);
        } };
      }), [{ name: c.name, fromWireType: function(q) {
        var H = {};
        for (var iA in b)
          H[iA] = b[iA].read(q);
        return R(q), H;
      }, toWireType: function(q, H) {
        for (var iA in b)
          if (!(iA in H))
            throw new TypeError('Missing field:  "' + iA + '"');
        var nA = y();
        for (iA in b)
          b[iA].write(nA, H[iA]);
        return q !== null && q.push(R, nA), nA;
      }, argPackAdvance: 8, readValueFromPointer: vg, destructorFunction: R }];
    });
  }, _embind_register_bool: function(n, c, y, R, S) {
    var U = ci(y);
    xC(n, { name: c = rI(c), fromWireType: function(b) {
      return !!b;
    }, toWireType: function(b, q) {
      return q ? R : S;
    }, argPackAdvance: 8, readValueFromPointer: function(b) {
      var q;
      if (y === 1)
        q = P;
      else if (y === 2)
        q = QA;
      else {
        if (y !== 4)
          throw new TypeError("Unknown boolean type size: " + c);
        q = O;
      }
      return this.fromWireType(q[b >> U]);
    }, destructorFunction: null });
  }, _embind_register_class: function(n, c, y, R, S, U, b, q, H, iA, nA, FA, lA) {
    nA = rI(nA), U = mA(S, U), q && (q = mA(b, q)), iA && (iA = mA(H, iA)), lA = mA(FA, lA);
    var HA = IB(nA);
    Ri(HA, function() {
      Hg("Cannot construct " + nA + " due to unbound types", [R]);
    }), _I([n, c, y], R ? [R] : [], function(Ag) {
      var sg, fg;
      Ag = Ag[0], fg = R ? (sg = Ag.registeredClass).instancePrototype : CB.prototype;
      var ag = hi(HA, function() {
        if (Object.getPrototypeOf(this) !== yA)
          throw new JB("Use 'new' to construct " + nA);
        if (xA.constructor_body === void 0)
          throw new JB(nA + " has no accessible constructor");
        var wB = xA.constructor_body[arguments.length];
        if (wB === void 0)
          throw new JB("Tried to invoke ctor of " + nA + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(xA.constructor_body).toString() + ") parameters instead!");
        return wB.apply(this, arguments);
      }), yA = Object.create(fg, { constructor: { value: ag } });
      ag.prototype = yA;
      var xA = new Ft(nA, ag, yA, lA, sg, U, q, iA), _g = new SA(nA, xA, !0, !1, !1), Vg = new SA(nA + "*", xA, !1, !1, !1), zg = new SA(nA + " const*", xA, !1, !0, !1);
      return Fi[n] = { pointerType: Vg, constPointerType: zg }, LA(HA, ag), [_g, Vg, zg];
    });
  }, _embind_register_class_class_function: function(n, c, y, R, S, U, b) {
    var q = tI(y, R);
    c = rI(c), U = mA(S, U), _I([], [n], function(H) {
      var iA = (H = H[0]).name + "." + c;
      function nA() {
        Hg("Cannot call " + iA + " due to unbound types", q);
      }
      var FA = H.registeredClass.constructor;
      return FA[c] === void 0 ? (nA.argCount = y - 1, FA[c] = nA) : (dE(FA, c, iA), FA[c].overloadTable[y - 1] = nA), _I([], q, function(lA) {
        var HA = [lA[0], null].concat(lA.slice(1)), Ag = WI(iA, HA, null, U, b);
        return FA[c].overloadTable === void 0 ? (Ag.argCount = y - 1, FA[c] = Ag) : FA[c].overloadTable[y - 1] = Ag, [];
      }), [];
    });
  }, _embind_register_class_constructor: function(n, c, y, R, S, U) {
    M(c > 0);
    var b = tI(c, y);
    S = mA(R, S);
    var q = [U], H = [];
    _I([], [n], function(iA) {
      var nA = "constructor " + (iA = iA[0]).name;
      if (iA.registeredClass.constructor_body === void 0 && (iA.registeredClass.constructor_body = []), iA.registeredClass.constructor_body[c - 1] !== void 0)
        throw new JB("Cannot register multiple constructors with identical number of parameters (" + (c - 1) + ") for class '" + iA.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
      return iA.registeredClass.constructor_body[c - 1] = function() {
        Hg("Cannot construct " + iA.name + " due to unbound types", b);
      }, _I([], b, function(FA) {
        return iA.registeredClass.constructor_body[c - 1] = function() {
          arguments.length !== c - 1 && Mg(nA + " called with " + arguments.length + " arguments, expected " + (c - 1)), H.length = 0, q.length = c;
          for (var lA = 1; lA < c; ++lA)
            q[lA] = FA[lA].toWireType(H, arguments[lA - 1]);
          var HA = S.apply(null, q);
          return ng(H), FA[0].fromWireType(HA);
        }, [];
      }), [];
    });
  }, _embind_register_class_function: function(n, c, y, R, S, U, b, q) {
    var H = tI(y, R);
    c = rI(c), U = mA(S, U), _I([], [n], function(iA) {
      var nA = (iA = iA[0]).name + "." + c;
      function FA() {
        Hg("Cannot call " + nA + " due to unbound types", H);
      }
      q && iA.registeredClass.pureVirtualFunctions.push(c);
      var lA = iA.registeredClass.instancePrototype, HA = lA[c];
      return HA === void 0 || HA.overloadTable === void 0 && HA.className !== iA.name && HA.argCount === y - 2 ? (FA.argCount = y - 2, FA.className = iA.name, lA[c] = FA) : (dE(lA, c, nA), lA[c].overloadTable[y - 2] = FA), _I([], H, function(Ag) {
        var sg = WI(nA, Ag, iA, U, b);
        return lA[c].overloadTable === void 0 ? (sg.argCount = y - 2, lA[c] = sg) : lA[c].overloadTable[y - 2] = sg, [];
      }), [];
    });
  }, _embind_register_class_property: function(n, c, y, R, S, U, b, q, H, iA) {
    c = rI(c), S = mA(R, S), _I([], [n], function(nA) {
      var FA = (nA = nA[0]).name + "." + c, lA = { get: function() {
        Hg("Cannot access " + FA + " due to unbound types", [y, b]);
      }, enumerable: !0, configurable: !0 };
      return lA.set = H ? function() {
        Hg("Cannot access " + FA + " due to unbound types", [y, b]);
      } : function(HA) {
        Mg(FA + " is a read-only property");
      }, Object.defineProperty(nA.registeredClass.instancePrototype, c, lA), _I([], H ? [y, b] : [y], function(HA) {
        var Ag = HA[0], sg = { get: function() {
          var ag = yg(this, nA, FA + " getter");
          return Ag.fromWireType(S(U, ag));
        }, enumerable: !0 };
        if (H) {
          H = mA(q, H);
          var fg = HA[1];
          sg.set = function(ag) {
            var yA = yg(this, nA, FA + " setter"), xA = [];
            H(iA, yA, fg.toWireType(xA, ag)), ng(xA);
          };
        }
        return Object.defineProperty(nA.registeredClass.instancePrototype, c, sg), [];
      }), [];
    });
  }, _embind_register_constant: function(n, c, y) {
    n = rI(n), _I([], [c], function(R) {
      return R = R[0], I[n] = R.fromWireType(y), [];
    });
  }, _embind_register_emval: function(n, c) {
    xC(n, { name: c = rI(c), fromWireType: function(y) {
      var R = cg[y].value;
      return kg(y), R;
    }, toWireType: function(y, R) {
      return qC(R);
    }, argPackAdvance: 8, readValueFromPointer: vg, destructorFunction: null });
  }, _embind_register_float: function(n, c, y) {
    var R = ci(y);
    xC(n, { name: c = rI(c), fromWireType: function(S) {
      return S;
    }, toWireType: function(S, U) {
      if (typeof U != "number" && typeof U != "boolean")
        throw new TypeError('Cannot convert "' + AQ(U) + '" to ' + this.name);
      return U;
    }, argPackAdvance: 8, readValueFromPointer: Nt(c, R), destructorFunction: null });
  }, _embind_register_function: function(n, c, y, R, S, U) {
    var b = tI(c, y);
    n = rI(n), S = mA(R, S), Ri(n, function() {
      Hg("Cannot call " + n + " due to unbound types", b);
    }, c - 1), _I([], b, function(q) {
      var H = [q[0], null].concat(q.slice(1));
      return LA(n, WI(n, H, null, S, U), c - 1), [];
    });
  }, _embind_register_integer: function(n, c, y, R, S) {
    c = rI(c), S === -1 && (S = 4294967295);
    var U = ci(y), b = function(iA) {
      return iA;
    };
    if (R === 0) {
      var q = 32 - 8 * y;
      b = function(iA) {
        return iA << q >>> q;
      };
    }
    var H = c.indexOf("unsigned") != -1;
    xC(n, { name: c, fromWireType: b, toWireType: function(iA, nA) {
      if (typeof nA != "number" && typeof nA != "boolean")
        throw new TypeError('Cannot convert "' + AQ(nA) + '" to ' + this.name);
      if (nA < R || nA > S)
        throw new TypeError('Passing a number "' + AQ(nA) + '" from JS side to C/C++ side to an argument of type "' + c + '", which is outside the valid range [' + R + ", " + S + "]!");
      return H ? nA >>> 0 : 0 | nA;
    }, argPackAdvance: 8, readValueFromPointer: gQ(c, U, R !== 0), destructorFunction: null });
  }, _embind_register_memory_view: function(n, c, y) {
    var R = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][c];
    function S(U) {
      var b = rA, q = b[U >>= 2], H = b[U + 1];
      return new R(AA, H, q);
    }
    xC(n, { name: y = rI(y), fromWireType: S, argPackAdvance: 8, readValueFromPointer: S }, { ignoreDuplicateRegistrations: !0 });
  }, _embind_register_std_string: function(n, c) {
    var y = (c = rI(c)) === "std::string";
    xC(n, { name: c, fromWireType: function(R) {
      var S, U = rA[R >> 2];
      if (y)
        for (var b = R + 4, q = 0; q <= U; ++q) {
          var H = R + 4 + q;
          if (q == U || _[H] == 0) {
            var iA = x(b, H - b);
            S === void 0 ? S = iA : (S += String.fromCharCode(0), S += iA), b = H + 1;
          }
        }
      else {
        var nA = new Array(U);
        for (q = 0; q < U; ++q)
          nA[q] = String.fromCharCode(_[R + 4 + q]);
        S = nA.join("");
      }
      return fB(R), S;
    }, toWireType: function(R, S) {
      S instanceof ArrayBuffer && (S = new Uint8Array(S));
      var U = typeof S == "string";
      U || S instanceof Uint8Array || S instanceof Uint8ClampedArray || S instanceof Int8Array || Mg("Cannot pass non-string to std::string");
      var b = (y && U ? function() {
        return $(S);
      } : function() {
        return S.length;
      })(), q = ui(4 + b + 1);
      if (rA[q >> 2] = b, y && U)
        Z(S, q + 4, b + 1);
      else if (U)
        for (var H = 0; H < b; ++H) {
          var iA = S.charCodeAt(H);
          iA > 255 && (fB(q), Mg("String has UTF-16 code units that do not fit in 8 bits")), _[q + 4 + H] = iA;
        }
      else
        for (H = 0; H < b; ++H)
          _[q + 4 + H] = S[H];
      return R !== null && R.push(fB, q), q;
    }, argPackAdvance: 8, readValueFromPointer: vg, destructorFunction: function(R) {
      fB(R);
    } });
  }, _embind_register_std_wstring: function(n, c, y) {
    var R, S, U, b, q;
    y = rI(y), c === 2 ? (R = UA, S = pA, b = XA, U = function() {
      return tA;
    }, q = 1) : c === 4 && (R = WA, S = PA, b = fA, U = function() {
      return rA;
    }, q = 2), xC(n, { name: y, fromWireType: function(H) {
      for (var iA, nA = rA[H >> 2], FA = U(), lA = H + 4, HA = 0; HA <= nA; ++HA) {
        var Ag = H + 4 + HA * c;
        if (HA == nA || FA[Ag >> q] == 0) {
          var sg = R(lA, Ag - lA);
          iA === void 0 ? iA = sg : (iA += String.fromCharCode(0), iA += sg), lA = Ag + c;
        }
      }
      return fB(H), iA;
    }, toWireType: function(H, iA) {
      typeof iA != "string" && Mg("Cannot pass non-string to C++ string type " + y);
      var nA = b(iA), FA = ui(4 + nA + c);
      return rA[FA >> 2] = nA >> q, S(iA, FA + 4, nA + c), H !== null && H.push(fB, FA), FA;
    }, argPackAdvance: 8, readValueFromPointer: vg, destructorFunction: function(H) {
      fB(H);
    } });
  }, _embind_register_value_array: function(n, c, y, R, S, U) {
    ug[n] = { name: rI(c), rawConstructor: mA(y, R), rawDestructor: mA(S, U), elements: [] };
  }, _embind_register_value_array_element: function(n, c, y, R, S, U, b, q, H) {
    ug[n].elements.push({ getterReturnType: c, getter: mA(y, R), getterContext: S, setterArgumentType: U, setter: mA(b, q), setterContext: H });
  }, _embind_register_value_object: function(n, c, y, R, S, U) {
    HC[n] = { name: rI(c), rawConstructor: mA(y, R), rawDestructor: mA(S, U), fields: [] };
  }, _embind_register_value_object_field: function(n, c, y, R, S, U, b, q, H, iA) {
    HC[n].fields.push({ fieldName: rI(c), getterReturnType: y, getter: mA(R, S), getterContext: U, setterArgumentType: b, setter: mA(q, H), setterContext: iA });
  }, _embind_register_void: function(n, c) {
    xC(n, { isVoid: !0, name: c = rI(c), argPackAdvance: 0, fromWireType: function() {
    }, toWireType: function(y, R) {
    } });
  }, _emval_call_void_method: function(n, c, y, R) {
    (n = BB[n])(c = IQ(c), y = pQ(y), null, R);
  }, _emval_decref: kg, _emval_get_method_caller: function(n, c) {
    for (var y = function(Ag, sg) {
      for (var fg = new Array(Ag), ag = 0; ag < Ag; ++ag)
        fg[ag] = KD(O[(sg >> 2) + ag], "parameter " + ag);
      return fg;
    }(n, c), R = y[0], S = R.name + "_$" + y.slice(1).map(function(Ag) {
      return Ag.name;
    }).join("_") + "$", U = ["retType"], b = [R], q = "", H = 0; H < n - 1; ++H)
      q += (H !== 0 ? ", " : "") + "arg" + H, U.push("argType" + H), b.push(y[1 + H]);
    var iA = "return function " + IB("methodCaller_" + S) + `(handle, name, destructors, args) {
`, nA = 0;
    for (H = 0; H < n - 1; ++H)
      iA += "    var arg" + H + " = argType" + H + ".readValueFromPointer(args" + (nA ? "+" + nA : "") + `);
`, nA += y[H + 1].argPackAdvance;
    for (iA += "    var rv = handle[name](" + q + `);
`, H = 0; H < n - 1; ++H)
      y[H + 1].deleteObject && (iA += "    argType" + H + ".deleteObject(arg" + H + `);
`);
    R.isVoid || (iA += `    return retType.toWireType(destructors, rv);
`), iA += `};
`, U.push(iA);
    var FA, lA, HA = $g(Function, U).apply(null, b);
    return FA = HA, lA = BB.length, BB.push(FA), lA;
  }, _emval_incref: function(n) {
    n > 4 && (cg[n].refcount += 1);
  }, _emval_new_array: function() {
    return qC([]);
  }, _emval_new_cstring: function(n) {
    return qC(pQ(n));
  }, _emval_set_property: function(n, c, y) {
    n = IQ(n), c = IQ(c), y = IQ(y), n[c] = y;
  }, _emval_take_value: function(n, c) {
    return qC((n = KD(n, "_emval_take_value")).readValueFromPointer(c));
  }, abort: function() {
    hg();
  }, clock_gettime: function(n, c) {
    var y;
    if (n === 0)
      y = Date.now();
    else {
      if (n !== 1 && n !== 4)
        return uA(28), -1;
      y = gI();
    }
    return O[c >> 2] = y / 1e3 | 0, O[c + 4 >> 2] = y % 1e3 * 1e3 * 1e3 | 0, 0;
  }, emscripten_memcpy_big: function(n, c, y) {
    _.copyWithin(n, c, c + y);
  }, emscripten_resize_heap: function(n) {
    n >>>= 0;
    var c = _.length, y = 1073741824;
    if (n > y)
      return !1;
    for (var R, S, U = 1; U <= 4; U *= 2) {
      var b = c * (1 + 0.2 / U);
      if (b = Math.min(b, n + 100663296), LR(Math.min(y, ((R = Math.max(16777216, n, b)) % (S = 65536) > 0 && (R += S - R % S), R))))
        return !0;
    }
    return !1;
  }, environ_get: function(n, c) {
    try {
      var y = 0;
      return Ni().forEach(function(R, S) {
        var U = c + y;
        O[n + 4 * S >> 2] = U, function(b, q, H) {
          for (var iA = 0; iA < b.length; ++iA)
            P[q++ >> 0] = b.charCodeAt(iA);
          H || (P[q >> 0] = 0);
        }(R, U), y += R.length + 1;
      }), 0;
    } catch (R) {
      return u !== void 0 && R instanceof u.ErrnoError || hg(R), R.errno;
    }
  }, environ_sizes_get: function(n, c) {
    try {
      var y = Ni();
      O[n >> 2] = y.length;
      var R = 0;
      return y.forEach(function(S) {
        R += S.length + 1;
      }), O[c >> 2] = R, 0;
    } catch (S) {
      return u !== void 0 && S instanceof u.ErrnoError || hg(S), S.errno;
    }
  }, fd_close: function(n) {
    try {
      var c = Qg.getStreamFromFD(n);
      return u.close(c), 0;
    } catch (y) {
      return u !== void 0 && y instanceof u.ErrnoError || hg(y), y.errno;
    }
  }, fd_read: function(n, c, y, R) {
    try {
      var S = Qg.getStreamFromFD(n), U = Qg.doReadv(S, c, y);
      return O[R >> 2] = U, 0;
    } catch (b) {
      return u !== void 0 && b instanceof u.ErrnoError || hg(b), b.errno;
    }
  }, fd_seek: function(n, c, y, R, S) {
    try {
      var U = Qg.getStreamFromFD(n), b = 4294967296 * y + (c >>> 0), q = 9007199254740992;
      return b <= -q || b >= q ? -61 : (u.llseek(U, b, R), dI = [U.position >>> 0, (nI = U.position, +Math.abs(nI) >= 1 ? nI > 0 ? (0 | Math.min(+Math.floor(nI / 4294967296), 4294967295)) >>> 0 : ~~+Math.ceil((nI - +(~~nI >>> 0)) / 4294967296) >>> 0 : 0)], O[S >> 2] = dI[0], O[S + 4 >> 2] = dI[1], U.getdents && b === 0 && R === 0 && (U.getdents = null), 0);
    } catch (H) {
      return u !== void 0 && H instanceof u.ErrnoError || hg(H), H.errno;
    }
  }, fd_write: function(n, c, y, R) {
    try {
      var S = Qg.getStreamFromFD(n), U = Qg.doWritev(S, c, y);
      return O[R >> 2] = U, 0;
    } catch (b) {
      return u !== void 0 && b instanceof u.ErrnoError || hg(b), b.errno;
    }
  }, setTempRet0: function(n) {
  }, strftime_l: function(n, c, y, R) {
    return mR(n, c, y, R);
  } };
  (function() {
    var n = { env: UD, wasi_snapshot_preview1: UD };
    function c(S, U) {
      var b = S.exports;
      I.asm = b, gg((N = I.asm.memory).buffer), GA = I.asm.__indirect_function_table, Xg();
    }
    function y(S) {
      c(S.instance);
    }
    function R(S) {
      return (d || !o && !t || typeof fetch != "function" || JI(pI) ? Promise.resolve().then(bC) : fetch(pI, { credentials: "same-origin" }).then(function(U) {
        if (!U.ok)
          throw "failed to load wasm binary file at '" + pI + "'";
        return U.arrayBuffer();
      }).catch(function() {
        return bC();
      })).then(function(U) {
        return WebAssembly.instantiate(U, n);
      }).then(S, function(U) {
        l("failed to asynchronously prepare wasm: " + U), hg(U);
      });
    }
    if (Yg(), I.instantiateWasm)
      try {
        return I.instantiateWasm(n, c);
      } catch (S) {
        return l("Module.instantiateWasm callback failed with error: " + S), !1;
      }
    (d || typeof WebAssembly.instantiateStreaming != "function" || FI(pI) || JI(pI) || typeof fetch != "function" ? R(y) : fetch(pI, { credentials: "same-origin" }).then(function(S) {
      return WebAssembly.instantiateStreaming(S, n).then(y, function(U) {
        return l("wasm streaming compile failed: " + U), l("falling back to ArrayBuffer instantiation"), R(y);
      });
    })).catch(g);
  })();
  var Mt, YD = I.___wasm_call_ctors = function() {
    return (YD = I.___wasm_call_ctors = I.asm.__wasm_call_ctors).apply(null, arguments);
  }, ui = I._malloc = function() {
    return (ui = I._malloc = I.asm.malloc).apply(null, arguments);
  }, fB = I._free = function() {
    return (fB = I._free = I.asm.free).apply(null, arguments);
  }, JD = I.___errno_location = function() {
    return (JD = I.___errno_location = I.asm.__errno_location).apply(null, arguments);
  }, fD = I.___getTypeName = function() {
    return (fD = I.___getTypeName = I.asm.__getTypeName).apply(null, arguments);
  };
  function LD(n) {
    this.name = "ExitStatus", this.message = "Program terminated with exit(" + n + ")", this.status = n;
  }
  function wa(n) {
    function c() {
      Mt || (Mt = !0, I.calledRun = !0, Y || (I.noFSInit || u.init.initialized || u.init(), UB(lg), u.ignorePermissions = !1, UB(jA), A(I), I.onRuntimeInitialized && I.onRuntimeInitialized(), function() {
        if (I.postRun)
          for (typeof I.postRun == "function" && (I.postRun = [I.postRun]); I.postRun.length; )
            y = I.postRun.shift(), eg.unshift(y);
        var y;
        UB(eg);
      }()));
    }
    rg > 0 || (function() {
      if (I.preRun)
        for (typeof I.preRun == "function" && (I.preRun = [I.preRun]); I.preRun.length; )
          y = I.preRun.shift(), Bg.unshift(y);
      var y;
      UB(Bg);
    }(), rg > 0 || (I.setStatus ? (I.setStatus("Running..."), setTimeout(function() {
      setTimeout(function() {
        I.setStatus("");
      }, 1), c();
    }, 1)) : c()));
  }
  if (I.___embind_register_native_and_builtin_types = function() {
    return (I.___embind_register_native_and_builtin_types = I.asm.__embind_register_native_and_builtin_types).apply(null, arguments);
  }, I._emscripten_main_thread_process_queued_calls = function() {
    return (I._emscripten_main_thread_process_queued_calls = I.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments);
  }, I.stackSave = function() {
    return (I.stackSave = I.asm.stackSave).apply(null, arguments);
  }, I.stackRestore = function() {
    return (I.stackRestore = I.asm.stackRestore).apply(null, arguments);
  }, I.stackAlloc = function() {
    return (I.stackAlloc = I.asm.stackAlloc).apply(null, arguments);
  }, I._setThrew = function() {
    return (I._setThrew = I.asm.setThrew).apply(null, arguments);
  }, I.___cxa_demangle = function() {
    return (I.___cxa_demangle = I.asm.__cxa_demangle).apply(null, arguments);
  }, I.dynCall_viijii = function() {
    return (I.dynCall_viijii = I.asm.dynCall_viijii).apply(null, arguments);
  }, I.dynCall_ji = function() {
    return (I.dynCall_ji = I.asm.dynCall_ji).apply(null, arguments);
  }, I.dynCall_vij = function() {
    return (I.dynCall_vij = I.asm.dynCall_vij).apply(null, arguments);
  }, I.dynCall_jiji = function() {
    return (I.dynCall_jiji = I.asm.dynCall_jiji).apply(null, arguments);
  }, I.dynCall_iiiiij = function() {
    return (I.dynCall_iiiiij = I.asm.dynCall_iiiiij).apply(null, arguments);
  }, I.dynCall_iiiiijj = function() {
    return (I.dynCall_iiiiijj = I.asm.dynCall_iiiiijj).apply(null, arguments);
  }, I.dynCall_iiiiiijj = function() {
    return (I.dynCall_iiiiiijj = I.asm.dynCall_iiiiiijj).apply(null, arguments);
  }, I.addRunDependency = Yg, I.removeRunDependency = Xg, I.FS_createPath = u.createPath, I.FS_createDataFile = u.createDataFile, I.FS_createPreloadedFile = u.createPreloadedFile, I.FS_createLazyFile = u.createLazyFile, I.FS_createDevice = u.createDevice, I.FS_unlink = u.unlink, Wg = function n() {
    Mt || wa(), Mt || (Wg = n);
  }, I.run = wa, I.preInit)
    for (typeof I.preInit == "function" && (I.preInit = [I.preInit]); I.preInit.length > 0; )
      I.preInit.pop()();
  function Ut(n, c) {
    this.x = n === void 0 ? 0 : n, this.y = c === void 0 ? 0 : c;
  }
  function Yt() {
    switch (arguments.length) {
      case 0:
        this.center = { x: 0, y: 0 }, this.size = { width: 0, height: 0 }, this.angle = 0;
        break;
      case 3:
        this.center = arguments[0], this.size = arguments[1], this.angle = arguments[2];
        break;
      default:
        throw new Error("Invalid arguments");
    }
  }
  function Jt(n, c, y, R) {
    this.push(n === void 0 ? 0 : n), this.push(c === void 0 ? 0 : c), this.push(y === void 0 ? 0 : y), this.push(R === void 0 ? 0 : R);
  }
  return wa(), I.FS === void 0 && u !== void 0 && (I.FS = u), I.imread = function(n) {
    var c = null, y = null, R = null;
    if ((c = typeof n == "string" ? document.getElementById(n) : n) instanceof HTMLImageElement)
      (y = document.createElement("canvas")).width = c.width, y.height = c.height, (R = y.getContext("2d")).drawImage(c, 0, 0, c.width, c.height);
    else {
      if (!(c instanceof HTMLCanvasElement))
        throw new Error("Please input the valid canvas or img id.");
      R = (y = c).getContext("2d");
    }
    var S = R.getImageData(0, 0, y.width, y.height);
    return C.matFromImageData(S);
  }, I.imshow = function(n, c) {
    var y = null;
    if (!((y = typeof n == "string" ? document.getElementById(n) : n) instanceof HTMLCanvasElement))
      throw new Error("Please input the valid canvas element or id.");
    if (!(c instanceof C.Mat))
      throw new Error("Please input the valid cv.Mat instance.");
    var R = new C.Mat(), S = c.type() % 8, U = S <= C.CV_8S ? 1 : S <= C.CV_32S ? 1 / 256 : 255, b = S === C.CV_8S || S === C.CV_16S ? 128 : 0;
    switch (c.convertTo(R, C.CV_8U, U, b), R.type()) {
      case C.CV_8UC1:
        C.cvtColor(R, R, C.COLOR_GRAY2RGBA);
        break;
      case C.CV_8UC3:
        C.cvtColor(R, R, C.COLOR_RGB2RGBA);
        break;
      case C.CV_8UC4:
        break;
      default:
        throw new Error("Bad number of channels (Source image must have 1, 3 or 4 channels)");
    }
    var q = new ImageData(new Uint8ClampedArray(R.data), R.cols, R.rows), H = y.getContext("2d");
    H.clearRect(0, 0, y.width, y.height), y.width = q.width, y.height = q.height, H.putImageData(q, 0, 0), R.delete();
  }, I.VideoCapture = function(n) {
    var c = null;
    if (!((c = typeof n == "string" ? document.getElementById(n) : n) instanceof HTMLVideoElement))
      throw new Error("Please input the valid video element or id.");
    var y = document.createElement("canvas");
    y.width = c.width, y.height = c.height;
    var R = y.getContext("2d");
    this.video = c, this.read = function(S) {
      if (!(S instanceof C.Mat))
        throw new Error("Please input the valid cv.Mat instance.");
      if (S.type() !== C.CV_8UC4)
        throw new Error("Bad type of input mat: the type should be cv.CV_8UC4.");
      if (S.cols !== c.width || S.rows !== c.height)
        throw new Error("Bad size of input mat: the size should be same as the video.");
      R.drawImage(c, 0, 0, c.width, c.height), S.data.set(R.getImageData(0, 0, c.width, c.height).data);
    };
  }, I.Range = function(n, c) {
    this.start = n === void 0 ? 0 : n, this.end = c === void 0 ? 0 : c;
  }, I.Point = Ut, I.Size = function(n, c) {
    this.width = n === void 0 ? 0 : n, this.height = c === void 0 ? 0 : c;
  }, I.Rect = function() {
    switch (arguments.length) {
      case 0:
        this.x = 0, this.y = 0, this.width = 0, this.height = 0;
        break;
      case 1:
        var n = arguments[0];
        this.x = n.x, this.y = n.y, this.width = n.width, this.height = n.height;
        break;
      case 2:
        var c = arguments[0], y = arguments[1];
        this.x = c.x, this.y = c.y, this.width = y.width, this.height = y.height;
        break;
      case 4:
        this.x = arguments[0], this.y = arguments[1], this.width = arguments[2], this.height = arguments[3];
        break;
      default:
        throw new Error("Invalid arguments");
    }
  }, Yt.points = function(n) {
    return I.rotatedRectPoints(n);
  }, Yt.boundingRect = function(n) {
    return I.rotatedRectBoundingRect(n);
  }, Yt.boundingRect2f = function(n) {
    return I.rotatedRectBoundingRect2f(n);
  }, I.RotatedRect = Yt, Jt.prototype = new Array(), Jt.all = function(n) {
    return new Jt(n, n, n, n);
  }, I.Scalar = Jt, I.MinMaxLoc = function() {
    switch (arguments.length) {
      case 0:
        this.minVal = 0, this.maxVal = 0, this.minLoc = new Ut(), this.maxLoc = new Ut();
        break;
      case 4:
        this.minVal = arguments[0], this.maxVal = arguments[1], this.minLoc = arguments[2], this.maxLoc = arguments[3];
        break;
      default:
        throw new Error("Invalid arguments");
    }
  }, I.Circle = function() {
    switch (arguments.length) {
      case 0:
        this.center = new Ut(), this.radius = 0;
        break;
      case 2:
        this.center = arguments[0], this.radius = arguments[1];
        break;
      default:
        throw new Error("Invalid arguments");
    }
  }, I.TermCriteria = function() {
    switch (arguments.length) {
      case 0:
        this.type = 0, this.maxCount = 0, this.epsilon = 0;
        break;
      case 3:
        this.type = arguments[0], this.maxCount = arguments[1], this.epsilon = arguments[2];
        break;
      default:
        throw new Error("Invalid arguments");
    }
  }, I.matFromArray = function(n, c, y, R) {
    var S = new C.Mat(n, c, y);
    switch (y) {
      case C.CV_8U:
      case C.CV_8UC1:
      case C.CV_8UC2:
      case C.CV_8UC3:
      case C.CV_8UC4:
        S.data.set(R);
        break;
      case C.CV_8S:
      case C.CV_8SC1:
      case C.CV_8SC2:
      case C.CV_8SC3:
      case C.CV_8SC4:
        S.data8S.set(R);
        break;
      case C.CV_16U:
      case C.CV_16UC1:
      case C.CV_16UC2:
      case C.CV_16UC3:
      case C.CV_16UC4:
        S.data16U.set(R);
        break;
      case C.CV_16S:
      case C.CV_16SC1:
      case C.CV_16SC2:
      case C.CV_16SC3:
      case C.CV_16SC4:
        S.data16S.set(R);
        break;
      case C.CV_32S:
      case C.CV_32SC1:
      case C.CV_32SC2:
      case C.CV_32SC3:
      case C.CV_32SC4:
        S.data32S.set(R);
        break;
      case C.CV_32F:
      case C.CV_32FC1:
      case C.CV_32FC2:
      case C.CV_32FC3:
      case C.CV_32FC4:
        S.data32F.set(R);
        break;
      case C.CV_64F:
      case C.CV_64FC1:
      case C.CV_64FC2:
      case C.CV_64FC3:
      case C.CV_64FC4:
        S.data64F.set(R);
        break;
      default:
        throw new Error("Type is unsupported");
    }
    return S;
  }, I.matFromImageData = function(n) {
    var c = new C.Mat(n.height, n.width, C.CV_8UC4);
    return c.data.set(n.data), c;
  }, C.ready;
});
wl({});
let ll = !1;
const Gl = {}, yl = [];
wl().then((C) => {
  ll = !0, Object.assign(Gl, C), yl.forEach((A) => {
    A();
  });
});
const BI = Gl, Ee = [];
for (let C = 0; C < bB.length; C++)
  Ee[C] = 0;
cl.forEach(([C, A]) => {
  Ee[C] = A;
});
const tn = [];
for (let C = 0; C < Ee.length; C++)
  tn[C] = Math.sqrt(Ee[C]);
const ge = [33, 263, 61, 291, 199];
cl.forEach(([C, A]) => {
  ge.includes(C) || ge.push(C);
}), ge.sort((C, A) => C - A);
let en = 0, sn = 0;
for (let C = 0; C < bB.length; C++)
  bB[C][0] < bB[en][0] && (en = C), bB[C][0] > bB[sn][0] && (sn = C);
class zR {
  constructor(A) {
    const g = A.height, I = A.width, B = I, Q = 2 * Math.atan(g / (2 * B)), E = 2 * Math.tan(0.5 * Q), i = I * E / g;
    this.near = 1, this.far = 1e4, this.frameHeight = g, this.frameWidth = I, this.focalLength = B, this.fov = Q, this.left = -0.5 * i, this.right = 0.5 * i, this.bottom = -0.5 * E, this.top = 0.5 * E, this.focalLength = B, this.center = [I / 2, g / 2];
  }
  estimate(A) {
    const g = this._projectToScreen(A);
    let I = this._cloneLandmarks(g);
    this._changeHandedness(I);
    const B = g.reduce((M, L) => M + L[2], 0) / g.length, Q = this._estimateScale(I);
    I = this._cloneLandmarks(g), this._moveAndRescaleZ(B, Q, I), this._unprojectScreen(I), this._changeHandedness(I);
    const E = this._estimateScale(I);
    let i = this._cloneLandmarks(g);
    const o = Q * E;
    this._moveAndRescaleZ(B, o, i), this._unprojectScreen(i), this._changeHandedness(i);
    const t = this._solveWeightedOrthogonal(bB, i, tn), e = BI.matFromArray(4, 4, BI.CV_64F, [t[0][0], t[0][1], t[0][2], t[0][3], t[1][0], t[1][1], t[1][2], t[1][3], t[2][0], t[2][1], t[2][2], t[2][3], t[3][0], t[3][1], t[3][2], t[3][3]]).inv(0).data64F, s = [[e[0], e[1], e[2], e[3]], [e[4], e[5], e[6], e[7]], [e[8], e[9], e[10], e[11]], [e[12], e[13], e[14], e[15]]], a = [];
    for (let M = 0; M < i.length; M++) {
      a[M] = [];
      for (let L = 0; L < 3; L++) {
        a[M][L] = s[L][3];
        for (let m = 0; m < 3; m++)
          a[M][L] += s[L][m] * i[M][m];
      }
    }
    const r = [], h = [];
    ge.forEach((M) => {
      r.push(a[M][0], a[M][1], a[M][2]), h.push(A[M][0] * this.frameWidth, A[M][1] * this.frameHeight);
    });
    const w = BI.matFromArray(r.length / 3, 3, BI.CV_64F, r), G = BI.matFromArray(h.length / 2, 2, BI.CV_64F, h), D = BI.matFromArray(3, 3, BI.CV_64F, [this.focalLength, 0, this.center[0], 0, this.focalLength, this.center[1], 0, 0, 1]), l = BI.Mat.zeros(4, 1, BI.CV_64F), d = new BI.Mat(3, 1, BI.CV_64F), N = new BI.Mat(3, 1, BI.CV_64F), k = new BI.Mat(3, 3, BI.CV_64F);
    BI.solvePnP(w, G, D, l, d, N, !1), BI.Rodrigues(d, k);
    const p = [k.data64F[0], k.data64F[1], k.data64F[2], N.data64F[0], -k.data64F[3], -k.data64F[4], -k.data64F[5], -N.data64F[1], -k.data64F[6], -k.data64F[7], -k.data64F[8], -N.data64F[2], 0, 0, 0, 1], Y = a[sn][0] - a[en][0];
    return { metricLandmarks: a, faceMatrix: p, faceScale: Y };
  }
  _estimateScale(A) {
    const g = this._solveWeightedOrthogonal(bB, A, tn);
    return Math.sqrt(g[0][0] * g[0][0] + g[0][1] * g[0][1] + g[0][2] * g[0][2]);
  }
  _solveWeightedOrthogonal(A, g, I) {
    const B = [], Q = [];
    for (let D = 0; D < A.length; D++)
      B.push([A[D][0] * I[D], A[D][1] * I[D], A[D][2] * I[D]]), Q.push([g[D][0] * I[D], g[D][1] * I[D], g[D][2] * I[D]]);
    const E = I.reduce((D, l) => D + l * l, 0), i = [];
    for (let D = 0; D < B.length; D++)
      i[D] = [B[D][0] * I[D], B[D][1] * I[D], B[D][2] * I[D]];
    const o = [0, 0, 0];
    for (let D = 0; D < 3; D++) {
      for (let l = 0; l < i.length; l++)
        o[D] += i[l][D];
      o[D] /= E;
    }
    const t = [];
    for (let D = 0; D < i.length; D++) {
      t[D] = [];
      for (let l = 0; l < 3; l++)
        t[D][l] = B[D][l] - o[l] * I[D];
    }
    const e = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
    for (let D = 0; D < 3; D++)
      for (let l = 0; l < 3; l++)
        for (let d = 0; d < Q.length; d++)
          e[D][l] += Q[d][D] * t[d][l];
    const s = this._computeOptimalRotation(e), a = this._computeOptimalScale(t, B, Q, s), r = [[], [], []];
    for (let D = 0; D < 3; D++)
      for (let l = 0; l < 3; l++)
        r[D][l] = a * s[D][l];
    const h = [];
    for (let D = 0; D < B.length; D++) {
      h[D] = [];
      for (let l = 0; l < 3; l++) {
        h[D][l] = Q[D][l];
        for (let d = 0; d < 3; d++)
          h[D][l] -= r[l][d] * B[D][d];
      }
    }
    const w = [];
    for (let D = 0; D < h.length; D++) {
      w[D] = [];
      for (let l = 0; l < 3; l++)
        w[D][l] = h[D][l] * I[D];
    }
    const G = [0, 0, 0];
    for (let D = 0; D < 3; D++) {
      for (let l = 0; l < w.length; l++)
        G[D] += w[l][D];
      G[D] /= E;
    }
    return [[r[0][0], r[0][1], r[0][2], G[0]], [r[1][0], r[1][1], r[1][2], G[1]], [r[2][0], r[2][1], r[2][2], G[2]], [0, 0, 0, 1]];
  }
  _computeOptimalRotation(A) {
    const g = BI.matFromArray(3, 3, BI.CV_64F, [A[0][0], A[0][1], A[0][2], A[1][0], A[1][1], A[1][2], A[2][0], A[2][1], A[2][2]]), I = new BI.Mat(3, 1, BI.CV_64F), B = new BI.Mat(3, 3, BI.CV_64F), Q = new BI.Mat(3, 3, BI.CV_64F);
    BI.SVDecomp(g, I, B, Q);
    const E = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
    for (let i = 0; i < 3; i++)
      for (let o = 0; o < 3; o++)
        for (let t = 0; t < 3; t++)
          E[i][o] += B.data64F[3 * i + t] * Q.data64F[3 * t + o];
    return E;
  }
  _computeOptimalScale(A, g, I, B) {
    const Q = [];
    for (let o = 0; o < A.length; o++) {
      Q[o] = [];
      for (let t = 0; t < 3; t++) {
        Q[o][t] = 0;
        for (let e = 0; e < 3; e++)
          Q[o][t] += B[t][e] * A[o][e];
      }
    }
    let E = 0;
    for (let o = 0; o < Q.length; o++)
      for (let t = 0; t < 3; t++)
        E += Q[o][t] * I[o][t];
    let i = 0;
    for (let o = 0; o < A.length; o++)
      for (let t = 0; t < 3; t++)
        i += A[o][t] * g[o][t];
    return E / i;
  }
  _projectToScreen(A) {
    const g = [], I = this.right - this.left, B = this.top - this.bottom, Q = this.left, E = this.bottom;
    for (let i = 0; i < A.length; i++)
      g.push([A[i][0] * I + Q, (1 - A[i][1]) * B + E, A[i][2] * I]);
    return g;
  }
  _cloneLandmarks(A) {
    const g = [];
    for (let I = 0; I < A.length; I++)
      g[I] = [A[I][0], A[I][1], A[I][2]];
    return g;
  }
  _changeHandedness(A) {
    for (let g = 0; g < A.length; g++)
      A[g][2] *= -1;
  }
  _moveAndRescaleZ(A, g, I) {
    for (let B = 0; B < I.length; B++)
      I[B][2] = (I[B][2] - A + this.near) / g;
  }
  _unprojectScreen(A) {
    for (let g = 0; g < A.length; g++)
      A[g][0] = A[g][0] * A[g][2] / this.near, A[g][1] = A[g][1] * A[g][2] / this.near;
  }
}
const mt = LB.length, jR = (C) => {
  class A extends C.BufferGeometry {
    constructor(I = {}) {
      super(), this.positions = new Float32Array(3 * mt), this.uvs = new Float32Array(2 * mt), this.setAttribute("position", new C.BufferAttribute(this.positions, 3)), this.setAttribute("uv", new C.BufferAttribute(this.uvs, 2)), this.setUvs(), this.setIndex(Dl);
    }
    setUvs() {
      for (let I = 0; I < mt; I++)
        this.uvs[2 * I] = LB[I][0], this.uvs[2 * I + 1] = LB[I][1];
      this.getAttribute("uv").needsUpdate = !0;
    }
    updatePositions(I) {
      for (let B = 0; B < mt; B++)
        this.positions[3 * B + 0] = I[B][0], this.positions[3 * B + 1] = I[B][1], this.positions[3 * B + 2] = I[B][2];
      this.attributes.position.needsUpdate = !0, this.computeVertexNormals();
    }
  }
  return new A();
}, VD = (C, A) => {
  const g = 2 * Math.PI * A * C;
  return g / (g + 1);
}, WD = (C, A, g) => C * A + (1 - C) * g;
class Ie {
  constructor({ minCutOff: A, beta: g }) {
    this.minCutOff = A, this.beta = g, this.dCutOff = 1e-3, this.xPrev = null, this.dxPrev = null, this.tPrev = null, this.initialized = !1;
  }
  reset() {
    this.initialized = !1;
  }
  filter(A, g) {
    if (!this.initialized)
      return this.initialized = !0, this.xPrev = g, this.dxPrev = g.map(() => 0), this.tPrev = A, g;
    const { xPrev: I, tPrev: B, dxPrev: Q } = this, E = A - B, i = VD(E, this.dCutOff), o = [], t = [], e = [];
    for (let s = 0; s < g.length; s++) {
      o[s] = (g[s] - I[s]) / E, t[s] = WD(i, o[s], Q[s]);
      const a = this.minCutOff + this.beta * Math.abs(t[s]), r = VD(E, a);
      e[s] = WD(r, g[s], I[s]);
    }
    return this.xPrev = e, this.dxPrev = t, this.tPrev = A, e;
  }
}
class dl {
  constructor(A, g) {
    this.backend = A, this.dataMover = g, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(A) {
    return this.data.has(A) || this.dataMover.moveData(this.backend, A), this.data.get(A);
  }
  set(A, g) {
    this.dataIdsCount++, this.data.set(A, g);
  }
  has(A) {
    return this.data.has(A);
  }
  delete(A) {
    return this.dataIdsCount--, this.data.delete(A);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class rr {
  refCount(A) {
    return GC("refCount");
  }
  incRef(A) {
    return GC("incRef");
  }
  timerAvailable() {
    return !0;
  }
  time(A) {
    return GC("time");
  }
  read(A) {
    return GC("read");
  }
  readSync(A) {
    return GC("readSync");
  }
  readToGPU(A, g) {
    return GC("readToGPU");
  }
  numDataIds() {
    return GC("numDataIds");
  }
  disposeData(A, g) {
    return GC("disposeData");
  }
  write(A, g, I) {
    return GC("write");
  }
  move(A, g, I, B, Q) {
    return GC("move");
  }
  createTensorFromGPUData(A, g, I) {
    return GC("createTensorFromGPUData");
  }
  memory() {
    return GC("memory");
  }
  floatPrecision() {
    return GC("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? 1e-7 : 1e-4;
  }
  dispose() {
    return GC("dispose");
  }
}
function GC(C) {
  throw new Error(`'${C}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
function $R(C) {
  let A = C.length, g = 0;
  for (; A > 0; )
    g = Math.random() * A | 0, A--, kE(C, A, g);
}
function XQ(C, A, g) {
  return Math.max(C, Math.min(A, g));
}
function hr(C) {
  return C % 2 == 0 ? C : C + 1;
}
function kE(C, A, g) {
  const I = C[A];
  C[A] = C[g], C[g] = I;
}
function f(C, A) {
  if (!C)
    throw new Error(typeof A == "string" ? A : A());
}
function Dr(C, A, g = "") {
  f(Zg(C, A), () => g + ` Shapes ${C} and ${A} must match`);
}
function cr(C) {
  f(C != null, () => "The input to the tensor constructor must be a non-null value.");
}
function cA(C) {
  if (C.length === 0)
    return 1;
  let A = C[0];
  for (let g = 1; g < C.length; g++)
    A *= C[g];
  return A;
}
function Zg(C, A) {
  if (C === A)
    return !0;
  if (C == null || A == null || C.length !== A.length)
    return !1;
  for (let g = 0; g < C.length; g++)
    if (C[g] !== A[g])
      return !1;
  return !0;
}
function XE(C) {
  return C % 1 == 0;
}
function an(C) {
  const A = Math.ceil(Math.sqrt(C));
  return [A, Math.ceil(C / A)];
}
function LE(C, A) {
  return A <= C.length ? C : C + " ".repeat(A - C.length);
}
function TD(C, A = (B) => 0, g, I) {
  return new Promise((B, Q) => {
    let E = 0;
    const i = () => {
      if (C())
        return void B();
      E++;
      const o = A(E);
      g != null && E >= g ? Q() : I != null ? I(i, o) : setTimeout(i, o);
    };
    i();
  });
}
function Fl(C, A) {
  let g = 1, I = -1;
  for (let Q = 0; Q < C.length; ++Q)
    if (C[Q] >= 0)
      g *= C[Q];
    else if (C[Q] === -1) {
      if (I !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${I} and dim ${Q}`);
      I = Q;
    } else if (C[Q] < 0)
      throw Error(`Shapes can not be < 0. Found ${C[Q]} at dim ${Q}`);
  if (I === -1) {
    if (A > 0 && A !== g)
      throw Error(`Size(${A}) must match the product of shape ${C}`);
    return C;
  }
  if (g === 0)
    throw Error(`Cannot infer the missing size in [${C}] when there are 0 elements`);
  if (A % g != 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${A} / ${g}`);
  const B = C.slice();
  return B[I] = A / g, B;
}
function Kg(C, A) {
  const g = A.length;
  return f((C = C == null ? A.map((I, B) => B) : [].concat(C)).every((I) => I >= -g && I < g), () => `All values in axis param must be in range [-${g}, ${g}) but got axis ${C}`), f(C.every((I) => XE(I)), () => `All values in axis param must be integers but got axis ${C}`), C.map((I) => I < 0 ? g + I : I);
}
function QQ(C, A) {
  const g = [], I = [], B = A != null && Array.isArray(A) && A.length === 0, Q = A == null || B ? null : Kg(A, C).sort();
  let E = 0;
  for (let i = 0; i < C.length; ++i) {
    if (Q != null) {
      if (Q[E] === i && C[i] !== 1)
        throw new Error(`Can't squeeze axis ${i} since its dim '${C[i]}' is not 1`);
      (Q[E] == null || Q[E] > i) && C[i] === 1 && (g.push(C[i]), I.push(i)), Q[E] <= i && E++;
    }
    C[i] !== 1 && (g.push(C[i]), I.push(i));
  }
  return { newShape: g, keptDims: I };
}
function AC(C, A) {
  return NI(C, A);
}
function NI(C, A) {
  let g = null;
  if (C == null || C === "float32")
    g = new Float32Array(A);
  else if (C === "int32")
    g = new Int32Array(A);
  else if (C === "bool")
    g = new Uint8Array(A);
  else {
    if (C !== "string")
      throw new Error(`Unknown data type ${C}`);
    g = new Array(A);
  }
  return g;
}
function Rl(C, A) {
  return A !== "complex64" && (A !== "float32" || C === "complex64") && (A !== "int32" || C === "float32" || C === "complex64") && (A !== "bool" || C !== "bool");
}
function ie(C) {
  if (C === "float32" || C === "int32")
    return 4;
  if (C === "complex64")
    return 8;
  if (C === "bool")
    return 1;
  throw new Error(`Unknown dtype ${C}`);
}
function Eo(C) {
  return typeof C == "string" || C instanceof String;
}
function nn(C) {
  return typeof C == "number";
}
function Bi(C) {
  return Array.isArray(C) ? Bi(C[0]) : C instanceof Float32Array ? "float32" : C instanceof Int32Array || C instanceof Uint8Array || C instanceof Uint8ClampedArray ? "int32" : nn(C) ? "float32" : Eo(C) ? "string" : typeof C == "boolean" ? "bool" : "float32";
}
function rn(C) {
  return !!(C && C.constructor && C.call && C.apply);
}
function hn(C, A) {
  for (let g = A; g < C; ++g)
    if (C % g == 0)
      return g;
  return C;
}
function zA(C) {
  const A = C.length;
  if (A < 2)
    return [];
  const g = new Array(A - 1);
  g[A - 2] = C[A - 1];
  for (let I = A - 3; I >= 0; --I)
    g[I] = g[I + 1] * C[I + 1];
  return g;
}
function Nl(C, A, g, I = !1) {
  const B = new Array();
  if (A.length === 1) {
    const Q = A[0] * (I ? 2 : 1);
    for (let E = 0; E < Q; E++)
      B[E] = g[C + E];
  } else {
    const Q = A[0], E = A.slice(1), i = E.reduce((o, t) => o * t) * (I ? 2 : 1);
    for (let o = 0; o < Q; o++)
      B[o] = Nl(C + o * i, E, g, I);
  }
  return B;
}
function aB(C, A, g = !1) {
  if (C.length === 0)
    return A[0];
  const I = C.reduce((B, Q) => B * Q) * (g ? 2 : 1);
  if (I === 0)
    return [];
  if (I !== A.length)
    throw new Error(`[${C}] does not match the input size ${A.length}${g ? " for a complex tensor" : ""}.`);
  return Nl(0, C, A, g);
}
function wr(C, A) {
  const g = gC(C, A);
  for (let I = 0; I < g.length; I++)
    g[I] = 1;
  return g;
}
function gC(C, A) {
  if (A == null || A === "float32" || A === "complex64")
    return new Float32Array(C);
  if (A === "int32")
    return new Int32Array(C);
  if (A === "bool")
    return new Uint8Array(C);
  throw new Error(`Unknown data type ${A}`);
}
function ul(C, A) {
  const g = C.reduce((I, B) => I * B, 1);
  if (A == null || A === "float32")
    return aB(C, new Float32Array(g));
  if (A === "int32")
    return aB(C, new Int32Array(g));
  if (A === "bool")
    return aB(C, new Uint8Array(g));
  throw new Error(`Unknown data type ${A}`);
}
function zB(C) {
  C.forEach((A) => {
    f(Number.isInteger(A) && A >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${C}].`);
  });
}
function KB(C, A, g) {
  if (A === 0)
    return 0;
  if (A === 1)
    return C[0];
  let I = C[C.length - 1];
  for (let B = 0; B < C.length - 1; ++B)
    I += g[B] * C[B];
  return I;
}
function Qi(C, A, g) {
  if (A === 0)
    return [];
  if (A === 1)
    return [C];
  const I = new Array(A);
  for (let B = 0; B < I.length - 1; ++B)
    I[B] = Math.floor(C / g[B]), C -= I[B] * g[B];
  return I[I.length - 1] = C, I;
}
function lr(C) {
  return C && C.then && typeof C.then == "function";
}
const ZD = "tfjsflags";
class _R {
  constructor(A) {
    this.global = A, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = AN, this.populateURLFlags();
  }
  setPlatform(A, g) {
    this.platform != null && (aA().getBool("IS_TEST") || aA().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${A}.`)), this.platformName = A, this.platform = g;
  }
  registerFlag(A, g, I) {
    if (this.flagRegistry[A] = { evaluationFn: g, setHook: I }, this.urlFlags[A] != null) {
      const B = this.urlFlags[A];
      aA().getBool("IS_TEST") || aA().getBool("PROD") || console.warn(`Setting feature override from URL ${A}: ${B}.`), this.set(A, B);
    }
  }
  async getAsync(A) {
    return A in this.flags || (this.flags[A] = await this.evaluateFlag(A)), this.flags[A];
  }
  get(A) {
    if (A in this.flags)
      return this.flags[A];
    const g = this.evaluateFlag(A);
    if (lr(g))
      throw new Error(`Flag ${A} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[A] = g, this.flags[A];
  }
  getNumber(A) {
    return this.get(A);
  }
  getBool(A) {
    return this.get(A);
  }
  getString(A) {
    return this.get(A);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(A, g) {
    if (this.flagRegistry[A] == null)
      throw new Error(`Cannot set flag ${A} as it has not been registered.`);
    this.flags[A] = g, this.flagRegistry[A].setHook != null && this.flagRegistry[A].setHook(g);
  }
  evaluateFlag(A) {
    if (this.flagRegistry[A] == null)
      throw new Error(`Cannot evaluate flag '${A}': no evaluation function found.`);
    return this.flagRegistry[A].evaluationFn();
  }
  setFlags(A) {
    this.flags = Object.assign({}, A);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (this.global === void 0 || this.global.location === void 0 || this.global.location.search === void 0)
      return;
    const A = this.getQueryParams(this.global.location.search);
    ZD in A && A[ZD].split(",").forEach((g) => {
      const [I, B] = g.split(":");
      this.urlFlags[I] = function(Q, E) {
        const i = E.toLowerCase();
        return i === "true" || i === "false" ? i === "true" : "" + +i === i ? +i : E;
      }(0, B);
    });
  }
}
function AN(C) {
  const A = {};
  return C.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (g, ...I) => (function(B, Q, E) {
    B[decodeURIComponent(Q)] = decodeURIComponent(E || "");
  }(A, I[0], I[1]), I.join("="))), A;
}
function aA() {
  return kl;
}
let ya, kl = null;
function Kl() {
  if (ya == null) {
    let C;
    if (typeof window < "u")
      C = window;
    else if (typeof global < "u")
      C = global;
    else if (typeof process < "u")
      C = process;
    else {
      if (typeof self > "u")
        throw new Error("Could not find a global object");
      C = self;
    }
    ya = C;
  }
  return ya;
}
function Gr(C, A) {
  const g = function() {
    const I = Kl();
    return I._tfGlobals == null && (I._tfGlobals = /* @__PURE__ */ new Map()), I._tfGlobals;
  }();
  if (g.has(C))
    return g.get(C);
  {
    const I = A();
    return g.set(C, I), g.get(C);
  }
}
const We = "Abs", io = "Acos", oo = "Acosh", Ei = "Add", yr = "AddN", dr = "All", Fr = "Any", Te = "ArgMax", Ze = "ArgMin", to = "Asin", eo = "Asinh", so = "Atan", ao = "Atanh", no = "Atan2", Xe = "AvgPool", Rr = "AvgPoolGrad", Oe = "AvgPool3D", Nr = "AvgPool3DGrad", ve = "BatchMatMul", Pe = "BatchToSpaceND", ur = "Bincount", Dn = "BitwiseAnd", Sl = "BroadcastArgs", ro = "Cast", ho = "Ceil", Do = "ClipByValue", kr = "Complex", ze = "ComplexAbs", je = "Concat", $e = "Conv2D", Kr = "Conv2DBackpropFilter", _e = "Conv2DBackpropInput", As = "Conv3D", Sr = "Conv3DBackpropFilterV2", pr = "Conv3DBackpropInputV2", co = "Cos", wo = "Cosh", Mr = "Cumprod", gs = "Cumsum", Ur = "CropAndResize", Yr = "DenseBincount", Jr = "DepthToSpace", Is = "DepthwiseConv2dNative", fr = "DepthwiseConv2dNativeBackpropFilter", Lr = "DepthwiseConv2dNativeBackpropInput", pl = "Diag", Cs = "Dilation2D", cn = "Dilation2DBackpropInput", wn = "Dilation2DBackpropFilter", lo = "RealDiv", Ml = "Einsum", Go = "Elu", mr = "EluGrad", yo = "Erf", Bs = "Equal", Fo = "Exp", Qs = "ExpandDims", Ro = "Expm1", br = "FFT", Hr = "Fill", xr = "FlipLeftRight", No = "Floor", uo = "FloorDiv", Es = "FusedBatchNorm", is = "GatherV2", Ul = "GatherNd", os = "Greater", ko = "GreaterEqual", Ko = "Identity", qr = "IFFT", Vr = "Imag", So = "IsFinite", po = "IsInf", Mo = "IsNan", ts = "LeakyRelu", es = "Less", ss = "LessEqual", Yl = "LinSpace", Uo = "Log", Yo = "Log1p", as = "LogicalAnd", ns = "LogicalNot", rs = "LogicalOr", hs = "LRN", Wr = "LRNGrad", Ds = "Max", Jo = "Maximum", cs = "MaxPool", Tr = "MaxPoolGrad", ws = "MaxPool3D", Zr = "MaxPool3DGrad", Jl = "MaxPoolWithArgmax", ls = "Mean", Gs = "Min", fo = "Minimum", ys = "MirrorPad", Lo = "Mod", fl = "Multinomial", mo = "Multiply", ds = "Neg", Fs = "NotEqual", Xr = "NonMaxSuppressionV3", Or = "NonMaxSuppressionV4", vr = "NonMaxSuppressionV5", Rs = "OnesLike", Ns = "OneHot", us = "Pack", ks = "PadV2", bo = "Pow", Ks = "Prelu", Ss = "Prod", Ll = "RaggedGather", ml = "RaggedRange", bl = "RaggedTensorToTensor", Pr = "Range", zr = "Real", Ho = "Reciprocal", xo = "Relu", ps = "Reshape", Ms = "ResizeNearestNeighbor", jr = "ResizeNearestNeighborGrad", Us = "ResizeBilinear", $r = "ResizeBilinearGrad", qo = "Relu6", Ys = "Reverse", Vo = "Round", Wo = "Rsqrt", Hl = "ScatterNd", xl = "TensorScatterUpdate", ql = "SearchSorted", Js = "Select", To = "Selu", fs = "Slice", Zo = "Sin", Xo = "Sinh", Oo = "Sign", vo = "Sigmoid", Po = "Softplus", zo = "Sqrt", Ls = "Sum", ms = "SpaceToBatchND", bs = "SplitV", Hs = "Softmax", Vl = "SparseFillEmptyRows", Wl = "SparseReshape", Tl = "SparseSegmentMean", Zl = "SparseSegmentSum", Xl = "SparseToDense", jo = "SquaredDifference", _r = "Square", ln = "StaticRegexReplace", Ah = "StridedSlice", Ol = "StringNGrams", vl = "StringSplit", Pl = "StringToHashBucketFast", $o = "Sub", _o = "Tan", At = "Tanh", gt = "Tile", gh = "TopK", Ih = "Transform", mE = "Transpose", Ch = "Unique", xs = "Unpack", qs = "UnsortedSegmentSum", Vs = "ZerosLike", It = "Step", Gn = "FromPixels", Bh = "RotateWithOffset", oe = "_FusedMatMul", te = "FusedConv2D", zl = "FusedDepthwiseConv2D";
function SC(...C) {
  aA().getBool("IS_TEST") || aA().getBool("PROD") || console.warn(...C);
}
const ee = Gr("kernelRegistry", () => /* @__PURE__ */ new Map()), yn = Gr("gradRegistry", () => /* @__PURE__ */ new Map());
function dn(C, A) {
  const g = jl(C, A);
  return ee.get(g);
}
function XD(C) {
  return yn.get(C);
}
function OD(C) {
  const A = ee.entries(), g = [];
  for (; ; ) {
    const { done: I, value: B } = A.next();
    if (I)
      break;
    const [Q, E] = B, [i] = Q.split("_");
    i === C && g.push(E);
  }
  return g;
}
function KC(C) {
  const { kernelName: A, backendName: g } = C, I = jl(A, g);
  ee.has(I) && SC(`The kernel '${A}' for backend '${g}' is already registered`), ee.set(I, C);
}
function gN(C) {
  const { kernelName: A } = C;
  yn.has(A) && aA().getBool("DEBUG") && SC(`Overriding the gradient for '${A}'`), yn.set(A, C);
}
function jl(C, A) {
  return `${A}_${C}`;
}
function $l(C) {
  return C instanceof Float32Array || C instanceof Int32Array || C instanceof Uint8Array || C instanceof Uint8ClampedArray;
}
var _l = sI, TC = null;
try {
  TC = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
} catch {
}
function sI(C, A, g) {
  this.low = 0 | C, this.high = 0 | A, this.unsigned = !!g;
}
function yC(C) {
  return (C && C.__isLong__) === !0;
}
sI.prototype.__isLong__, Object.defineProperty(sI.prototype, "__isLong__", { value: !0 }), sI.isLong = yC;
var vD = {}, PD = {};
function sE(C, A) {
  var g, I, B;
  return A ? (B = 0 <= (C >>>= 0) && C < 256) && (I = PD[C]) ? I : (g = hI(C, (0 | C) < 0 ? -1 : 0, !0), B && (PD[C] = g), g) : (B = -128 <= (C |= 0) && C < 128) && (I = vD[C]) ? I : (g = hI(C, C < 0 ? -1 : 0, !1), B && (vD[C] = g), g);
}
function OC(C, A) {
  if (isNaN(C))
    return A ? VQ : XC;
  if (A) {
    if (C < 0)
      return VQ;
    if (C >= AG)
      return CG;
  } else {
    if (C <= -zD)
      return dC;
    if (C + 1 >= zD)
      return IG;
  }
  return C < 0 ? OC(-C, A).neg() : hI(C % OE | 0, C / OE | 0, A);
}
function hI(C, A, g) {
  return new sI(C, A, g);
}
sI.fromInt = sE, sI.fromNumber = OC, sI.fromBits = hI;
var se = Math.pow;
function Qh(C, A, g) {
  if (C.length === 0)
    throw Error("empty string");
  if (C === "NaN" || C === "Infinity" || C === "+Infinity" || C === "-Infinity")
    return XC;
  if (typeof A == "number" ? (g = A, A = !1) : A = !!A, (g = g || 10) < 2 || 36 < g)
    throw RangeError("radix");
  var I;
  if ((I = C.indexOf("-")) > 0)
    throw Error("interior hyphen");
  if (I === 0)
    return Qh(C.substring(1), A, g).neg();
  for (var B = OC(se(g, 8)), Q = XC, E = 0; E < C.length; E += 8) {
    var i = Math.min(8, C.length - E), o = parseInt(C.substring(E, E + i), g);
    if (i < 8) {
      var t = OC(se(g, i));
      Q = Q.mul(t).add(OC(o));
    } else
      Q = (Q = Q.mul(B)).add(OC(o));
  }
  return Q.unsigned = A, Q;
}
function EB(C, A) {
  return typeof C == "number" ? OC(C, A) : typeof C == "string" ? Qh(C, A) : hI(C.low, C.high, typeof A == "boolean" ? A : C.unsigned);
}
sI.fromString = Qh, sI.fromValue = EB;
var OE = 4294967296, AG = OE * OE, zD = AG / 2, jD = sE(1 << 24), XC = sE(0);
sI.ZERO = XC;
var VQ = sE(0, !0);
sI.UZERO = VQ;
var KE = sE(1);
sI.ONE = KE;
var gG = sE(1, !0);
sI.UONE = gG;
var Fn = sE(-1);
sI.NEG_ONE = Fn;
var IG = hI(-1, 2147483647, !1);
sI.MAX_VALUE = IG;
var CG = hI(-1, -1, !0);
sI.MAX_UNSIGNED_VALUE = CG;
var dC = hI(0, -2147483648, !1);
sI.MIN_VALUE = dC;
var YA = sI.prototype;
YA.toInt = function() {
  return this.unsigned ? this.low >>> 0 : this.low;
}, YA.toNumber = function() {
  return this.unsigned ? (this.high >>> 0) * OE + (this.low >>> 0) : this.high * OE + (this.low >>> 0);
}, YA.toString = function(C) {
  if ((C = C || 10) < 2 || 36 < C)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative()) {
    if (this.eq(dC)) {
      var A = OC(C), g = this.div(A), I = g.mul(A).sub(this);
      return g.toString(C) + I.toInt().toString(C);
    }
    return "-" + this.neg().toString(C);
  }
  for (var B = OC(se(C, 6), this.unsigned), Q = this, E = ""; ; ) {
    var i = Q.div(B), o = (Q.sub(i.mul(B)).toInt() >>> 0).toString(C);
    if ((Q = i).isZero())
      return o + E;
    for (; o.length < 6; )
      o = "0" + o;
    E = "" + o + E;
  }
}, YA.getHighBits = function() {
  return this.high;
}, YA.getHighBitsUnsigned = function() {
  return this.high >>> 0;
}, YA.getLowBits = function() {
  return this.low;
}, YA.getLowBitsUnsigned = function() {
  return this.low >>> 0;
}, YA.getNumBitsAbs = function() {
  if (this.isNegative())
    return this.eq(dC) ? 64 : this.neg().getNumBitsAbs();
  for (var C = this.high != 0 ? this.high : this.low, A = 31; A > 0 && !(C & 1 << A); A--)
    ;
  return this.high != 0 ? A + 33 : A + 1;
}, YA.isZero = function() {
  return this.high === 0 && this.low === 0;
}, YA.eqz = YA.isZero, YA.isNegative = function() {
  return !this.unsigned && this.high < 0;
}, YA.isPositive = function() {
  return this.unsigned || this.high >= 0;
}, YA.isOdd = function() {
  return (1 & this.low) == 1;
}, YA.isEven = function() {
  return (1 & this.low) == 0;
}, YA.equals = function(C) {
  return yC(C) || (C = EB(C)), (this.unsigned === C.unsigned || this.high >>> 31 != 1 || C.high >>> 31 != 1) && this.high === C.high && this.low === C.low;
}, YA.eq = YA.equals, YA.notEquals = function(C) {
  return !this.eq(C);
}, YA.neq = YA.notEquals, YA.ne = YA.notEquals, YA.lessThan = function(C) {
  return this.comp(C) < 0;
}, YA.lt = YA.lessThan, YA.lessThanOrEqual = function(C) {
  return this.comp(C) <= 0;
}, YA.lte = YA.lessThanOrEqual, YA.le = YA.lessThanOrEqual, YA.greaterThan = function(C) {
  return this.comp(C) > 0;
}, YA.gt = YA.greaterThan, YA.greaterThanOrEqual = function(C) {
  return this.comp(C) >= 0;
}, YA.gte = YA.greaterThanOrEqual, YA.ge = YA.greaterThanOrEqual, YA.compare = function(C) {
  if (yC(C) || (C = EB(C)), this.eq(C))
    return 0;
  var A = this.isNegative(), g = C.isNegative();
  return A && !g ? -1 : !A && g ? 1 : this.unsigned ? C.high >>> 0 > this.high >>> 0 || C.high === this.high && C.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(C).isNegative() ? -1 : 1;
}, YA.comp = YA.compare, YA.negate = function() {
  return !this.unsigned && this.eq(dC) ? dC : this.not().add(KE);
}, YA.neg = YA.negate, YA.add = function(C) {
  yC(C) || (C = EB(C));
  var A = this.high >>> 16, g = 65535 & this.high, I = this.low >>> 16, B = 65535 & this.low, Q = C.high >>> 16, E = 65535 & C.high, i = C.low >>> 16, o = 0, t = 0, e = 0, s = 0;
  return e += (s += B + (65535 & C.low)) >>> 16, t += (e += I + i) >>> 16, o += (t += g + E) >>> 16, o += A + Q, hI((e &= 65535) << 16 | (s &= 65535), (o &= 65535) << 16 | (t &= 65535), this.unsigned);
}, YA.subtract = function(C) {
  return yC(C) || (C = EB(C)), this.add(C.neg());
}, YA.sub = YA.subtract, YA.multiply = function(C) {
  if (this.isZero())
    return XC;
  if (yC(C) || (C = EB(C)), TC)
    return hI(TC.mul(this.low, this.high, C.low, C.high), TC.get_high(), this.unsigned);
  if (C.isZero())
    return XC;
  if (this.eq(dC))
    return C.isOdd() ? dC : XC;
  if (C.eq(dC))
    return this.isOdd() ? dC : XC;
  if (this.isNegative())
    return C.isNegative() ? this.neg().mul(C.neg()) : this.neg().mul(C).neg();
  if (C.isNegative())
    return this.mul(C.neg()).neg();
  if (this.lt(jD) && C.lt(jD))
    return OC(this.toNumber() * C.toNumber(), this.unsigned);
  var A = this.high >>> 16, g = 65535 & this.high, I = this.low >>> 16, B = 65535 & this.low, Q = C.high >>> 16, E = 65535 & C.high, i = C.low >>> 16, o = 65535 & C.low, t = 0, e = 0, s = 0, a = 0;
  return s += (a += B * o) >>> 16, e += (s += I * o) >>> 16, s &= 65535, e += (s += B * i) >>> 16, t += (e += g * o) >>> 16, e &= 65535, t += (e += I * i) >>> 16, e &= 65535, t += (e += B * E) >>> 16, t += A * o + g * i + I * E + B * Q, hI((s &= 65535) << 16 | (a &= 65535), (t &= 65535) << 16 | (e &= 65535), this.unsigned);
}, YA.mul = YA.multiply, YA.divide = function(C) {
  if (yC(C) || (C = EB(C)), C.isZero())
    throw Error("division by zero");
  var A, g, I;
  if (TC)
    return this.unsigned || this.high !== -2147483648 || C.low !== -1 || C.high !== -1 ? hI((this.unsigned ? TC.div_u : TC.div_s)(this.low, this.high, C.low, C.high), TC.get_high(), this.unsigned) : this;
  if (this.isZero())
    return this.unsigned ? VQ : XC;
  if (this.unsigned) {
    if (C.unsigned || (C = C.toUnsigned()), C.gt(this))
      return VQ;
    if (C.gt(this.shru(1)))
      return gG;
    I = VQ;
  } else {
    if (this.eq(dC))
      return C.eq(KE) || C.eq(Fn) ? dC : C.eq(dC) ? KE : (A = this.shr(1).div(C).shl(1)).eq(XC) ? C.isNegative() ? KE : Fn : (g = this.sub(C.mul(A)), I = A.add(g.div(C)));
    if (C.eq(dC))
      return this.unsigned ? VQ : XC;
    if (this.isNegative())
      return C.isNegative() ? this.neg().div(C.neg()) : this.neg().div(C).neg();
    if (C.isNegative())
      return this.div(C.neg()).neg();
    I = XC;
  }
  for (g = this; g.gte(C); ) {
    A = Math.max(1, Math.floor(g.toNumber() / C.toNumber()));
    for (var B = Math.ceil(Math.log(A) / Math.LN2), Q = B <= 48 ? 1 : se(2, B - 48), E = OC(A), i = E.mul(C); i.isNegative() || i.gt(g); )
      i = (E = OC(A -= Q, this.unsigned)).mul(C);
    E.isZero() && (E = KE), I = I.add(E), g = g.sub(i);
  }
  return I;
}, YA.div = YA.divide, YA.modulo = function(C) {
  return yC(C) || (C = EB(C)), TC ? hI((this.unsigned ? TC.rem_u : TC.rem_s)(this.low, this.high, C.low, C.high), TC.get_high(), this.unsigned) : this.sub(this.div(C).mul(C));
}, YA.mod = YA.modulo, YA.rem = YA.modulo, YA.not = function() {
  return hI(~this.low, ~this.high, this.unsigned);
}, YA.and = function(C) {
  return yC(C) || (C = EB(C)), hI(this.low & C.low, this.high & C.high, this.unsigned);
}, YA.or = function(C) {
  return yC(C) || (C = EB(C)), hI(this.low | C.low, this.high | C.high, this.unsigned);
}, YA.xor = function(C) {
  return yC(C) || (C = EB(C)), hI(this.low ^ C.low, this.high ^ C.high, this.unsigned);
}, YA.shiftLeft = function(C) {
  return yC(C) && (C = C.toInt()), (C &= 63) == 0 ? this : C < 32 ? hI(this.low << C, this.high << C | this.low >>> 32 - C, this.unsigned) : hI(0, this.low << C - 32, this.unsigned);
}, YA.shl = YA.shiftLeft, YA.shiftRight = function(C) {
  return yC(C) && (C = C.toInt()), (C &= 63) == 0 ? this : C < 32 ? hI(this.low >>> C | this.high << 32 - C, this.high >> C, this.unsigned) : hI(this.high >> C - 32, this.high >= 0 ? 0 : -1, this.unsigned);
}, YA.shr = YA.shiftRight, YA.shiftRightUnsigned = function(C) {
  if (yC(C) && (C = C.toInt()), (C &= 63) === 0)
    return this;
  var A = this.high;
  return C < 32 ? hI(this.low >>> C | A << 32 - C, A >>> C, this.unsigned) : hI(C === 32 ? A : A >>> C - 32, 0, this.unsigned);
}, YA.shru = YA.shiftRightUnsigned, YA.shr_u = YA.shiftRightUnsigned, YA.toSigned = function() {
  return this.unsigned ? hI(this.low, this.high, !1) : this;
}, YA.toUnsigned = function() {
  return this.unsigned ? this : hI(this.low, this.high, !0);
}, YA.toBytes = function(C) {
  return C ? this.toBytesLE() : this.toBytesBE();
}, YA.toBytesLE = function() {
  var C = this.high, A = this.low;
  return [255 & A, A >>> 8 & 255, A >>> 16 & 255, A >>> 24, 255 & C, C >>> 8 & 255, C >>> 16 & 255, C >>> 24];
}, YA.toBytesBE = function() {
  var C = this.high, A = this.low;
  return [C >>> 24, C >>> 16 & 255, C >>> 8 & 255, 255 & C, A >>> 24, A >>> 16 & 255, A >>> 8 & 255, 255 & A];
}, sI.fromBytes = function(C, A, g) {
  return g ? sI.fromBytesLE(C, A) : sI.fromBytesBE(C, A);
}, sI.fromBytesLE = function(C, A) {
  return new sI(C[0] | C[1] << 8 | C[2] << 16 | C[3] << 24, C[4] | C[5] << 8 | C[6] << 16 | C[7] << 24, A);
}, sI.fromBytesBE = function(C, A) {
  return new sI(C[4] << 24 | C[5] << 16 | C[6] << 8 | C[7], C[0] << 24 | C[1] << 16 | C[2] << 8 | C[3], A);
};
const $D = XR(_l), HQ = $D || ZR({ __proto__: null, default: $D }, [_l]);
function Ws(C) {
  return HQ.fromString(C, !0, 16);
}
const _D = Ws("c3a5c85c97cb3127"), UQ = Ws("b492b66fbe98f273"), BC = Ws("9ae16a3b2f90404f");
function da(C) {
  return C.xor(C.shru(47));
}
function BG(C, A, g) {
  const I = C.slice(A, A + g);
  return HQ.fromBytes(Array.from(I), !0, !0);
}
function QI(C, A) {
  return BG(C, A, 8);
}
function Ac(C, A) {
  return BG(C, A, 4);
}
function TI(C, A) {
  return A === 0 ? C : C.shru(A).or(C.shl(64 - A));
}
function CQ(C, A, g = Ws("9ddfea08eb382d69")) {
  let I = C.xor(A).mul(g);
  I = I.xor(I.shru(47));
  let B = A.xor(I).mul(g);
  return B = B.xor(B.shru(47)), B = B.mul(g), B;
}
function bt(C, A, g, I) {
  return function(B, Q, E, i, o, t) {
    o = o.add(B), t = TI(t.add(o).add(i), 21);
    const e = o;
    return o = (o = o.add(Q)).add(E), t = t.add(TI(o, 44)), [o.add(i), t.add(e)];
  }(QI(C, A), QI(C, A + 8), QI(C, A + 16), QI(C, A + 24), g, I);
}
function IN(C, A = C.length) {
  const g = HQ.fromNumber(81, !0);
  if (A <= 32)
    return A <= 16 ? function(a, r = a.length) {
      if (r >= 8) {
        const h = BC.add(2 * r), w = QI(a, 0).add(BC), G = QI(a, r - 8);
        return CQ(TI(G, 37).mul(h).add(w), TI(w, 25).add(G).mul(h), h);
      }
      if (r >= 4) {
        const h = BC.add(2 * r);
        return CQ(Ac(a, 0).shl(3).add(r), Ac(a, r - 4), h);
      }
      if (r > 0) {
        const h = a[0] + (a[r >> 1] << 8), w = r + (a[r - 1] << 2);
        return da(BC.mul(h).xor(_D.mul(w))).mul(BC);
      }
      return BC;
    }(C, A) : function(a, r = a.length) {
      const h = BC.add(2 * r), w = QI(a, 0).mul(UQ), G = QI(a, 8), D = QI(a, r - 8).mul(h), l = QI(a, r - 16).mul(BC);
      return CQ(TI(w.add(G), 43).add(TI(D, 30)).add(l), w.add(TI(G.add(BC), 18)).add(D), h);
    }(C, A);
  if (A <= 64)
    return function(a, r = a.length) {
      const h = BC.add(2 * r), w = QI(a, 0).mul(BC), G = QI(a, 8), D = QI(a, r - 8).mul(h), l = QI(a, r - 16).mul(BC), d = TI(w.add(G), 43).add(TI(D, 30)).add(l), N = CQ(d, w.add(TI(G.add(BC), 18)).add(D), h), k = QI(a, 16).mul(h), p = QI(a, 24), Y = d.add(QI(a, r - 32)).mul(h), M = N.add(QI(a, r - 24)).mul(h);
      return CQ(TI(k.add(p), 43).add(TI(Y, 30)).add(M), k.add(TI(p.add(w), 18)).add(Y), h);
    }(C, A);
  let I = g, B = g.mul(UQ).add(113), Q = da(B.mul(BC).add(113)).mul(BC), E = [HQ.UZERO, HQ.UZERO], i = [HQ.UZERO, HQ.UZERO];
  I = I.mul(BC).add(QI(C, 0));
  let o = 0;
  const t = 64 * (A - 1 >> 6), e = t + (A - 1 & 63) - 63;
  do
    I = TI(I.add(B).add(E[0]).add(QI(C, o + 8)), 37).mul(UQ), B = TI(B.add(E[1]).add(QI(C, o + 48)), 42).mul(UQ), I = I.xor(i[1]), B = B.add(E[0]).add(QI(C, o + 40)), Q = TI(Q.add(i[0]), 33).mul(UQ), E = bt(C, o, E[1].mul(UQ), I.add(i[0])), i = bt(C, o + 32, Q.add(i[1]), B.add(QI(C, o + 16))), [Q, I] = [I, Q], o += 64;
  while (o !== t);
  const s = UQ.add(Q.and(255).shl(1));
  return o = e, i[0] = i[0].add(A - 1 & 63), E[0] = E[0].add(i[0]), i[0] = i[0].add(E[0]), I = TI(I.add(B).add(E[0]).add(QI(C, o + 8)), 37).mul(s), B = TI(B.add(E[1]).add(QI(C, o + 48)), 42).mul(s), I = I.xor(i[1].mul(9)), B = B.add(E[0].mul(9).add(QI(C, o + 40))), Q = TI(Q.add(i[0]), 33).mul(s), E = bt(C, o, E[1].mul(s), I.add(i[0])), i = bt(C, o + 32, Q.add(i[1]), B.add(QI(C, o + 16))), [Q, I] = [I, Q], CQ(CQ(E[0], i[0], s).add(da(B).mul(_D)).add(Q), CQ(E[1], i[1], s).add(I), s);
}
function yQ(C, A) {
  return A === "string" ? eQ(C) : aE([C], A);
}
function aE(C, A) {
  if (A === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(C) && (C = _Q(C)), aA().getBool("DEBUG") && function(g, I) {
    for (let B = 0; B < g.length; B++) {
      const Q = g[B];
      if (isNaN(Q) || !isFinite(Q))
        throw Error(`A tensor of type ${I} being uploaded contains ${Q}.`);
    }
  }(C, A), function(g, I) {
    return g instanceof Float32Array && I === "float32" || g instanceof Int32Array && I === "int32" || g instanceof Uint8Array && I === "bool";
  }(C, A))
    return C;
  if (A == null || A === "float32" || A === "complex64")
    return new Float32Array(C);
  if (A === "int32")
    return new Int32Array(C);
  if (A === "bool") {
    const g = new Uint8Array(C.length);
    for (let I = 0; I < g.length; ++I)
      Math.round(C[I]) !== 0 && (g[I] = 1);
    return g;
  }
  throw new Error(`Unknown data type ${A}`);
}
function nC() {
  return aA().platform.now();
}
function eQ(C, A = "utf-8") {
  return A = A || "utf-8", aA().platform.encode(C, A);
}
function rQ(C, A = "utf-8") {
  return A = A || "utf-8", aA().platform.decode(C, A);
}
function jC(C) {
  return aA().platform.isTypedArray != null ? aA().platform.isTypedArray(C) : $l(C);
}
function _Q(C, A = [], g = !1) {
  if (A == null && (A = []), typeof C == "boolean" || typeof C == "number" || typeof C == "string" || lr(C) || C == null || jC(C) && g)
    A.push(C);
  else if (Array.isArray(C) || jC(C))
    for (let I = 0; I < C.length; ++I)
      _Q(C[I], A, g);
  else {
    let I = -1;
    for (const B of Object.keys(C))
      /^([1-9]+[0-9]*|0)$/.test(B) && (I = Math.max(I, Number(B)));
    for (let B = 0; B <= I; B++)
      _Q(C[B], A, g);
  }
  return A;
}
class CN {
  constructor(A, g) {
    this.backendTimer = A, this.logger = g, g == null && (this.logger = new QN());
  }
  profileKernel(A, g, I) {
    let B;
    const Q = () => {
      B = I();
    };
    let E;
    const i = nC();
    if (this.backendTimer.timerAvailable())
      E = this.backendTimer.time(Q);
    else {
      Q();
      for (const o of B)
        o.dataSync();
      E = Promise.resolve({ kernelMs: nC() - i });
    }
    if (aA().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let o = 0; o < B.length; o++) {
        const t = B[o];
        t.data().then((e) => {
          BN(e, t.dtype, A);
        });
      }
    return { kernelName: A, outputs: B, inputs: g, timeMs: E.then((o) => o.kernelMs), extraInfo: E.then((o) => o.getExtraProfileInfo != null ? o.getExtraProfileInfo() : "") };
  }
  logKernelProfile(A) {
    const { kernelName: g, outputs: I, timeMs: B, inputs: Q, extraInfo: E } = A;
    I.forEach((i) => {
      Promise.all([i.data(), B, E]).then((o) => {
        this.logger.logKernelProfile(g, i, o[0], o[1], Q, o[2]);
      });
    });
  }
}
function BN(C, A, g) {
  if (A !== "float32")
    return !1;
  for (let I = 0; I < C.length; I++) {
    const B = C[I];
    if (isNaN(B) || !isFinite(B))
      return console.warn(`Found ${B} in the result of '${g}'`), !0;
  }
  return !1;
}
class QN {
  logKernelProfile(A, g, I, B, Q, E) {
    const i = typeof B == "number" ? LE(`${B}ms`, 9) : B.error, o = LE(A, 25), t = g.rank, e = g.size, s = LE(g.shape.toString(), 14);
    let a = "";
    for (const r in Q) {
      const h = Q[r];
      if (h != null) {
        const w = h.shape || g.shape, G = w.length;
        a += `${r}: ${G}D ${G > 0 ? w : ""} `;
      }
    }
    console.log(`%c${o}	%c${i}	%c${t}D ${s}	%c${e}	%c${a}	%c${E}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
const gc = 20, Si = 3, Fa = 7;
function EN(C, A, g, I) {
  const B = zA(A), Q = function(t, e, s, a) {
    const r = cA(e), h = a[a.length - 1], w = new Array(h).fill(0), G = e.length, D = s === "complex64" ? Ji(t) : t;
    if (G > 1)
      for (let l = 0; l < r / h; l++) {
        const d = l * h;
        for (let N = 0; N < h; N++)
          w[N] = Math.max(w[N], Yi(D[d + N], 0, s).length);
      }
    return w;
  }(C, A, g, B), E = A.length, i = Ce(C, A, g, B, Q), o = ["Tensor"];
  return I && (o.push(`  dtype: ${g}`), o.push(`  rank: ${E}`), o.push(`  shape: [${A}]`), o.push("  values:")), o.push(i.map((t) => "    " + t).join(`
`)), o.join(`
`);
}
function Yi(C, A, g) {
  let I;
  return I = Array.isArray(C) ? `${parseFloat(C[0].toFixed(Fa))} + ${parseFloat(C[1].toFixed(Fa))}j` : Eo(C) ? `'${C}'` : g === "bool" ? QG(C) : parseFloat(C.toFixed(Fa)).toString(), LE(I, A);
}
function QG(C) {
  return C === 0 ? "false" : "true";
}
function Ce(C, A, g, I, B, Q = !0) {
  const E = g === "complex64" ? 2 : 1, i = A[0], o = A.length;
  if (o === 0)
    return g === "complex64" ? [Yi(Ji(C)[0], 0, g)] : g === "bool" ? [QG(C[0])] : [C[0].toString()];
  if (o === 1) {
    if (i > gc) {
      const w = Si * E;
      let G = Array.from(C.slice(0, w)), D = Array.from(C.slice((i - Si) * E, i * E));
      return g === "complex64" && (G = Ji(G), D = Ji(D)), ["[" + G.map((l, d) => Yi(l, B[d], g)).join(", ") + ", ..., " + D.map((l, d) => Yi(l, B[i - Si + d], g)).join(", ") + "]"];
    }
    return ["[" + (g === "complex64" ? Ji(C) : Array.from(C)).map((w, G) => Yi(w, B[G], g)).join(", ") + "]"];
  }
  const t = A.slice(1), e = I.slice(1), s = I[0] * E, a = [];
  if (i > gc) {
    for (let w = 0; w < Si; w++) {
      const G = w * s, D = G + s;
      a.push(...Ce(C.slice(G, D), t, g, e, B, !1));
    }
    a.push("...");
    for (let w = i - Si; w < i; w++) {
      const G = w * s, D = G + s;
      a.push(...Ce(C.slice(G, D), t, g, e, B, w === i - 1));
    }
  } else
    for (let w = 0; w < i; w++) {
      const G = w * s, D = G + s;
      a.push(...Ce(C.slice(G, D), t, g, e, B, w === i - 1));
    }
  const r = o === 2 ? "," : "";
  a[0] = "[" + (i > 0 ? a[0] + r : "");
  for (let w = 1; w < a.length - 1; w++)
    a[w] = " " + a[w] + r;
  let h = `,
`;
  for (let w = 2; w < o; w++)
    h += `
`;
  return a[a.length - 1] = " " + a[a.length - 1] + "]" + (Q ? "" : h), a;
}
function Ji(C) {
  const A = [];
  for (let g = 0; g < C.length; g += 2)
    A.push([C[g], C[g + 1]]);
  return A;
}
class PI {
  constructor(A, g, I) {
    if (this.dtype = g, this.shape = A.slice(), this.size = cA(A), I != null) {
      const B = I.length;
      f(B === this.size, () => `Length of values '${B}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (g === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = I || NI(g, this.size), this.strides = zA(A);
  }
  set(A, ...g) {
    g.length === 0 && (g = [0]), f(g.length === this.rank, () => `The number of provided coordinates (${g.length}) must match the rank (${this.rank})`);
    const I = this.locToIndex(g);
    this.values[I] = A;
  }
  get(...A) {
    A.length === 0 && (A = [0]);
    let g = 0;
    for (const B of A) {
      if (B < 0 || B >= this.shape[g]) {
        const Q = `Requested out of range element at ${A}.   Buffer shape=${this.shape}`;
        throw new Error(Q);
      }
      g++;
    }
    let I = A[A.length - 1];
    for (let B = 0; B < A.length - 1; ++B)
      I += this.strides[B] * A[B];
    return this.values[I];
  }
  locToIndex(A) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return A[0];
    let g = A[A.length - 1];
    for (let I = 0; I < A.length - 1; ++I)
      g += this.strides[I] * A[I];
    return g;
  }
  indexToLoc(A) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [A];
    const g = new Array(this.shape.length);
    for (let I = 0; I < g.length - 1; ++I)
      g[I] = Math.floor(A / this.strides[I]), A -= g[I] * this.strides[I];
    return g[g.length - 1] = A, g;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return oB().makeTensor(this.values, this.shape, this.dtype);
  }
}
let oB = null, SE = null;
class MI {
  constructor(A, g, I, B) {
    this.kept = !1, this.isDisposedInternal = !1, this.shape = A.slice(), this.dtype = g || "float32", this.size = cA(A), this.strides = zA(A), this.dataId = I, this.id = B, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    const A = await this.data();
    return SE.buffer(this.shape, this.dtype, A);
  }
  bufferSync() {
    return SE.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    const A = await this.data();
    return aB(this.shape, A, this.dtype === "complex64");
  }
  arraySync() {
    return aB(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    const A = oB().read(this.dataId);
    if (this.dtype === "string") {
      const g = await A;
      try {
        return g.map((I) => rQ(I));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return A;
  }
  dataToGPU(A) {
    return this.throwIfDisposed(), oB().readToGPU(this.dataId, A);
  }
  dataSync() {
    this.throwIfDisposed();
    const A = oB().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return A.map((g) => rQ(g));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return A;
  }
  async bytes() {
    this.throwIfDisposed();
    const A = await oB().read(this.dataId);
    return this.dtype === "string" ? A : new Uint8Array(A.buffer);
  }
  dispose() {
    this.isDisposed || (oB().disposeTensor(this), this.isDisposedInternal = !0);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  print(A = !1) {
    return SE.print(this, A);
  }
  clone() {
    return this.throwIfDisposed(), SE.clone(this);
  }
  toString(A = !1) {
    return EN(this.dataSync(), this.shape, this.dtype, A);
  }
  cast(A) {
    return this.throwIfDisposed(), SE.cast(this, A);
  }
  variable(A = !0, g, I) {
    return this.throwIfDisposed(), oB().makeVariable(this, A, g, I);
  }
}
function hA() {
  return Gr("Tensor", () => MI);
}
Object.defineProperty(MI, Symbol.hasInstance, { value: (C) => !!C && C.data != null && C.dataSync != null && C.throwIfDisposed != null }), hA();
class ae extends MI {
  constructor(A, g, I, B) {
    super(A.shape, A.dtype, A.dataId, B), this.trainable = g, this.name = I;
  }
  assign(A) {
    if (A.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${A.dtype}) and previous value (${this.dtype}) must match`);
    if (!Zg(A.shape, this.shape))
      throw new Error(`shape of the new value (${A.shape}) and previous value (${this.shape}) must match`);
    oB().disposeTensor(this), this.dataId = A.dataId, oB().incRef(this, null);
  }
  dispose() {
    oB().disposeVariable(this), this.isDisposedInternal = !0;
  }
}
var Ic, Rn, Nn, un, kn;
Object.defineProperty(ae, Symbol.hasInstance, { value: (C) => C instanceof MI && C.assign != null && C.assign instanceof Function }), function(C) {
  C.R0 = "R0", C.R1 = "R1", C.R2 = "R2", C.R3 = "R3", C.R4 = "R4", C.R5 = "R5", C.R6 = "R6";
}(Ic || (Ic = {})), function(C) {
  C.float32 = "float32", C.int32 = "int32", C.bool = "int32", C.complex64 = "complex64";
}(Rn || (Rn = {})), function(C) {
  C.float32 = "float32", C.int32 = "int32", C.bool = "bool", C.complex64 = "complex64";
}(Nn || (Nn = {})), function(C) {
  C.float32 = "float32", C.int32 = "float32", C.bool = "float32", C.complex64 = "complex64";
}(un || (un = {})), function(C) {
  C.float32 = "complex64", C.int32 = "complex64", C.bool = "complex64", C.complex64 = "complex64";
}(kn || (kn = {}));
const iN = { float32: un, int32: Rn, bool: Nn, complex64: kn };
function NC(C, A) {
  if (C === "string" || A === "string") {
    if (C === "string" && A === "string")
      return "string";
    throw new Error(`Can not upcast ${C} with ${A}`);
  }
  return iN[C][A];
}
function Eh(C) {
  return NC(C, "int32");
}
function EG(C) {
  return C != null && typeof C == "object" && "texture" in C && C.texture instanceof WebGLTexture;
}
function iG(C) {
  return typeof GPUBuffer < "u" && C != null && typeof C == "object" && "buffer" in C && C.buffer instanceof GPUBuffer;
}
function uI(C, A) {
  if (C.dtype === A.dtype)
    return [C, A];
  const g = NC(C.dtype, A.dtype);
  return [C.cast(g), A.cast(g)];
}
function oG(C) {
  const A = [];
  return tG(C, A, /* @__PURE__ */ new Set()), A;
}
function tG(C, A, g) {
  if (C == null)
    return;
  if (C instanceof MI)
    return void A.push(C);
  if (I = C, !Array.isArray(I) && typeof I != "object")
    return;
  var I;
  const B = C;
  for (const Q in B) {
    const E = B[Q];
    g.has(E) || (g.add(E), tG(E, A, g));
  }
}
function Ra(C) {
  return C.kernelName != null;
}
class Cc {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = !1, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() {
      return Array.from(new Set(this.kernels.map((A) => A.name)));
    } };
  }
  dispose() {
    for (const A in this.registeredVariables)
      this.registeredVariables[A].dispose();
  }
}
class vE {
  constructor(A) {
    this.ENV = A, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Cc();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    const A = this.getSortedBackends();
    for (let g = 0; g < A.length; g++) {
      const I = A[g];
      if (await this.initializeBackend(I).success)
        return void await this.setBackend(I);
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: A, asyncInit: g } = this.initializeBackendsAndReturnBest();
      if (g)
        throw new Error(`The highest priority backend '${A}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(A);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(A) {
    if (!(A in this.registry)) {
      if (!(A in this.registryFactory))
        return null;
      {
        const { asyncInit: g } = this.initializeBackend(A);
        if (g)
          return null;
      }
    }
    return this.registry[A];
  }
  findBackendFactory(A) {
    return A in this.registryFactory ? this.registryFactory[A].factory : null;
  }
  registerBackend(A, g, I = 1) {
    return A in this.registryFactory ? (SC(`${A} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[A] = { factory: g, priority: I }, !0);
  }
  async setBackend(A) {
    if (this.registryFactory[A] == null)
      throw new Error(`Backend name '${A}' not found in registry`);
    if (this.backendName = A, this.registry[A] == null) {
      this.backendInstance = null;
      const { success: g, asyncInit: I } = this.initializeBackend(A);
      if (!(I ? await g : g))
        return !1;
    }
    return this.backendInstance = this.registry[A], this.setupRegisteredKernels(), this.profiler = new CN(this.backendInstance), !0;
  }
  setupRegisteredKernels() {
    OD(this.backendName).forEach((A) => {
      A.setupFunc != null && A.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(A) {
    OD(A).forEach((g) => {
      g.disposeFunc != null && g.disposeFunc(this.registry[A]);
    });
  }
  initializeBackend(A) {
    const g = this.registryFactory[A];
    if (g == null)
      throw new Error(`Cannot initialize backend ${A}, no registration found.`);
    try {
      const I = g.factory();
      if (!I || I instanceof rr || typeof I.then != "function")
        return this.registry[A] = I, { success: !0, asyncInit: !1 };
      {
        const B = ++this.pendingBackendInitId, Q = I.then((E) => !(B < this.pendingBackendInitId) && (this.registry[A] = E, this.pendingBackendInit = null, !0)).catch((E) => (B < this.pendingBackendInitId || (this.pendingBackendInit = null, SC(`Initialization of backend ${A} failed`), SC(E.stack || E.message)), !1));
        return this.pendingBackendInit = Q, { success: Q, asyncInit: !0 };
      }
    } catch (I) {
      return SC(`Initialization of backend ${A} failed`), SC(I.stack || I.message), { success: !1, asyncInit: !1 };
    }
  }
  removeBackend(A) {
    if (!(A in this.registryFactory))
      throw new Error(`${A} backend not found in registry`);
    this.backendName === A && this.pendingBackendInit != null && this.pendingBackendInitId++, A in this.registry && (this.disposeRegisteredKernels(A), this.registry[A].dispose(), delete this.registry[A]), delete this.registryFactory[A], this.backendName === A && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((A, g) => this.registryFactory[g].priority - this.registryFactory[A].priority);
  }
  initializeBackendsAndReturnBest() {
    const A = this.getSortedBackends();
    for (let g = 0; g < A.length; g++) {
      const I = A[g], { success: B, asyncInit: Q } = this.initializeBackend(I);
      if (Q || B)
        return { name: I, asyncInit: Q };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(A, g) {
    const I = this.state.tensorInfo.get(g), B = I.backend, Q = this.readSync(g), E = B.refCount(g);
    B.disposeData(g, !0), I.backend = A, A.move(g, Q, I.shape, I.dtype, E), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(A, g) {
    let I, B = null;
    if (g == null) {
      if (typeof A != "function")
        throw new Error("Please provide a function to tidy()");
      g = A;
    } else {
      if (typeof A != "string" && !(A instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof g != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      B = A;
    }
    return this.scopedRun(() => this.startScope(B), () => this.endScope(I), () => (I = g(), I instanceof Promise && console.error("Cannot return a Promise inside of tidy."), I));
  }
  scopedRun(A, g, I) {
    A();
    try {
      const B = I();
      return g(), B;
    } catch (B) {
      throw g(), B;
    }
  }
  nextTensorId() {
    return vE.nextTensorId++;
  }
  nextVariableId() {
    return vE.nextVariableId++;
  }
  clone(A) {
    const g = v.runKernel(Ko, { x: A }), I = { x: A };
    return this.addTapeNode(this.state.activeScope.name, I, [g], (B) => ({ x: () => {
      const Q = { x: B }, E = { dtype: "float32" };
      return v.runKernel(ro, Q, E);
    } }), [], {}), g;
  }
  runKernel(A, g, I) {
    if (this.backendName == null && this.backend, dn(A, this.backendName) == null)
      throw new Error(`Kernel '${A}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: A, inputs: g, attrs: I });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(A, g, I) {
    const B = this.backend.numDataIds();
    let Q = 0;
    I.forEach((o) => {
      Q += o.dtype === "complex64" ? 3 : 1;
    });
    const E = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = B - g - Q - E;
    if (i > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${A}'`);
  }
  runKernelFunc(A) {
    let g, I = [];
    const B = this.isTapeOn(), Q = this.state.numBytes, E = this.state.numTensors;
    let i, o;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0), this.backendName == null && this.backend;
    const t = Ra(A) ? A.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (Ra(A)) {
      const { kernelName: h, inputs: w, attrs: G } = A;
      this.backendName == null && this.backend;
      const D = dn(h, this.backendName);
      f(D != null, () => `Cannot find registered kernel '${h}' for backend '${this.backendName}'`), i = () => {
        const l = this.backend.numDataIds();
        o = D.kernelFunc({ inputs: w, attrs: G, backend: this.backend });
        const d = Array.isArray(o) ? o : [o];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(h, l, d);
        const N = d.map((k) => k.rank != null ? k : this.makeTensorFromTensorInfo(k));
        if (B) {
          const k = this.getTensorsForGradient(h, w, N);
          I = this.saveTensorsForBackwardMode(k);
        }
        return N;
      };
    } else {
      const { forwardFunc: h } = A, w = (G) => {
        B && (I = G.map((D) => this.keep(this.clone(D))));
      };
      i = () => {
        const G = this.backend.numDataIds();
        o = this.tidy(() => h(this.backend, w));
        const D = Array.isArray(o) ? o : [o];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(t, G, D), D;
      };
    }
    const { inputs: e, attrs: s } = A, a = Ra(A) ? null : A.backwardsFunc;
    let r;
    return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      this.ENV.getBool("DEBUG") || this.state.profiling ? (r = this.profiler.profileKernel(t, e, () => i()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(r), g = r.outputs) : g = i();
    }), B && this.addTapeNode(t, e, g, a, I, s), this.state.profiling && this.state.activeProfile.kernels.push({ name: t, bytesAdded: this.state.numBytes - Q, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - E, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(e).map((h) => e[h] != null ? e[h].shape : null), outputShapes: g.map((h) => h.shape), kernelTimeMs: r.timeMs, extraInfo: r.extraInfo }), Array.isArray(o) ? g : g[0];
  }
  saveTensorsForBackwardMode(A) {
    return A.map((I) => this.keep(this.clone(I)));
  }
  getTensorsForGradient(A, g, I) {
    const B = XD(A);
    if (B != null) {
      const Q = B.inputsToSave || [], E = B.outputsToSave || [];
      let i;
      B.saveAllInputs ? (f(Array.isArray(g), () => "saveAllInputs is true, expected inputs to be an array."), i = Object.keys(g).map((t) => g[t])) : i = Q.map((t) => g[t]);
      const o = I.filter((t, e) => E[e]);
      return i.concat(o);
    }
    return [];
  }
  makeTensor(A, g, I, B) {
    if (A == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    I = I || "float32", B = B || this.backend;
    let Q = A;
    I === "string" && Eo(A[0]) && (Q = A.map((o) => eQ(o)));
    const E = B.write(Q, g, I), i = new MI(g, I, E, this.nextTensorId());
    if (this.trackTensor(i, B), I === "string") {
      const o = this.state.tensorInfo.get(E), t = function(e) {
        if (e == null)
          return 0;
        let s = 0;
        return e.forEach((a) => s += a.length), s;
      }(Q);
      this.state.numBytes += t - o.bytes, o.bytes = t;
    }
    return i;
  }
  makeTensorFromDataId(A, g, I, B) {
    const Q = { dataId: A, shape: g, dtype: I = I || "float32" };
    return this.makeTensorFromTensorInfo(Q, B);
  }
  makeTensorFromTensorInfo(A, g) {
    const { dataId: I, shape: B, dtype: Q } = A, E = new MI(B, Q, I, this.nextTensorId());
    return this.trackTensor(E, g), E;
  }
  makeVariable(A, g = !0, I, B) {
    I = I || this.nextVariableId().toString(), B != null && B !== A.dtype && (A = A.cast(B));
    const Q = new ae(A, g, I, this.nextTensorId());
    if (this.state.registeredVariables[Q.name] != null)
      throw new Error(`Variable with name ${Q.name} was already registered`);
    return this.state.registeredVariables[Q.name] = Q, this.incRef(Q, this.backend), Q;
  }
  trackTensor(A, g) {
    this.state.numTensors++, A.dtype === "string" && this.state.numStringTensors++;
    let I = 0;
    A.dtype !== "complex64" && A.dtype !== "string" && (I = A.size * ie(A.dtype)), this.state.numBytes += I, this.state.tensorInfo.has(A.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(A.dataId, { backend: g || this.backend, dtype: A.dtype, shape: A.shape, bytes: I })), A instanceof ae || this.track(A);
  }
  incRef(A, g) {
    this.trackTensor(A, g), this.backend.incRef(A.dataId);
  }
  removeDataId(A, g) {
    this.state.tensorInfo.has(A) && this.state.tensorInfo.get(A).backend === g && (this.state.tensorInfo.delete(A), this.state.numDataBuffers--);
  }
  disposeTensor(A) {
    if (!this.state.tensorInfo.has(A.dataId))
      return;
    const g = this.state.tensorInfo.get(A.dataId);
    if (this.state.numTensors--, A.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= g.bytes), A.dtype !== "complex64" && A.dtype !== "string") {
      const I = A.size * ie(A.dtype);
      this.state.numBytes -= I;
    }
    g.backend.disposeData(A.dataId) && this.removeDataId(A.dataId, g.backend);
  }
  disposeVariables() {
    for (const A in this.state.registeredVariables) {
      const g = this.state.registeredVariables[A];
      this.disposeVariable(g);
    }
  }
  disposeVariable(A) {
    this.disposeTensor(A), this.state.registeredVariables[A.name] != null && delete this.state.registeredVariables[A.name];
  }
  memory() {
    const A = this.backend.memory();
    return A.numTensors = this.state.numTensors, A.numDataBuffers = this.state.numDataBuffers, A.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (A.unreliable = !0, A.reasons == null && (A.reasons = []), A.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), A;
  }
  async profile(A) {
    this.state.profiling = !0;
    const g = this.state.numBytes, I = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await A(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((B) => B.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - g, this.state.activeProfile.newTensors = this.state.numTensors - I;
    for (const B of this.state.activeProfile.kernels)
      B.kernelTimeMs = await B.kernelTimeMs, B.extraInfo = await B.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(A, g, I, B, Q, E) {
    const i = { id: this.state.nextTapeNodeId++, kernelName: A, inputs: g, outputs: I, saved: Q }, o = XD(A);
    o != null && (B = o.gradFunc), B != null && (i.gradient = (t) => (t = t.map((e, s) => {
      if (e == null) {
        const a = I[s], r = gC(a.size, a.dtype);
        return this.makeTensor(r, a.shape, a.dtype);
      }
      return e;
    }), B(t.length > 1 ? t : t[0], Q, E))), this.state.activeTape.push(i);
  }
  keep(A) {
    return A.kept = !0, A;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(A) {
    const g = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    A && (g.name = A), this.state.scopeStack.push(g), this.state.activeScope = g;
  }
  endScope(A) {
    const g = oG(A), I = new Set(g.map((Q) => Q.id));
    for (let Q = 0; Q < this.state.activeScope.track.length; Q++) {
      const E = this.state.activeScope.track[Q];
      E.kept || I.has(E.id) || E.dispose();
    }
    const B = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], g.forEach((Q) => {
      Q.kept || Q.scopeId !== B.id || this.track(Q);
    });
  }
  gradients(A, g, I, B = !1) {
    if (f(g.length > 0, () => "gradients() received an empty list of xs."), I != null && I.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${I.dtype}'`);
    const Q = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", A));
    f(Q instanceof MI, () => "The result y returned by f() must be a tensor.");
    const E = function(i, o, t) {
      const e = {}, s = {};
      for (let w = 0; w < o.length; w++)
        e[o[w].id] = !0;
      for (let w = 0; w < i.length; w++) {
        const G = i[w], D = G.inputs;
        for (const l in D) {
          const d = D[l];
          let N = !1;
          for (let k = 0; k < o.length; k++)
            if (e[d.id]) {
              G.outputs.forEach((p) => e[p.id] = !0), N = !0, s[G.id] = !0;
              break;
            }
          if (N)
            break;
        }
      }
      const a = {};
      a[t.id] = !0;
      const r = {};
      for (let w = i.length - 1; w >= 0; w--) {
        const G = i[w], D = G.inputs;
        for (let l = 0; l < G.outputs.length; l++)
          if (a[G.outputs[l].id]) {
            for (const d in D)
              a[D[d].id] = !0, r[G.id] = !0;
            break;
          }
      }
      const h = [];
      for (let w = 0; w < i.length; w++) {
        const G = i[w];
        if (s[G.id] && r[G.id]) {
          const D = {};
          for (const d in G.inputs) {
            const N = G.inputs[d];
            e[N.id] && (D[d] = N);
          }
          const l = Object.assign({}, G);
          l.inputs = D, l.outputs = G.outputs, h.push(l);
        }
      }
      return h;
    }(this.state.activeTape, g, Q);
    if (!B && E.length === 0 && g.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const i = {};
      i[Q.id] = I ?? function(t) {
        const e = wr(cA(t), "float32");
        return v.makeTensor(e, t, "float32");
      }(Q.shape), function(t, e, s, a) {
        for (let r = e.length - 1; r >= 0; r--) {
          const h = e[r], w = [];
          if (h.outputs.forEach((D) => {
            const l = t[D.id];
            l != null ? w.push(l) : w.push(null);
          }), h.gradient == null)
            throw new Error(`Cannot compute gradient: gradient function not found for ${h.kernelName}.`);
          const G = h.gradient(w);
          for (const D in h.inputs) {
            if (!(D in G))
              throw new Error(`Cannot backprop through input ${D}. Available gradients found: ${Object.keys(G)}.`);
            const l = s(() => G[D]());
            if (l.dtype !== "float32")
              throw new Error(`Error in gradient for op ${h.kernelName}. The gradient of input ${D} must have 'float32' dtype, but has '${l.dtype}'`);
            const d = h.inputs[D];
            if (!Zg(l.shape, d.shape))
              throw new Error(`Error in gradient for op ${h.kernelName}. The gradient of input '${D}' has shape '${l.shape}', which does not match the shape of the input '${d.shape}'`);
            if (t[d.id] == null)
              t[d.id] = l;
            else {
              const N = t[d.id];
              t[d.id] = a(N, l), N.dispose();
            }
          }
        }
      }(i, E, (t) => this.tidy(t), oN);
      const o = g.map((t) => i[t.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((t) => {
        for (const e of t.saved)
          e.dispose();
      }), this.state.activeTape = null), { value: Q, grads: o };
    });
  }
  customGrad(A) {
    return f(rn(A), () => "The f passed in customGrad(f) must be a function."), (...g) => {
      let I;
      f(g.every((Q) => Q instanceof MI), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      const B = {};
      return g.forEach((Q, E) => {
        B[E] = Q;
      }), this.runKernelFunc({ forwardFunc: (Q, E) => (I = A(...g, E), f(I.value instanceof MI, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), f(rn(I.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), I.value), backwardsFunc: (Q, E) => {
        const i = I.gradFunc(Q, E), o = Array.isArray(i) ? i : [i];
        f(o.length === g.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), f(o.every((e) => e instanceof MI), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const t = {};
        return o.forEach((e, s) => {
          t[s] = () => e;
        }), t;
      }, inputs: B });
    };
  }
  readSync(A) {
    return this.state.tensorInfo.get(A).backend.readSync(A);
  }
  read(A) {
    return this.state.tensorInfo.get(A).backend.read(A);
  }
  readToGPU(A, g) {
    return this.state.tensorInfo.get(A).backend.readToGPU(A, g);
  }
  async time(A) {
    const g = nC(), I = await this.backend.time(A);
    return I.wallMs = nC() - g, I;
  }
  track(A) {
    return this.state.activeScope != null && (A.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(A)), A;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Cc();
    for (const A in this.registry)
      this.disposeRegisteredKernels(A), this.registry[A].dispose(), delete this.registry[A];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
function eG() {
  const C = Kl();
  if (C._tfengine == null) {
    const g = new _R(C);
    C._tfengine = new vE(g);
  }
  var A;
  return A = C._tfengine.ENV, kl = A, oB = () => C._tfengine, C._tfengine;
}
vE.nextTensorId = 0, vE.nextVariableId = 0;
const v = eG();
function oN(C, A) {
  const g = { a: C, b: A };
  return v.runKernel(Ei, g);
}
function Bc(C) {
  if (C || typeof navigator < "u" && navigator != null) {
    if (C || (C = navigator), C.product === "ReactNative")
      return !0;
    const A = C.userAgent || C.vendor || (typeof window < "u" ? window.opera : "");
    if (!A) {
      const g = C;
      return g.userAgentData && g.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(A) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(A.substr(0, 4));
  }
  return !1;
}
function sG() {
  return typeof window < "u" && window.document != null || typeof WorkerGlobalScope < "u";
}
const aC = aA();
function Ct(C, A) {
  let g = C;
  if (jC(C))
    return A === "string" ? [] : [C.length];
  if (EG(C)) {
    const B = C.channels || "RGBA";
    return [C.height, C.width * B.length];
  }
  if (iG(C))
    return [C.buffer.size / (A == null ? 4 : ie(A))];
  if (!Array.isArray(C))
    return [];
  const I = [];
  for (; Array.isArray(g) || jC(g) && A !== "string"; )
    I.push(g.length), g = g[0];
  return Array.isArray(C) && aA().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && aG(C, I, []), I;
}
function aG(C, A, g) {
  if (g = g || [], !Array.isArray(C) && !jC(C))
    return void f(A.length === 0, () => `Element arr[${g.join("][")}] is a primitive, but should be an array/TypedArray of ${A[0]} elements`);
  f(A.length > 0, () => `Element arr[${g.join("][")}] should be a primitive, but is an array of ${C.length} elements`), f(C.length === A[0], () => `Element arr[${g.join("][")}] should have ${A[0]} elements, but has ${C.length} elements`);
  const I = A.slice(1);
  for (let B = 0; B < C.length; ++B)
    aG(C[B], I, g.concat(B));
}
function Qc(C, A, g, I) {
  if (C !== "string_or_numeric") {
    if (C == null)
      throw new Error("Expected dtype cannot be null.");
    if (C !== "numeric" && C !== A || C === "numeric" && A === "string")
      throw new Error(`Argument '${g}' passed to '${I}' must be ${C} tensor, but got ${A} tensor`);
  }
}
function W(C, A, g, I = "numeric") {
  if (C instanceof MI)
    return Qc(I, C.dtype, A, g), C;
  let B = Bi(C);
  if (B !== "string" && ["bool", "int32", "float32"].indexOf(I) >= 0 && (B = I), Qc(I, B, A, g), C == null || !jC(C) && !Array.isArray(C) && typeof C != "number" && typeof C != "boolean" && typeof C != "string") {
    const i = C == null ? "null" : C.constructor.name;
    throw new Error(`Argument '${A}' passed to '${g}' must be a Tensor or TensorLike, but got '${i}'`);
  }
  const Q = Ct(C, B);
  jC(C) || Array.isArray(C) || (C = [C]);
  const E = B !== "string" ? aE(C, B) : _Q(C, [], !0);
  return v.makeTensor(E, Q, B);
}
function nG(C, A, g, I = "numeric") {
  if (!Array.isArray(C))
    throw new Error(`Argument ${A} passed to ${g} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return C.map((B, Q) => W(B, `${A}[${Q}]`, g, I));
}
aC.registerFlag("DEBUG", () => !1, (C) => {
  C && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
}), aC.registerFlag("IS_BROWSER", () => sG()), aC.registerFlag("IS_NODE", () => typeof process < "u" && process.versions !== void 0 && process.versions.node !== void 0), aC.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor)), aC.registerFlag("IS_SAFARI", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Safari/.test(navigator.userAgent) && /Apple/.test(navigator.vendor)), aC.registerFlag("PROD", () => !1), aC.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => aC.getBool("DEBUG")), aC.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0), aC.registerFlag("IS_TEST", () => !1), aC.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => aC.getBool("DEBUG")), aC.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1), aC.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1), aC.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
function gA(C) {
  const A = Object.keys(C);
  if (A.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${A.length} keys.`);
  let g = A[0];
  const I = C[g];
  g.endsWith("_") && (g = g.substring(0, g.length - 1)), g += "__op";
  const B = (...Q) => {
    v.startScope(g);
    try {
      const E = I(...Q);
      return lr(E) && console.error("Cannot return a Promise inside of tidy."), v.endScope(E), E;
    } catch (E) {
      throw v.endScope(null), E;
    }
  };
  return Object.defineProperty(B, "name", { value: g, configurable: !0 }), B;
}
const PE = gA({ complex_: function(C, A) {
  const g = W(C, "real", "complex"), I = W(A, "imag", "complex");
  Dr(g.shape, I.shape, `real and imag shapes, ${g.shape} and ${I.shape}, must match in call to tf.complex().`);
  const B = { real: g, imag: I };
  return v.runKernel(kr, B);
} });
function Bt(C, A, g, I) {
  if (I == null)
    I = Bi(C);
  else if (I === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (iG(C) || EG(C)) {
    if (I !== "float32" && I !== "int32")
      throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${I}.`);
    return v.backend.createTensorFromGPUData(C, A || g, I);
  }
  if (!jC(C) && !Array.isArray(C) && typeof C != "number" && typeof C != "boolean" && typeof C != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (A != null) {
    zB(A);
    const B = cA(A), Q = cA(g);
    f(B === Q, () => `Based on the provided shape, [${A}], the tensor should have ${B} values but has ${Q}`);
    for (let E = 0; E < g.length; ++E) {
      const i = g[E], o = E !== g.length - 1 || i !== cA(A.slice(E));
      f(g[E] === A[E] || !o, () => `Error creating a new Tensor. Inferred shape (${g}) does not match the provided shape (${A}). `);
    }
  }
  return jC(C) || Array.isArray(C) || (C = [C]), A = A || g, C = I !== "string" ? aE(C, I) : _Q(C, [], !0), v.makeTensor(C, A, I);
}
function pC(C, A, g) {
  return Bt(C, A, Ct(C, g), g);
}
class ii {
  static join(A) {
    return new ii(A).slice();
  }
  constructor(A) {
    if (this.shards = [], this.previousShardIndex = 0, A == null || (A instanceof Array || (A = [A]), (A = A.map((I) => jC(I) ? I.buffer : I)).length === 0))
      return;
    this.bufferUniformSize = A[0].byteLength;
    let g = 0;
    for (let I = 0; I < A.length; I++) {
      const B = A[I];
      I !== A.length - 1 && B.byteLength !== this.bufferUniformSize && (this.bufferUniformSize = void 0);
      const Q = g + B.byteLength;
      this.shards.push({ buffer: B, start: g, end: Q }), g = Q;
    }
    this.shards.length === 0 && (this.byteLength = 0), this.byteLength = this.shards[this.shards.length - 1].end;
  }
  slice(A = 0, g = this.byteLength) {
    if (this.shards.length === 0)
      return new ArrayBuffer(0);
    if (A = isNaN(Number(A)) ? 0 : A, g = isNaN(Number(g)) ? 0 : g, A = Math.max(0, A), (g = Math.min(this.byteLength, g)) <= A)
      return new ArrayBuffer(0);
    const I = this.findShardForByte(A);
    if (I === -1)
      throw new Error(`Could not find start shard for byte ${A}`);
    const B = new ArrayBuffer(g - A), Q = new Uint8Array(B);
    let E = 0;
    for (let i = I; i < this.shards.length; i++) {
      const o = this.shards[i], t = A + E - o.start, e = E, s = Math.min(g, o.end) - o.start, a = new Uint8Array(o.buffer, t, s - t);
      if (Q.set(a, e), E += a.length, g < o.end)
        break;
    }
    return B;
  }
  findShardForByte(A) {
    if (this.shards.length === 0 || A < 0 || A >= this.byteLength)
      return -1;
    if (this.bufferUniformSize != null)
      return this.previousShardIndex = Math.floor(A / this.bufferUniformSize), this.previousShardIndex;
    function g(B) {
      return A < B.start ? -1 : A >= B.end ? 1 : 0;
    }
    if (g(this.shards[this.previousShardIndex]) === 0)
      return this.previousShardIndex;
    const I = function(B, Q) {
      let E = 0, i = B.length;
      for (; E <= i; ) {
        const o = Math.floor((i - E) / 2) + E, t = Q(B[o]);
        if (t === 0)
          return o;
        t < 0 ? i = o : E = o + 1;
      }
      return -1;
    }(this.shards, g);
    return I === -1 ? -1 : (this.previousShardIndex = I, this.previousShardIndex);
  }
}
async function Ec(C, A) {
  const g = [], I = [], B = Array.isArray(C) ? C.map((Q) => Q.name) : Object.keys(C);
  for (let Q = 0; Q < B.length; ++Q) {
    const E = B[Q], i = Array.isArray(C) ? C[Q].tensor : C[E];
    if (i.dtype !== "float32" && i.dtype !== "int32" && i.dtype !== "bool" && i.dtype !== "string" && i.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${E}': ${i.dtype}`);
    const o = { name: E, shape: i.shape, dtype: i.dtype };
    if (i.dtype === "string") {
      const t = new Promise(async (e) => {
        const s = await i.bytes(), a = s.reduce((w, G) => w + G.length, 0) + 4 * s.length, r = new Uint8Array(a);
        let h = 0;
        for (let w = 0; w < s.length; w++) {
          const G = s[w], D = new Uint8Array(new Uint32Array([G.length]).buffer);
          r.set(D, h), h += 4, r.set(G, h), h += G.length;
        }
        e(r);
      });
      I.push(t);
    } else
      I.push(i.data());
    A != null && (o.group = A), g.push(o);
  }
  return { data: tN(await Promise.all(I)), specs: g };
}
function tN(C) {
  if (C === null)
    throw new Error(`Invalid input value: ${JSON.stringify(C)}`);
  let A = 0;
  const g = [];
  C.forEach((Q) => {
    if (A += Q.byteLength, g.push(Q.byteLength === Q.buffer.byteLength ? Q : new Q.constructor(Q)), !(Q instanceof Float32Array || Q instanceof Int32Array || Q instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${Q.constructor.name}`);
  });
  const I = new Uint8Array(A);
  let B = 0;
  return g.forEach((Q) => {
    I.set(new Uint8Array(Q.buffer), B), B += Q.byteLength;
  }), I.buffer;
}
const Kn = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function ic(C) {
  return Kn ? Buffer.byteLength(C, "utf8") : new Blob([C]).size;
}
function rG(C) {
  if (C.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: /* @__PURE__ */ new Date(), modelTopologyType: "JSON", modelTopologyBytes: C.modelTopology == null ? 0 : ic(JSON.stringify(C.modelTopology)), weightSpecsBytes: C.weightSpecs == null ? 0 : ic(JSON.stringify(C.weightSpecs)), weightDataBytes: C.weightData == null ? 0 : new ii(C.weightData).byteLength };
}
class QC {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return QC.instance == null && (QC.instance = new QC()), QC.instance;
  }
  static registerSaveRouter(A) {
    QC.getInstance().saveRouters.push(A);
  }
  static registerLoadRouter(A) {
    QC.getInstance().loadRouters.push(A);
  }
  static getSaveHandlers(A) {
    return QC.getHandlers(A, "save");
  }
  static getLoadHandlers(A, g) {
    return QC.getHandlers(A, "load", g);
  }
  static getHandlers(A, g, I) {
    const B = [];
    return (g === "load" ? QC.getInstance().loadRouters : QC.getInstance().saveRouters).forEach((Q) => {
      const E = Q(A, I);
      E !== null && B.push(E);
    }), B;
  }
}
const Sn = "tensorflowjs", WQ = "models_store", EQ = "model_info_store";
function hG() {
  if (!aA().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const C = typeof window > "u" ? self : window, A = C.indexedDB || C.mozIndexedDB || C.webkitIndexedDB || C.msIndexedDB || C.shimIndexedDB;
  if (A == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return A;
}
function pn(C) {
  const A = C.result;
  A.createObjectStore(WQ, { keyPath: "modelPath" }), A.createObjectStore(EQ, { keyPath: "modelPath" });
}
class OQ {
  constructor(A) {
    if (this.indexedDB = hG(), A == null || !A)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = A;
  }
  async save(A) {
    if (A.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, A);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(A, g) {
    return new Promise((I, B) => {
      const Q = this.indexedDB.open(Sn, 1);
      Q.onupgradeneeded = () => pn(Q), Q.onsuccess = () => {
        const E = Q.result;
        if (g == null) {
          const i = E.transaction(WQ, "readonly"), o = i.objectStore(WQ).get(this.modelPath);
          o.onsuccess = () => {
            if (o.result == null)
              return E.close(), B(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            I(o.result.modelArtifacts);
          }, o.onerror = (t) => (E.close(), B(o.error)), i.oncomplete = () => E.close();
        } else {
          g.weightData = ii.join(g.weightData);
          const i = rG(g), o = E.transaction(EQ, "readwrite");
          let t, e, s = o.objectStore(EQ);
          try {
            t = s.put({ modelPath: this.modelPath, modelArtifactsInfo: i });
          } catch (a) {
            return B(a);
          }
          t.onsuccess = () => {
            e = E.transaction(WQ, "readwrite");
            const a = e.objectStore(WQ);
            let r;
            try {
              r = a.put({ modelPath: this.modelPath, modelArtifacts: g, modelArtifactsInfo: i });
            } catch (h) {
              return B(h);
            }
            r.onsuccess = () => I({ modelArtifactsInfo: i }), r.onerror = (h) => {
              s = o.objectStore(EQ);
              const w = s.delete(this.modelPath);
              w.onsuccess = () => (E.close(), B(r.error)), w.onerror = (G) => (E.close(), B(r.error));
            };
          }, t.onerror = (a) => (E.close(), B(t.error)), o.oncomplete = () => {
            e == null ? E.close() : e.oncomplete = () => E.close();
          };
        }
      }, Q.onerror = (E) => B(Q.error);
    });
  }
}
OQ.URL_SCHEME = "indexeddb://";
const oc = (C) => {
  return aA().getBool("IS_BROWSER") && !Array.isArray(C) && C.startsWith(OQ.URL_SCHEME) ? (A = C.slice(OQ.URL_SCHEME.length), new OQ(A)) : null;
  var A;
};
QC.registerSaveRouter(oc), QC.registerLoadRouter(oc);
class eN {
  constructor() {
    this.indexedDB = hG();
  }
  async listModels() {
    return new Promise((A, g) => {
      const I = this.indexedDB.open(Sn, 1);
      I.onupgradeneeded = () => pn(I), I.onsuccess = () => {
        const B = I.result, Q = B.transaction(EQ, "readonly"), E = Q.objectStore(EQ).getAll();
        E.onsuccess = () => {
          const i = {};
          for (const o of E.result)
            i[o.modelPath] = o.modelArtifactsInfo;
          A(i);
        }, E.onerror = (i) => (B.close(), g(E.error)), Q.oncomplete = () => B.close();
      }, I.onerror = (B) => g(I.error);
    });
  }
  async removeModel(A) {
    var g;
    return A = (g = A).startsWith(OQ.URL_SCHEME) ? g.slice(OQ.URL_SCHEME.length) : g, new Promise((I, B) => {
      const Q = this.indexedDB.open(Sn, 1);
      Q.onupgradeneeded = () => pn(Q), Q.onsuccess = () => {
        const E = Q.result, i = E.transaction(EQ, "readwrite"), o = i.objectStore(EQ), t = o.get(A);
        let e;
        t.onsuccess = () => {
          if (t.result == null)
            return E.close(), B(new Error(`Cannot find model with path '${A}' in IndexedDB.`));
          {
            const s = o.delete(A), a = () => {
              e = E.transaction(WQ, "readwrite");
              const r = e.objectStore(WQ).delete(A);
              r.onsuccess = () => I(t.result.modelArtifactsInfo), r.onerror = (h) => B(t.error);
            };
            s.onsuccess = a, s.onerror = (r) => (a(), E.close(), B(t.error));
          }
        }, t.onerror = (s) => (E.close(), B(t.error)), i.oncomplete = () => {
          e == null ? E.close() : e.oncomplete = () => E.close();
        };
      }, Q.onerror = (E) => B(Q.error);
    });
  }
}
const HB = "/", pE = "tensorflowjs_models", DG = "info", sN = "model_topology", aN = "weight_specs", nN = "weight_data", rN = "model_metadata";
function cG(C) {
  return { info: [pE, C, DG].join(HB), topology: [pE, C, sN].join(HB), weightSpecs: [pE, C, aN].join(HB), weightData: [pE, C, nN].join(HB), modelMetadata: [pE, C, rN].join(HB) };
}
function wG(C) {
  for (const A of Object.values(C))
    window.localStorage.removeItem(A);
}
function hN(C) {
  const A = C.split(HB);
  if (A.length < 3)
    throw new Error(`Invalid key format: ${C}`);
  return A.slice(1, A.length - 1).join(HB);
}
class vQ {
  constructor(A) {
    if (!aA().getBool("IS_BROWSER") || typeof window > "u" || window.localStorage === void 0)
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, A == null || !A)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = A, this.keys = cG(this.modelPath);
  }
  async save(A) {
    if (A.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const g = JSON.stringify(A.modelTopology), I = JSON.stringify(A.weightSpecs), B = rG(A), Q = ii.join(A.weightData);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(B)), this.LS.setItem(this.keys.topology, g), this.LS.setItem(this.keys.weightSpecs, I), this.LS.setItem(this.keys.weightData, function(i) {
          if (Kn)
            return Buffer.from(i).toString("base64");
          const o = new Uint8Array(i);
          let t = "";
          for (let e = 0, s = o.length; e < s; e++)
            t += String.fromCharCode(o[e]);
          return btoa(t);
        }(Q));
        const E = { format: A.format, generatedBy: A.generatedBy, convertedBy: A.convertedBy, signature: A.signature != null ? A.signature : void 0, userDefinedMetadata: A.userDefinedMetadata != null ? A.userDefinedMetadata : void 0, modelInitializer: A.modelInitializer != null ? A.modelInitializer : void 0, initializerSignature: A.initializerSignature != null ? A.initializerSignature : void 0, trainingConfig: A.trainingConfig != null ? A.trainingConfig : void 0 };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(E)), { modelArtifactsInfo: B };
      } catch {
        throw wG(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${B.modelTopologyBytes}, weightSpecsBytes=${B.weightSpecsBytes}, weightDataBytes=${B.weightDataBytes}.`);
      }
    }
  }
  async load() {
    const A = JSON.parse(this.LS.getItem(this.keys.info));
    if (A == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (A.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const g = {}, I = JSON.parse(this.LS.getItem(this.keys.topology));
    if (I == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    g.modelTopology = I;
    const B = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (B == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    g.weightSpecs = B;
    const Q = this.LS.getItem(this.keys.modelMetadata);
    if (Q != null) {
      const i = JSON.parse(Q);
      g.format = i.format, g.generatedBy = i.generatedBy, g.convertedBy = i.convertedBy, i.signature != null && (g.signature = i.signature), i.userDefinedMetadata != null && (g.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (g.modelInitializer = i.modelInitializer), i.initializerSignature != null && (g.initializerSignature = i.initializerSignature), i.trainingConfig != null && (g.trainingConfig = i.trainingConfig);
    }
    const E = this.LS.getItem(this.keys.weightData);
    if (E == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return g.weightData = function(i) {
      if (Kn) {
        const e = Buffer.from(i, "base64");
        return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
      }
      const o = atob(i), t = new Uint8Array(o.length);
      for (let e = 0; e < o.length; ++e)
        t.set([o.charCodeAt(e)], e);
      return t.buffer;
    }(E), g;
  }
}
vQ.URL_SCHEME = "localstorage://";
const tc = (C) => {
  return aA().getBool("IS_BROWSER") && !Array.isArray(C) && C.startsWith(vQ.URL_SCHEME) ? (A = C.slice(vQ.URL_SCHEME.length), new vQ(A)) : null;
  var A;
};
QC.registerSaveRouter(tc), QC.registerLoadRouter(tc);
class DN {
  constructor() {
    f(aA().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), f(typeof window > "u" || window.localStorage !== void 0, () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const A = {}, g = pE + HB, I = HB + DG;
    for (let B = 0; B < this.LS.length; ++B) {
      const Q = this.LS.key(B);
      Q.startsWith(g) && Q.endsWith(I) && (A[hN(Q)] = JSON.parse(this.LS.getItem(Q)));
    }
    return A;
  }
  async removeModel(A) {
    var g;
    const I = cG(A = (g = A).startsWith(vQ.URL_SCHEME) ? g.slice(vQ.URL_SCHEME.length) : g);
    if (this.LS.getItem(I.info) == null)
      throw new Error(`Cannot find model at path '${A}'`);
    const B = JSON.parse(this.LS.getItem(I.info));
    return wG(I), B;
  }
}
class GB {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return GB.instance == null && (GB.instance = new GB()), GB.instance;
  }
  static registerManager(A, g) {
    f(A != null, () => "scheme must not be undefined or null."), A.endsWith("://") && (A = A.slice(0, A.indexOf("://"))), f(A.length > 0, () => "scheme must not be an empty string.");
    const I = GB.getInstance();
    f(I.managers[A] == null, () => `A model store manager is already registered for scheme '${A}'.`), I.managers[A] = g;
  }
  static getManager(A) {
    const g = GB.getInstance().managers[A];
    if (g == null)
      throw new Error(`Cannot find model manager for scheme '${A}'`);
    return g;
  }
  static getSchemes() {
    return Object.keys(GB.getInstance().managers);
  }
}
class cN {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1;
  }
  fetch(A, g) {
    return fetch(A, g);
  }
  now() {
    return performance.now();
  }
  encode(A, g) {
    if (g !== "utf-8" && g !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${g}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(A);
  }
  decode(A, g) {
    return new TextDecoder(g).decode(A);
  }
  setTimeoutCustom(A, g) {
    typeof window < "u" && aA().getBool("USE_SETTIMEOUTCUSTOM") ? (this.functionRefs.push(A), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, g), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", (I) => {
      I.source === window && I.data.name === this.messageName && (I.stopPropagation(), (0, this.functionRefs[I.data.index])(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0));
    }, !0))) : setTimeout(A, g);
  }
  isTypedArray(A) {
    return $l(A);
  }
}
if (aA().get("IS_BROWSER")) {
  aA().setPlatform("browser", new cN());
  try {
    GB.registerManager(vQ.URL_SCHEME, new DN());
  } catch {
  }
  try {
    GB.registerManager(OQ.URL_SCHEME, new eN());
  } catch {
  }
}
const wN = () => require("node-fetch");
let Na;
class lN {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(A, g) {
    return aA().global.fetch != null ? aA().global.fetch(A, g) : (Na == null && (Na = wN()), Na(A, g));
  }
  now() {
    const A = process.hrtime();
    return 1e3 * A[0] + A[1] / 1e6;
  }
  encode(A, g) {
    if (g !== "utf-8" && g !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${g}`);
    return this.textEncoder.encode(A);
  }
  decode(A, g) {
    return A.length === 0 ? "" : new this.util.TextDecoder(g).decode(A);
  }
  isTypedArray(A) {
    return this.util.types.isFloat32Array(A) || this.util.types.isInt32Array(A) || this.util.types.isUint8Array(A) || this.util.types.isUint8ClampedArray(A);
  }
}
function Sg(C, A = "float32", g) {
  return A = A || "float32", zB(C), new PI(C, A, g);
}
aA().get("IS_NODE") && !aA().get("IS_BROWSER") && aA().setPlatform("node", new lN());
const bA = gA({ cast_: function(C, A) {
  const g = W(C, "x", "cast");
  if (!function(Q) {
    return Q === "bool" || Q === "complex64" || Q === "float32" || Q === "int32" || Q === "string";
  }(A))
    throw new Error(`Failed to cast to unknown dtype ${A}`);
  if (A === "string" && g.dtype !== "string" || A !== "string" && g.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  const I = { x: g }, B = { dtype: A };
  return v.runKernel(ro, I, B);
} }), PQ = gA({ clone_: function(C) {
  const A = { x: W(C, "x", "clone", "string_or_numeric") };
  return v.runKernel(Ko, A);
} });
eG();
function EI() {
  return v;
}
function ne() {
  return v.memory();
}
function IA(C, A) {
  return v.tidy(C, A);
}
function Ug(C) {
  oG(C).forEach((A) => A.dispose());
}
function JC(C) {
  return v.keep(C);
}
function lG(C, A, g = 1) {
  return v.registerBackend(C, A, g);
}
function iQ() {
  return v.backend;
}
SE = { buffer: Sg, cast: bA, clone: PQ, print: function(C, A = !1) {
  console.log(C.toString(A));
} };
const kA = gA({ add_: function(C, A) {
  let g = W(C, "a", "add"), I = W(A, "b", "add");
  [g, I] = uI(g, I);
  const B = { a: g, b: I };
  return v.runKernel(Ei, B);
} }), GG = gA({ floorDiv_: function(C, A) {
  let g = W(C, "a", "floorDiv"), I = W(A, "b", "floorDiv");
  [g, I] = uI(g, I);
  const B = { a: g, b: I };
  return v.runKernel(uo, B);
} }), Cg = gA({ div_: function(C, A) {
  let g = W(C, "a", "div"), I = W(A, "b", "div");
  if ([g, I] = uI(g, I), g.dtype === "int32" && I.dtype === "int32")
    return GG(g, I);
  const B = { a: g, b: I };
  return v.runKernel(lo, B, {});
} }), z = gA({ mul_: function(C, A) {
  let g = W(C, "a", "mul"), I = W(A, "b", "mul");
  [g, I] = uI(g, I);
  const B = { a: g, b: I };
  return v.runKernel(mo, B);
} }), EC = gA({ abs_: function(C) {
  const A = W(C, "x", "abs");
  if (A.dtype === "complex64") {
    const g = { x: A };
    return v.runKernel(ze, g);
  }
  {
    const g = { x: A };
    return v.runKernel(We, g);
  }
} }), GN = gA({ acos_: function(C) {
  const A = { x: W(C, "x", "acos") };
  return v.runKernel(io, A);
} }), yN = gA({ acosh_: function(C) {
  const A = { x: W(C, "x", "acosh") };
  return v.runKernel(oo, A);
} }), yG = gA({ all_: function(C, A = null, g = !1) {
  const I = { x: W(C, "x", "all", "bool") }, B = { axis: A, keepDims: g };
  return v.runKernel(dr, I, B);
} }), Mn = gA({ any_: function(C, A = null, g = !1) {
  const I = { x: W(C, "x", "any", "bool") }, B = { axis: A, keepDims: g };
  return v.runKernel(Fr, I, B);
} }), Wi = gA({ argMax_: function(C, A = 0) {
  const g = { x: W(C, "x", "argMax") }, I = { axis: A };
  return v.runKernel(Te, g, I);
} }), dN = gA({ argMin_: function(C, A = 0) {
  const g = { x: W(C, "x", "argMin") }, I = { axis: A };
  return v.runKernel(Ze, g, I);
} }), FN = gA({ asin_: function(C) {
  const A = { x: W(C, "x", "asin") };
  return v.runKernel(to, A);
} }), RN = gA({ asinh_: function(C) {
  const A = { x: W(C, "x", "asinh") };
  return v.runKernel(eo, A);
} }), NN = gA({ atan_: function(C) {
  const A = { x: W(C, "x", "atan") };
  return v.runKernel(so, A);
} }), uN = gA({ atan2_: function(C, A) {
  let g = W(C, "a", "atan2"), I = W(A, "b", "atan2");
  [g, I] = uI(g, I);
  const B = { a: g, b: I };
  return v.runKernel(no, B);
} }), kN = gA({ atanh_: function(C) {
  const A = { x: W(C, "x", "atanh") };
  return v.runKernel(ao, A);
} });
function Qt(C, A, g, I, B = "NHWC", Q) {
  return zI(C, [...A, C[3]], g, Q, I, null, null, $B(B));
}
function _C(C, A, g, I, B, Q, E = "channelsLast") {
  const [i, o] = Ti(A);
  let t;
  if (E === "channelsLast")
    t = [i, o, C[3], C[3]];
  else {
    if (E !== "channelsFirst")
      throw new Error(`Unknown dataFormat ${E}`);
    t = [i, o, C[1], C[1]];
  }
  return zI(C, t, g, I, B, Q, !1, E);
}
function jB(C, A, g, I, B, Q, E = "NDHWC") {
  const [i, o, t] = Un(A);
  let e, s;
  if (E === "NDHWC")
    s = "channelsLast", e = [i, o, t, C[4], C[4]];
  else {
    if (E !== "NCDHW")
      throw new Error(`Unknown dataFormat ${E}`);
    s = "channelsFirst", e = [i, o, t, C[1], C[1]];
  }
  return dQ(C, e, g, I, B, !1, s, Q);
}
function zI(C, A, g, I, B, Q, E = !1, i = "channelsLast") {
  let [o, t, e, s] = [-1, -1, -1, -1];
  if (i === "channelsLast")
    [o, t, e, s] = C;
  else {
    if (i !== "channelsFirst")
      throw new Error(`Unknown dataFormat ${i}`);
    [o, s, t, e] = C;
  }
  const [a, r, , h] = A, [w, G] = Ti(g), [D, l] = Ti(I), d = bE(a, D), N = bE(r, l), { padInfo: k, outHeight: p, outWidth: Y } = function(m, x, T, Z, $, AA, P, _, QA) {
    let tA, O, rA;
    if (typeof m == "number") {
      tA = { top: m, bottom: m, left: m, right: m, type: m === 0 ? "VALID" : "NUMBER" };
      const eA = function(DA, GA, NA, UA, pA) {
        UA == null && (UA = ih(DA, GA, NA));
        const XA = DA[0], WA = DA[1], PA = fi((XA - GA + 2 * UA) / NA + 1, pA), fA = fi((WA - GA + 2 * UA) / NA + 1, pA);
        return [PA, fA];
      }([x, T], AA, Z, m, _);
      O = eA[0], rA = eA[1];
    } else if (m === "same") {
      O = Math.ceil(x / Z), rA = Math.ceil(T / $);
      const eA = Math.max(0, (O - 1) * Z + AA - x), DA = Math.max(0, (rA - 1) * $ + P - T), GA = Math.floor(eA / 2), NA = eA - GA, UA = Math.floor(DA / 2);
      tA = { top: GA, bottom: NA, left: UA, right: DA - UA, type: "SAME" };
    } else if (m === "valid")
      tA = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, O = Math.ceil((x - AA + 1) / Z), rA = Math.ceil((T - P + 1) / $);
    else {
      if (typeof m != "object")
        throw Error(`Unknown padding parameter: ${m}`);
      {
        const eA = QA === "channelsLast" ? m[1][0] : m[2][0], DA = QA === "channelsLast" ? m[1][1] : m[2][1], GA = QA === "channelsLast" ? m[2][0] : m[3][0], NA = QA === "channelsLast" ? m[2][1] : m[3][1];
        tA = { top: eA, bottom: DA, left: GA, right: NA, type: eA === 0 && DA === 0 && GA === 0 && NA === 0 ? "VALID" : "EXPLICIT" }, O = fi((x - AA + eA + DA) / Z + 1, _), rA = fi((T - P + GA + NA) / $ + 1, _);
      }
    }
    return { padInfo: tA, outHeight: O, outWidth: rA };
  }(B, t, e, w, G, d, N, Q, i), M = E ? h * s : h;
  let L;
  return i === "channelsFirst" ? L = [o, M, p, Y] : i === "channelsLast" && (L = [o, p, Y, M]), { batchSize: o, dataFormat: i, inHeight: t, inWidth: e, inChannels: s, outHeight: p, outWidth: Y, outChannels: M, padInfo: k, strideHeight: w, strideWidth: G, filterHeight: a, filterWidth: r, effectiveFilterHeight: d, effectiveFilterWidth: N, dilationHeight: D, dilationWidth: l, inShape: C, outShape: L, filterShape: A };
}
function dQ(C, A, g, I, B, Q = !1, E = "channelsLast", i) {
  let [o, t, e, s, a] = [-1, -1, -1, -1, -1];
  if (E === "channelsLast")
    [o, t, e, s, a] = C;
  else {
    if (E !== "channelsFirst")
      throw new Error(`Unknown dataFormat ${E}`);
    [o, a, t, e, s] = C;
  }
  const [r, h, w, , G] = A, [D, l, d] = Un(g), [N, k, p] = Un(I), Y = bE(r, N), M = bE(h, k), L = bE(w, p), { padInfo: m, outDepth: x, outHeight: T, outWidth: Z } = function(P, _, QA, tA, O, rA, eA, DA, GA, NA, UA) {
    let pA, XA, WA, PA;
    if (P === "valid" && (P = 0), typeof P == "number") {
      pA = { top: P, bottom: P, left: P, right: P, front: P, back: P, type: P === 0 ? "VALID" : "NUMBER" };
      const fA = function(gg, Bg, lg, jA, eg, rg) {
        eg == null && (eg = ih(gg, Bg[0], jA[0]));
        const Wg = [0, 0, 0, lg];
        for (let Yg = 0; Yg < 3; Yg++)
          gg[Yg] + 2 * eg >= Bg[Yg] && (Wg[Yg] = fi((gg[Yg] - Bg[Yg] + 2 * eg) / jA[Yg] + 1, rg));
        return Wg;
      }([_, QA, tA, 1], [DA, GA, NA], 1, [O, rA, eA], P, UA);
      XA = fA[0], WA = fA[1], PA = fA[2];
    } else {
      if (P !== "same")
        throw Error(`Unknown padding parameter: ${P}`);
      {
        XA = Math.ceil(_ / O), WA = Math.ceil(QA / rA), PA = Math.ceil(tA / eA);
        const fA = (XA - 1) * O + DA - _, gg = (WA - 1) * rA + GA - QA, Bg = (PA - 1) * eA + NA - tA, lg = Math.floor(fA / 2), jA = fA - lg, eg = Math.floor(gg / 2), rg = gg - eg, Wg = Math.floor(Bg / 2);
        pA = { top: eg, bottom: rg, left: Wg, right: Bg - Wg, front: lg, back: jA, type: "SAME" };
      }
    }
    return { padInfo: pA, outDepth: XA, outHeight: WA, outWidth: PA };
  }(B, t, e, s, D, l, d, Y, M, L, i), $ = Q ? G * a : G;
  let AA;
  return E === "channelsFirst" ? AA = [o, $, x, T, Z] : E === "channelsLast" && (AA = [o, x, T, Z, $]), { batchSize: o, dataFormat: E, inDepth: t, inHeight: e, inWidth: s, inChannels: a, outDepth: x, outHeight: T, outWidth: Z, outChannels: $, padInfo: m, strideDepth: D, strideHeight: l, strideWidth: d, filterDepth: r, filterHeight: h, filterWidth: w, effectiveFilterDepth: Y, effectiveFilterHeight: M, effectiveFilterWidth: L, dilationDepth: N, dilationHeight: k, dilationWidth: p, inShape: C, outShape: AA, filterShape: A };
}
function ih(C, A, g, I = 1) {
  const B = bE(A, I);
  return Math.floor((C[0] * (g - 1) - g + B) / 2);
}
function Ti(C) {
  return typeof C == "number" ? [C, C, C] : C.length === 2 ? [C[0], C[1], 1] : C;
}
function Un(C) {
  return typeof C == "number" ? [C, C, C] : C;
}
function bE(C, A) {
  return A <= 1 ? C : C + (C - 1) * (A - 1);
}
function fi(C, A) {
  if (!A)
    return Math.trunc(C);
  switch (A) {
    case "round":
      return Math.round(C);
    case "ceil":
      return Math.ceil(C);
    case "floor":
      return Math.floor(C);
    default:
      throw new Error(`Unknown roundingMode ${A}`);
  }
}
function AE(C) {
  const [A, g, I] = Ti(C);
  return A === 1 && g === 1 && I === 1;
}
function IC(C, A) {
  return AE(C) || AE(A);
}
function gE(C) {
  return Ti(C).every((A) => A > 0);
}
function $B(C) {
  if (C === "NHWC")
    return "channelsLast";
  if (C === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${C}`);
}
function wC(C, A, g) {
  if (g != null) {
    if (typeof A == "string")
      throw Error(`Error in ${C}: pad must be an integer when using dimRoundingMode ${g} but got pad ${A}.`);
    if (typeof A == "number")
      f(XE(A), () => `Error in ${C}: pad must be an integer when using dimRoundingMode ${g} but got pad ${A}.`);
    else {
      if (typeof A != "object")
        throw Error(`Error in ${C}: Unknown padding parameter: ${A}`);
      A.forEach((I) => {
        I.forEach((B) => {
          f(XE(B), () => `Error in ${C}: pad must be an integer when using dimRoundingMode ${g} but got pad ${B}.`);
        });
      });
    }
  }
}
const CA = gA({ reshape_: function(C, A) {
  const g = { x: W(C, "x", "reshape", "string_or_numeric") }, I = { shape: A };
  return v.runKernel(ps, g, I);
} }), oh = gA({ avgPool_: function(C, A, g, I, B) {
  const Q = W(C, "x", "avgPool", "float32");
  f(IC(g, 1), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${g} and dilations '1'`);
  let E = Q, i = !1;
  Q.rank === 3 && (i = !0, E = CA(Q, [1, Q.shape[0], Q.shape[1], Q.shape[2]])), f(E.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${E.rank}.`), wC("avgPool", I, B);
  const o = { x: E }, t = { filterSize: A, strides: g, pad: I, dimRoundingMode: B };
  let e = v.runKernel(Xe, o, t);
  return e = bA(e, Q.dtype), i ? CA(e, [e.shape[1], e.shape[2], e.shape[3]]) : e;
} }), KN = gA({ avgPool3d_: function(C, A, g, I, B, Q = "NDHWC") {
  const E = W(C, "x", "avgPool3d", "float32");
  let i = E, o = !1;
  E.rank === 4 && (o = !0, i = CA(E, [1, E.shape[0], E.shape[1], E.shape[2], E.shape[3]])), f(i.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`), f(Q === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${Q}`), f(typeof g == "number" && g > 0 || Array.isArray(g) && g[0] > 0 && g[1] > 0 && g[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${g}'`), wC("avgPool3d", I, B);
  const t = { x: i }, e = { filterSize: A, strides: g, pad: I, dimRoundingMode: B, dataFormat: Q };
  let s = v.runKernel(Oe, t, e);
  return s = bA(s, i.dtype), o ? CA(s, [s.shape[1], s.shape[2], s.shape[3], s.shape[4]]) : s;
} }), DC = gA({ concat_: function(C, A = 0) {
  f(C.length >= 1, () => "Pass at least one tensor to concat");
  const g = nG(C, "tensors", "concat", "string_or_numeric");
  if (g[0].dtype === "complex64" && g.forEach((Q) => {
    if (Q.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${Q.dtype}. `);
  }), g.length === 1)
    return PQ(g[0]);
  const I = g, B = { axis: A };
  return v.runKernel(je, I, B);
} }), Tg = gA({ matMul_: function(C, A, g = !1, I = !1) {
  let B = W(C, "a", "matMul"), Q = W(A, "b", "matMul");
  [B, Q] = uI(B, Q);
  const E = { a: B, b: Q }, i = { transposeA: g, transposeB: I };
  return v.runKernel(ve, E, i);
} }), oi = gA({ sigmoid_: function(C) {
  const A = { x: W(C, "x", "sigmoid", "float32") };
  return v.runKernel(vo, A);
} }), iI = gA({ slice_: function(C, A, g) {
  const I = W(C, "x", "slice", "string_or_numeric");
  if (I.rank === 0)
    throw new Error("Slicing scalar is not possible");
  const B = { x: I }, Q = { begin: A, size: g };
  return v.runKernel(fs, B, Q);
} }), th = gA({ tanh_: function(C) {
  const A = { x: W(C, "x", "tanh", "float32") };
  return v.runKernel(At, A);
} }), eh = gA({ batchToSpaceND_: function(C, A, g) {
  const I = W(C, "x", "batchToSpaceND"), B = A.reduce((i, o) => i * o);
  f(I.rank >= 1 + A.length, () => `input rank is ${I.rank} but should be > than blockShape.length ${A.length}`), f(g.length === A.length, () => `crops.length is ${g.length} but should be equal to blockShape.length  ${A.length}`), f(I.shape[0] % B == 0, () => `input tensor batch is ${I.shape[0]} but is not divisible by the product of the elements of blockShape ${A.join(" * ")} === ${B}`);
  const Q = { x: I }, E = { blockShape: A, crops: g };
  return v.runKernel(Pe, Q, E);
} }), Ts = gA({ batchNorm_: function(C, A, g, I, B, Q) {
  Q == null && (Q = 1e-3);
  const E = W(C, "x", "batchNorm"), i = W(A, "mean", "batchNorm"), o = W(g, "variance", "batchNorm");
  let t, e;
  B != null && (t = W(B, "scale", "batchNorm")), I != null && (e = W(I, "offset", "batchNorm")), f(i.rank === o.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), f(e == null || i.rank === e.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), f(t == null || i.rank === t.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const s = { x: function(h) {
    let w;
    return w = h.rank === 0 || h.rank === 1 ? CA(h, [1, 1, 1, h.size]) : h.rank === 2 ? CA(h, [1, 1, h.shape[0], h.shape[1]]) : h.rank === 3 ? CA(h, [1, h.shape[0], h.shape[1], h.shape[2]]) : h, w;
  }(E), scale: t, offset: e, mean: i, variance: o }, a = { varianceEpsilon: Q }, r = v.runKernel(Es, s, a);
  return CA(r, E.shape);
} }), SN = gA({ batchNorm2d_: function(C, A, g, I, B, Q) {
  const E = W(C, "x", "batchNorm"), i = W(A, "mean", "batchNorm"), o = W(g, "variance", "batchNorm");
  let t, e;
  return B != null && (t = W(B, "scale", "batchNorm")), I != null && (e = W(I, "offset", "batchNorm")), f(E.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${E.rank}.`), f(i.rank === 2 || i.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`), f(o.rank === 2 || o.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${o.rank}.`), t != null && f(t.rank === 2 || t.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${t.rank}.`), e != null && f(e.rank === 2 || e.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${e.rank}.`), Ts(E, i, o, e, t, Q);
} }), pN = gA({ batchNorm3d_: function(C, A, g, I, B, Q) {
  const E = W(C, "x", "batchNorm"), i = W(A, "mean", "batchNorm"), o = W(g, "variance", "batchNorm");
  let t, e;
  return B != null && (t = W(B, "scale", "batchNorm")), I != null && (e = W(I, "offset", "batchNorm")), f(E.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${E.rank}.`), f(i.rank === 3 || i.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`), f(o.rank === 3 || o.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${o.rank}.`), t != null && f(t.rank === 3 || t.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${t.rank}.`), e != null && f(e.rank === 3 || e.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${e.rank}.`), Ts(E, i, o, e, t, Q);
} }), MN = gA({ batchNorm4d_: function(C, A, g, I, B, Q) {
  const E = W(C, "x", "batchNorm"), i = W(A, "mean", "batchNorm"), o = W(g, "variance", "batchNorm");
  let t, e;
  return B != null && (t = W(B, "scale", "batchNorm")), I != null && (e = W(I, "offset", "batchNorm")), f(E.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${E.rank}.`), f(i.rank === 4 || i.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`), f(o.rank === 4 || o.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${o.rank}.`), t != null && f(t.rank === 4 || t.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${t.rank}.`), e != null && f(e.rank === 4 || e.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${e.rank}.`), Ts(E, i, o, e, t, Q);
} }), UN = gA({ bincount_: function(C, A, g) {
  const I = W(C, "x", "bincount"), B = W(A, "weights", "bincount");
  f(I.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${I.dtype}`), f(g >= 0, () => `size must be non-negative, but got ${g}.`), f(B.size === I.size || B.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${I.shape}, weights shape: ${B.shape}.`);
  const Q = { x: I, weights: B }, E = { size: g };
  return v.runKernel(ur, Q, E);
} }), qi = gA({ broadcastTo_: function(C, A) {
  let g = W(C, "broadcastTo", "x");
  const I = g.shape;
  if (zB(A), A.length < g.rank)
    throw new Error(`broadcastTo(): shape.length=${A.length} < input.rank=${g.rank}.`);
  if (A.length > g.rank) {
    const o = g.shape.slice();
    for (; o.length < A.length; )
      o.unshift(1);
    g = CA(g, o);
  }
  const B = g.shape, Q = Array.from(A);
  for (let o = A.length - 1; o >= 0; o--)
    if (B[o] === A[o])
      Q[o] = 1;
    else if (g.shape[o] !== 1)
      throw new Error(`broadcastTo(): [${I}] cannot be broadcast to [${A}].`);
  if (Q.map((o, t) => o > 1 ? t : -1).filter((o) => o >= 0).length === 0)
    return PQ(g);
  const E = { x: g }, i = { reps: Q };
  return v.runKernel(gt, E, i);
} }), YN = gA({ ceil_: function(C) {
  const A = { x: W(C, "x", "ceil", "float32") };
  return v.runKernel(ho, A);
} });
function Zs(C, A, g) {
  zB(C);
  const I = { shape: C, value: A, dtype: g = g || Bi(A) };
  return v.runKernel(Hr, {}, I);
}
const UC = gA({ clipByValue_: function(C, A, g) {
  const I = W(C, "x", "clipByValue");
  if (f(A <= g, () => `Error in clip: min (${A}) must be less than or equal to max (${g}).`), A === g)
    return Zs(I.shape, A, I.dtype);
  const B = { x: I }, Q = { clipValueMin: A, clipValueMax: g };
  return v.runKernel(Do, B, Q);
} }), JN = gA({ concat1d_: function(C) {
  return DC(C, 0);
} }), fN = gA({ concat2d_: function(C, A) {
  return DC(C, A);
} }), LN = gA({ concat3d_: function(C, A) {
  return DC(C, A);
} }), mN = gA({ concat4d_: function(C, A) {
  return DC(C, A);
} }), IE = gA({ conv2d_: function(C, A, g, I, B = "NHWC", Q = [1, 1], E) {
  const i = W(C, "x", "conv2d", "float32"), o = W(A, "filter", "conv2d", "float32");
  let t = i, e = !1;
  i.rank === 3 && (e = !0, t = CA(i, [1, i.shape[0], i.shape[1], i.shape[2]])), f(t.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${t.rank}.`), f(o.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${o.rank}.`), wC("conv2d", I, E);
  const s = B === "NHWC" ? t.shape[3] : t.shape[1];
  f(s === o.shape[2], () => `Error in conv2d: depth of input (${s}) must match input depth for filter ${o.shape[2]}.`), f(IC(g, Q), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${g} and dilations '${Q}'`), f(gE(Q), () => "Error in conv2D: Dilated rates should be larger than 0."), f(gE(g), () => "Error in conv2D: Strides should be larger than 0.");
  const a = { x: t, filter: o }, r = { strides: g, pad: I, dataFormat: B, dilations: Q, dimRoundingMode: E }, h = v.runKernel($e, a, r);
  return e ? CA(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
} }), dG = gA({ conv1d_: function(C, A, g, I, B = "NWC", Q = 1, E) {
  const i = W(C, "x", "conv1d"), o = W(A, "filter", "conv1d");
  let t = i, e = !1;
  i.rank === 2 && (e = !0, t = CA(i, [1, i.shape[0], i.shape[1]])), f(t.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${t.rank}.`), f(o.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${o.rank}.`), wC("conv1d", I, E), f(t.shape[2] === o.shape[1], () => `Error in conv1d: depth of input (${t.shape[2]}) must match input depth for filter ${o.shape[1]}.`), f(IC(g, Q), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${g} and dilation '${Q}'`), f(gE(Q), () => "Error in conv1D: Dilated rates should be larger than 0."), f(gE(g), () => "Error in conv1D: Stride should be larger than 0."), f(B === "NWC", () => `Error in conv1d: got dataFormat of ${B} but only NWC is currently supported.`);
  const s = CA(o, [1, o.shape[0], o.shape[1], o.shape[2]]), a = CA(t, [t.shape[0], 1, t.shape[1], t.shape[2]]), r = IE(a, s, [1, g], I, "NHWC", [1, Q], E);
  return CA(r, e ? [r.shape[2], r.shape[3]] : [r.shape[0], r.shape[2], r.shape[3]]);
} }), sh = gA({ conv2DBackpropInput_: function(C, A, g, I, B, Q = "NHWC", E) {
  f(C.length === A.rank, () => `Length of inShape (${C.length}) and rank of dy (${A.rank}) must match`);
  let i = C, o = A, t = !1;
  A.rank === 3 && (t = !0, o = CA(A, [1, A.shape[0], A.shape[1], A.shape[2]]), i = [1, C[0], C[1], C[2]]), f(i.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`), f(o.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${o.rank}`), f(g.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${g.rank}`);
  const e = Q === "NHWC" ? i[3] : i[1], s = Q === "NHWC" ? o.shape[3] : o.shape[1];
  f(e === g.shape[2], () => `Error in conv2dDerInput: depth of input (${e}) must match input depth for filter ${g.shape[2]}.`), f(s === g.shape[3], () => `Error in conv2dDerInput: depth of output (${s}) must match output depth for filter ${g.shape[3]}.`), wC("conv2dDerInput", B, E);
  const a = { dy: o, filter: g }, r = { strides: I, pad: B, dataFormat: Q, dimRoundingMode: E, inputShape: i }, h = v.runKernel(_e, a, r);
  return t ? CA(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
} }), FG = gA({ conv2dTranspose_: function(C, A, g, I, B, Q) {
  const E = W(C, "x", "conv2dTranspose"), i = W(A, "filter", "conv2dTranspose");
  return sh(g, E, i, I, B, "NHWC", Q);
} }), bN = gA({ conv3d_: function(C, A, g, I, B = "NDHWC", Q = [1, 1, 1]) {
  const E = W(C, "x", "conv3d"), i = W(A, "filter", "conv3d");
  let o = E, t = !1;
  E.rank === 4 && (t = !0, o = CA(E, [1, E.shape[0], E.shape[1], E.shape[2], E.shape[3]])), f(o.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${o.rank}.`), f(i.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`), f(o.shape[4] === i.shape[3], () => `Error in conv3d: depth of input (${o.shape[4]}) must match input depth for filter ${i.shape[3]}.`), f(IC(g, Q), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${g} and dilations '${Q}'`), f(B === "NDHWC", () => `Error in conv3d: got dataFormat of ${B} but only NDHWC is currently supported.`), f(gE(Q), () => "Error in conv3D: Dilated rates should be larger than 0."), f(gE(g), () => "Error in conv3D: Strides should be larger than 0.");
  const e = { x: o, filter: i }, s = { strides: g, pad: I, dataFormat: B, dilations: Q }, a = v.runKernel(As, e, s);
  return t ? CA(a, [a.shape[1], a.shape[2], a.shape[3], a.shape[4]]) : a;
} }), RG = gA({ conv3DBackpropInput_: function(C, A, g, I, B) {
  f(C.length === A.rank, () => `Length of inShape (${C.length}) and rank of dy (${A.rank}) must match`);
  let Q = C, E = A, i = !1;
  A.rank === 4 && (i = !0, E = CA(A, [1, A.shape[0], A.shape[1], A.shape[2], A.shape[3]]), Q = [1, C[0], C[1], C[2], C[3]]);
  const o = Q[4], t = E.shape[4];
  f(Q.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${Q.length}.`), f(E.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${E.rank}`), f(g.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${g.rank}`), f(o === g.shape[3], () => `Error in conv3dDerInput: depth of input (${o}) must match input depth for filter ${g.shape[3]}.`), f(t === g.shape[4], () => `Error in conv3dDerInput: depth of output (${t}) must match output depth for filter ${g.shape[4]}.`);
  const e = { dy: E, filter: g }, s = { pad: B, strides: I, inputShape: Q }, a = v.runKernel(pr, e, s);
  return i ? CA(a, [a.shape[1], a.shape[2], a.shape[3], a.shape[4]]) : a;
} }), HN = gA({ conv3dTranspose_: function(C, A, g, I, B) {
  const Q = W(C, "x", "conv3dTranspose"), E = W(A, "filter", "conv3dTranspose");
  return RG(g, Q, E, I, B);
} }), Yn = gA({ cos_: function(C) {
  const A = { x: W(C, "x", "cos", "float32") };
  return v.runKernel(co, A);
} }), NG = gA({ cosh_: function(C) {
  const A = { x: W(C, "x", "cosh", "float32") };
  return v.runKernel(wo, A);
} }), Jn = gA({ cumprod_: function(C, A = 0, g = !1, I = !1) {
  const B = { x: W(C, "x", "cumprod") }, Q = { axis: A, exclusive: g, reverse: I };
  return v.runKernel(Mr, B, Q);
} }), uG = gA({ cumsum_: function(C, A = 0, g = !1, I = !1) {
  const B = { x: W(C, "x", "cumsum") }, Q = { axis: A, exclusive: g, reverse: I };
  return v.runKernel(gs, B, Q);
} }), xN = gA({ denseBincount_: function(C, A, g, I = !1) {
  const B = W(C, "x", "denseBincount"), Q = W(A, "weights", "denseBincount");
  f(B.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${B.dtype}`), f(B.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${B.rank}.`), f(g >= 0, () => `size must be non-negative, but got ${g}.`), f(Q.size === B.size || Q.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${B.shape}, weights shape: ${Q.shape}.`);
  const E = { x: B, weights: Q }, i = { size: g, binaryOutput: I };
  return v.runKernel(Yr, E, i);
} }), qN = gA({ depthToSpace_: function(C, A, g = "NHWC") {
  const I = W(C, "x", "depthToSpace", "float32"), B = g === "NHWC" ? I.shape[1] : I.shape[2], Q = g === "NHWC" ? I.shape[2] : I.shape[3], E = g === "NHWC" ? I.shape[3] : I.shape[1];
  f(A > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${A}`), f(B * A >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${B} and ${A}  for depthToSpace with input shape
    ${I.shape}`), f(Q * A >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${Q} and ${A} for depthToSpace with input shape
        ${I.shape}`), f(E % (A * A) == 0, () => `Dimension size must be evenly divisible by ${A * A} but is ${E} for depthToSpace with input shape ${I.shape}`);
  const i = { x: I }, o = { blockSize: A, dataFormat: g };
  return v.runKernel(Jr, i, o);
} }), ah = gA({ depthwiseConv2d_: function(C, A, g, I, B = "NHWC", Q = [1, 1], E) {
  const i = W(C, "x", "depthwiseConv2d", "float32"), o = W(A, "filter", "depthwiseConv2d", "float32");
  let t = i, e = !1;
  i.rank === 3 && (e = !0, t = CA(i, [1, i.shape[0], i.shape[1], i.shape[2]])), f(t.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${t.rank}.`), f(o.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${o.rank}.`);
  const s = B === "NHWC" ? t.shape[3] : t.shape[1];
  f(s === o.shape[2], () => `Error in depthwiseConv2d: number of input channels (${s}) must match the inChannels dimension in filter ${o.shape[2]}.`), wC("depthwiseConv2d", I, E);
  const a = { x: t, filter: o }, r = { strides: g, pad: I, dataFormat: B, dilations: Q, dimRoundingMode: E }, h = v.runKernel(Is, a, r);
  return e ? CA(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
} }), VN = gA({ dilation2d_: function(C, A, g, I, B = [1, 1], Q = "NHWC") {
  const E = W(C, "x", "dilation2d"), i = W(A, "filter", "dilation2d");
  f(E.rank === 3 || E.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${E.rank}.`), f(i.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`), f(Q === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${Q}`);
  let o = E, t = !1;
  E.rank === 3 && (o = CA(E, [1, E.shape[0], E.shape[1], E.shape[2]]), t = !0), f(o.shape[3] === i.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${o.shape[3]} vs ${i.shape[2]}`);
  const e = { x: o, filter: i }, s = { strides: g, pad: I, dilations: B }, a = v.runKernel(Cs, e, s);
  return t ? CA(a, [a.shape[1], a.shape[2], a.shape[3]]) : a;
} });
function zE(C, A) {
  const g = C.length, I = [];
  for (let B = 0; B < g; B++) {
    const Q = g - 1 - B, E = C[Q] || 1;
    (A[A.length - 1 - B] || 1) > 1 && E === 1 && I.unshift(Q);
  }
  return I;
}
function LI(C, A) {
  const g = [];
  for (let I = 0; I < A.length; I++) {
    const B = C[C.length - I - 1], Q = A.length - I - 1, E = A[Q];
    (B == null || B === 1 && E > 1) && g.unshift(Q);
  }
  return g;
}
function wg(C, A) {
  const g = Math.max(C.length, A.length), I = new Array(g);
  for (let B = 0; B < g; B++) {
    let Q = C[C.length - B - 1];
    Q == null && (Q = 1);
    let E = A[A.length - B - 1];
    if (E == null && (E = 1), Q === 1)
      I[g - B - 1] = E;
    else if (E === 1)
      I[g - B - 1] = Q;
    else {
      if (Q !== E)
        throw Error(`Operands could not be broadcast together with shapes ${C} and ${A}.`);
      I[g - B - 1] = Q;
    }
  }
  return I;
}
const RB = gA({ equal_: function(C, A) {
  let g = W(C, "a", "equal", "string_or_numeric"), I = W(A, "b", "equal", "string_or_numeric");
  [g, I] = uI(g, I), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(Bs, B);
} }), tC = gA({ where_: function(C, A, g) {
  const I = W(A, "a", "where"), B = W(g, "b", "where"), Q = W(C, "condition", "where", "bool"), E = wg(wg(Q.shape, I.shape), B.shape), i = { condition: qi(Q, E), t: qi(I, E), e: qi(B, E) };
  return v.runKernel(Js, i);
} }), Lg = gA({ zerosLike_: function(C) {
  const A = { x: W(C, "x", "zerosLike") };
  return v.runKernel(Vs, A);
} }), WN = gA({ divNoNan_: function(C, A) {
  let g = W(C, "a", "div"), I = W(A, "b", "div");
  [g, I] = uI(g, I);
  const B = Cg(g, I), Q = Lg(B), E = RB(I, Q);
  return tC(E, Q, B);
} }), TN = gA({ dot_: function(C, A) {
  const g = W(C, "t1", "dot"), I = W(A, "t2", "dot");
  f(!(g.rank !== 1 && g.rank !== 2 || I.rank !== 1 && I.rank !== 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${g.rank} and ${I.rank}.`);
  const B = g.rank === 1 ? g.size : g.shape[1], Q = I.rank === 1 ? I.size : I.shape[0];
  if (f(B === Q, () => `Error in dot: inner dimensions of inputs must match, but got ${B} and ${Q}.`), g.rank === 1 && I.rank === 1) {
    const E = CA(g, [1, -1]), i = CA(I, [-1, 1]), o = Tg(E, i);
    return CA(o, []);
  }
  if (g.rank === 1 && I.rank === 2) {
    const E = CA(g, [1, -1]), i = CA(I, [I.shape[0], I.shape[1]]), o = Tg(E, i);
    return CA(o, [o.size]);
  }
  if (g.rank === 2 && I.rank === 1) {
    const E = CA(I, [-1, 1]), i = Tg(g, E);
    return CA(i, [i.size]);
  }
  {
    const E = CA(I, [I.shape[0], I.shape[1]]);
    return Tg(g, E);
  }
} }), Xs = gA({ elu_: function(C) {
  const A = { x: W(C, "x", "elu", "float32") };
  return v.runKernel(Go, A);
} }), ZN = gA({ erf_: function(C) {
  let A = W(C, "x", "erf");
  f(A.dtype === "int32" || A.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), A.dtype === "int32" && (A = bA(A, "float32"));
  const g = { x: A };
  return v.runKernel(yo, g);
} });
function nh(C, A) {
  for (let g = 0; g < C.length; ++g)
    if (C[C.length - g - 1] !== A - 1 - g)
      return !1;
  return !0;
}
function kG(C, A, g) {
  const I = C.length + A.length, B = [];
  let Q = 0, E = 0;
  for (let i = 0; i < I; i++)
    g.indexOf(i) === -1 ? B.push(C[Q++]) : B.push(A[E++]);
  return B;
}
function OI(C, A) {
  const g = [], I = C.length;
  for (let B = 0; B < I; B++)
    A.indexOf(B) === -1 && g.push(C[B]);
  return [g, A.map((B) => C[B])];
}
function YI(C, A) {
  return kG(C, A.map((g) => 1), A);
}
function jI(C, A, g) {
  f(nh(A, g), () => `${C} supports only inner-most axes for now. Got axes ${A} and rank-${g} input.`);
}
function GI(C, A) {
  if (nh(C, A))
    return null;
  const g = [];
  for (let I = 0; I < A; ++I)
    C.indexOf(I) === -1 && g.push(I);
  return C.forEach((I) => g.push(I)), g;
}
function FQ(C) {
  return C.map((A, g) => [g, A]).sort((A, g) => A[1] - g[1]).map((A) => A[0]);
}
function KI(C, A) {
  const g = [];
  for (let I = A - C; I < A; ++I)
    g.push(I);
  return g;
}
const nB = gA({ max_: function(C, A = null, g = !1) {
  const I = { x: W(C, "x", "max") }, B = { reductionIndices: A, keepDims: g };
  return v.runKernel(Ds, I, B);
} }), re = gA({ min_: function(C, A = null, g = !1) {
  const I = { x: W(C, "x", "min") }, B = { axis: A, keepDims: g };
  return v.runKernel(Gs, I, B);
} }), jE = gA({ pow_: function(C, A) {
  let g = W(C, "base", "pow"), I = W(A, "exp", "pow");
  [g, I] = uI(g, I);
  const B = { a: g, b: I };
  return v.runKernel(bo, B);
} });
function Pg(C, A) {
  if ((jC(C) && A !== "string" || Array.isArray(C)) && A !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (A === "string" && jC(C) && !(C instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Bt(C, [], [], A);
}
const eC = gA({ sqrt_: function(C) {
  const A = { x: W(C, "x", "sqrt", "float32") };
  return v.runKernel(zo, A);
} }), aI = gA({ square_: function(C) {
  const A = W(C, "x", "square");
  return v.runKernel("Square", { x: A }, {});
} }), $A = gA({ sum_: function(C, A = null, g = !1) {
  let I = W(C, "x", "sum");
  I.dtype === "bool" && (I = bA(I, "int32"));
  const B = { x: I }, Q = { axis: A, keepDims: g };
  return v.runKernel(Ls, B, Q);
} });
function KG(C, A, g = null) {
  if (C.rank === 0)
    return EC(C);
  if (C.rank !== 1 && g === null)
    return KG(CA(C, [-1]), A, g);
  if (C.rank === 1 || typeof g == "number" || Array.isArray(g) && g.length === 1) {
    if (A === 1)
      return $A(EC(C), g);
    if (A === 1 / 0)
      return nB(EC(C), g);
    if (A === -1 / 0)
      return re(EC(C), g);
    if (A === "euclidean" || A === 2)
      return eC($A(jE(EC(C), Pg(2, "int32")), g));
    throw new Error(`Error in norm: invalid ord value: ${A}`);
  }
  if (Array.isArray(g) && g.length === 2) {
    if (A === 1)
      return nB($A(EC(C), g[0]), g[1] - 1);
    if (A === 1 / 0)
      return nB($A(EC(C), g[1]), g[0]);
    if (A === -1 / 0)
      return re($A(EC(C), g[1]), g[0]);
    if (A === "fro" || A === "euclidean")
      return eC($A(aI(C), g));
    throw new Error(`Error in norm: invalid ord value: ${A}`);
  }
  throw new Error(`Error in norm: invalid axis: ${g}`);
}
const Os = gA({ norm_: function(C, A = "euclidean", g = null, I = !1) {
  const B = KG(C = W(C, "x", "norm"), A, g);
  let Q = B.shape;
  if (I) {
    const E = Kg(g, C.shape);
    Q = YI(B.shape, E);
  }
  return CA(B, Q);
} }), XN = gA({ euclideanNorm_: function(C, A = null, g = !1) {
  return Os(C, "euclidean", A, g);
} }), ZB = gA({ exp_: function(C) {
  const A = { x: W(C, "x", "exp") };
  return v.runKernel(Fo, A);
} }), FC = gA({ expandDims_: function(C, A = 0) {
  const g = W(C, "x", "expandDims", "string_or_numeric");
  f(A <= g.rank, () => "Axis must be <= rank of the tensor");
  const I = { input: g }, B = { dim: A };
  return v.runKernel(Qs, I, B);
} }), ON = gA({ expm1_: function(C) {
  const A = { x: W(C, "x", "expm1") };
  return v.runKernel(Ro, A);
} }), sB = gA({ tile_: function(C, A) {
  const g = W(C, "x", "tile", "string_or_numeric");
  f(g.rank === A.length, () => `Error in transpose: rank of input ${g.rank} must match length of reps ${A}.`);
  const I = { x: g }, B = { reps: A };
  return v.runKernel(gt, I, B);
} }), SG = gA({ eye_: function(C, A, g, I = "float32") {
  A == null && (A = C);
  const B = Sg([C, A], I), Q = C <= A ? C : A;
  for (let i = 0; i < Q; ++i)
    B.set(1, i, i);
  const E = CA(B.toTensor(), [C, A]);
  if (g == null)
    return E;
  if (g.length === 1)
    return sB(FC(E, 0), [g[0], 1, 1]);
  if (g.length === 2)
    return sB(FC(FC(E, 0), 0), [g[0], g[1], 1, 1]);
  if (g.length === 3)
    return sB(FC(FC(FC(E, 0), 0), 0), [g[0], g[1], g[2], 1, 1]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${g.length}D.`);
} }), vs = gA({ floor_: function(C) {
  const A = { x: W(C, "x", "floor", "float32") };
  return v.runKernel(No, A);
} }), rh = gA({ gather_: function(C, A, g = 0, I = 0) {
  const B = { x: W(C, "x", "gather"), indices: W(A, "indices", "gather", "int32") }, Q = { axis: g, batchDims: I };
  return v.runKernel(is, B, Q);
} }), LC = gA({ greater_: function(C, A) {
  let g = W(C, "a", "greater", "string_or_numeric"), I = W(A, "b", "greater", "string_or_numeric");
  [g, I] = uI(g, I), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(os, B);
} }), nE = gA({ greaterEqual_: function(C, A) {
  let g = W(C, "a", "greaterEqual", "string_or_numeric"), I = W(A, "b", "greaterEqual", "string_or_numeric");
  [g, I] = uI(g, I), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(ko, B);
} }), hh = gA({ imag_: function(C) {
  const A = { input: W(C, "input", "imag") };
  return v.runKernel(Vr, A);
} }), vN = gA({ isFinite_: function(C) {
  const A = { x: W(C, "x", "isFinite") };
  return v.runKernel(So, A);
} }), PN = gA({ isInf_: function(C) {
  const A = { x: W(C, "x", "isInf") };
  return v.runKernel(po, A);
} }), zN = gA({ isNaN_: function(C) {
  const A = { x: W(C, "x", "isNaN") };
  return v.runKernel(Mo, A);
} }), Dh = gA({ leakyRelu_: function(C, A = 0.2) {
  const g = { x: W(C, "x", "leakyRelu") }, I = { alpha: A };
  return v.runKernel(ts, g, I);
} }), he = gA({ less_: function(C, A) {
  let g = W(C, "a", "less", "string_or_numeric"), I = W(A, "b", "less", "string_or_numeric");
  [g, I] = uI(g, I), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(es, B);
} }), $E = gA({ lessEqual_: function(C, A) {
  let g = W(C, "a", "lessEqual", "string_or_numeric"), I = W(A, "b", "lessEqual", "string_or_numeric");
  [g, I] = uI(g, I), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(ss, B);
} }), jN = gA({ localResponseNormalization_: function(C, A = 5, g = 1, I = 1, B = 0.5) {
  const Q = W(C, "x", "localResponseNormalization");
  f(Q.rank === 4 || Q.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${Q.rank}.`), f(XE(A), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${A}.`);
  let E = Q, i = !1;
  Q.rank === 3 && (i = !0, E = CA(Q, [1, Q.shape[0], Q.shape[1], Q.shape[2]]));
  const o = { x: E }, t = { depthRadius: A, bias: g, alpha: I, beta: B }, e = v.runKernel(hs, o, t);
  return i ? CA(e, [e.shape[1], e.shape[2], e.shape[3]]) : e;
} }), NB = gA({ log_: function(C) {
  const A = { x: W(C, "x", "log", "float32") };
  return v.runKernel(Uo, A);
} }), pG = gA({ log1p_: function(C) {
  const A = { x: W(C, "x", "log1p") };
  return v.runKernel(Yo, A);
} });
function _E(C) {
  return v.customGrad(C);
}
const RI = gA({ neg_: function(C) {
  const A = { x: W(C, "x", "neg") };
  return v.runKernel(ds, A);
} }), Et = gA({ softplus_: function(C) {
  const A = { x: W(C, "x", "softplus") };
  return v.runKernel(Po, A);
} }), $N = gA({ logSigmoid_: function(C) {
  const A = W(C, "x", "logSigmoid");
  return _E((g) => ({ value: RI(Et(RI(g))), gradFunc: (I) => z(I, oi(RI(g))) }))(A);
} }), tg = gA({ sub_: function(C, A) {
  let g = W(C, "a", "sub"), I = W(A, "b", "sub");
  [g, I] = uI(g, I);
  const B = { a: g, b: I };
  return v.runKernel($o, B);
} }), MG = gA({ logSoftmax_: function(C, A = -1) {
  const g = W(C, "logits", "logSoftmax");
  if (A === -1 && (A = g.rank - 1), A !== g.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${g.rank} and axis was ${A}`);
  return _E((B, Q) => {
    const E = nB(B, A, !0), i = tg(B, E), o = tg(bA(i, "float32"), NB($A(ZB(i), A, !0)));
    return Q([o]), { value: o, gradFunc: (t, e) => {
      const [s] = e, a = ZB(s);
      return tg(t, z($A(t, A, !0), a));
    } };
  })(g);
} }), _N = gA({ logSumExp_: function(C, A = null, g = !1) {
  const I = W(C, "x", "logSumExp"), B = Kg(A, I.shape), Q = nB(I, B, !0), E = tg(I, Q), i = ZB(E), o = $A(i, B), t = NB(o), e = kA(CA(Q, t.shape), t);
  if (g) {
    const s = YI(e.shape, B);
    return CA(e, s);
  }
  return e;
} }), XB = gA({ logicalAnd_: function(C, A) {
  const g = W(C, "a", "logicalAnd", "bool"), I = W(A, "b", "logicalAnd", "bool");
  wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(as, B);
} }), ch = gA({ logicalNot_: function(C) {
  const A = { x: W(C, "x", "logicalNot", "bool") };
  return v.runKernel(ns, A);
} }), UG = gA({ logicalOr_: function(C, A) {
  const g = W(C, "a", "logicalOr", "bool"), I = W(A, "b", "logicalOr", "bool");
  wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(rs, B);
} }), Au = gA({ logicalXor_: function(C, A) {
  const g = W(C, "a", "logicalXor", "bool"), I = W(A, "b", "logicalXor", "bool");
  return wg(g.shape, I.shape), XB(UG(C, A), ch(XB(C, A)));
} }), wh = gA({ maxPool_: function(C, A, g, I, B) {
  const Q = W(C, "x", "maxPool");
  let E = Q, i = !1;
  Q.rank === 3 && (i = !0, E = CA(Q, [1, Q.shape[0], Q.shape[1], Q.shape[2]])), f(E.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${E.rank}.`), f(IC(g, 1), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${g} and dilations '1'`), wC("maxPool", I, B);
  const o = { x: E }, t = { filterSize: A, strides: g, pad: I, dimRoundingMode: B }, e = v.runKernel(cs, o, t);
  return i ? CA(e, [e.shape[1], e.shape[2], e.shape[3]]) : e;
} }), gu = gA({ maxPool3d_: function(C, A = [1, 1, 1], g, I, B, Q = "NDHWC") {
  const E = W(C, "x", "maxPool3d");
  let i = E, o = !1;
  E.rank === 4 && (o = !0, i = CA(E, [1, E.shape[0], E.shape[1], E.shape[2], E.shape[3]])), f(i.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`), f(Q === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${Q}`), wC("maxPool3d", I, B);
  const t = { x: i }, e = { filterSize: A, strides: g, pad: I, dimRoundingMode: B, dataFormat: Q }, s = v.runKernel(ws, t, e);
  return o ? CA(s, [s.shape[1], s.shape[2], s.shape[3], s.shape[4]]) : s;
} }), sQ = gA({ maximum_: function(C, A) {
  let g = W(C, "a", "maximum"), I = W(A, "b", "maximum");
  [g, I] = uI(g, I), g.dtype === "bool" && (g = bA(g, "int32"), I = bA(I, "int32")), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(Jo, B);
} }), UI = gA({ mean_: function(C, A = null, g = !1) {
  const I = { x: W(C, "x", "mean") }, B = { axis: A, keepDims: g };
  return v.runKernel(ls, I, B);
} });
function ZI(C, A = "float32") {
  if (zB(C), A === "complex64") {
    const I = ZI(C, "float32"), B = ZI(C, "float32");
    return PE(I, B);
  }
  const g = gC(cA(C), A);
  return v.makeTensor(g, C, A);
}
function zQ(C, A = "float32") {
  if (zB(C), A === "complex64") {
    const I = zQ(C, "float32"), B = ZI(C, "float32");
    return PE(I, B);
  }
  const g = wr(cA(C), A);
  return v.makeTensor(g, C, A);
}
const Zi = gA({ minimum_: function(C, A) {
  let g = W(C, "a", "minimum"), I = W(A, "b", "minimum");
  [g, I] = uI(g, I), g.dtype === "bool" && (g = bA(g, "int32"), I = bA(I, "int32")), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(fo, B);
} }), Iu = gA({ mirrorPad_: function(C, A, g) {
  f(g === "reflect" || g === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${g}.`);
  const I = W(C, "x", "mirrorPad");
  if (I.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  f(A.length === I.rank, () => `Padding doesn't match input. Must be ${I.rank}. Got ${A.length}.`);
  const B = g === "reflect" ? 1 : 0;
  for (let i = 0; i < I.rank; i++)
    f(A[i].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), f(A[i][0] >= 0 && A[i][0] <= I.shape[i] - B && A[i][1] >= 0 && A[i][1] <= I.shape[i] - B, () => `Padding in dimension ${i} cannot be greater than or equal to ${I.shape[i] - B} or less than 0 for input of shape ${I.shape}`);
  const Q = { paddings: A, mode: g }, E = { x: I };
  return v.runKernel(ys, E, Q);
} }), Cu = gA({ mod_: function(C, A) {
  let g = W(C, "a", "mod"), I = W(A, "b", "mod");
  [g, I] = uI(g, I);
  const B = { a: g, b: I };
  return v.runKernel(Lo, B);
} }), fn = gA({ moments_: function(C, A = null, g = !1) {
  const I = Kg(A, (C = W(C, "x", "moments")).shape), B = UI(C, I, g);
  let Q = B.shape;
  g || (Q = YI(B.shape, I));
  const E = aI(tg(bA(C, "float32"), CA(B, Q)));
  return { mean: B, variance: UI(E, I, g) };
} }), De = gA({ notEqual_: function(C, A) {
  let g = W(C, "a", "notEqual", "string_or_numeric"), I = W(A, "b", "notEqual", "string_or_numeric");
  [g, I] = uI(g, I), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(Fs, B);
} }), YG = gA({ oneHot_: function(C, A, g = 1, I = 0, B = "int32") {
  if (A < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${A}`);
  const Q = { indices: W(C, "indices", "oneHot", "int32") }, E = { dtype: B, depth: A, onValue: g, offValue: I };
  return v.runKernel(Ns, Q, E);
} }), $C = gA({ onesLike_: function(C) {
  const A = { x: W(C, "x", "onesLike") };
  return v.runKernel(Rs, A);
} }), lh = gA({ pad_: function(C, A, g = 0) {
  const I = W(C, "x", "pad");
  if (I.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const B = { paddings: A, constantValue: g }, Q = { x: I };
  return v.runKernel(ks, Q, B);
} }), Gh = gA({ spaceToBatchND_: function(C, A, g) {
  const I = W(C, "x", "spaceToBatchND");
  f(I.rank >= 1 + A.length, () => `input rank ${I.rank} should be > than [blockShape] ${A.length}`), f(g.length === A.length, () => `paddings.shape[0] ${g.length} must be equal to [blockShape] ${A.length}`), f(I.shape.reduce((E, i, o) => o > 0 && o <= A.length ? E && (i + g[o - 1][0] + g[o - 1][1]) % A[o - 1] == 0 : E, !0), () => `input spatial dimensions ${I.shape.slice(1)} with paddings ${g.toString()} must be divisible by blockShapes ${A.toString()}`);
  const B = { x: I }, Q = { blockShape: A, paddings: g };
  return v.runKernel(ms, B, Q);
} }), Bu = gA({ pool_: function(C, A, g, I, B, Q, E) {
  B == null && (B = [1, 1]), Q == null && (Q = 1), I === 0 && (I = "valid");
  const i = W(C, "x", "maxPool");
  let o = i, t = !1;
  i.rank === 3 && (t = !0, o = CA(i, [1, i.shape[0], i.shape[1], i.shape[2]])), f(IC(Q, B), () => `Error in pool: Either strides or dilations must be 1. Got strides ${Q} and dilations '${B}'`);
  const e = _C(o.shape, A, Q, B, I), s = [e.dilationHeight, e.dilationWidth];
  let a;
  a = I === "same" ? function(N, k) {
    const p = N.map((m, x) => m + (m - 1) * (k[x] - 1)), Y = p.map((m) => m - 1), M = Y.map((m) => Math.floor(m / 2)), L = Y.map((m, x) => m - M[x]);
    return Y.map((m, x) => [M[x], L[x]]);
  }([e.filterHeight, e.filterWidth], s) : [[0, 0], [0, 0]];
  const r = s[0] === 1 && s[1] === 1, [h, w] = function(N, k, p) {
    const Y = p.map(($) => $[0]), M = p.map(($) => $[1]), L = N.concat(Y, M), m = k.map(($, AA) => ($ - L[AA] % $) % $), x = M.map(($, AA) => $ + m[AA]), T = k.map(($, AA) => [Y[AA], x[AA]]), Z = k.map(($, AA) => [0, m[AA]]);
    return [T, Z];
  }([e.inHeight, e.inWidth], s, a), G = r ? I : "valid", D = r ? o : Gh(o, s, h), l = (g === "avg" ? () => oh(D, A, Q, G, E) : () => wh(D, A, Q, G, E))(), d = r ? l : eh(l, s, w);
  return t ? CA(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
} }), yh = gA({ prelu_: function(C, A) {
  const g = { x: W(C, "x", "prelu"), alpha: W(A, "alpha", "prelu") };
  return v.runKernel(Ks, g);
} }), Qu = gA({ prod_: function(C, A = null, g = !1) {
  let I = W(C, "x", "prod");
  I.dtype === "bool" && (I = bA(I, "int32"));
  const B = { x: I }, Q = { axis: A, keepDims: g };
  return v.runKernel(Ss, B, Q);
} });
var JG = { exports: {} };
(function(C, A, g) {
  function I(E) {
    var i = this, o = function() {
      var t = 4022871197, e = function(s) {
        s = String(s);
        for (var a = 0; a < s.length; a++) {
          var r = 0.02519603282416938 * (t += s.charCodeAt(a));
          r -= t = r >>> 0, t = (r *= t) >>> 0, t += 4294967296 * (r -= t);
        }
        return 23283064365386963e-26 * (t >>> 0);
      };
      return e;
    }();
    i.next = function() {
      var t = 2091639 * i.s0 + 23283064365386963e-26 * i.c;
      return i.s0 = i.s1, i.s1 = i.s2, i.s2 = t - (i.c = 0 | t);
    }, i.c = 1, i.s0 = o(" "), i.s1 = o(" "), i.s2 = o(" "), i.s0 -= o(E), i.s0 < 0 && (i.s0 += 1), i.s1 -= o(E), i.s1 < 0 && (i.s1 += 1), i.s2 -= o(E), i.s2 < 0 && (i.s2 += 1), o = null;
  }
  function B(E, i) {
    return i.c = E.c, i.s0 = E.s0, i.s1 = E.s1, i.s2 = E.s2, i;
  }
  function Q(E, i) {
    var o = new I(E), t = i && i.state, e = o.next;
    return e.int32 = function() {
      return 4294967296 * o.next() | 0;
    }, e.double = function() {
      return e() + 11102230246251565e-32 * (2097152 * e() | 0);
    }, e.quick = e, t && (typeof t == "object" && B(t, o), e.state = function() {
      return B(o, {});
    }), e;
  }
  A && A.exports ? A.exports = Q : g && g.amd ? g(function() {
    return Q;
  }) : this.alea = Q;
})(0, JG, !1);
var Eu = JG.exports, fG = { exports: {} };
(function(C, A, g) {
  function I(E) {
    var i = this, o = "";
    i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.next = function() {
      var e = i.x ^ i.x << 11;
      return i.x = i.y, i.y = i.z, i.z = i.w, i.w ^= i.w >>> 19 ^ e ^ e >>> 8;
    }, E === (0 | E) ? i.x = E : o += E;
    for (var t = 0; t < o.length + 64; t++)
      i.x ^= 0 | o.charCodeAt(t), i.next();
  }
  function B(E, i) {
    return i.x = E.x, i.y = E.y, i.z = E.z, i.w = E.w, i;
  }
  function Q(E, i) {
    var o = new I(E), t = i && i.state, e = function() {
      return (o.next() >>> 0) / 4294967296;
    };
    return e.double = function() {
      do
        var s = ((o.next() >>> 11) + (o.next() >>> 0) / 4294967296) / 2097152;
      while (s === 0);
      return s;
    }, e.int32 = o.next, e.quick = e, t && (typeof t == "object" && B(t, o), e.state = function() {
      return B(o, {});
    }), e;
  }
  A && A.exports ? A.exports = Q : g && g.amd ? g(function() {
    return Q;
  }) : this.xor128 = Q;
})(0, fG, !1);
var iu = fG.exports, LG = { exports: {} };
(function(C, A, g) {
  function I(E) {
    var i = this, o = "";
    i.next = function() {
      var e = i.x ^ i.x >>> 2;
      return i.x = i.y, i.y = i.z, i.z = i.w, i.w = i.v, (i.d = i.d + 362437 | 0) + (i.v = i.v ^ i.v << 4 ^ e ^ e << 1) | 0;
    }, i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.v = 0, E === (0 | E) ? i.x = E : o += E;
    for (var t = 0; t < o.length + 64; t++)
      i.x ^= 0 | o.charCodeAt(t), t == o.length && (i.d = i.x << 10 ^ i.x >>> 4), i.next();
  }
  function B(E, i) {
    return i.x = E.x, i.y = E.y, i.z = E.z, i.w = E.w, i.v = E.v, i.d = E.d, i;
  }
  function Q(E, i) {
    var o = new I(E), t = i && i.state, e = function() {
      return (o.next() >>> 0) / 4294967296;
    };
    return e.double = function() {
      do
        var s = ((o.next() >>> 11) + (o.next() >>> 0) / 4294967296) / 2097152;
      while (s === 0);
      return s;
    }, e.int32 = o.next, e.quick = e, t && (typeof t == "object" && B(t, o), e.state = function() {
      return B(o, {});
    }), e;
  }
  A && A.exports ? A.exports = Q : g && g.amd ? g(function() {
    return Q;
  }) : this.xorwow = Q;
})(0, LG, !1);
var ou = LG.exports, mG = { exports: {} };
(function(C, A, g) {
  function I(E) {
    var i = this;
    i.next = function() {
      var o, t, e = i.x, s = i.i;
      return o = e[s], t = (o ^= o >>> 7) ^ o << 24, t ^= (o = e[s + 1 & 7]) ^ o >>> 10, t ^= (o = e[s + 3 & 7]) ^ o >>> 3, t ^= (o = e[s + 4 & 7]) ^ o << 7, o = e[s + 7 & 7], t ^= (o ^= o << 13) ^ o << 9, e[s] = t, i.i = s + 1 & 7, t;
    }, function(o, t) {
      var e, s = [];
      if (t === (0 | t))
        s[0] = t;
      else
        for (t = "" + t, e = 0; e < t.length; ++e)
          s[7 & e] = s[7 & e] << 15 ^ t.charCodeAt(e) + s[e + 1 & 7] << 13;
      for (; s.length < 8; )
        s.push(0);
      for (e = 0; e < 8 && s[e] === 0; ++e)
        ;
      for (e == 8 ? s[7] = -1 : s[e], o.x = s, o.i = 0, e = 256; e > 0; --e)
        o.next();
    }(i, E);
  }
  function B(E, i) {
    return i.x = E.x.slice(), i.i = E.i, i;
  }
  function Q(E, i) {
    E == null && (E = +/* @__PURE__ */ new Date());
    var o = new I(E), t = i && i.state, e = function() {
      return (o.next() >>> 0) / 4294967296;
    };
    return e.double = function() {
      do
        var s = ((o.next() >>> 11) + (o.next() >>> 0) / 4294967296) / 2097152;
      while (s === 0);
      return s;
    }, e.int32 = o.next, e.quick = e, t && (t.x && B(t, o), e.state = function() {
      return B(o, {});
    }), e;
  }
  A && A.exports ? A.exports = Q : g && g.amd ? g(function() {
    return Q;
  }) : this.xorshift7 = Q;
})(0, mG, !1);
var tu = mG.exports, bG = { exports: {} };
(function(C, A, g) {
  function I(E) {
    var i = this;
    i.next = function() {
      var o, t, e = i.w, s = i.X, a = i.i;
      return i.w = e = e + 1640531527 | 0, t = s[a + 34 & 127], o = s[a = a + 1 & 127], t ^= t << 13, o ^= o << 17, t ^= t >>> 15, o ^= o >>> 12, t = s[a] = t ^ o, i.i = a, t + (e ^ e >>> 16) | 0;
    }, function(o, t) {
      var e, s, a, r, h, w = [], G = 128;
      for (t === (0 | t) ? (s = t, t = null) : (t += "\0", s = 0, G = Math.max(G, t.length)), a = 0, r = -32; r < G; ++r)
        t && (s ^= t.charCodeAt((r + 32) % t.length)), r === 0 && (h = s), s ^= s << 10, s ^= s >>> 15, s ^= s << 4, s ^= s >>> 13, r >= 0 && (h = h + 1640531527 | 0, a = (e = w[127 & r] ^= s + h) == 0 ? a + 1 : 0);
      for (a >= 128 && (w[127 & (t && t.length || 0)] = -1), a = 127, r = 512; r > 0; --r)
        s = w[a + 34 & 127], e = w[a = a + 1 & 127], s ^= s << 13, e ^= e << 17, s ^= s >>> 15, e ^= e >>> 12, w[a] = s ^ e;
      o.w = h, o.X = w, o.i = a;
    }(i, E);
  }
  function B(E, i) {
    return i.i = E.i, i.w = E.w, i.X = E.X.slice(), i;
  }
  function Q(E, i) {
    E == null && (E = +/* @__PURE__ */ new Date());
    var o = new I(E), t = i && i.state, e = function() {
      return (o.next() >>> 0) / 4294967296;
    };
    return e.double = function() {
      do
        var s = ((o.next() >>> 11) + (o.next() >>> 0) / 4294967296) / 2097152;
      while (s === 0);
      return s;
    }, e.int32 = o.next, e.quick = e, t && (t.X && B(t, o), e.state = function() {
      return B(o, {});
    }), e;
  }
  A && A.exports ? A.exports = Q : g && g.amd ? g(function() {
    return Q;
  }) : this.xor4096 = Q;
})(0, bG, !1);
var eu = bG.exports, HG = { exports: {} };
(function(C, A, g) {
  function I(E) {
    var i = this, o = "";
    i.next = function() {
      var e = i.b, s = i.c, a = i.d, r = i.a;
      return e = e << 25 ^ e >>> 7 ^ s, s = s - a | 0, a = a << 24 ^ a >>> 8 ^ r, r = r - e | 0, i.b = e = e << 20 ^ e >>> 12 ^ s, i.c = s = s - a | 0, i.d = a << 16 ^ s >>> 16 ^ r, i.a = r - e | 0;
    }, i.a = 0, i.b = 0, i.c = -1640531527, i.d = 1367130551, E === Math.floor(E) ? (i.a = E / 4294967296 | 0, i.b = 0 | E) : o += E;
    for (var t = 0; t < o.length + 20; t++)
      i.b ^= 0 | o.charCodeAt(t), i.next();
  }
  function B(E, i) {
    return i.a = E.a, i.b = E.b, i.c = E.c, i.d = E.d, i;
  }
  function Q(E, i) {
    var o = new I(E), t = i && i.state, e = function() {
      return (o.next() >>> 0) / 4294967296;
    };
    return e.double = function() {
      do
        var s = ((o.next() >>> 11) + (o.next() >>> 0) / 4294967296) / 2097152;
      while (s === 0);
      return s;
    }, e.int32 = o.next, e.quick = e, t && (typeof t == "object" && B(t, o), e.state = function() {
      return B(o, {});
    }), e;
  }
  A && A.exports ? A.exports = Q : g && g.amd ? g(function() {
    return Q;
  }) : this.tychei = Q;
})(0, HG, !1);
var su = HG.exports, xG = { exports: {} };
const au = OR(Object.freeze(Object.defineProperty({ __proto__: null, default: {} }, Symbol.toStringTag, { value: "Module" })));
var ua;
ua = xG, function(C, A, g) {
  var I, B = 256, Q = "random", E = g.pow(B, 6), i = g.pow(2, 52), o = 2 * i, t = B - 1;
  function e(G, D, l) {
    var d = [], N = h(r((D = D == 1 ? { entropy: !0 } : D || {}).entropy ? [G, w(A)] : G ?? function() {
      try {
        var Y;
        return I && (Y = I.randomBytes) ? Y = Y(B) : (Y = new Uint8Array(B), (C.crypto || C.msCrypto).getRandomValues(Y)), w(Y);
      } catch {
        var M = C.navigator, L = M && M.plugins;
        return [+/* @__PURE__ */ new Date(), C, L, C.screen, w(A)];
      }
    }(), 3), d), k = new s(d), p = function() {
      for (var Y = k.g(6), M = E, L = 0; Y < i; )
        Y = (Y + L) * B, M *= B, L = k.g(1);
      for (; Y >= o; )
        Y /= 2, M /= 2, L >>>= 1;
      return (Y + L) / M;
    };
    return p.int32 = function() {
      return 0 | k.g(4);
    }, p.quick = function() {
      return k.g(4) / 4294967296;
    }, p.double = p, h(w(k.S), A), (D.pass || l || function(Y, M, L, m) {
      return m && (m.S && a(m, k), Y.state = function() {
        return a(k, {});
      }), L ? (g[Q] = Y, M) : Y;
    })(p, N, "global" in D ? D.global : this == g, D.state);
  }
  function s(G) {
    var D, l = G.length, d = this, N = 0, k = d.i = d.j = 0, p = d.S = [];
    for (l || (G = [l++]); N < B; )
      p[N] = N++;
    for (N = 0; N < B; N++)
      p[N] = p[k = t & k + G[N % l] + (D = p[N])], p[k] = D;
    (d.g = function(Y) {
      for (var M, L = 0, m = d.i, x = d.j, T = d.S; Y--; )
        M = T[m = t & m + 1], L = L * B + T[t & (T[m] = T[x = t & x + M]) + (T[x] = M)];
      return d.i = m, d.j = x, L;
    })(B);
  }
  function a(G, D) {
    return D.i = G.i, D.j = G.j, D.S = G.S.slice(), D;
  }
  function r(G, D) {
    var l, d = [], N = typeof G;
    if (D && N == "object")
      for (l in G)
        try {
          d.push(r(G[l], D - 1));
        } catch {
        }
    return d.length ? d : N == "string" ? G : G + "\0";
  }
  function h(G, D) {
    for (var l, d = G + "", N = 0; N < d.length; )
      D[t & N] = t & (l ^= 19 * D[t & N]) + d.charCodeAt(N++);
    return w(D);
  }
  function w(G) {
    return String.fromCharCode.apply(0, G);
  }
  if (h(g.random(), A), ua.exports) {
    ua.exports = e;
    try {
      I = au;
    } catch {
    }
  } else
    g["seed" + Q] = e;
}(typeof self < "u" ? self : Ae, [], Math);
var nu = Eu, ru = iu, hu = ou, Du = tu, cu = eu, wu = su, mQ = xG.exports;
mQ.alea = nu, mQ.xor128 = ru, mQ.xorwow = hu, mQ.xorshift7 = Du, mQ.xor4096 = cu, mQ.tychei = wu;
var dh = mQ;
class qG {
  constructor(A, g, I, B, Q) {
    this.mean = A, this.stdDev = g, this.dtype = I, this.nextVal = NaN, this.truncated = B, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);
    const E = Q || Math.random();
    this.random = dh.alea(E.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const B = this.nextVal;
      return this.nextVal = NaN, B;
    }
    let A, g, I = !1;
    for (; !I; ) {
      let B, Q, E;
      do
        B = 2 * this.random() - 1, Q = 2 * this.random() - 1, E = B * B + Q * Q;
      while (E >= 1 || E === 0);
      const i = Math.sqrt(-2 * Math.log(E) / E);
      A = this.mean + this.stdDev * B * i, g = this.mean + this.stdDev * Q * i, this.truncated && !this.isValidTruncated(A) || (I = !0);
    }
    return this.truncated && !this.isValidTruncated(g) || (this.nextVal = this.convertValue(g)), this.convertValue(A);
  }
  convertValue(A) {
    return this.dtype == null || this.dtype === "float32" ? A : Math.round(A);
  }
  isValidTruncated(A) {
    return A <= this.upper && A >= this.lower;
  }
}
class lu {
  constructor(A = 0, g = 1, I, B) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = A, this.range = g - A, this.dtype = I, B == null && (B = Math.random()), typeof B == "number" && (B = B.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${A} - ${g} <= 1 and dtype is not float`);
    this.random = dh.alea(B);
  }
  convertValue(A) {
    return this.canReturnFloat() ? A : Math.round(A);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
const Gu = gA({ randomNormal_: function(C, A = 0, g = 1, I, B) {
  if (zB(C), I != null && I === "bool")
    throw new Error(`Unsupported data type ${I}`);
  const Q = new qG(A, g, I, !1, B), E = Sg(C, I);
  for (let i = 0; i < E.values.length; i++)
    E.values[i] = Q.nextValue();
  return E.toTensor();
} }), it = gA({ randomUniform_: function(C, A = 0, g = 1, I = "float32", B) {
  zB(C);
  const Q = Sg(C, I), E = new lu(A, g, null, B);
  for (let i = 0; i < Q.values.length; i++)
    Q.values[i] = E.nextValue();
  return Q.toTensor();
} });
function Xi(C, A, g = 1, I = "float32") {
  if (g === 0)
    throw new Error("Cannot have a step of zero");
  const B = { start: C, stop: A, step: g, dtype: I };
  return v.runKernel(Pr, {}, B);
}
const ce = gA({ real_: function(C) {
  const A = { input: W(C, "input", "real") };
  return v.runKernel(zr, A);
} }), yu = gA({ reciprocal_: function(C) {
  const A = { x: W(C, "x", "reciprocal") };
  return v.runKernel(Ho, A);
} }), rE = gA({ relu_: function(C) {
  const A = { x: W(C, "x", "relu") };
  return v.runKernel(xo, A);
} }), VG = gA({ relu6_: function(C) {
  const A = { x: W(C, "x", "relu6") };
  return v.runKernel(qo, A);
} }), CE = gA({ reverse_: function(C, A) {
  const g = { x: W(C, "x", "reverse") }, I = { dims: A };
  return v.runKernel(Ys, g, I);
} }), WG = gA({ round_: function(C) {
  const A = { x: W(C, "x", "round") };
  return v.runKernel(Vo, A);
} }), TG = gA({ rsqrt_: function(C) {
  const A = { x: W(C, "x", "rsqrt", "float32") };
  return v.runKernel(Wo, A);
} }), ZG = gA({ selu_: function(C) {
  const A = { x: W(C, "x", "selu") };
  return v.runKernel(To, A);
} }), XG = gA({ separableConv2d_: function(C, A, g, I, B, Q = [1, 1], E = "NHWC") {
  const i = W(C, "x", "separableConv2d"), o = W(A, "depthwiseFilter", "separableConv2d"), t = W(g, "pointwiseFilter", "separableConv2d");
  let e = i, s = !1;
  if (i.rank === 3 && (s = !0, e = CA(i, [1, i.shape[0], i.shape[1], i.shape[2]])), E === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  f(e.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${e.rank}.`), f(o.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${o.rank}.`), f(t.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${o.rank}.`), f(t.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${t.shape[0]}.`), f(t.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${t.shape[1]}.`);
  const a = o.shape[2], r = o.shape[3];
  f(t.shape[2] === a * r, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${a * r}, but got ${t.shape[2]}.`);
  const h = ah(e, o, I, B, E, Q), w = IE(h, t, 1, "valid", E);
  return s ? CA(w, [w.shape[1], w.shape[2], w.shape[3]]) : w;
} }), du = gA({ sign_: function(C) {
  const A = { x: W(C, "x", "sign") };
  return v.runKernel(Oo, A);
} }), OG = gA({ sin_: function(C) {
  const A = { x: W(C, "x", "sin", "float32") };
  return v.runKernel(Zo, A);
} }), vG = gA({ sinh_: function(C) {
  const A = { x: W(C, "x", "sinh") };
  return v.runKernel(Xo, A);
} }), Fh = gA({ slice1d_: function(C, A, g) {
  const I = W(C, "x", "slice1d");
  return f(I.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${I.rank} tensor`), iI(I, [A], [g]);
} }), PG = gA({ slice2d_: function(C, A, g) {
  const I = W(C, "x", "slice2d");
  return f(I.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${I.rank} tensor`), iI(I, A, g);
} }), Rh = gA({ slice3d_: function(C, A, g) {
  const I = W(C, "x", "slice3d");
  return f(I.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${I.rank} tensor`), iI(I, A, g);
} }), we = gA({ slice4d_: function(C, A, g) {
  const I = W(C, "x", "slice4d");
  return f(I.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${I.rank} tensor`), iI(I, A, g);
} }), Nh = gA({ softmax_: function(C, A = -1) {
  const g = W(C, "logits", "softmax", "float32");
  if (A === -1 && (A = g.rank - 1), A !== g.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${g.rank} and dim was ${A}`);
  const I = { logits: g }, B = { dim: A };
  return v.runKernel(Hs, I, B);
} }), zG = gA({ fft_: function(C) {
  f(C.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${C.dtype}.`);
  const A = { input: C };
  return v.runKernel(br, A);
} }), Ln = gA({ ifft_: function(C) {
  f(C.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${C.dtype}.`);
  const A = { input: C };
  return v.runKernel(qr, A);
} }), Fu = gA({ irfft_: function(C) {
  const A = C.shape[C.shape.length - 1], g = C.size / A;
  let I;
  if (A <= 2) {
    const B = CA(C, [g, A]);
    I = Ln(B);
  } else {
    const B = [g, 2 * (A - 1)], Q = CA(ce(C), [g, A]), E = CA(hh(C), [g, A]), i = CE(iI(Q, [0, 1], [g, A - 2]), 1), o = z(CE(iI(E, [0, 1], [g, A - 2]), 1), Pg(-1)), t = DC([Q, i], 1), e = DC([E, o], 1), s = CA(PE(t, e), [B[0], B[1]]);
    I = Ln(s);
  }
  if (I = ce(I), C.rank === 3 && C.shape[0] !== 0) {
    const B = I, Q = C.shape[0];
    I = CA(I, [Q, I.shape[0] / Q, I.shape[1]]), B.dispose();
  }
  return I;
} }), fC = gA({ split_: function(C, A, g = 0) {
  const I = { x: W(C, "x", "split") }, B = { numOrSizeSplits: A, axis: g };
  return v.runKernel(bs, I, B);
} }), Ru = gA({ rfft_: function(C, A) {
  f(C.dtype === "float32", () => `The dtype for rfft() must be real value but got ${C.dtype}`);
  let g = C.shape[C.shape.length - 1];
  const I = C.size / g;
  let B;
  if (A != null && A < g) {
    const h = C.shape.map((G) => 0), w = C.shape.map((G) => G);
    w[C.shape.length - 1] = A, B = iI(C, h, w), g = A;
  } else if (A != null && A > g) {
    const h = C.shape.map((w) => w);
    h[C.shape.length - 1] = A - g, B = DC([C, ZI(h)], C.shape.length - 1), g = A;
  } else
    B = C;
  const Q = Lg(B), E = CA(PE(B, Q), [I, g]), i = zG(E), o = Math.floor(g / 2) + 1, t = ce(i), e = hh(i), s = fC(t, [o, g - o], t.shape.length - 1), a = fC(e, [o, g - o], e.shape.length - 1), r = B.shape.slice();
  return r[B.shape.length - 1] = o, CA(PE(s[0], a[0]), r);
} }), Nu = gA({ squaredDifference_: function(C, A) {
  let g = W(C, "a", "squaredDifference"), I = W(A, "b", "squaredDifference");
  [g, I] = uI(g, I), wg(g.shape, I.shape);
  const B = { a: g, b: I };
  return v.runKernel(jo, B, {});
} }), ot = gA({ squeeze_: function(C, A) {
  const g = W(C, "x", "squeeze", "string_or_numeric");
  return CA(g, QQ(g.shape, A).newShape);
} }), xB = gA({ stack_: function(C, A = 0) {
  const g = nG(C, "tensors", "stack", "string_or_numeric");
  f(g.length >= 1, () => "Pass at least one tensor to tf.stack"), g.length > 0 && f(A <= g[0].rank, () => "Axis must be <= rank of the tensor");
  const I = g, B = { axis: A };
  return v.runKernel(us, I, B);
} }), Oi = gA({ step_: function(C, A = 0) {
  const g = { x: W(C, "x", "step") }, I = { alpha: A };
  return v.runKernel(It, g, I);
} }), uu = gA({ stridedSlice_: function(C, A, g, I, B = 0, Q = 0, E = 0, i = 0, o = 0) {
  const t = { x: W(C, "x", "stridedSlice", "string_or_numeric") }, e = { begin: A, end: g, strides: I, beginMask: B, endMask: Q, ellipsisMask: E, newAxisMask: i, shrinkAxisMask: o };
  return v.runKernel(Ah, t, e);
} }), ku = gA({ tan_: function(C) {
  const A = { x: W(C, "x", "tan", "float32") };
  return v.runKernel(_o, A);
} });
function MC(C, A) {
  cr(C);
  const g = Ct(C, A);
  if (g.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Bt(C, null, g, A);
}
function ka(C, A, g) {
  if (cr(C), A != null && A.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  const I = Ct(C, g);
  if (I.length !== 2 && I.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (I.length === 1 && A == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Bt(C, A, I, g);
}
function ec(C, A, g) {
  const I = A.rank > 1 ? A.shape[A.rank - 1] : 1, B = A.rank > 1 ? A.rank - 1 : 1, Q = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${g.shape}, indices.shape: ${A.shape}, shape: ${C}, sliceDim: ${I}, and batchDim: ${B}.`;
  if (g.rank < B)
    throw new Error(Q + ` update.rank < ${B}. `);
  if (C.length < I + (g.rank - B))
    throw new Error(Q + ` Output shape length < ${I + (g.rank - B)}`);
  if (g.rank !== B + C.length - I)
    throw new Error(Q + " update.rank != " + (B + C.length - I));
  for (let E = 0; E < B; ++E)
    if (g.shape[E] !== A.shape[E])
      throw new Error(Q + ` updates.shape[${E}] (${g.shape[E]}) != indices.shape[${E}] (${A.shape[E]}).`);
  for (let E = 0; E < g.rank - B; ++E)
    if (g.shape[E + B] !== C[E + I])
      throw new Error(Q + ` updates.shape[${E + B}] (${g.shape[E + B]}) != shape[${E + B}] (${C[E + B]})`);
}
function hE(C, A, g) {
  const I = A.shape.length, B = I > 1 ? A.shape[I - 1] : 1, Q = g.length;
  let E = 1;
  for (let o = B; o < Q; ++o)
    E *= g[o];
  const i = B < 1 ? 1 : B;
  return { sliceRank: B, numUpdates: cA(A.shape) / i, sliceSize: E, strides: [...zA(g.slice(0, B)), 1], outputSize: cA(g) };
}
const Ku = gA({ topk_: function(C, A = 1, g = !0) {
  const I = W(C, "x", "topk");
  if (I.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  const B = I.shape[I.shape.length - 1];
  if (A < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${A}`);
  if (A > B)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${B}) but got ${A}`);
  const Q = { x: I }, E = { k: A, sorted: g }, [i, o] = v.runKernel(gh, Q, E);
  return { values: i, indices: o };
} }), jG = gA({ truncatedNormal_: function(C, A = 0, g = 1, I, B) {
  if (zB(C), I != null && I === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  const Q = new qG(A, g, I, !0, B), E = Sg(C, I);
  for (let i = 0; i < E.values.length; i++)
    E.values[i] = Q.nextValue();
  return E.toTensor();
} }), Su = gA({ unique_: function(C, A = 0) {
  const g = W(C, "x", "unique", "string_or_numeric");
  f(g.rank > 0, () => "The input tensor must be at least 1D");
  const I = { x: g }, B = { axis: A }, [Q, E] = v.runKernel(Ch, I, B);
  return { values: Q, indices: E };
} }), $G = gA({ unsortedSegmentSum_: function(C, A, g) {
  const I = W(C, "x", "unsortedSegmentSum"), B = W(A, "segmentIds", "unsortedSegmentSum", "int32");
  f(XE(g), () => "numSegments must be of dtype int");
  const Q = { x: I, segmentIds: B }, E = { numSegments: g };
  return v.runKernel(qs, Q, E);
} }), BE = gA({ unstack_: function(C, A = 0) {
  const g = W(C, "x", "unstack", "string_or_numeric");
  f(A >= -g.shape.length && A < g.shape.length, () => `Axis = ${A} is not in [-${g.shape.length}, ${g.shape.length})`);
  const I = { value: g }, B = { axis: A };
  return v.runKernel(xs, I, B);
} });
function _G(C, A) {
  const g = [];
  for (let Q = 0; Q < A.length; Q++)
    A[Q] && g.push(Q);
  const I = Sg(C, "int32"), B = Sg([g.length, C.length], "int32");
  for (let Q = 0; Q < g.length; Q++) {
    const E = I.indexToLoc(g[Q]), i = Q * C.length;
    B.values.set(E, i);
  }
  return B.toTensor();
}
const mg = gA({ transpose_: function(C, A, g) {
  const I = W(C, "x", "transpose");
  if (A == null && (A = I.shape.map((E, i) => i).reverse()), f(I.rank === A.length, () => `Error in transpose: rank of input ${I.rank} must match length of perm ${A}.`), A.forEach((E) => {
    f(E >= 0 && E < I.rank, () => "All entries in 'perm' must be between 0 and " + (I.rank - 1) + ` but got ${A}`);
  }), I.rank <= 1)
    return I.clone();
  const B = { x: I }, Q = { perm: A };
  return I.dtype === "complex64" ? IA(() => {
    let E = ce(I), i = hh(I);
    return E = v.runKernel(mE, { x: E }, Q), i = v.runKernel(mE, { x: i }, Q), g && (i = RI(i)), PE(E, i);
  }) : v.runKernel(mE, B, Q);
} }), pu = gA({ dropout_: function(C, A, g, I) {
  const B = W(C, "x", "dropout");
  if (f(B.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${B.dtype} tensor instead.`), f(A >= 0 && A < 1, () => `rate must be a float in the range [0, 1), but got ${A}.`), A === 0)
    return C instanceof MI ? B.clone() : B;
  const Q = function(o, t) {
    if (t == null)
      return o.shape.slice();
    if (Zg(o.shape, t))
      return t;
    if (o.shape.length === t.length) {
      const e = [];
      for (let s = 0; s < o.shape.length; s++)
        t[s] == null && o.shape[s] != null ? e.push(o.shape[s]) : e.push(t[s]);
      return e;
    }
    return t;
  }(B, g), E = 1 - A, i = Cg(vs(kA(it(Q, 0, 1, "float32", I), E)), E);
  return z(B, i);
} }), uh = gA({ conv2DBackpropFilter_: function(C, A, g, I, B, Q = "NHWC", E) {
  let i = C;
  C.rank === 3 && (i = CA(C, [1, C.shape[0], C.shape[1], C.shape[2]]));
  let o = A;
  o.rank === 3 && (o = CA(A, [1, A.shape[0], A.shape[1], A.shape[2]])), f(i.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`), f(o.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${o.shape}.`), f(g.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${g}.`);
  const t = Q === "NHWC" ? i.shape[3] : i.shape[1], e = Q === "NHWC" ? o.shape[3] : o.shape[1];
  f(t === g[2], () => `Error in conv2dDerFilter: depth of input ${t}) must match input depth in filter (${g[2]}.`), f(e === g[3], () => `Error in conv2dDerFilter: depth of dy (${e}) must match output depth for filter (${g[3]}).`), wC("conv2dDerFilter", B, E);
  const s = { x: i, dy: o }, a = { strides: I, pad: B, dataFormat: Q, dimRoundingMode: E, filterShape: g };
  return v.runKernel(Kr, s, a);
} });
function kh(C, A, g) {
  if (g == null || g === "linear")
    return C;
  if (g === "relu")
    return z(C, Oi(A));
  throw new Error(`Cannot compute gradient for fused activation ${g}.`);
}
function Kh(C, A) {
  let g = A;
  const I = LI(C.shape, A.shape);
  return I.length > 0 && (g = $A(g, I)), CA(g, C.shape);
}
function Sh(C, A, g, I) {
  if (A === "linear")
    return C;
  if (A === "relu")
    return rE(C);
  if (A === "elu")
    return Xs(C);
  if (A === "relu6")
    return VG(C);
  if (A === "prelu")
    return yh(C, g);
  if (A === "leakyrelu")
    return Dh(C, I);
  if (A === "sigmoid")
    return oi(C);
  throw new Error(`Unknown fused activation ${A}.`);
}
const ph = (C, A) => !(C > 0) || A === "linear", Mu = gA({ fusedConv2d_: function({ x: C, filter: A, strides: g, pad: I, dataFormat: B = "NHWC", dilations: Q = [1, 1], dimRoundingMode: E, bias: i, activation: o = "linear", preluActivationWeights: t, leakyreluAlpha: e }) {
  if (o = o || "linear", ph(v.state.gradientDepth, o) === !1) {
    f(B === "NHWC", () => `Error in fused conv2d: got dataFormat of ${B} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let p = IE(C, A, g, I, B, Q, E);
    return i != null && (p = kA(p, i)), Sh(p, o, t, e);
  }
  const s = W(C, "x", "conv2d", "float32"), a = W(A, "filter", "conv2d", "float32");
  let r = s, h = !1;
  s.rank === 3 && (h = !0, r = CA(s, [1, s.shape[0], s.shape[1], s.shape[2]])), f(r.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${r.rank}.`), f(a.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${a.rank}.`), wC("fused conv2d", I, E);
  const w = B === "NHWC" ? r.shape[3] : r.shape[1];
  f(a.shape[2] === w, () => `Error in conv2d: depth of input (${w}) must match input depth for filter ${a.shape[2]}.`), f(IC(g, Q), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${g} and dilations '${Q}'`);
  const G = zI(r.shape, a.shape, g, Q, I, E);
  let D, l;
  if (i != null && (D = W(i, "bias", "fused conv2d"), [D] = uI(D, s), B === "NHWC" ? wg(G.outShape, D.shape) : (f(D.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${D.shape.length}.`), f(D.shape.length === 0 || D.shape[0] === G.outChannels || D.shape[0] === 1, () => `Error in fused conv2d: bias shape (${D.shape}) is not compatible with the number of output channels (${G.outChannels})`))), t != null) {
    const p = t.shape;
    if (f(p.length <= 1 || p.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${p.length}.`), p.length === 1)
      f(p[0] === 1 || p[0] === G.outChannels, () => `Error in fused conv2d: PReLU activation weights (${p}) is not compatible with the number of output channels (${G.outChannels}).`);
    else if (p.length === 3)
      try {
        wg(p, G.outShape);
      } catch {
        const M = `Error in fused conv2d: PReLU activation weights (${p}) is not compatible with the output shape of the conv2d (${G.outShape}).`;
        throw Error(M);
      }
    l = W(t, "prelu weights", "fused conv2d");
  }
  const d = (p, Y) => {
    f(B === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${B} but only NHWC is currently supported.`);
    const [M, L, m, x] = Y, T = kh(p, m, o);
    f(AE(Q), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${Q}'`);
    const Z = [sh(L.shape, T, M, g, I), uh(L, T, M.shape, g, I)];
    if (x != null) {
      const $ = Kh(x, T);
      Z.push($);
    }
    return Z;
  }, N = { x: r, filter: a, bias: D, preluActivationWeights: l }, k = { strides: g, pad: I, dataFormat: B, dilations: Q, dimRoundingMode: E, activation: o, leakyreluAlpha: e };
  return i == null ? _E((Y, M, L) => {
    let m = v.runKernel(te, N, k);
    return L([M, Y, m]), h && (m = CA(m, [m.shape[1], m.shape[2], m.shape[3]])), { value: m, gradFunc: d };
  })(r, a) : _E((Y, M, L, m) => {
    let x = v.runKernel(te, N, k);
    return m([M, Y, x, L]), h && (x = CA(x, [x.shape[1], x.shape[2], x.shape[3]])), { value: x, gradFunc: d };
  })(r, a, D);
} }), Uu = gA({ depthwiseConv2dNativeBackpropFilter_: function(C, A, g, I, B, Q = [1, 1], E) {
  let i = C;
  C.rank === 3 && (i = CA(C, [1, C.shape[0], C.shape[1], C.shape[2]]));
  let o = A;
  o.rank === 3 && (o = CA(A, [1, A.shape[0], A.shape[1], A.shape[2]]));
  const t = { x: i, dy: o }, e = { strides: I, pad: B, dimRoundingMode: E, dilations: Q, filterShape: g };
  return v.runKernel(fr, t, e);
} }), Yu = gA({ depthwiseConv2dNativeBackpropInput_: function(C, A, g, I, B, Q = [1, 1], E) {
  let i = A, o = !1;
  A.rank === 3 && (o = !0, i = CA(A, [1, A.shape[0], A.shape[1], A.shape[2]]));
  const t = { dy: i, filter: g }, e = { strides: I, pad: B, dimRoundingMode: E, dilations: Q, inputShape: C }, s = v.runKernel(Lr, t, e);
  return o ? CA(s, [s.shape[1], s.shape[2], s.shape[3]]) : s;
} }), sc = gA({ fusedMatMul_: function({ a: C, b: A, transposeA: g = !1, transposeB: I = !1, bias: B, activation: Q = "linear", preluActivationWeights: E, leakyreluAlpha: i = 0.2 }) {
  if (ph(v.state.gradientDepth, Q) === !1) {
    let m = Tg(C, A, g, I);
    return B != null && (m = kA(m, B)), Sh(m, Q, E, i);
  }
  let o = W(C, "a", "fused matMul"), t = W(A, "b", "fused matMul");
  [o, t] = uI(o, t);
  const e = g ? o.shape[o.rank - 2] : o.shape[o.rank - 1], s = I ? t.shape[t.rank - 1] : t.shape[t.rank - 2], a = g ? o.shape[o.rank - 1] : o.shape[o.rank - 2], r = I ? t.shape[t.rank - 2] : t.shape[t.rank - 1], h = o.shape.slice(0, -2), w = t.shape.slice(0, -2), G = cA(h), D = cA(w);
  f(e === s, () => `Error in fused matMul: inner shapes (${e}) and (${s}) of Tensors with shapes ${o.shape} and ${t.shape} and transposeA=${g} and transposeB=${I} must match.`);
  const l = wg(o.shape.slice(0, -2), t.shape.slice(0, -2)).concat([a, r]), d = CA(o, g ? [G, e, a] : [G, a, e]), N = CA(t, I ? [D, r, s] : [D, s, r]);
  let k, p;
  B != null && (k = W(B, "bias", "fused matMul"), [k] = uI(k, o), wg(l, k.shape)), E != null && (p = W(E, "prelu weights", "fused matMul"));
  const Y = (m, x) => {
    const [T, Z, $, AA] = x, P = kh(CA(m, $.shape), $, Q);
    let _, QA;
    return g || I ? !g && I ? (_ = Tg(P, Z, !1, !1), QA = Tg(P, T, !0, !1)) : g && !I ? (_ = Tg(Z, P, !1, !0), QA = Tg(T, P, !1, !1)) : (_ = Tg(Z, P, !0, !0), QA = Tg(P, T, !0, !0)) : (_ = Tg(P, Z, !1, !0), QA = Tg(T, P, !0, !1)), B != null ? [_, QA, Kh(AA, P)] : [_, QA];
  }, M = { a: d, b: N, bias: k, preluActivationWeights: p }, L = { transposeA: g, transposeB: I, activation: Q, leakyreluAlpha: i };
  return B == null ? _E((x, T, Z) => {
    const $ = v.runKernel(oe, M, L);
    return Z([x, T, $]), { value: CA($, l), gradFunc: Y };
  })(d, N) : _E((x, T, Z, $) => {
    const AA = v.runKernel(oe, M, L);
    return $([x, T, AA, Z]), { value: CA(AA, l), gradFunc: Y };
  })(d, N, k);
} }), Ju = gA({ cropAndResize_: function(C, A, g, I, B = "bilinear", Q = 0) {
  const E = W(C, "image", "cropAndResize"), i = W(A, "boxes", "cropAndResize", "float32"), o = W(g, "boxInd", "cropAndResize", "int32"), t = i.shape[0];
  f(E.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${E.rank}.`), f(i.rank === 2 && i.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${t},4] but had shape ${i.shape}.`), f(o.rank === 1 && o.shape[0] === t, () => `Error in cropAndResize: boxInd must be have size [${t}] but had shape ${i.shape}.`), f(I.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${I.length}.`), f(I[0] >= 1 && I[1] >= 1, () => `cropSize must be atleast [1,1], but was ${I}`), f(B === "bilinear" || B === "nearest", () => `method must be bilinear or nearest, but was ${B}`);
  const e = { image: E, boxes: i, boxInd: o }, s = { method: B, extrapolationValue: Q, cropSize: I };
  return v.runKernel(Ur, e, s);
} }), fu = gA({ flipLeftRight_: function(C) {
  const A = W(C, "image", "flipLeftRight", "float32");
  f(A.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${A.rank}.`);
  const g = { image: A };
  return v.runKernel(xr, g, {});
} }), Lu = gA({ grayscaleToRGB_: function(C) {
  const A = W(C, "image", "grayscaleToRGB"), g = A.rank - 1, I = A.shape[g];
  f(A.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${A.rank}.`), f(I === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${I}.`);
  const B = new Array(A.rank);
  return B.fill(1, 0, g), B[g] = 3, sB(A, B);
} }), mu = gA({ rotateWithOffset_: function(C, A, g = 0, I = 0.5) {
  const B = W(C, "image", "rotateWithOffset", "float32");
  f(B.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${B.rank}.`);
  const Q = { image: B }, E = { radians: A, fillValue: g, center: I };
  return v.runKernel(Bh, Q, E);
} });
function ti(C, A, g, I, B, Q) {
  I == null && (I = 0.5), B == null && (B = Number.NEGATIVE_INFINITY), Q == null && (Q = 0);
  const E = C.shape[0];
  return g = Math.min(g, E), f(0 <= I && I <= 1, () => `iouThreshold must be in [0, 1], but was '${I}'`), f(C.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${C.rank}'`), f(C.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${C.shape[1]}`), f(A.rank === 1, () => "scores must be a 1D tensor"), f(A.shape[0] === E, () => `scores has incompatible shape with boxes. Expected ${E}, but was ${A.shape[0]}`), f(0 <= Q && Q <= 1, () => `softNmsSigma must be in [0, 1], but was '${Q}'`), { maxOutputSize: g, iouThreshold: I, scoreThreshold: B, softNmsSigma: Q };
}
const bu = gA({ nonMaxSuppression_: function(C, A, g, I = 0.5, B = Number.NEGATIVE_INFINITY) {
  const Q = W(C, "boxes", "nonMaxSuppression", "float32"), E = W(A, "scores", "nonMaxSuppression", "float32"), i = ti(Q, E, g, I, B), o = { maxOutputSize: g = i.maxOutputSize, iouThreshold: I = i.iouThreshold, scoreThreshold: B = i.scoreThreshold };
  return v.runKernel(Xr, { boxes: Q, scores: E }, o);
} });
function Hu(C, A, g) {
  const I = function(Q, E, i) {
    return function(o, t, e) {
      let s = 0, a = o.length, r = 0, h = !1;
      for (; s < a; ) {
        r = s + (a - s >>> 1);
        const w = e(t, o[r]);
        w > 0 ? s = r + 1 : (a = r, h = !w);
      }
      return h ? s : -s - 1;
    }(Q, E, i || xu);
  }(C, A, g), B = I < 0 ? -(I + 1) : I;
  C.splice(B, 0, A);
}
function xu(C, A) {
  return C > A ? 1 : C < A ? -1 : 0;
}
function Mh(C, A, g, I, B) {
  return Jh(C, A, g, I, B, 0);
}
function Uh(C, A, g, I, B, Q) {
  return Jh(C, A, g, I, B, 0, !1, Q, !0);
}
function Yh(C, A, g, I, B, Q) {
  return Jh(C, A, g, I, B, Q, !0);
}
function Jh(C, A, g, I, B, Q, E = !1, i = !1, o = !1) {
  const t = [];
  for (let G = 0; G < A.length; G++)
    A[G] > B && t.push({ score: A[G], boxIndex: G, suppressBeginIndex: 0 });
  t.sort(ac);
  const e = Q > 0 ? -0.5 / Q : 0, s = [], a = [];
  for (; s.length < g && t.length > 0; ) {
    const G = t.pop(), { score: D, boxIndex: l, suppressBeginIndex: d } = G;
    if (D < B)
      break;
    let N = !1;
    for (let k = s.length - 1; k >= d; --k) {
      const p = qu(C, l, s[k]);
      if (p >= I) {
        N = !0;
        break;
      }
      if (G.score = G.score * Vu(I, e, p), G.score <= B)
        break;
    }
    G.suppressBeginIndex = s.length, N || (G.score === D ? (s.push(l), a.push(G.score)) : G.score > B && Hu(t, G, ac));
  }
  const r = s.length, h = g - r;
  i && h > 0 && (s.push(...new Array(h).fill(0)), a.push(...new Array(h).fill(0)));
  const w = { selectedIndices: s };
  return E && (w.selectedScores = a), o && (w.validOutputs = r), w;
}
function qu(C, A, g) {
  const I = C.subarray(4 * A, 4 * A + 4), B = C.subarray(4 * g, 4 * g + 4), Q = Math.min(I[0], I[2]), E = Math.min(I[1], I[3]), i = Math.max(I[0], I[2]), o = Math.max(I[1], I[3]), t = Math.min(B[0], B[2]), e = Math.min(B[1], B[3]), s = Math.max(B[0], B[2]), a = Math.max(B[1], B[3]), r = (i - Q) * (o - E), h = (s - t) * (a - e);
  if (r <= 0 || h <= 0)
    return 0;
  const w = Math.max(Q, t), G = Math.max(E, e), D = Math.min(i, s), l = Math.min(o, a), d = Math.max(D - w, 0) * Math.max(l - G, 0);
  return d / (r + h - d);
}
function Vu(C, A, g) {
  const I = Math.exp(A * g * g);
  return g <= C ? I : 0;
}
function ac(C, A) {
  return C.score - A.score || C.score === A.score && A.boxIndex - C.boxIndex;
}
const Wu = async function(C, A, g, I = 0.5, B = Number.NEGATIVE_INFINITY) {
  const Q = W(C, "boxes", "nonMaxSuppressionAsync"), E = W(A, "scores", "nonMaxSuppressionAsync"), i = ti(Q, E, g, I, B);
  g = i.maxOutputSize, I = i.iouThreshold, B = i.scoreThreshold;
  const o = await Promise.all([Q.data(), E.data()]), t = o[0], e = o[1], { selectedIndices: s } = Mh(t, e, g, I, B);
  return Q !== C && Q.dispose(), E !== A && E.dispose(), MC(s, "int32");
}, Tu = gA({ nonMaxSuppressionWithScore_: function(C, A, g, I = 0.5, B = Number.NEGATIVE_INFINITY, Q = 0) {
  const E = W(C, "boxes", "nonMaxSuppression"), i = W(A, "scores", "nonMaxSuppression"), o = ti(E, i, g, I, B, Q), t = { boxes: E, scores: i }, e = { maxOutputSize: g = o.maxOutputSize, iouThreshold: I = o.iouThreshold, scoreThreshold: B = o.scoreThreshold, softNmsSigma: Q = o.softNmsSigma }, s = v.runKernel(vr, t, e);
  return { selectedIndices: s[0], selectedScores: s[1] };
} }), Zu = async function(C, A, g, I = 0.5, B = Number.NEGATIVE_INFINITY, Q = 0) {
  const E = W(C, "boxes", "nonMaxSuppressionAsync"), i = W(A, "scores", "nonMaxSuppressionAsync"), o = ti(E, i, g, I, B, Q);
  g = o.maxOutputSize, I = o.iouThreshold, B = o.scoreThreshold, Q = o.softNmsSigma;
  const t = await Promise.all([E.data(), i.data()]), e = t[0], s = t[1], { selectedIndices: a, selectedScores: r } = Yh(e, s, g, I, B, Q);
  return E !== C && E.dispose(), i !== A && i.dispose(), { selectedIndices: MC(a, "int32"), selectedScores: MC(r) };
}, Xu = gA({ nonMaxSuppressionPadded_: function(C, A, g, I = 0.5, B = Number.NEGATIVE_INFINITY, Q = !1) {
  const E = W(C, "boxes", "nonMaxSuppression"), i = W(A, "scores", "nonMaxSuppression"), o = ti(E, i, g, I, B, null), t = { boxes: E, scores: i }, e = { maxOutputSize: o.maxOutputSize, iouThreshold: o.iouThreshold, scoreThreshold: o.scoreThreshold, padToMaxOutputSize: Q }, s = v.runKernel(Or, t, e);
  return { selectedIndices: s[0], validOutputs: s[1] };
} }), Ou = async function(C, A, g, I = 0.5, B = Number.NEGATIVE_INFINITY, Q = !1) {
  const E = W(C, "boxes", "nonMaxSuppressionAsync"), i = W(A, "scores", "nonMaxSuppressionAsync"), o = ti(E, i, g, I, B, null), t = o.maxOutputSize, e = o.iouThreshold, s = o.scoreThreshold, [a, r] = await Promise.all([E.data(), i.data()]), { selectedIndices: h, validOutputs: w } = Uh(a, r, t, e, s, Q);
  return E !== C && E.dispose(), i !== A && i.dispose(), { selectedIndices: MC(h, "int32"), validOutputs: Pg(w, "int32") };
}, Ay = gA({ resizeBilinear_: function(C, A, g = !1, I = !1) {
  const B = W(C, "images", "resizeBilinear");
  f(B.rank === 3 || B.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${B.rank}.`), f(A.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${A}.`), f(I === !1 || g === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let Q = B, E = !1;
  B.rank === 3 && (E = !0, Q = CA(B, [1, B.shape[0], B.shape[1], B.shape[2]]));
  const i = { images: Q }, o = { alignCorners: g, halfPixelCenters: I, size: A }, t = v.runKernel(Us, i, o);
  return E ? CA(t, [t.shape[1], t.shape[2], t.shape[3]]) : t;
} }), gy = gA({ resizeNearestNeighbor_: function(C, A, g = !1, I = !1) {
  const B = W(C, "images", "resizeNearestNeighbor");
  f(B.rank === 3 || B.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${B.rank}.`), f(A.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${A}.`), f(B.dtype === "float32" || B.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), f(I === !1 || g === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let Q = B, E = !1;
  B.rank === 3 && (E = !0, Q = CA(B, [1, B.shape[0], B.shape[1], B.shape[2]]));
  const i = { images: Q }, o = { alignCorners: g, halfPixelCenters: I, size: A }, t = v.runKernel(Ms, i, o);
  return E ? CA(t, [t.shape[1], t.shape[2], t.shape[3]]) : t;
} }), vu = gA({ threshold_: function(C, A = "binary", g = !1, I = 0.5) {
  const B = W(C, "image", "threshold"), Q = B.shape[0] * B.shape[1];
  let E, i, o, t, e = z(MC([I]), 255);
  if (f(B.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${B.rank}.`), f(B.shape[2] === 3 || B.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${B.shape[2]}.`), f(B.dtype === "int32" || B.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${B.dtype}.`), f(A === "otsu" || A === "binary", () => `Method must be binary or otsu, but was ${A}`), B.shape[2] === 3) {
    [E, i, o] = fC(B, [1, 1, 1], -1);
    const a = z(E, 0.2989), r = z(i, 0.587), h = z(o, 0.114);
    t = kA(kA(a, r), h);
  } else
    t = C;
  A === "otsu" && (e = function(a, r) {
    let h, w, G, D, l, d, N = MC([-1]), k = MC([0]), p = MC([0]);
    for (let Y = 0; Y < a.size - 1; Y++) {
      h = iI(a, 0, Y + 1), w = iI(a, Y + 1), l = Cg($A(h), r), d = Cg($A(w), r);
      const M = $A(z(h, Xi(0, h.size)));
      G = Cg(M, $A(h));
      const L = Zs(w.shape, h.size), m = kA(Xi(0, w.size), L), x = z(w, m);
      D = Cg($A(x), $A(w));
      const T = tg(G, D), Z = tg(G, D), $ = z(l, d);
      p = z(z($, T), Z);
      const AA = LC(p, k);
      k = tC(AA, p, k), N = tC(AA, MC([Y]), N);
    }
    return N;
  }(UN(bA(WG(t), "int32"), pC([]), 256), Q));
  const s = g ? $E(t, e) : LC(t, e);
  return bA(z(s, 255), "int32");
} }), Pu = gA({ transform_: function(C, A, g = "nearest", I = "constant", B = 0, Q) {
  const E = W(C, "image", "transform", "float32"), i = W(A, "transforms", "transform", "float32");
  f(E.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${E.rank}.`), f(i.rank === 2 && (i.shape[0] === E.shape[0] || i.shape[0] === 1) && i.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), f(Q == null || Q.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${Q}.`);
  const o = { image: E, transforms: i }, t = { interpolation: g, fillMode: I, fillValue: B, outputShape: Q };
  return v.runKernel(Ih, o, t);
} });
function nc(C, A = !1) {
  return v.tidy(() => {
    f(C.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${C.shape.length}D Tensor.`);
    const g = C.shape[0], I = C.shape[1];
    let B = SG(g), Q = PQ(C);
    const E = ka([[1]], [1, 1]);
    let i = PQ(E);
    const o = g >= I ? I : g;
    for (let t = 0; t < o; ++t) {
      const e = Q, s = i, a = B;
      [i, Q, B] = v.tidy(() => {
        const r = iI(Q, [t, t], [g - t, 1]), h = Os(r), w = iI(Q, [t, t], [1, 1]), G = tC(LC(w, 0), ka([[-1]]), ka([[1]])), D = tg(w, z(G, h)), l = Cg(r, D);
        i = l.shape[0] === 1 ? PQ(E) : DC([E, iI(l, [1, 0], [l.shape[0] - 1, l.shape[1]])], 0);
        const d = RI(Cg(Tg(G, D), h)), N = iI(Q, [t, 0], [g - t, I]), k = z(d, i), p = mg(i);
        if (t === 0)
          Q = tg(N, Tg(k, Tg(p, N)));
        else {
          const L = tg(N, Tg(k, Tg(p, N)));
          Q = DC([iI(Q, [0, 0], [t, I]), L], 0);
        }
        const Y = mg(k), M = iI(B, [0, t], [g, B.shape[1] - t]);
        if (t === 0)
          B = tg(M, Tg(Tg(M, i), Y));
        else {
          const L = tg(M, Tg(Tg(M, i), Y));
          B = DC([iI(B, [0, 0], [g, t]), L], 1);
        }
        return [i, Q, B];
      }), Ug([e, s, a]);
    }
    return !A && g > I && (B = iI(B, [0, 0], [g, I]), Q = iI(Q, [0, 0], [I, I])), [B, Q];
  });
}
const qB = { flipLeftRight: fu, grayscaleToRGB: Lu, resizeNearestNeighbor: gy, resizeBilinear: Ay, rotateWithOffset: mu, cropAndResize: Ju, nonMaxSuppression: bu, nonMaxSuppressionAsync: Wu, nonMaxSuppressionWithScore: Tu, nonMaxSuppressionWithScoreAsync: Zu, nonMaxSuppressionPadded: Xu, nonMaxSuppressionPaddedAsync: Ou, threshold: vu, transform: Pu }, zu = { bandPart: gA({ bandPart_: function(C, A, g) {
  const I = W(C, "a", "bandPart");
  f(I.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${I.rank}.`);
  const B = I.shape, [Q, E] = I.shape.slice(-2);
  let i, o;
  typeof A == "number" ? (f(A % 1 == 0, () => `bandPart(): numLower must be an integer, got ${A}.`), f(A <= Q, () => `bandPart(): numLower (${A}) must not be greater than the number of rows (${Q}).`), i = W(A < 0 ? Q : A, "numLower", "bandPart")) : (f(A.dtype === "int32", () => "bandPart(): numLower's dtype must be an int32."), i = tC(he(A, 0), Q, Zi(A, Q))), typeof g == "number" ? (f(g % 1 == 0, () => `bandPart(): numUpper must be an integer, got ${g}.`), f(g <= E, () => `bandPart(): numUpper (${g}) must not be greater than the number of columns (${E}).`), o = W(g < 0 ? E : g, "numUpper", "bandPart")) : (f(g.dtype === "int32", () => "bandPart(): numUpper's dtype must be an int32."), o = tC(he(g, 0), E, Zi(g, E)));
  const t = CA(Xi(0, Q, 1, "int32"), [-1, 1]), e = Xi(0, E, 1, "int32"), s = tg(t, e), a = XB($E(s, i), nE(s, RI(o))), r = ZI([Q, E], I.dtype);
  return CA(xB(BE(CA(I, [-1, Q, E])).map((h) => tC(a, h, r))), B);
} }), gramSchmidt: gA({ gramSchmidt_: function(C) {
  let A;
  if (Array.isArray(C)) {
    A = !1, f(C != null && C.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const B = C[0].shape[0];
    for (let Q = 1; Q < C.length; ++Q)
      f(C[Q].shape[0] === B, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${C[Q].shape[0]} vs. ${B})`);
  } else
    A = !0, C = fC(C, C.shape[0], 0).map((B) => ot(B, [0]));
  f(C.length <= C[0].shape[0], () => `Gram-Schmidt: Number of vectors (${C.length}) exceeds number of dimensions (${C[0].shape[0]}).`);
  const g = [], I = C;
  for (let B = 0; B < C.length; ++B)
    g.push(v.tidy(() => {
      let Q = I[B];
      if (B > 0)
        for (let E = 0; E < B; ++E) {
          const i = z($A(z(g[E], Q)), g[E]);
          Q = tg(Q, i);
        }
      return Cg(Q, Os(Q, "euclidean"));
    }));
  return A ? xB(g, 0) : g;
} }), qr: gA({ qr_: function(C, A = !1) {
  if (f(C.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${C.rank}`), C.rank === 2)
    return nc(C, A);
  {
    const g = C.shape.slice(0, C.shape.length - 2).reduce((E, i) => E * i), I = BE(CA(C, [g, C.shape[C.shape.length - 2], C.shape[C.shape.length - 1]]), 0), B = [], Q = [];
    return I.forEach((E) => {
      const [i, o] = nc(E, A);
      B.push(i), Q.push(o);
    }), [CA(xB(B, 0), C.shape), CA(xB(Q, 0), C.shape)];
  }
} }) }, ju = /* @__PURE__ */ new Map(), $u = /* @__PURE__ */ new Map();
class ei {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(A, g) {
    return new A(g);
  }
}
class vC {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return vC.instance == null && (vC.instance = new vC()), vC.instance;
  }
  static register(A) {
    vC.getMap().classNameMap[A.className] = [A, A.fromConfig];
  }
}
function RA(C, A, g) {
  f(C.className != null, () => "Class being registered does not have the static className property defined."), f(typeof C.className == "string", () => "className is required to be a string, but got type " + typeof C.className), f(C.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), A === void 0 && (A = "Custom"), g === void 0 && (g = C.className);
  const I = A + ">" + g;
  return vC.register(C), ju.set(I, C), $u.set(C, I), C;
}
class RQ extends ei {
  minimize(A, g = !1, I) {
    const { value: B, grads: Q } = this.computeGradients(A, I);
    if (I != null) {
      const E = I.map((i) => ({ name: i.name, tensor: Q[i.name] }));
      this.applyGradients(E);
    } else
      this.applyGradients(Q);
    return Ug(Q), g ? B : (B.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(A, g) {
    return function(I, B) {
      f(rn(I), () => "The f passed in variableGrads(f) must be a function"), f(B == null || Array.isArray(B) && B.every((s) => s instanceof ae), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
      const Q = B != null;
      if (!Q) {
        B = [];
        for (const s in v.registeredVariables)
          B.push(v.registeredVariables[s]);
      }
      const E = Q ? B.filter((s) => !s.trainable) : null, i = B.length;
      B = B.filter((s) => s.trainable), f(B.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${i} variables is trainable.`);
      const { value: o, grads: t } = v.gradients(I, B, null, !0);
      f(t.some((s) => s != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), f(o.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${o.rank} tensor`);
      const e = {};
      return B.forEach((s, a) => {
        t[a] != null && (e[s.name] = t[a]);
      }), E != null && E.forEach((s) => e[s.name] = null), { value: o, grads: e };
    }(A, g);
  }
  dispose() {
    this.iterations_ != null && Ug(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: Pg(this.iterations_, "int32") };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(A) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(A) {
    return this.iterations_ = (await A[0].tensor.data())[0], A.slice(1);
  }
}
Object.defineProperty(RQ, Symbol.hasInstance, { value: (C) => C.minimize != null && C.computeGradients != null && C.applyGradients != null });
class Iy extends RQ {
  static get className() {
    return "Adadelta";
  }
  constructor(A, g, I = null) {
    super(), this.learningRate = A, this.rho = g, this.epsilon = I, this.accumulatedGrads = [], this.accumulatedUpdates = [], I == null && (this.epsilon = v.backend.epsilon());
  }
  applyGradients(A) {
    (Array.isArray(A) ? A.map((g) => g.name) : Object.keys(A)).forEach((g, I) => {
      const B = v.registeredVariables[g];
      this.accumulatedGrads[I] == null && (this.accumulatedGrads[I] = { originalName: `${g}/accum_grad`, variable: IA(() => Lg(B).variable(!1)) }), this.accumulatedUpdates[I] == null && (this.accumulatedUpdates[I] = { originalName: `${g}/accum_var`, variable: IA(() => Lg(B).variable(!1)) });
      const Q = Array.isArray(A) ? A[I].tensor : A[g];
      if (Q == null)
        return;
      const E = this.accumulatedGrads[I].variable, i = this.accumulatedUpdates[I].variable;
      IA(() => {
        const o = kA(z(E, this.rho), z(aI(Q), 1 - this.rho)), t = z(Cg(eC(kA(i, this.epsilon)), eC(kA(E, this.epsilon))), Q), e = kA(z(i, this.rho), z(aI(t), 1 - this.rho));
        E.assign(o), i.assign(e);
        const s = kA(z(t, -this.learningRate), B);
        B.assign(s);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Ug(this.accumulatedGrads.map((A) => A.variable)), Ug(this.accumulatedUpdates.map((A) => A.variable)));
  }
  async getWeights() {
    const A = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(A.map((g) => ({ name: g.originalName, tensor: g.variable })));
  }
  async setWeights(A) {
    const g = (A = await this.extractIterations(A)).length / 2;
    this.accumulatedGrads = A.slice(0, g).map((I) => ({ originalName: I.name, variable: I.tensor.variable(!1) })), this.accumulatedUpdates = A.slice(g, 2 * g).map((I) => ({ originalName: I.name, variable: I.tensor.variable(!1) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(A, g) {
    return new A(g.learningRate, g.rho, g.epsilon);
  }
}
class Cy extends RQ {
  static get className() {
    return "Adagrad";
  }
  constructor(A, g = 0.1) {
    super(), this.learningRate = A, this.initialAccumulatorValue = g, this.accumulatedGrads = [];
  }
  applyGradients(A) {
    (Array.isArray(A) ? A.map((g) => g.name) : Object.keys(A)).forEach((g, I) => {
      const B = v.registeredVariables[g];
      this.accumulatedGrads[I] == null && (this.accumulatedGrads[I] = { originalName: `${g}/accumulator`, variable: IA(() => Zs(B.shape, this.initialAccumulatorValue).variable(!1)) });
      const Q = Array.isArray(A) ? A[I].tensor : A[g];
      if (Q == null)
        return;
      const E = this.accumulatedGrads[I].variable;
      IA(() => {
        const i = kA(E, aI(Q));
        E.assign(i);
        const o = kA(z(Cg(Q, eC(kA(i, v.backend.epsilon()))), -this.learningRate), B);
        B.assign(o);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Ug(this.accumulatedGrads.map((A) => A.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((A) => ({ name: A.originalName, tensor: A.variable })));
  }
  async setWeights(A) {
    A = await this.extractIterations(A), this.accumulatedGrads = A.map((g) => ({ originalName: g.name, variable: g.tensor.variable(!1) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }
  static fromConfig(A, g) {
    return new A(g.learningRate, g.initialAccumulatorValue);
  }
}
class By extends RQ {
  static get className() {
    return "Adam";
  }
  constructor(A, g, I, B = null) {
    super(), this.learningRate = A, this.beta1 = g, this.beta2 = I, this.epsilon = B, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], IA(() => {
      this.accBeta1 = Pg(g).variable(), this.accBeta2 = Pg(I).variable();
    }), B == null && (this.epsilon = v.backend.epsilon());
  }
  applyGradients(A) {
    const g = Array.isArray(A) ? A.map((I) => I.name) : Object.keys(A);
    IA(() => {
      const I = tg(1, this.accBeta1), B = tg(1, this.accBeta2);
      g.forEach((Q, E) => {
        const i = v.registeredVariables[Q];
        this.accumulatedFirstMoment[E] == null && (this.accumulatedFirstMoment[E] = { originalName: `${Q}/m`, variable: IA(() => Lg(i).variable(!1)) }), this.accumulatedSecondMoment[E] == null && (this.accumulatedSecondMoment[E] = { originalName: `${Q}/v`, variable: IA(() => Lg(i).variable(!1)) });
        const o = Array.isArray(A) ? A[E].tensor : A[Q];
        if (o == null)
          return;
        const t = this.accumulatedFirstMoment[E].variable, e = this.accumulatedSecondMoment[E].variable, s = kA(z(t, this.beta1), z(o, 1 - this.beta1)), a = kA(z(e, this.beta2), z(aI(o), 1 - this.beta2)), r = Cg(s, I), h = Cg(a, B);
        t.assign(s), e.assign(a);
        const w = kA(z(Cg(r, kA(eC(h), this.epsilon)), -this.learningRate), i);
        i.assign(w);
      }), this.accBeta1.assign(z(this.accBeta1, this.beta1)), this.accBeta2.assign(z(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Ug(this.accumulatedFirstMoment.map((A) => A.variable)), this.accumulatedSecondMoment != null && Ug(this.accumulatedSecondMoment.map((A) => A.variable));
  }
  async getWeights() {
    const A = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(A.map((g) => ({ name: g.originalName, tensor: g.variable })));
  }
  async setWeights(A) {
    A = await this.extractIterations(A), IA(() => {
      this.accBeta1.assign(jE(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(jE(this.beta2, this.iterations_ + 1));
    });
    const g = A.length / 2;
    this.accumulatedFirstMoment = A.slice(0, g).map((I) => ({ originalName: I.name, variable: I.tensor.variable(!1) })), this.accumulatedSecondMoment = A.slice(g, 2 * g).map((I) => ({ originalName: I.name, variable: I.tensor.variable(!1) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }
  static fromConfig(A, g) {
    return new A(g.learningRate, g.beta1, g.beta2, g.epsilon);
  }
}
class Qy extends RQ {
  static get className() {
    return "Adamax";
  }
  constructor(A, g, I, B = null, Q = 0) {
    super(), this.learningRate = A, this.beta1 = g, this.beta2 = I, this.epsilon = B, this.decay = Q, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], IA(() => {
      this.iteration = Pg(0).variable(), this.accBeta1 = Pg(g).variable();
    }), B == null && (this.epsilon = v.backend.epsilon());
  }
  applyGradients(A) {
    const g = Array.isArray(A) ? A.map((I) => I.name) : Object.keys(A);
    IA(() => {
      const I = tg(1, this.accBeta1), B = Cg(-this.learningRate, kA(z(this.iteration, this.decay), 1));
      g.forEach((Q, E) => {
        const i = v.registeredVariables[Q];
        this.accumulatedFirstMoment[E] == null && (this.accumulatedFirstMoment[E] = { originalName: `${Q}/m`, variable: Lg(i).variable(!1) }), this.accumulatedWeightedInfNorm[E] == null && (this.accumulatedWeightedInfNorm[E] = { originalName: `${Q}/v`, variable: Lg(i).variable(!1) });
        const o = Array.isArray(A) ? A[E].tensor : A[Q];
        if (o == null)
          return;
        const t = this.accumulatedFirstMoment[E].variable, e = this.accumulatedWeightedInfNorm[E].variable, s = kA(z(t, this.beta1), z(o, 1 - this.beta1)), a = z(e, this.beta2), r = EC(o), h = sQ(a, r);
        t.assign(s), e.assign(h);
        const w = kA(z(Cg(B, I), Cg(s, kA(h, this.epsilon))), i);
        i.assign(w);
      }), this.iteration.assign(kA(this.iteration, 1)), this.accBeta1.assign(z(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Ug(this.accumulatedFirstMoment.map((A) => A.variable)), this.accumulatedWeightedInfNorm != null && Ug(this.accumulatedWeightedInfNorm.map((A) => A.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(A) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }
  static fromConfig(A, g) {
    return new A(g.learningRate, g.beta1, g.beta2, g.epsilon, g.decay);
  }
}
class fh extends RQ {
  static get className() {
    return "SGD";
  }
  constructor(A) {
    super(), this.learningRate = A, this.setLearningRate(A);
  }
  applyGradients(A) {
    (Array.isArray(A) ? A.map((g) => g.name) : Object.keys(A)).forEach((g, I) => {
      const B = Array.isArray(A) ? A[I].tensor : A[g];
      if (B == null)
        return;
      const Q = v.registeredVariables[g];
      IA(() => {
        const E = kA(z(this.c, B), Q);
        Q.assign(E);
      });
    }), this.incrementIterations();
  }
  setLearningRate(A) {
    this.learningRate = A, this.c != null && this.c.dispose(), this.c = JC(Pg(-A));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(A) {
    if ((A = await this.extractIterations(A)).length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(A, g) {
    return new A(g.learningRate);
  }
}
class Ey extends fh {
  static get className() {
    return "Momentum";
  }
  constructor(A, g, I = !1) {
    super(A), this.learningRate = A, this.momentum = g, this.useNesterov = I, this.accumulations = [], this.m = Pg(this.momentum);
  }
  applyGradients(A) {
    (Array.isArray(A) ? A.map((g) => g.name) : Object.keys(A)).forEach((g, I) => {
      const B = v.registeredVariables[g];
      this.accumulations[I] == null && (this.accumulations[I] = { originalName: `${g}/momentum`, variable: IA(() => Lg(B).variable(!1)) });
      const Q = this.accumulations[I].variable, E = Array.isArray(A) ? A[I].tensor : A[g];
      E != null && IA(() => {
        let i;
        const o = kA(z(this.m, Q), E);
        i = this.useNesterov ? kA(z(this.c, kA(E, z(o, this.m))), B) : kA(z(this.c, o), B), Q.assign(o), B.assign(i);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Ug(this.accumulations.map((A) => A.variable));
  }
  setMomentum(A) {
    this.momentum = A;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((A) => ({ name: A.originalName, tensor: A.variable })));
  }
  async setWeights(A) {
    A = await this.extractIterations(A), this.accumulations = A.map((g) => ({ originalName: g.name, variable: g.tensor.variable(!1) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }
  static fromConfig(A, g) {
    return new A(g.learningRate, g.momentum, g.useNesterov);
  }
}
class iy extends RQ {
  static get className() {
    return "RMSProp";
  }
  constructor(A, g = 0.9, I = 0, B = null, Q = !1) {
    if (super(), this.learningRate = A, this.decay = g, this.momentum = I, this.epsilon = B, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = Q, B == null && (this.epsilon = v.backend.epsilon()), A == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(A) {
    (Array.isArray(A) ? A.map((g) => g.name) : Object.keys(A)).forEach((g, I) => {
      const B = v.registeredVariables[g], Q = !1;
      this.accumulatedMeanSquares[I] == null && (this.accumulatedMeanSquares[I] = { originalName: `${g}/rms`, variable: IA(() => Lg(B).variable(Q)) }), this.accumulatedMoments[I] == null && (this.accumulatedMoments[I] = { originalName: `${g}/momentum`, variable: IA(() => Lg(B).variable(Q)) }), this.accumulatedMeanGrads[I] == null && this.centered && (this.accumulatedMeanGrads[I] = { originalName: `${g}/mg`, variable: IA(() => Lg(B).variable(Q)) });
      const E = Array.isArray(A) ? A[I].tensor : A[g];
      if (E == null)
        return;
      const i = this.accumulatedMeanSquares[I].variable, o = this.accumulatedMoments[I].variable;
      IA(() => {
        const t = kA(z(i, this.decay), z(aI(E), 1 - this.decay));
        if (this.centered) {
          const e = this.accumulatedMeanGrads[I].variable, s = kA(z(e, this.decay), z(E, 1 - this.decay)), a = Cg(z(E, this.learningRate), eC(tg(t, kA(aI(s), this.epsilon)))), r = kA(z(o, this.momentum), a);
          i.assign(t), e.assign(s), o.assign(r);
          const h = tg(B, r);
          B.assign(h);
        } else {
          const e = kA(z(i, this.decay), z(aI(E), 1 - this.decay)), s = kA(z(o, this.momentum), Cg(z(E, this.learningRate), eC(kA(e, this.epsilon))));
          i.assign(e), o.assign(s);
          const a = tg(B, s);
          B.assign(a);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Ug(this.accumulatedMeanSquares.map((A) => A.variable)), this.accumulatedMeanGrads != null && this.centered && Ug(this.accumulatedMeanGrads.map((A) => A.variable)), this.accumulatedMoments != null && Ug(this.accumulatedMoments.map((A) => A.variable));
  }
  async getWeights() {
    const A = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && A.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(A.map((g) => ({ name: g.originalName, tensor: g.variable })));
  }
  async setWeights(A) {
    A = await this.extractIterations(A);
    const g = this.centered ? A.length / 3 : A.length / 2, I = !1;
    this.accumulatedMeanSquares = A.slice(0, g).map((B) => ({ originalName: B.name, variable: B.tensor.variable(I) })), this.accumulatedMoments = A.slice(g, 2 * g).map((B) => ({ originalName: B.name, variable: B.tensor.variable(I) })), this.centered && (this.accumulatedMeanGrads = A.slice(2 * g, 3 * g).map((B) => ({ originalName: B.name, variable: B.tensor.variable(I) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }
  static fromConfig(A, g) {
    return new A(g.learningRate, g.decay, g.momentum, g.epsilon, g.centered);
  }
}
const _u = [Iy, Cy, By, Qy, Ey, iy, fh];
let YQ;
const Ak = gA({ fromPixels_: function(C, A = 3) {
  if (A > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (C == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let g = !1, I = !1, B = !1, Q = !1, E = !1, i = !1;
  if (C.data instanceof Uint8Array)
    g = !0;
  else if (typeof ImageData < "u" && C instanceof ImageData)
    I = !0;
  else if (typeof HTMLVideoElement < "u" && C instanceof HTMLVideoElement)
    B = !0;
  else if (typeof HTMLImageElement < "u" && C instanceof HTMLImageElement)
    Q = !0;
  else if (C.getContext != null)
    E = !0;
  else {
    if (!(typeof ImageBitmap < "u" && C instanceof ImageBitmap))
      throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${C.constructor.name}`);
    i = !0;
  }
  if (dn(Gn, v.backendName) != null) {
    const a = { pixels: C }, r = { numChannels: A };
    return v.runKernel(Gn, a, r);
  }
  const [o, t] = B ? [C.videoWidth, C.videoHeight] : [C.width, C.height];
  let e, s;
  if (E)
    e = C.getContext("2d").getImageData(0, 0, o, t).data;
  else if (I || g)
    e = C.data;
  else if (Q || B || i) {
    if (YQ == null)
      if (typeof document > "u") {
        if (typeof OffscreenCanvas > "u" || typeof OffscreenCanvasRenderingContext2D > "u")
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
        YQ = new OffscreenCanvas(1, 1).getContext("2d");
      } else
        YQ = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 });
    YQ.canvas.width = o, YQ.canvas.height = t, YQ.drawImage(C, 0, 0, o, t), e = YQ.getImageData(0, 0, o, t).data;
  }
  if (A === 4)
    s = new Int32Array(e);
  else {
    const a = o * t;
    s = new Int32Array(a * A);
    for (let r = 0; r < a; r++)
      for (let h = 0; h < A; ++h)
        s[r * A + h] = e[4 * r + h];
  }
  return function(a, r, h) {
    if (cr(a), r != null && r.length !== 3)
      throw new Error("tensor3d() requires shape to have three numbers");
    const w = Ct(a, h);
    if (w.length !== 3 && w.length !== 1)
      throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
    if (w.length === 1 && r == null)
      throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
    return Bt(a, r, w, h);
  }(s, [t, o, A], "int32");
} });
function Lh(C, A) {
  const g = C.shape.length, I = A.shape.length;
  if (g < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${g}.`);
  if (I < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${I}.`);
  if (A.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${A.dtype}.`);
  if (A.shape[I - 1] > g)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${A.shape[I - 1]} vs. ${g}`);
  if (cA(C.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${C.shape}.`);
  const B = A.shape, Q = B[B.length - 1];
  let E = 1;
  for (let s = 0; s < B.length - 1; ++s)
    E *= B[s];
  const i = C.shape, o = B.slice();
  o.pop();
  let t = 1;
  for (let s = Q; s < g; ++s)
    t *= i[s], o.push(i[s]);
  const e = [...zA(C.shape).map((s) => s / t), 1].slice(0, Q);
  return [o, E, t, e];
}
const Ka = -2, gk = -1;
function mh(C, A, g) {
  const I = C.shape.length;
  f(I === A.length, () => `Error in slice${I}D: Length of begin ${A} must match the rank of the array (${I}).`), f(I === g.length, () => `Error in slice${I}D: Length of size ${g} must match the rank of the array (${I}).`);
  for (let B = 0; B < I; ++B)
    f(A[B] + g[B] <= C.shape[B], () => `Error in slice${I}D: begin[${B}] + size[${B}] (${A[B] + g[B]}) would overflow input.shape[${B}] (${C.shape[B]})`);
}
function bh(C, A, g) {
  const I = [];
  for (let B = 0; B < C.length; B++)
    I[B] = Math.ceil((A[B] - C[B]) / g[B]);
  return I;
}
function rc(C, A, g, I) {
  const B = [...C];
  for (let Q = B.length; Q < I.length; Q++)
    B.push(1);
  for (let Q = 0; Q < g; Q++)
    Q === 0 ? B[A] = 1 : (B.splice(A, 0, 1), B.pop());
  return B;
}
function oy(C, A, g) {
  return g <= C ? g : g - (A - 1);
}
function ty(C, A) {
  const g = [];
  for (let I = 0; I < C; I++)
    g.push(A + I);
  return g;
}
function hc(C, A, g, I, B) {
  const Q = [...B], E = ty(g, A);
  for (let i = 0; i < Q.length; i++)
    if (E.indexOf(i) > -1)
      Q[i] = 0;
    else {
      const o = oy(A, g, i);
      let t = I[o];
      C & 1 << o && (t = 0), Q[i] = t;
    }
  return Q;
}
function Dc(C, A, g, I, B) {
  const Q = [...B], E = ty(g, A);
  for (let i = 0; i < Q.length; i++)
    if (E.indexOf(i) > -1)
      Q[i] = Number.MAX_SAFE_INTEGER;
    else {
      const o = oy(A, g, i);
      let t = I[o];
      C & 1 << o && (t = Number.MAX_SAFE_INTEGER), Q[i] = t;
    }
  for (let i = 0; i < Q.length; i++) {
    const o = B[i];
    Q[i] < 0 && (Q[i] += o), Q[i] = XQ(0, Q[i], B[i]);
  }
  return Q;
}
function cc(C, A, g) {
  let I = C[A];
  return (g & 1 << A || I == null) && (I = 1), I;
}
function wc(C, A, g, I, B, Q) {
  let E = A[B];
  const i = g[B] || 1;
  (C & 1 << B || Q & 1 << B || E == null) && (E = i > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
  const o = I[B];
  return E < 0 && (E += o), E = XQ(0, E, o - 1), E;
}
function lc(C, A, g, I, B, Q) {
  let E = A[B];
  const i = g[B] || 1;
  (C & 1 << B || Q & 1 << B || E == null) && (E = i > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
  const o = I[B];
  return E < 0 && (E += o), E = i > 0 ? XQ(0, E, o) : XQ(-1, E, o - 1), E;
}
function Hh(C, A, g) {
  let I = g.length;
  for (let B = 0; B < g.length; B++)
    if (g[B] > 1) {
      I = B;
      break;
    }
  for (let B = I + 1; B < g.length; B++)
    if (A[B] > 0 || g[B] !== C[B])
      return !1;
  return !0;
}
function xh(C, A) {
  let g = C.length > 0 ? C[C.length - 1] : 1;
  for (let I = 0; I < C.length - 1; I++)
    g += C[I] * A[I];
  return g;
}
function Ps(C, A, g) {
  let I;
  const B = C.shape.length;
  let Q;
  return I = typeof A == "number" ? [A, ...new Array(B - 1).fill(0)] : A.length < B ? A.concat(new Array(B - A.length).fill(0)) : A.slice(), I.forEach((E) => {
    f(E !== -1, () => "slice() does not support negative begin indexing.");
  }), Q = g == null ? new Array(B).fill(-1) : typeof g == "number" ? [g, ...new Array(B - 1).fill(-1)] : g.length < B ? g.concat(new Array(B - g.length).fill(-1)) : g, Q = Q.map((E, i) => E >= 0 ? E : (f(E === -1, () => `Negative size values should be exactly -1 but got ${E} for the slice() size at index ${i}.`), C.shape[i] - I[i])), [I, Q];
}
function qh(C, A, g, I, B, Q, E, i, o) {
  let t;
  if (I == null ? (t = new Array(A.length), t.fill(1)) : t = I, E != null && (E & E - 1) != 0)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let e = !1;
  const s = { dims: t.length, numAddAxisAfterEllipsis: 0, begin: A.slice(), end: g.slice(), strides: t.slice(), beginMask: B, endMask: Q, ellipsisMask: E, newAxisMask: i, shrinkAxisMask: o };
  for (let l = 0; l < s.dims; l++)
    e && 1 << l & i && s.numAddAxisAfterEllipsis++, 1 << l & E && (e = !0);
  e || (s.ellipsisMask |= 1 << s.dims, s.dims++);
  const a = { dims: C.length, beginMask: 0, endMask: 0, beginValid: !1, endValid: !1 };
  (function(l, d) {
    d.beginMask = 0, d.endMask = 0, d.shrinkAxisMask = 0;
    let N = 0;
    d.beginValid = l.begin != null, d.endValid = l.end != null, d.begin = new Array(d.dims), d.end = new Array(d.dims), d.strides = new Array(d.dims), d.finalShapeGatherIndices = [], d.finalShapeGatherIndicesSparse = [], d.inputShapeGatherIndicesSparse = new Array(d.dims);
    for (let k = 0; k < l.dims; k++)
      if (1 << k & l.ellipsisMask) {
        const p = Math.min(d.dims - (l.dims - k) + 1 + l.numAddAxisAfterEllipsis, d.dims);
        for (; N < p; N++)
          d.begin[N] = 0, d.end[N] = 0, d.strides[N] = 1, d.beginMask |= 1 << N, d.endMask |= 1 << N, d.finalShapeGatherIndices.push(N), d.finalShapeGatherIndicesSparse.push(-1), d.inputShapeGatherIndicesSparse[N] = k;
      } else if (1 << k & l.newAxisMask)
        d.finalShapeGatherIndices.push(Ka), d.finalShapeGatherIndicesSparse.push(-1);
      else {
        if (N === d.begin.length)
          throw Error(`Index out of range using input dim ${N}; input has only ${d.dims} dims, ${d.begin.length}.`);
        l.begin != null && (d.begin[N] = l.begin[k]), l.end != null && (d.end[N] = l.end[k]), d.strides[N] = l.strides[k], l.beginMask & 1 << k && (d.beginMask |= 1 << N), l.endMask & 1 << k && (d.endMask |= 1 << N), l.shrinkAxisMask & 1 << k ? (d.finalShapeGatherIndices.push(gk), d.finalShapeGatherIndicesSparse.push(-1), d.shrinkAxisMask |= 1 << N) : (d.finalShapeGatherIndices.push(N), d.finalShapeGatherIndicesSparse.push(k)), d.inputShapeGatherIndicesSparse[N] = k, N++;
      }
  })(s, a);
  let r = !0, h = !0, w = !0;
  const G = [], D = [];
  for (let l = 0; l < C.length; ++l) {
    if (a.strides[l] === 0)
      throw Error(`strides[${l}] must be non-zero`);
    const d = !!(a.shrinkAxisMask & 1 << l), N = C[l];
    if (N === -1) {
      G.push(d ? 1 : -1);
      continue;
    }
    const k = [a.beginMask & 1 << l, a.endMask & 1 << l], p = [a.strides[l] > 0 ? 0 : -1, a.strides[l] > 0 ? N : N - 1];
    if (d && a.strides[l] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    w = w && a.strides[l] === 1;
    const Y = !!(a.beginMask & 1 << l && a.endMask & 1 << l);
    if (a.beginValid && a.endValid) {
      if (d) {
        const x = a.begin[l] < 0 ? N + a.begin[l] : a.begin[l];
        if (a.begin[l] = x, a.end[l] = a.begin[l] + 1, x < 0 || x >= N)
          throw Error(`slice index ${a.begin[l]} of dimension ${l} out of bounds.`);
      } else
        a.begin[l] = Gc(a.begin[l], 0, a.strides[l], N, k, p), a.end[l] = Gc(a.end[l], 1, a.strides[l], N, k, p);
      const m = a.strides[l] === 1 && a.begin[l] === 0 && a.end[l] === N;
      r = r && m, h = h && (l === 0 && a.strides[l] === 1 || m);
    } else
      r = r && a.strides[l] === 1 && Y, h = h && (l === 0 && a.strides[l] === 1 || Y);
    let M, L = !1;
    if (a.beginValid && a.endValid ? (M = a.end[l] - a.begin[l], L = !0) : d ? (M = 1, L = !0) : Y && N >= 0 && (M = a.strides[l] < 0 ? -N : N, L = !0), L) {
      let m;
      m = M === 0 || M < 0 != a.strides[l] < 0 ? 0 : Math.trunc(M / a.strides[l]) + (M % a.strides[l] != 0 ? 1 : 0), G.push(m);
    } else
      G.push(-1);
  }
  for (let l = 0; l < a.finalShapeGatherIndices.length; ++l) {
    const d = a.finalShapeGatherIndices[l];
    d >= 0 ? D.push(G[d]) : d === Ka && D.push(1);
  }
  return { finalShapeSparse: D.filter((l, d) => a.finalShapeGatherIndices[d] !== Ka), finalShape: D, isIdentity: r, sliceDim0: h, isSimpleSlice: w, begin: a.begin, end: a.end, strides: a.strides };
}
function Gc(C, A, g, I, B, Q) {
  if (B[A])
    return g > 0 ? Q[A] : Q[A + 1 & 1];
  {
    const E = C < 0 ? I + C : C;
    return E < Q[0] ? Q[0] : E > Q[1] ? Q[1] : E;
  }
}
const Ik = Object.freeze(Object.defineProperty({ __proto__: null, assertParamsValid: mh, computeFlatOffset: xh, computeOutShape: bh, getNormalizedAxes: function(C, A, g, I, B, Q, E, i, o) {
  const t = C.length;
  let e = new Array(t), s = new Array(t), a = new Array(t);
  if (A.length && g > 0) {
    const r = A[0], h = g + 1;
    e = hc(E, r, h, I, C), s = Dc(i, r, h, B, C), a = rc(Q, r, h, C);
  } else
    for (let r = 0; r < t; r++)
      e[r] = wc(E, I, Q, C, r, o), s[r] = lc(i, B, Q, C, r, o), a[r] = cc(Q, r, o);
  return { begin: e, end: s, strides: a };
}, isSliceContinous: Hh, maskToAxes: function(C) {
  const A = [];
  let g = 0;
  for (; C > 0; )
    1 & C && A.push(g), C /= 2, g++;
  return A;
}, parseSliceParams: Ps, sliceInfo: qh, startForAxis: wc, startIndicesWithElidedDims: hc, stopForAxis: lc, stopIndicesWithElidedDims: Dc, stridesForAxis: cc, stridesWithElidedDims: rc }, Symbol.toStringTag, { value: "Module" })), FE = class {
  static sgd(C) {
    return new fh(C);
  }
  static momentum(C, A, g = !1) {
    return new Ey(C, A, g);
  }
  static rmsprop(C, A = 0.9, g = 0, I = null, B = !1) {
    return new iy(C, A, g, I, B);
  }
  static adam(C = 1e-3, A = 0.9, g = 0.999, I = null) {
    return new By(C, A, g, I);
  }
  static adadelta(C = 1e-3, A = 0.95, g = null) {
    return new Iy(C, A, g);
  }
  static adamax(C = 2e-3, A = 0.9, g = 0.999, I = null, B = 0) {
    return new Qy(C, A, g, I, B);
  }
  static adagrad(C, A = 0.1) {
    return new Cy(C, A);
  }
}, Ck = typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (C) => C();
function zs() {
  return new Promise((C) => Ck(() => C()));
}
function Vh(C, A) {
  const g = C[0].length;
  C.forEach((B, Q) => {
    f(B.length === g, () => `Error in concat${g}D: rank of tensors[${Q}] must be the same as the rank of the rest (${g})`);
  }), f(A >= 0 && A < g, () => `Error in concat${g}D: axis must be between 0 and ${g - 1}.`);
  const I = C[0];
  C.forEach((B, Q) => {
    for (let E = 0; E < g; E++)
      f(E === A || B[E] === I[E], () => `Error in concat${g}D: Shape of tensors[${Q}] (${B}) does not match the shape of the rest (${I}) along the non-concatenated axis ${Q}.`);
  });
}
function SB(C, A) {
  const g = C[0].slice();
  for (let I = 1; I < C.length; I++)
    g[A] += C[I][A];
  return g;
}
var tB;
function ey(C, A, g) {
  let I = new Array();
  if (g == null && A == null)
    return I;
  if (A == null)
    for (; I.length < C + g.length; )
      I.push(-1);
  else
    I = A.slice();
  if (g == null)
    return I;
  if (C + g.length !== I.length)
    throw new Error(`rt input.shape and shape=${A} are incompatible: rt input.rank = ${C + g.length}, but shape.rank = ${I.length}`);
  for (let B = 1; B < g.length; ++B) {
    const Q = g[B], E = I[I.length - g.length + B], i = I[E];
    if (Q >= 0)
      if (i >= 0) {
        if (i !== Q)
          throw new Error(`rt input.shape and shape=${A} are incompatible: rt input.shape[${B + C}] = ${Q} but shape[${B + C}] = ${i}`);
      } else
        I[E] = Q;
  }
  return I;
}
function sy(C) {
  const A = { FIRST_DIM_SIZE: tB.FIRST_DIM_SIZE, VALUE_ROWIDS: tB.VALUE_ROWIDS, ROW_LENGTHS: tB.ROW_LENGTHS, ROW_SPLITS: tB.ROW_SPLITS, ROW_LIMITS: tB.ROW_LIMITS, ROW_STARTS: tB.ROW_STARTS }, g = [];
  for (const I of C) {
    if (!(I in A))
      break;
    g.push(A[I]);
  }
  return g;
}
function ay(C) {
  return C.length === 0 ? 0 : C[0] === tB.FIRST_DIM_SIZE ? C.length - 1 : C.length;
}
function ny(C, A) {
  if (C == null || A == null)
    return;
  const g = C.length, I = A.length;
  if (g >= I)
    throw new Error(`defaultValue.shape=${C} and ragged tensor flatValues.shape=${A}, are incompatible: defaultValue.rank = ${g} must be less than ragged tensor input flatValues.rank = ${I})`);
  for (let B = 0; B < Math.min(g, I - 1); ++B) {
    const Q = C[B], E = A[B + 1];
    if (Q >= 0 && E >= 0 && Q !== 1 && Q !== E)
      throw new Error(`defaultValue.shape=${C}, and ragged tensor input flatValues.shape=${A} are incompatible: defaultValue.shape[${B - C.length}] = ${Q} but ragged tensor input.flatValues.shape[${B - C.length}] = ${E}`);
  }
}
(function(C) {
  C[C.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", C[C.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", C[C.ROW_LENGTHS = 2] = "ROW_LENGTHS", C[C.ROW_SPLITS = 3] = "ROW_SPLITS", C[C.ROW_LIMITS = 4] = "ROW_LIMITS", C[C.ROW_STARTS = 5] = "ROW_STARTS";
})(tB || (tB = {}));
const Wh = 30;
function js(C) {
  return C <= Wh ? C : hn(C, Math.floor(Math.sqrt(C)));
}
function Th(C, A, g) {
  return [g * (typeof C == "number" ? C : C[0]), A * (typeof C == "number" ? C : C[1])];
}
function tt(C, A, g, I = !0) {
  let B = [];
  if (I)
    B = B.concat(A.slice(0)), B.push(C[0] / g), B = B.concat(C.slice(1));
  else {
    B = B.concat(C[0]);
    const Q = A.length;
    for (let E = 0; E < Q; ++E)
      B = B.concat([C[E + 1] / A[E], A[E]]);
    B = B.concat(C.slice(Q + 1));
  }
  return B;
}
function et(C, A, g = !0) {
  const I = [];
  if (g) {
    I.push(A);
    for (let B = A + 1; B < C; ++B)
      B <= 2 * A ? (I.push(B), I.push(B - (A + 1))) : I.push(B);
  } else {
    const B = [], Q = [];
    for (let E = 1; E < C; ++E)
      E >= 2 * A + 1 || E % 2 == 1 ? Q.push(E) : B.push(E);
    I.push(...B), I.push(0), I.push(...Q);
  }
  return I;
}
function st(C, A, g, I = !0) {
  const B = [];
  I ? B.push(C[0] / g) : B.push(C[0] * g);
  for (let Q = 1; Q < C.length; ++Q)
    Q <= A.length ? I ? B.push(A[Q - 1] * C[Q]) : B.push(C[Q] / A[Q - 1]) : B.push(C[Q]);
  return B;
}
function Zh(C, A) {
  const g = [0];
  for (let I = 0; I < A; ++I)
    g.push(C[I][0]);
  return g;
}
function Xh(C, A, g) {
  const I = C.slice(0, 1);
  for (let B = 0; B < g; ++B)
    I.push(C[B + 1] - A[B][0] - A[B][1]);
  return I;
}
const ry = 1.7580993408473768, Oh = 1.0507009873554805, hy = 0.3275911, Dy = 0.254829592, cy = -0.284496736, wy = 1.421413741, ly = -1.453152027, Gy = 1.061405429;
function OB(C, A) {
  if (C.length !== A.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${C.length}, imag: ${A.length}.`);
  const g = new Float32Array(2 * C.length);
  for (let I = 0; I < g.length; I += 2)
    g[I] = C[I / 2], g[I + 1] = A[I / 2];
  return g;
}
function yy(C) {
  const A = new Float32Array(C.length / 2), g = new Float32Array(C.length / 2);
  for (let I = 0; I < C.length; I += 2)
    A[I / 2] = C[I], g[I / 2] = C[I + 1];
  return { real: A, imag: g };
}
function dy(C) {
  const A = Math.ceil(C.length / 4), g = new Float32Array(A), I = new Float32Array(A);
  for (let B = 0; B < C.length; B += 4)
    g[Math.floor(B / 4)] = C[B], I[Math.floor(B / 4)] = C[B + 1];
  return { real: g, imag: I };
}
function Fy(C) {
  const A = Math.floor(C.length / 4), g = new Float32Array(A), I = new Float32Array(A);
  for (let B = 2; B < C.length; B += 4)
    g[Math.floor(B / 4)] = C[B], I[Math.floor(B / 4)] = C[B + 1];
  return { real: g, imag: I };
}
function vh(C, A) {
  return { real: C[2 * A], imag: C[2 * A + 1] };
}
function Ry(C, A, g, I) {
  C[2 * I] = A, C[2 * I + 1] = g;
}
function Ny(C, A) {
  const g = new Float32Array(C / 2), I = new Float32Array(C / 2);
  for (let B = 0; B < Math.ceil(C / 2); B++) {
    const Q = (A ? 2 : -2) * Math.PI * (B / C);
    g[B] = Math.cos(Q), I[B] = Math.sin(Q);
  }
  return { real: g, imag: I };
}
function uy(C, A, g) {
  const I = (g ? 2 : -2) * Math.PI * (C / A);
  return { real: Math.cos(I), imag: Math.sin(I) };
}
const Sa = "->", Bk = /->/g, yc = ",", dc = "...";
function Ph(C, A) {
  const g = ((C = C.replace(/\s/g, "")).length - C.replace(Bk, "").length) / Sa.length;
  if (g < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (g > 1)
    throw new Error(`Equation must contain exactly one arrow ("${Sa}").`);
  const [I, B] = C.split(Sa);
  f(I.indexOf(dc) === -1, () => `The ellipsis notation ("${dc}") is not supported yet.`);
  const Q = I.split(yc), E = Q.length;
  if (A !== E)
    throw new Error(`Expected ${E} input tensors, received ${A}`);
  if (E > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const i = [];
  for (let s = 0; s < B.length; ++s) {
    const a = B[s];
    if (!Q.some((r) => r.indexOf(a) !== -1))
      throw new Error(`Output subscripts contain the label ${a} not present in the input subscripts.`);
    i.indexOf(a) === -1 && i.push(a);
  }
  for (let s = 0; s < I.length; ++s) {
    const a = I[s];
    i.indexOf(a) === -1 && a !== yc && i.push(a);
  }
  const o = new Array(Q.length);
  for (let s = 0; s < E; ++s) {
    if (new Set(Q[s].split("")).size !== Q[s].length)
      throw new Error(`Found duplicate axes in input component ${Q[s]}. Support for duplicate axes in input is not implemented yet.`);
    o[s] = [];
    for (let a = 0; a < Q[s].length; ++a)
      o[s].push(i.indexOf(Q[s][a]));
  }
  const t = i.length, e = [];
  for (let s = B.length; s < t; ++s)
    e.push(s);
  return { allDims: i, summedDims: e, idDims: o };
}
function zh(C, A) {
  let g = new Array(C);
  g.fill(-1);
  for (let B = 0; B < A.length; ++B)
    g[A[B]] = B;
  const I = [];
  for (let B = 0; B < C; ++B)
    g[B] === -1 && I.push(B);
  return g = g.filter((B) => B !== -1), { permutationIndices: g, expandDims: I };
}
function jh(C, A, g) {
  const I = new Array(C);
  for (let B = 0; B < g.length; ++B) {
    const Q = g[B].shape;
    for (let E = 0; E < A[B].length; ++E)
      I[A[B][E]] === void 0 ? I[A[B][E]] = Q[E] : f(I[A[B][E]] === Q[E], () => `Expected dimension ${I[A[B][E]]} at axis ${E} of input shaped ${JSON.stringify(Q)}, but got dimension ${Q[E]}`);
  }
}
function $h(C, A) {
  const g = C, I = [];
  let B = 0;
  C.length === 0 && g.push(-1), B = C.length + 1;
  for (let E = 0; E < B; ++E)
    I.push([]);
  const Q = [];
  for (let E = 0; E < g.length; ++E) {
    const i = Qk(A, g[E]);
    for (const o of i)
      Q.indexOf(o) === -1 && (I[E].push(o), Q.push(o));
  }
  return { path: g, steps: I };
}
function _h(C) {
  return C.every((A, g) => A === g);
}
function Qk(C, A) {
  const g = [];
  for (let I = 0; I < C.length; ++I)
    C[I].length !== 0 && C[I].indexOf(A) === -1 && A !== -1 || g.push(I);
  return g;
}
function AD(C, A, g = 0) {
  let I = [];
  if (typeof A == "number")
    f(C.shape[g] % A == 0, () => "Number of splits must evenly divide the axis."), I = new Array(A).fill(C.shape[g] / A);
  else {
    const B = A.reduce((E, i) => (i === -1 && (E += 1), E), 0);
    f(B <= 1, () => "There should be only one negative value in split array.");
    const Q = A.indexOf(-1);
    if (Q !== -1) {
      const E = A.reduce((i, o) => o > 0 ? i + o : i);
      A[Q] = C.shape[g] - E;
    }
    f(C.shape[g] === A.reduce((E, i) => E + i), () => "The sum of sizes must match the size of the axis dimension."), I = A;
  }
  return I;
}
function ky(C) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${C}`;
}
function Ky(C, A) {
  return `indices(${C}, 0) is invalid: ${A} < 0`;
}
function Sy(C, A, g) {
  return `indices(${C}, 0) is invalid: ${A} >= ${g}`;
}
function py(C, A) {
  return `only one output dimension may be -1, not both ${C} and ${A}`;
}
function My(C, A) {
  return `size ${C} must be non-negative, not ${A}`;
}
function Ek() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function Uy(C, A) {
  return `Input to reshape is a SparseTensor with ${cA(C)}
  dense values, but the requested shape requires a multiple of ${cA(A)}. inputShape=${C} outputShape= ${A}`;
}
function Yy(C, A) {
  return `Input to reshape is a tensor with ${cA(C)} dense values, but the requested shape has ${cA(A)}. inputShape=${C} outputShape=${A}`;
}
function ik() {
  return "segment ids must be >= 0";
}
function ok() {
  return "segment ids are not increasing";
}
function Jy(C, A) {
  return `Segment id ${C} out of range [0, ${A}), possibly because segmentIds input is not sorted.`;
}
function fy(C, A, g) {
  return `Bad: indices[${C}] == ${A} out of range [0, ${g})`;
}
function Ly(C, A) {
  let g, I = !1;
  for (C <= Wh ? (g = C, I = !0) : g = hn(C, Math.floor(Math.sqrt(C))); !I; )
    g > A || g === C ? I = !0 : g = hn(C, g + 1);
  return g;
}
function my(C, A, g) {
  const I = [], B = C.length;
  for (let Q = 0; Q < B; Q++)
    Q !== A ? I.push(C[Q]) : I.push(g);
  return I;
}
function gD(C, A, g, I) {
  const B = A.shape.length, Q = C.shape.length;
  if (I !== 0 && (I < -B || I > B))
    throw new Error(`Expect batchDims in the range of [-${B}, ${B}], but got ${I}`);
  if (I < 0 && (I += B), I > Q)
    throw new Error(`batchDims (${I}) must be less than rank(x) (
    ${Q}).`);
  if (g < I)
    throw new Error(`batchDims (${I}) must be less than or equal to axis (${g}).`);
  for (let s = 0; s < I; ++s)
    if (C.shape[s] !== A.shape[s])
      throw new Error(`x.shape[${s}]: ${C.shape[s]} should be equal to indices.shape[${s}]: ${A.shape[s]}.`);
  const E = C.shape[g], i = [];
  let o = 1, t = 1, e = 1;
  for (let s = 0; s < I; ++s)
    i.push(C.shape[s]), o *= C.shape[s];
  for (let s = I; s < g; s++)
    i.push(C.shape[s]), t *= C.shape[s];
  for (let s = I; s < B; s++)
    i.push(A.shape[s]);
  for (let s = g + 1; s < Q; s++)
    i.push(C.shape[s]), e *= C.shape[s];
  return { batchSize: o, sliceSize: e, outerSize: t, dimSize: E, outputShape: i };
}
const tk = Object.freeze(Object.defineProperty({ __proto__: null, collectGatherOpShapeInfo: gD, computeOutShape: my, segOpComputeOptimalWindowSize: Ly }, Symbol.toStringTag, { value: "Module" }));
function vB(C) {
  try {
    return C.map((A) => rQ(A));
  } catch (A) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${A}`);
  }
}
function by(C) {
  return C.map((A) => eQ(A));
}
const ek = Object.freeze(Object.defineProperty({ __proto__: null, ERF_A1: Dy, ERF_A2: cy, ERF_A3: wy, ERF_A4: ly, ERF_A5: Gy, ERF_P: hy, PARALLELIZE_THRESHOLD: Wh, get RowPartitionType() {
  return tB;
}, SELU_SCALE: Oh, SELU_SCALEALPHA: ry, applyActivation: Sh, assertAndGetBroadcastShape: wg, assertAxesAreInnerMostDims: jI, assertParamsConsistent: Vh, assignToTypedArray: Ry, axesAreInnerMostDims: nh, calculateShapes: hE, checkEinsumDimSizes: jh, checkPadOnDimRoundingMode: wC, combineLocations: kG, combineRaggedTensorToTensorShapes: ey, complexWithEvenIndex: dy, complexWithOddIndex: Fy, computeConv2DInfo: zI, computeConv3DInfo: dQ, computeDefaultPad: ih, computeDilation2DInfo: Qt, computeOptimalWindowSize: js, computeOutAndReduceShapes: OI, computeOutShape: SB, computePool2DInfo: _C, computePool3DInfo: jB, convertConv2DDataFormat: $B, decodeEinsumEquation: Ph, eitherStridesOrDilationsAreOne: IC, expandShapeToKeepDim: YI, exponent: uy, exponents: Ny, fromStringArrayToUint8: by, fromUint8ToStringArray: vB, getAxesPermutation: GI, getBroadcastDims: zE, getComplexWithIndex: vh, getEinsumComputePath: $h, getEinsumPermutation: zh, getFusedBiasGradient: Kh, getFusedDyActivation: kh, getImageCenter: Th, getInnerMostAxes: KI, getPermuted: et, getRaggedRank: ay, getReductionAxes: LI, getReshaped: tt, getReshapedPermuted: st, getRowPartitionTypesHelper: sy, getSliceBeginCoords: Zh, getSliceSize: Xh, getSparseFillEmptyRowsIndicesDenseShapeMismatch: ky, getSparseFillEmptyRowsNegativeIndexErrorMessage: Ky, getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: Sy, getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: Ek, getSparseReshapeInputOutputMismatchErrorMessage: Yy, getSparseReshapeInputOutputMultipleErrorMessage: Uy, getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: py, getSparseReshapeNegativeOutputDimErrorMessage: My, getSparseSegmentReductionIndicesOutOfRangeErrorMessage: fy, getSparseSegmentReductionNegativeSegmentIdsErrorMessage: ik, getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: ok, getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: Jy, getUndoAxesPermutation: FQ, isIdentityPermutation: _h, log: function(...C) {
  aA().getBool("IS_TEST") || aA().getBool("PROD") || console.log(...C);
}, mergeRealAndImagArrays: OB, prepareAndValidate: Lh, prepareSplitSize: AD, segment_util: tk, shouldFuse: ph, slice_util: Ik, splitRealAndImagArrays: yy, stridesOrDilationsArePositive: gE, tupleValuesAreOne: AE, upcastType: NC, validateDefaultValueShape: ny, validateInput: function(C, A, g) {
  if (A.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${A.rank}.`);
  if (C.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${C.rank}.`);
  if (A.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${A.dtype}`);
  if (g.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${g}`);
  if (g.length === 0) {
    if (A.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${A.shape}`);
    if (C.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${C.shape}`);
  }
  ec(g, A, C);
}, validateUpdateShape: ec, warn: SC }, Symbol.toStringTag, { value: "Module" }));
(function() {
  for (const C of _u)
    RA(C);
})();
const Hy = { kernelName: We, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(C, Oi(bA(g, "float32"), -1)) };
} }, sk = { kernelName: io, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => {
    const I = aI(bA(g, "float32")), B = eC(tg(Pg(1), I));
    return RI(Cg(C, B));
  } };
} }, ak = { kernelName: oo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => {
    const I = eC(tg(aI(bA(g, "float32")), 1));
    return Cg(C, I);
  } };
} }, nk = { kernelName: Ei, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = wg(g.shape, I.shape);
  return { a: () => {
    let Q = C;
    const E = LI(g.shape, B);
    return E.length > 0 && (Q = $A(Q, E)), CA(Q, g.shape);
  }, b: () => {
    let Q = C;
    const E = LI(I.shape, B);
    return E.length > 0 && (Q = $A(Q, E)), CA(Q, I.shape);
  } };
} }, rk = { kernelName: yr, saveAllInputs: !0, gradFunc: (C, A) => {
  const g = {};
  return A.forEach((I, B) => {
    g[B] = () => C.clone();
  }), g;
} }, hk = { kernelName: Te, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Lg(g) };
} }, Dk = { kernelName: Ze, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Lg(g) };
} }, ck = { kernelName: to, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, eC(tg(Pg(1), aI(bA(g, "float32"))))) };
} }, wk = { kernelName: eo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => {
    const I = eC(kA(Pg(1), aI(bA(g, "float32"))));
    return Cg(C, I);
  } };
} }, lk = { kernelName: no, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = wg(g.shape, I.shape);
  return { a: () => {
    const Q = kA(aI(g), aI(I));
    let E = z(C, Cg(I, Q));
    const i = LI(g.shape, B);
    return i.length > 0 && (E = $A(E, i)), CA(E, g.shape);
  }, b: () => {
    const Q = kA(aI(g), aI(I));
    let E = RI(z(C, Cg(g, Q)));
    const i = LI(I.shape, B);
    return i.length > 0 && (E = $A(E, i)), CA(E, I.shape);
  } };
} }, Gk = { kernelName: so, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, kA(aI(bA(g, "float32")), 1)) };
} }, yk = { kernelName: ao, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, tg(Pg(1), aI(bA(g, "float32")))) };
} }, dk = gA({ avgPool3dGrad_: function(C, A, g, I, B, Q) {
  const E = W(C, "dy", "avgPool3dGrad"), i = W(A, "input", "avgPool3dGrad");
  let o = E, t = i, e = !1;
  i.rank === 4 && (e = !0, o = CA(E, [1, E.shape[0], E.shape[1], E.shape[2], E.shape[3]]), t = CA(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), f(o.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${o.rank}.`), f(t.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${t.rank}.`), wC("avgPool3dGrad", B, Q);
  const s = { dy: o, input: t }, a = { filterSize: g, strides: I, pad: B, dimRoundingMode: Q }, r = v.runKernel(Nr, s, a);
  return e ? CA(r, [r.shape[1], r.shape[2], r.shape[3], r.shape[4]]) : r;
} }), Fk = { kernelName: Oe, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { filterSize: B, strides: Q, pad: E, dimRoundingMode: i } = g;
  return { x: () => dk(C, I, B, Q, E, i) };
} }, Rk = gA({ avgPoolGrad_: function(C, A, g, I, B) {
  const Q = W(C, "dy", "avgPoolGrad"), E = W(A, "input", "avgPoolGrad");
  f(E.rank === Q.rank, () => `Rank of input (${E.rank}) does not match rank of dy (${Q.rank})`);
  let i = E, o = Q, t = !1;
  E.rank === 3 && (t = !0, i = CA(E, [1, E.shape[0], E.shape[1], E.shape[2]]), o = CA(Q, [1, Q.shape[0], Q.shape[1], Q.shape[2]])), f(o.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${o.rank}.`), f(i.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);
  const e = { dy: o, input: i }, s = { filterSize: g, strides: I, pad: B }, a = v.runKernel(Rr, e, s);
  return t ? CA(a, [a.shape[1], a.shape[2], a.shape[3]]) : a;
} }), Nk = { kernelName: Xe, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { filterSize: B, strides: Q, pad: E } = g;
  return { x: () => Rk(C, I, B, Q, E) };
} }, uk = { kernelName: ve, inputsToSave: ["a", "b"], gradFunc: (C, A, g) => {
  const [I, B] = A, { transposeA: Q, transposeB: E } = g;
  return Q || E ? !Q && E ? { a: () => Tg(C, B, !1, !1), b: () => Tg(C, I, !0, !1) } : Q && !E ? { a: () => Tg(B, C, !1, !0), b: () => Tg(I, C, !1, !1) } : { a: () => Tg(B, C, !0, !0), b: () => Tg(C, I, !0, !0) } : { a: () => Tg(C, B, !1, !0), b: () => Tg(I, C, !0, !1) };
} }, kk = { kernelName: Pe, gradFunc: (C, A, g) => {
  const { blockShape: I, crops: B } = g;
  return { x: () => Gh(C, I, B) };
} }, Kk = { kernelName: "BroadcastTo", gradFunc: (C, A, g) => {
  const I = g, B = I.inputShape, Q = I.shape, E = Array.from(Q);
  for (let o = B.length - 1; o >= 0; o--)
    if (B[o] === Q[o])
      E[o] = 1;
    else if (B[o] !== 1)
      throw new Error(`broadcastTo(): [${B}] cannot be broadcast to [${Q}].`);
  const i = [];
  for (let o = 0; o < E.length; o++)
    E[o] > 1 && i.push(o);
  return { x: () => $A(C, i, !0) };
} }, Sk = { kernelName: ro, gradFunc: (C) => ({ x: () => C.clone() }) }, pk = { kernelName: ho, gradFunc: (C) => ({ x: () => Lg(C) }) }, Mk = { kernelName: Do, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { clipValueMin: B, clipValueMax: Q } = g;
  return { x: () => tC(XB(nE(I, B), $E(I, Q)), C, Lg(C)) };
} }, Uk = { kernelName: ze, inputsToSave: ["x"], gradFunc: Hy.gradFunc }, Yk = { kernelName: je, saveAllInputs: !0, gradFunc: (C, A, g) => {
  const I = A.map((i) => i.shape), { axis: B } = g, Q = Kg(B, A[0].shape)[0], E = I.map((i) => i[Q]);
  return fC(C, E, Q).map((i) => () => i);
} }, Jk = { kernelName: $e, inputsToSave: ["x", "filter"], gradFunc: (C, A, g) => {
  const [I, B] = A, { dilations: Q, strides: E, pad: i, dataFormat: o } = g;
  return f(AE(Q), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${Q}'`), { x: () => sh(I.shape, C, B, E, i, o), filter: () => uh(I, C, B.shape, E, i, o) };
} }, fk = { kernelName: _e, inputsToSave: ["dy", "filter"], gradFunc: (C, A, g) => {
  const [I, B] = A, { strides: Q, pad: E, dataFormat: i, dimRoundingMode: o } = g;
  return { dy: () => IE(C, B, Q, E, i, 1, o), filter: () => uh(C, I, B.shape, Q, E, i, o) };
} }, Lk = gA({ conv3DBackpropFilter_: function(C, A, g, I, B) {
  let Q = C;
  C.rank === 4 && (Q = CA(C, [1, C.shape[0], C.shape[1], C.shape[2], C.shape[3]]));
  let E = A;
  E.rank === 4 && (E = CA(A, [1, A.shape[0], A.shape[1], A.shape[2], A.shape[3]])), f(Q.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${Q.shape}.`), f(E.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${E.shape}.`), f(g.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${g}.`), f(Q.shape[4] === g[3], () => `Error in conv3dDerFilter: depth of input ${Q.shape[4]}) must match input depth in filter (${g[3]}.`), f(E.shape[4] === g[4], () => `Error in conv3dDerFilter: depth of dy (${E.shape[4]}) must match output depth for filter (${g[4]}).`);
  const i = { x: Q, dy: E }, o = { strides: I, pad: B, filterShape: g };
  return v.runKernel(Sr, i, o);
} }), mk = { kernelName: As, inputsToSave: ["x", "filter"], gradFunc: (C, A, g) => {
  const { dilations: I, strides: B, pad: Q } = g;
  f(AE(I), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${I}'`);
  const [E, i] = A;
  return { x: () => RG(E.shape, C, i, B, Q), filter: () => Lk(E, C, i.shape, B, Q) };
} }, bk = { kernelName: co, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(RI(OG(bA(g, "float32"))), C) };
} }, Hk = { kernelName: wo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(vG(bA(g, "float32")), C) };
} }, xk = { kernelName: gs, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { axis: B, exclusive: Q, reverse: E } = g;
  return { x: () => {
    const i = GI([B], I.rank);
    let o = uG(C, B, Q, !E);
    return i != null && (o = mg(o, i)), o;
  } };
} }, qk = { kernelName: Is, inputsToSave: ["x", "filter"], gradFunc: (C, A, g) => {
  const { dilations: I, strides: B, pad: Q, dimRoundingMode: E } = g, i = I ?? [1, 1];
  f(AE(i), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);
  const [o, t] = A;
  return f(o.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${o.rank}.`), f(t.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${t.rank}.`), f(o.shape[3] === t.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${o.shape[3]}) must match the inChannels dimension in filter ${t.shape[2]}.`), f(IC(B, i), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${B} and dilations '${i}'.`), wC("depthwiseConv2d", Q, E), { x: () => Yu(o.shape, C, t, B, Q, i, E), filter: () => Uu(o, C, t.shape, B, Q, i, E) };
} }, Vk = { kernelName: Cs, inputsToSave: ["x", "filter"], gradFunc: (C, A, g) => {
  const [I, B] = A, Q = { x: I, filter: B, dy: C }, E = { x: I, filter: B, dy: C };
  return { x: () => v.runKernel(cn, Q, g), filter: () => v.runKernel(wn, E, g) };
} }, Wk = { kernelName: Go, outputsToSave: [!0], gradFunc: (C, A) => {
  const [g] = A, I = { dy: C, y: g };
  return { x: () => v.runKernel(mr, I) };
} }, Tk = { kernelName: yo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A, I = z(ZB(RI(aI(g))), 2 / Math.sqrt(Math.PI));
  return { x: () => z(C, I) };
} }, Zk = { kernelName: Fo, outputsToSave: [!0], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(C, g) };
} }, Xk = { kernelName: Qs, inputsToSave: ["input"], gradFunc: (C, A) => {
  const [g] = A;
  return { input: () => CA(C, g.shape) };
} }, Ok = { kernelName: Ro, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(C, ZB(g)) };
} }, vk = { kernelName: No, gradFunc: (C) => ({ x: () => Lg(C) }) }, Pk = { kernelName: uo, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = wg(g.shape, I.shape);
  return { a: () => {
    const Q = Cg(C, bA(I, "float32")), E = LI(g.shape, B);
    return E.length > 0 ? CA($A(Q, E), g.shape) : Q;
  }, b: () => {
    let Q = z(C, bA(g, "float32"));
    const E = LI(I.shape, B);
    E.length > 0 && (Q = CA($A(Q, E), I.shape));
    const i = aI(I);
    return RI(Cg(Q, bA(i, "float32")));
  } };
} }, zk = { kernelName: Es, inputsToSave: ["x", "mean", "variance", "scale"], gradFunc: (C, A, g) => {
  const { varianceEpsilon: I } = g, [B, Q, E, i] = A, o = i ?? Pg(1), t = LI(Q.shape, B.shape), e = [];
  if (Q.rank === 1) {
    for (let w = 0; w < B.shape.length - 1; ++w)
      e.push(B.shape[w]);
    e.push(1);
  }
  const s = tg(B, Q), a = z(C, o), r = TG(kA(E, Pg(I))), h = z(z(z(r, r), r), Pg(-0.5));
  return { x: () => Q.rank === 1 ? CA(z(z(C, sB(CA(r, [1, 1, 1, Q.shape[0]]), e)), o), B.shape) : CA(z(z(C, r), o), B.shape), mean: () => {
    let w = z(z(r, Pg(-1)), a);
    return Q.rank === 1 && (w = $A(w, t)), CA(w, Q.shape);
  }, variance: () => {
    let w = z(z(h, s), a);
    return Q.rank === 1 && (w = $A(w, t)), CA(w, Q.shape);
  }, scale: () => {
    const w = z(s, r);
    let G = z(C, w);
    return Q.rank === 1 && (G = $A(G, t)), CA(G, Q.shape);
  }, offset: () => {
    let w = C;
    return Q.rank === 1 && (w = $A(w, t)), CA(w, Q.shape);
  } };
} }, jk = { kernelName: is, inputsToSave: ["x", "indices"], gradFunc: (C, A, g) => {
  const [I, B] = A, { axis: Q } = g, E = Kg(Q, I.shape)[0];
  return { x: () => {
    const i = I.shape, o = B.size, t = i.slice(0, E), e = t.length, s = i.slice(Q, i.length).slice(1), a = s.length, r = Fc(0, e), h = Fc(e + 1, e + 1 + a), w = Rc([t, [o], s]), G = CA(C, w), D = CA(B, [o]), l = Rc([[e], r, h]), d = mg(G, l);
    let N = $G(d, D, I.shape[E]);
    const k = FQ(l);
    return N = mg(N, k), N;
  }, indices: () => B };
} };
function Fc(C, A) {
  const g = [];
  for (let I = C; I < A; ++I)
    g.push(I);
  return g;
}
function Rc(C) {
  const A = [];
  for (let g = 0; g < C.length; ++g)
    for (let I = 0; I < C[g].length; ++I)
      A.push(C[g][I]);
  return A;
}
const $k = { kernelName: ko, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A;
  return { a: () => Lg(g), b: () => Lg(I) };
} }, _k = { kernelName: Ko, gradFunc: (C) => ({ x: () => bA(C, "float32") }) }, AK = { kernelName: So, gradFunc: (C) => ({ x: () => Lg(C) }) }, gK = { kernelName: po, gradFunc: (C) => ({ x: () => Lg(C) }) }, IK = { kernelName: Mo, gradFunc: (C) => ({ x: () => Lg(C) }) }, CK = { kernelName: ts, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { alpha: B } = g, Q = LC(I, 0);
  return { x: () => tC(Q, C, z(C, B)) };
} }, BK = { kernelName: Yo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, kA(g, 1)) };
} }, QK = { kernelName: Uo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, bA(g, "float32")) };
} }, EK = { kernelName: "LogSoftmax", inputsToSave: [], outputsToSave: [!0], gradFunc: (C, A, g) => {
  const [I] = A, { axis: B } = g;
  return { logits: () => {
    const Q = ZB(I);
    return tg(C, z($A(C, B, !0), Q));
  } };
} }, iK = gA({ localResponseNormalizationBackprop_: function(C, A, g, I = 5, B = 1, Q = 1, E = 0.5) {
  const i = { x: C, y: A, dy: g }, o = { depthRadius: I, bias: B, alpha: Q, beta: E };
  return v.runKernel(Wr, i, o);
} }), oK = { kernelName: hs, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (C, A, g) => {
  const [I, B] = A, { depthRadius: Q, bias: E, alpha: i, beta: o } = g;
  return { x: () => iK(I, B, C, Q, E, i, o) };
} };
function xy(C, A, g, I) {
  return A.rank < g.rank && (A = CA(A, YI(A.shape, I))), C.rank < g.rank && (C = CA(C, YI(C.shape, I))), { x: () => z(C, bA(RB(g, A), C.dtype)) };
}
const Nc = { kernelName: Ds, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (C, A, g) => {
  const I = g, { reductionIndices: B } = I, Q = A[0], E = xy(C, A[1], Q, Kg(B, Q.shape));
  return { x: () => E.x() };
} }, tK = { kernelName: Jo, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A;
  return { a: () => z(C, bA(nE(g, I), "float32")), b: () => z(C, bA(he(g, I), "float32")) };
} }, eK = gA({ maxPool3dGrad_: function(C, A, g, I, B, Q, E) {
  const i = W(C, "dy", "maxPool3dGrad"), o = W(A, "input", "maxPool3dGrad"), t = W(g, "output", "maxPool3dGrad");
  let e = i, s = o, a = t, r = !1;
  o.rank === 4 && (r = !0, e = CA(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), s = CA(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]), a = CA(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), f(e.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${e.rank}.`), f(s.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${s.rank}.`), f(a.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${a.rank}.`), wC("maxPool3dGrad", Q, E);
  const h = { dy: e, input: s, output: a }, w = { filterSize: I, strides: B, pad: Q, dimRoundingMode: E }, G = v.runKernel(Zr, h, w);
  return r ? CA(G, [G.shape[1], G.shape[2], G.shape[3], G.shape[4]]) : G;
} }), sK = { kernelName: ws, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (C, A, g) => {
  const [I, B] = A, { filterSize: Q, strides: E, pad: i, dimRoundingMode: o } = g;
  return { x: () => eK(C, I, B, Q, E, i, o) };
} }, aK = gA({ maxPoolGrad_: function(C, A, g, I, B, Q, E) {
  const i = W(C, "dy", "maxPoolGrad"), o = W(A, "input", "maxPoolGrad"), t = W(g, "output", "maxPoolGrad");
  f(o.rank === i.rank, () => `Rank of input (${o.rank}) does not match rank of dy (${i.rank})`), f(i.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`), f(o.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${o.rank}.`), wC("maxPoolGrad", Q, E);
  const e = { dy: i, input: o, output: t }, s = { filterSize: I, strides: B, pad: Q, dimRoundingMode: E };
  return v.runKernel(Tr, e, s);
} }), nK = { kernelName: cs, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (C, A, g) => {
  const [I, B] = A, { filterSize: Q, strides: E, pad: i } = g;
  return { x: () => aK(C, I, B, Q, E, i) };
} }, rK = { kernelName: ys, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const I = A[0], { paddings: B } = g, Q = B.map((E) => E[0]);
  return { x: () => iI(C, Q, I.shape) };
} }, uc = { kernelName: ks, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const I = A[0], { paddings: B } = g, Q = B.map((E) => E[0]);
  return { x: () => iI(C, Q, I.shape) };
} }, hK = { kernelName: bo, inputsToSave: ["a", "b"], outputsToSave: [!0], gradFunc: (C, A) => {
  const [g, I, B] = A, Q = g, E = I, i = wg(Q.shape, E.shape);
  return { a: () => {
    const o = bA(E, "float32");
    let t = z(C, z(o, jE(Q, tg(o, Pg(1)))));
    const e = LI(Q.shape, i);
    return e.length > 0 && (t = $A(t, e)), CA(t, Q.shape);
  }, b: () => {
    const o = LC(Q, 0), t = tC(o, NB(Q), Lg(Q));
    let e = z(C, z(B, t));
    const s = LI(E.shape, i);
    return s.length > 0 && (e = $A(e, s)), CA(e, E.shape);
  } };
} };
function DK(C, A, g) {
  const I = C.shape.length, B = I - g.length, Q = GI(g, I);
  let E = C;
  Q != null && (E = mg(C, Q));
  const i = E.shape.slice(), o = i.splice(I - g.length, g.length).reduce((e, s) => e * s, 1);
  i.push(o);
  let t = function(e, s, a) {
    const r = e.shape.slice();
    r[a] = 1;
    const h = CA(s, r), w = Jn(e, a, !0, !1), G = Jn(e, a, !0, !0), D = z(w, G);
    return z(h, D);
  }(E.reshape(i), A, B);
  if (t = t.reshape(E.shape), Q != null) {
    const e = FQ(Q);
    t = mg(t, e);
  }
  return t;
}
const cK = { kernelName: To, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => {
    const I = LC(g, Pg(0)), B = Pg(ry), Q = Pg(Oh), E = z(C, Q), i = z(z(C, B), ZB(bA(g, "float32")));
    return tC(I, E, i);
  } };
} }, kc = { kernelName: ms, gradFunc: (C, A, g) => {
  const { blockShape: I, paddings: B } = g;
  return { x: () => eh(C, I, B) };
} }, Kc = { kernelName: bs, gradFunc: (C, A, g) => {
  const { axis: I } = g;
  return { x: () => DC(C, I) };
} }, wK = [Hy, sk, ak, nk, rk, hk, Dk, ck, wk, lk, Gk, yk, Fk, Nk, uk, kk, Kk, Sk, pk, Mk, Uk, Yk, fk, Jk, mk, bk, Hk, xk, qk, Vk, { kernelName: lo, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = wg(g.shape, I.shape);
  return { a: () => {
    const Q = Cg(C, bA(I, "float32")), E = LI(g.shape, B);
    return E.length > 0 ? CA($A(Q, E), g.shape) : Q;
  }, b: () => {
    let Q = z(C, bA(g, "float32"));
    const E = LI(I.shape, B);
    E.length > 0 && (Q = CA($A(Q, E), I.shape));
    const i = aI(I);
    return RI(Cg(Q, bA(i, "float32")));
  } };
} }, Wk, Tk, Zk, Xk, Ok, Pk, vk, zk, jk, $k, _k, AK, gK, IK, CK, BK, QK, EK, oK, Nc, Nc, tK, sK, nK, { kernelName: ls, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { axis: B } = g, Q = Kg(B, I.shape), E = cA(OI(I.shape, Q)[1]);
  return { x: () => {
    const i = I.shape.slice();
    Q.forEach((t) => {
      i[t] = 1;
    });
    const o = CA(C, i);
    return Cg(z(o, zQ(I.shape, "float32")), E);
  } };
} }, { kernelName: Gs, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (C, A, g) => {
  const I = g, { axis: B } = I, [Q, E] = A, i = xy(C, E, Q, Kg(B, Q.shape));
  return { x: () => i.x() };
} }, { kernelName: fo, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A;
  return { a: () => z(C, bA($E(g, I), "float32")), b: () => z(C, bA(LC(g, I), "float32")) };
} }, rK, { kernelName: Lo, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = wg(g.shape, I.shape);
  return { a: () => {
    const Q = LI(g.shape, B);
    return Q.length > 0 ? CA($A(C, Q), g.shape) : C;
  }, b: () => {
    const Q = z(C, RI(vs(Cg(g, I)))), E = LI(I.shape, B);
    return E.length > 0 ? CA($A(Q, E), I.shape) : Q;
  } };
} }, { kernelName: mo, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = wg(g.shape, I.shape);
  return { a: () => {
    const Q = z(C, bA(I, "float32")), E = LI(g.shape, B);
    return E.length > 0 ? CA($A(Q, E), g.shape) : Q;
  }, b: () => {
    const Q = z(C, bA(g, "float32")), E = LI(I.shape, B);
    return E.length > 0 ? CA($A(Q, E), I.shape) : Q;
  } };
} }, { kernelName: ds, gradFunc: (C) => ({ x: () => RI(C) }) }, { kernelName: Ns, inputsToSave: ["indices"], gradFunc: (C, A) => {
  const g = A[0];
  return { indices: () => ZI(g.shape, "float32") };
} }, { kernelName: Rs, gradFunc: (C) => ({ x: () => Lg(C) }) }, { kernelName: us, saveAllInputs: !0, gradFunc: (C, A, g) => {
  const { axis: I } = g;
  return BE(C, I).map((B) => () => B);
} }, uc, uc, hK, { kernelName: Ks, inputsToSave: ["x", "alpha"], gradFunc: (C, A) => {
  const [g, I] = A, B = LC(g, 0);
  return { x: () => tC(B, C, z(C, I)), alpha: () => {
    let Q = tC(B, Lg(C), z(C, g));
    const E = LI(I.shape, C.shape);
    return E.length > 0 && (Q = $A(Q, E)), CA(Q, I.shape);
  } };
} }, { kernelName: Ss, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { axis: B } = g;
  let Q = [];
  return Q = B == null ? I.shape.map((E, i) => i) : typeof B == "number" ? [B] : B, { x: () => DK(I, C, Q) };
} }, { kernelName: Ho, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, RI(aI(g))) };
} }, { kernelName: qo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A, I = z($E(g, 6), Oi(g));
  return { x: () => z(C, bA(I, "float32")) };
} }, { kernelName: xo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(C, bA(Oi(g), "float32")) };
} }, { kernelName: ps, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => CA(C, g.shape) };
} }, { kernelName: Us, inputsToSave: ["images"], gradFunc: (C, A, g) => {
  const [I] = A, B = { dy: C, images: I };
  return { images: () => v.runKernel($r, B, g) };
} }, { kernelName: Ms, inputsToSave: ["images"], gradFunc: (C, A, g) => {
  const [I] = A, B = { dy: C, images: I };
  return { images: () => v.runKernel(jr, B, g) };
} }, { kernelName: Ys, gradFunc: (C, A, g) => {
  const { dims: I } = g, B = Kg(I, C.shape);
  return { x: () => CE(C, B) };
} }, { kernelName: Vo, gradFunc: (C) => ({ x: () => Lg(C) }) }, { kernelName: Wo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => RI(Cg(C, z(jE(g, 1.5), 2))) };
} }, { kernelName: Js, inputsToSave: ["condition"], gradFunc: (C, A) => {
  const [g] = A;
  return { condition: () => bA(Lg(g), "float32"), t: () => z(C, bA(g, C.dtype)), e: () => z(C, bA(ch(g), C.dtype)) };
} }, cK, { kernelName: vo, outputsToSave: [!0], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(C, z(g, tg(Pg(1), g))) };
} }, { kernelName: Oo, gradFunc: (C) => ({ x: () => Lg(C) }) }, { kernelName: Zo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(Yn(bA(g, "float32")), C) };
} }, { kernelName: Xo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(NG(bA(g, "float32")), C) };
} }, { kernelName: fs, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { begin: B, size: Q } = g, E = I.shape, [i, o] = Ps(I, B, Q), t = [];
  for (let e = 0; e < C.rank; e++)
    t.push([i[e], E[e] - i[e] - o[e]]);
  return { x: () => lh(C, t) };
} }, { kernelName: Hs, outputsToSave: [!0], gradFunc: (C, A, g) => {
  const [I] = A, { dim: B } = g, Q = z(C, I);
  return { logits: () => tg(Q, z($A(Q, [B], !0), I)) };
} }, { kernelName: Po, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(C, oi(g)) };
} }, kc, kc, Kc, Kc, { kernelName: zo, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, z(eC(bA(g, "float32")), 2)) };
} }, { kernelName: jo, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = Pg(2);
  return { a: () => z(C, z(B, tg(g, I))), b: () => z(C, z(B, tg(I, g))) };
} }, { kernelName: _r, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(C, z(bA(g, "float32"), 2)) };
} }, { kernelName: It, gradFunc: (C) => ({ x: () => Lg(C) }) }, { kernelName: $o, inputsToSave: ["a", "b"], gradFunc: (C, A) => {
  const [g, I] = A, B = wg(g.shape, I.shape);
  return { a: () => {
    let Q = C;
    const E = LI(g.shape, B);
    return E.length > 0 && (Q = $A(Q, E)), CA(Q, g.shape);
  }, b: () => {
    let Q = C;
    const E = LI(I.shape, B);
    return E.length > 0 && (Q = $A(Q, E)), CA(RI(Q), I.shape);
  } };
} }, { kernelName: Ls, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, B = I.shape.slice(), { axis: Q } = g;
  Kg(Q, I.shape).forEach((o) => {
    B[o] = 1;
  });
  const E = CA(C, B), i = z(E, zQ(I.shape, "float32"));
  return { x: () => i };
} }, { kernelName: _o, inputsToSave: ["x"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => Cg(C, aI(Yn(g))) };
} }, { kernelName: At, outputsToSave: [!0], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => z(tg(Pg(1), aI(g)), C) };
} }, { kernelName: gt, inputsToSave: ["x"], gradFunc: (C, A, g) => {
  const [I] = A, { reps: B } = g;
  return { x: () => {
    let Q = Lg(I);
    if (I.rank === 1)
      for (let E = 0; E < B[0]; ++E)
        Q = kA(Q, iI(C, [E * I.shape[0]], [I.shape[0]]));
    else if (I.rank === 2)
      for (let E = 0; E < B[0]; ++E)
        for (let i = 0; i < B[1]; ++i)
          Q = kA(Q, iI(C, [E * I.shape[0], i * I.shape[1]], [I.shape[0], I.shape[1]]));
    else if (I.rank === 3)
      for (let E = 0; E < B[0]; ++E)
        for (let i = 0; i < B[1]; ++i)
          for (let o = 0; o < B[2]; ++o)
            Q = kA(Q, iI(C, [E * I.shape[0], i * I.shape[1], o * I.shape[2]], [I.shape[0], I.shape[1], I.shape[2]]));
    else {
      if (I.rank !== 4)
        throw new Error(`Gradient for tile operation is not implemented for rank-${I.rank} tensors yet.`);
      for (let E = 0; E < B[0]; ++E)
        for (let i = 0; i < B[1]; ++i)
          for (let o = 0; o < B[2]; ++o)
            for (let t = 0; t < B[3]; ++t)
              Q = kA(Q, iI(C, [E * I.shape[0], i * I.shape[1], o * I.shape[2], t * I.shape[3]], [I.shape[0], I.shape[1], I.shape[2], I.shape[3]]));
    }
    return Q;
  } };
} }, { kernelName: mE, gradFunc: (C, A, g) => {
  const I = g, { perm: B } = I, Q = FQ(B);
  return { x: () => mg(C, Q) };
} }, { kernelName: xs, gradFunc: (C, A, g) => {
  const I = g, { axis: B } = I;
  return { value: () => xB(C, B) };
} }, { kernelName: qs, inputsToSave: ["segmentIds"], gradFunc: (C, A) => {
  const [g] = A;
  return { x: () => function(I, B) {
    const Q = sQ(B, Lg(B)), E = rh(I, Q);
    let i = nE(B, Pg(0, "int32"));
    const o = E.rank - i.rank;
    for (let e = 0; e < o; ++e)
      i = FC(i, e + 1);
    i = XB(i, zQ(E.shape, "bool"));
    const t = Lg(E);
    return tC(i, E, t);
  }(C, g) };
} }, { kernelName: Vs, gradFunc: (C) => ({ x: () => Lg(C) }) }];
for (const C of wK)
  gN(C);
hA().prototype.abs = function() {
  return this.throwIfDisposed(), EC(this);
}, hA().prototype.acos = function() {
  return this.throwIfDisposed(), GN(this);
}, hA().prototype.acosh = function() {
  return this.throwIfDisposed(), yN(this);
}, hA().prototype.add = function(C) {
  return this.throwIfDisposed(), kA(this, C);
}, hA().prototype.all = function(C, A) {
  return this.throwIfDisposed(), yG(this, C, A);
}, hA().prototype.any = function(C, A) {
  return this.throwIfDisposed(), Mn(this, C, A);
}, hA().prototype.argMax = function(C) {
  return this.throwIfDisposed(), Wi(this, C);
}, hA().prototype.argMin = function(C) {
  return this.throwIfDisposed(), dN(this, C);
}, hA().prototype.asScalar = function() {
  return this.throwIfDisposed(), f(this.size === 1, () => "The array must have only 1 element."), CA(this, []);
}, hA().prototype.asType = function(C) {
  return this.throwIfDisposed(), bA(this, C);
}, hA().prototype.as1D = function() {
  return this.throwIfDisposed(), CA(this, [this.size]);
}, hA().prototype.as2D = function(C, A) {
  return this.throwIfDisposed(), CA(this, [C, A]);
}, hA().prototype.as3D = function(C, A, g) {
  return this.throwIfDisposed(), CA(this, [C, A, g]);
}, hA().prototype.as4D = function(C, A, g, I) {
  return this.throwIfDisposed(), CA(this, [C, A, g, I]);
}, hA().prototype.as5D = function(C, A, g, I, B) {
  return this.throwIfDisposed(), CA(this, [C, A, g, I, B]);
}, hA().prototype.asin = function() {
  return this.throwIfDisposed(), FN(this);
}, hA().prototype.asinh = function() {
  return this.throwIfDisposed(), RN(this);
}, hA().prototype.atan = function() {
  return this.throwIfDisposed(), NN(this);
}, hA().prototype.atan2 = function(C) {
  return this.throwIfDisposed(), uN(this, C);
}, hA().prototype.atanh = function() {
  return this.throwIfDisposed(), kN(this);
}, hA().prototype.avgPool = function(C, A, g, I) {
  return this.throwIfDisposed(), oh(this, C, A, g, I);
}, hA().prototype.batchToSpaceND = function(C, A) {
  return this.throwIfDisposed(), eh(this, C, A);
}, hA().prototype.batchNorm = function(C, A, g, I, B) {
  return this.throwIfDisposed(), Ts(this, C, A, g, I, B);
}, hA().prototype.broadcastTo = function(C) {
  return this.throwIfDisposed(), qi(this, C);
}, hA().prototype.cast = function(C) {
  return this.throwIfDisposed(), bA(this, C);
}, hA().prototype.ceil = function() {
  return this.throwIfDisposed(), YN(this);
}, hA().prototype.clipByValue = function(C, A) {
  return this.throwIfDisposed(), UC(this, C, A);
}, hA().prototype.concat = function(C, A) {
  return this.throwIfDisposed(), C instanceof MI && (C = [C]), DC([this, ...C], A);
}, hA().prototype.conv1d = function(C, A, g, I, B, Q) {
  return this.throwIfDisposed(), dG(this, C, A, g, I, B, Q);
}, hA().prototype.conv2dTranspose = function(C, A, g, I, B) {
  return this.throwIfDisposed(), FG(this, C, A, g, I, B);
}, hA().prototype.conv2d = function(C, A, g, I, B, Q) {
  return this.throwIfDisposed(), IE(this, C, A, g, I, B, Q);
}, hA().prototype.cos = function() {
  return this.throwIfDisposed(), Yn(this);
}, hA().prototype.cosh = function() {
  return this.throwIfDisposed(), NG(this);
}, hA().prototype.cumprod = function(C, A, g) {
  return this.throwIfDisposed(), Jn(this, C, A, g);
}, hA().prototype.cumsum = function(C, A, g) {
  return this.throwIfDisposed(), uG(this, C, A, g);
}, hA().prototype.depthToSpace = function(C, A) {
  return this.throwIfDisposed(), qN(this, C, A);
}, hA().prototype.depthwiseConv2d = function(C, A, g, I, B, Q) {
  return this.throwIfDisposed(), ah(this, C, A, g, I, B, Q);
}, hA().prototype.dilation2d = function(C, A, g, I, B) {
  return this.throwIfDisposed(), VN(this, C, A, g, I, B);
}, hA().prototype.divNoNan = function(C) {
  return this.throwIfDisposed(), WN(this, C);
}, hA().prototype.div = function(C) {
  return this.throwIfDisposed(), Cg(this, C);
}, hA().prototype.dot = function(C) {
  return this.throwIfDisposed(), TN(this, C);
}, hA().prototype.elu = function() {
  return this.throwIfDisposed(), Xs(this);
}, hA().prototype.equal = function(C) {
  return this.throwIfDisposed(), RB(this, C);
}, hA().prototype.erf = function() {
  return this.throwIfDisposed(), ZN(this);
}, hA().prototype.euclideanNorm = function(C, A) {
  return this.throwIfDisposed(), XN(this, C, A);
}, hA().prototype.exp = function() {
  return this.throwIfDisposed(), ZB(this);
}, hA().prototype.expandDims = function(C) {
  return this.throwIfDisposed(), FC(this, C);
}, hA().prototype.expm1 = function() {
  return this.throwIfDisposed(), ON(this);
}, hA().prototype.fft = function() {
  return this.throwIfDisposed(), zG(this);
}, hA().prototype.flatten = function() {
  return this.throwIfDisposed(), CA(this, [this.size]);
}, hA().prototype.floor = function() {
  return this.throwIfDisposed(), vs(this);
}, hA().prototype.floorDiv = function(C) {
  return this.throwIfDisposed(), GG(this, C);
}, hA().prototype.gather = function(C, A, g) {
  return this.throwIfDisposed(), rh(this, C, A, g);
}, hA().prototype.greaterEqual = function(C) {
  return this.throwIfDisposed(), nE(this, C);
}, hA().prototype.greater = function(C) {
  return this.throwIfDisposed(), LC(this, C);
}, hA().prototype.ifft = function() {
  return this.throwIfDisposed(), Ln(this);
}, hA().prototype.irfft = function() {
  return this.throwIfDisposed(), Fu(this);
}, hA().prototype.isFinite = function() {
  return this.throwIfDisposed(), vN(this);
}, hA().prototype.isInf = function() {
  return this.throwIfDisposed(), PN(this);
}, hA().prototype.isNaN = function() {
  return this.throwIfDisposed(), zN(this);
}, hA().prototype.leakyRelu = function(C) {
  return this.throwIfDisposed(), Dh(this, C);
}, hA().prototype.lessEqual = function(C) {
  return this.throwIfDisposed(), $E(this, C);
}, hA().prototype.less = function(C) {
  return this.throwIfDisposed(), he(this, C);
}, hA().prototype.localResponseNormalization = function(C, A, g, I) {
  return this.throwIfDisposed(), jN(this, C, A, g, I);
}, hA().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), $N(this);
}, hA().prototype.logSoftmax = function(C) {
  return this.throwIfDisposed(), MG(this, C);
}, hA().prototype.logSumExp = function(C, A) {
  return this.throwIfDisposed(), _N(this, C, A);
}, hA().prototype.log = function() {
  return this.throwIfDisposed(), NB(this);
}, hA().prototype.log1p = function() {
  return this.throwIfDisposed(), pG(this);
}, hA().prototype.logicalAnd = function(C) {
  return this.throwIfDisposed(), XB(this, C);
}, hA().prototype.logicalNot = function() {
  return this.throwIfDisposed(), ch(this);
}, hA().prototype.logicalOr = function(C) {
  return this.throwIfDisposed(), UG(this, C);
}, hA().prototype.logicalXor = function(C) {
  return this.throwIfDisposed(), Au(this, C);
}, hA().prototype.matMul = function(C, A, g) {
  return this.throwIfDisposed(), Tg(this, C, A, g);
}, hA().prototype.maxPool = function(C, A, g, I) {
  return this.throwIfDisposed(), wh(this, C, A, g, I);
}, hA().prototype.max = function(C, A) {
  return this.throwIfDisposed(), nB(this, C, A);
}, hA().prototype.maximum = function(C) {
  return this.throwIfDisposed(), sQ(this, C);
}, hA().prototype.mean = function(C, A) {
  return this.throwIfDisposed(), UI(this, C, A);
}, hA().prototype.min = function(C, A) {
  return this.throwIfDisposed(), re(this, C, A);
}, hA().prototype.minimum = function(C) {
  return this.throwIfDisposed(), Zi(this, C);
}, hA().prototype.mirrorPad = function(C, A) {
  return this.throwIfDisposed(), Iu(this, C, A);
}, hA().prototype.mod = function(C) {
  return this.throwIfDisposed(), Cu(this, C);
}, hA().prototype.mul = function(C) {
  return this.throwIfDisposed(), z(this, C);
}, hA().prototype.neg = function() {
  return this.throwIfDisposed(), RI(this);
}, hA().prototype.norm = function(C, A, g) {
  return this.throwIfDisposed(), Os(this, C, A, g);
}, hA().prototype.notEqual = function(C) {
  return this.throwIfDisposed(), De(this, C);
}, hA().prototype.oneHot = function(C, A = 1, g = 0) {
  return this.throwIfDisposed(), YG(this, C, A, g);
}, hA().prototype.onesLike = function() {
  return this.throwIfDisposed(), $C(this);
}, hA().prototype.pad = function(C, A) {
  return this.throwIfDisposed(), lh(this, C, A);
}, hA().prototype.pool = function(C, A, g, I, B, Q) {
  return this.throwIfDisposed(), Bu(this, C, A, g, I, B, Q);
}, hA().prototype.pow = function(C) {
  return this.throwIfDisposed(), jE(this, C);
}, hA().prototype.prelu = function(C) {
  return this.throwIfDisposed(), yh(this, C);
}, hA().prototype.prod = function(C, A) {
  return this.throwIfDisposed(), Qu(this, C, A);
}, hA().prototype.reciprocal = function() {
  return this.throwIfDisposed(), yu(this);
}, hA().prototype.relu = function() {
  return this.throwIfDisposed(), rE(this);
}, hA().prototype.relu6 = function() {
  return this.throwIfDisposed(), VG(this);
}, hA().prototype.reshapeAs = function(C) {
  return this.throwIfDisposed(), CA(this, C.shape);
}, hA().prototype.reshape = function(C) {
  return this.throwIfDisposed(), CA(this, C);
}, hA().prototype.resizeBilinear = function(C, A, g) {
  return this.throwIfDisposed(), Ay(this, C, A, g);
}, hA().prototype.resizeNearestNeighbor = function(C, A, g) {
  return this.throwIfDisposed(), gy(this, C, A, g);
}, hA().prototype.reverse = function(C) {
  return this.throwIfDisposed(), CE(this, C);
}, hA().prototype.rfft = function() {
  return this.throwIfDisposed(), Ru(this);
}, hA().prototype.round = function() {
  return this.throwIfDisposed(), WG(this);
}, hA().prototype.rsqrt = function() {
  return this.throwIfDisposed(), TG(this);
}, hA().prototype.selu = function() {
  return this.throwIfDisposed(), ZG(this);
}, hA().prototype.separableConv2d = function(C, A, g, I, B, Q) {
  return this.throwIfDisposed(), XG(this, C, A, g, I, B, Q);
}, hA().prototype.sigmoid = function() {
  return this.throwIfDisposed(), oi(this);
}, hA().prototype.sign = function() {
  return this.throwIfDisposed(), du(this);
}, hA().prototype.sin = function() {
  return this.throwIfDisposed(), OG(this);
}, hA().prototype.sinh = function() {
  return this.throwIfDisposed(), vG(this);
}, hA().prototype.slice = function(C, A) {
  return this.throwIfDisposed(), iI(this, C, A);
}, hA().prototype.softmax = function(C) {
  return this.throwIfDisposed(), Nh(this, C);
}, hA().prototype.softplus = function() {
  return this.throwIfDisposed(), Et(this);
}, hA().prototype.spaceToBatchND = function(C, A) {
  return this.throwIfDisposed(), Gh(this, C, A);
}, hA().prototype.split = function(C, A) {
  return this.throwIfDisposed(), fC(this, C, A);
}, hA().prototype.sqrt = function() {
  return this.throwIfDisposed(), eC(this);
}, hA().prototype.square = function() {
  return this.throwIfDisposed(), aI(this);
}, hA().prototype.squaredDifference = function(C) {
  return this.throwIfDisposed(), Nu(this, C);
}, hA().prototype.squeeze = function(C) {
  return this.throwIfDisposed(), ot(this, C);
}, hA().prototype.stack = function(C, A) {
  this.throwIfDisposed();
  const g = C instanceof MI ? [this, C] : [this, ...C];
  return xB(g, A);
}, hA().prototype.step = function(C) {
  return this.throwIfDisposed(), Oi(this, C);
}, hA().prototype.stridedSlice = function(C, A, g, I, B, Q, E, i) {
  return this.throwIfDisposed(), uu(this, C, A, g, I, B, Q, E, i);
}, hA().prototype.sub = function(C) {
  return this.throwIfDisposed(), tg(this, C);
}, hA().prototype.sum = function(C, A) {
  return this.throwIfDisposed(), $A(this, C, A);
}, hA().prototype.tan = function() {
  return this.throwIfDisposed(), ku(this);
}, hA().prototype.tanh = function() {
  return this.throwIfDisposed(), th(this);
}, hA().prototype.tile = function(C) {
  return this.throwIfDisposed(), sB(this, C);
}, hA().prototype.toBool = function() {
  return this.throwIfDisposed(), bA(this, "bool");
}, hA().prototype.toFloat = function() {
  return this.throwIfDisposed(), bA(this, "float32");
}, hA().prototype.toInt = function() {
  return this.throwIfDisposed(), bA(this, "int32");
}, hA().prototype.topk = function(C, A) {
  return this.throwIfDisposed(), Ku(this, C, A);
}, hA().prototype.transpose = function(C) {
  return this.throwIfDisposed(), mg(this, C);
}, hA().prototype.unique = function(C) {
  return this.throwIfDisposed(), Su(this, C);
}, hA().prototype.unsortedSegmentSum = function(C, A) {
  return this.throwIfDisposed(), $G(this, C, A);
}, hA().prototype.unstack = function(C) {
  return this.throwIfDisposed(), BE(this, C);
}, hA().prototype.where = function(C, A) {
  return this.throwIfDisposed(), tC(C, this, A);
}, hA().prototype.zerosLike = function() {
  return this.throwIfDisposed(), Lg(this);
};
class yB extends Error {
  constructor(A) {
    super(A), Object.setPrototypeOf(this, yB.prototype);
  }
}
class PC extends Error {
  constructor(A) {
    super(A), Object.setPrototypeOf(this, PC.prototype);
  }
}
class X extends Error {
  constructor(A) {
    super(A), Object.setPrototypeOf(this, X.prototype);
  }
}
class dg extends Error {
  constructor(A) {
    super(A), Object.setPrototypeOf(this, dg.prototype);
  }
}
class ID extends Error {
  constructor(A) {
    super(A), Object.setPrototypeOf(this, ID.prototype);
  }
}
class qy {
  constructor(A) {
    this.maxEntries = A || 100, this.cache = /* @__PURE__ */ new Map();
  }
  get(A) {
    let g;
    return this.cache.has(A) && (g = this.cache.get(A), this.cache.delete(A), this.cache.set(A, g)), g;
  }
  put(A, g) {
    if (this.cache.has(A))
      this.cache.delete(A);
    else if (this.cache.size >= this.maxEntries) {
      const I = this.cache.keys().next().value;
      this.cache.delete(I);
    }
    this.cache.set(A, g);
  }
  getMaxEntries() {
    return this.maxEntries;
  }
  setMaxEntries(A) {
    if (A < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${A}.`);
    if (this.maxEntries > A)
      for (let g = 0; g < this.maxEntries - A; g++) {
        const I = this.cache.keys().next().value;
        this.cache.delete(I);
      }
    this.maxEntries = A;
  }
}
function QE(C, A) {
  if (Array.isArray(C)) {
    let g = [];
    for (let I = 0; I < A; I++)
      g = g.concat(C);
    return g;
  }
  {
    const g = new Array(A);
    return g.fill(C), g;
  }
}
function dB(C, A) {
  if (!C)
    throw new ID(A);
}
function Sc(C, A) {
  let g = 0;
  for (const I of C)
    I === A && g++;
  return g;
}
function rC(C) {
  return C.length === 1 ? C[0] : C;
}
function eI(C) {
  return Array.isArray(C) ? C : [C];
}
function mB(C) {
  const A = C.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return A[0] !== "_" ? A : "private" + A;
}
function xQ(C) {
  return C.length <= 1 || C.indexOf("_") === -1 ? C : C.replace(/[_]+(\w|$)/g, (A, g) => g.toUpperCase());
}
let VC = {};
function CD(C) {
  if (C == null)
    return null;
  const A = {};
  return A.className = C.getClassName(), A.config = C.getConfig(), A;
}
function mn(C) {
  if (C != null && typeof C == "object")
    if (Array.isArray(C))
      C.forEach((A) => mn(A));
    else {
      const A = Object.keys(C);
      for (const g of A) {
        const I = C[g];
        I != null && typeof I == "object" && (Array.isArray(I) || I.type !== "ndarray" || typeof I.value != "number" ? mn(I) : C[g] = I.value);
      }
    }
}
function at(C, A = {}, g = {}, I = "object", B = !1) {
  if (typeof C == "string") {
    const Q = C;
    let E;
    if (Q in g)
      E = g[Q];
    else if (Q in VC)
      E = VC[Q];
    else if (E = A[Q], E == null)
      throw new X(`Unknown ${I}: ${C}. This may be due to one of the following reasons:
1. The ${I} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${I} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return E;
  }
  {
    const Q = C;
    if (Q.className == null || Q.config == null)
      throw new X(`${I}: Improper config format: ${JSON.stringify(Q)}.
'className' and 'config' must set.`);
    const E = Q.className;
    let i, o;
    if (E in g ? [i, o] = g[E] : E in VC ? [i, o] = VC.className : E in A && ([i, o] = A[E]), i == null)
      throw new X(`Unknown ${I}: ${E}. This may be due to one of the following reasons:
1. The ${I} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${I} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (o != null) {
      const t = {};
      for (const a of Object.keys(VC))
        t[a] = VC[a];
      for (const a of Object.keys(g))
        t[a] = g[a];
      Q.config.customObjects = t;
      const e = Object.assign({}, VC);
      for (const a of Object.keys(g))
        VC[a] = g[a];
      mn(Q.config);
      const s = o(i, Q.config, g, B);
      return VC = Object.assign({}, e), s;
    }
    {
      const t = Object.assign({}, VC);
      for (const s of Object.keys(g))
        VC[s] = g[s];
      const e = new i(Q.config);
      return VC = Object.assign({}, t), e;
    }
  }
}
function Ht(C, A) {
  return -1 * function(g, I) {
    return g < I ? -1 : g > I ? 1 : 0;
  }(C, A);
}
function aQ(C) {
  if (C == null)
    return C;
  const A = [];
  for (const g of C)
    A.indexOf(g) === -1 && A.push(g);
  return A;
}
function lK(C) {
  if (C == null)
    throw new X(`Invalid value in obj: ${JSON.stringify(C)}`);
  for (const A in C)
    if (C.hasOwnProperty(A))
      return !1;
  return !0;
}
function EE(C, A, g) {
  if (g != null && C.indexOf(g) < 0)
    throw new X(`${g} is not a valid ${A}.  Valid values are ${C} or null/undefined.`);
}
function BD(C, A, g = 0, I = 1 / 0) {
  return dB(g >= 0), dB(I >= g), Array.isArray(C) && C.length >= g && C.length <= I && C.every((B) => typeof B === A);
}
function XI(C, A) {
  Array.isArray(C) ? (f(C.length > 0, () => `${A} is unexpectedly an empty array.`), C.forEach((g, I) => XI(g, `element ${I + 1} of ${A}`))) : f(Number.isInteger(C) && C > 0, () => `Expected ${A} to be a positive integer, but got ${Vy(C)}.`);
}
function Vy(C) {
  return C === null ? "null" : Array.isArray(C) ? "[" + C.map((A) => Vy(A)).join(",") + "]" : typeof C == "string" ? `"${C}"` : `${C}`;
}
function Wy(C) {
  return C === "relu" ? "relu" : C === "linear" ? "linear" : C === "elu" ? "elu" : null;
}
let GK = 0;
function Ty() {
  return GK++;
}
const xt = {};
function $s(C = "") {
  return C in xt || (xt[C] = 0), xt[C] += 1, C + xt[C].toString();
}
const yK = ["channelsFirst", "channelsLast"], dK = ["nearest", "bilinear"], FK = ["valid", "same", "causal"], RK = ["max", "avg"], NK = ["sum", "mul", "concat", "ave"], RE = /* @__PURE__ */ new Map();
function kI(C) {
  EE(yK, "DataFormat", C);
}
function mC(C) {
  EE(FK, "PaddingMode", C);
}
function Zy(C) {
  EE(RK, "PoolMode", C);
}
const Vi = [], pc = "/";
function jQ(C, A) {
  Vi.push(C);
  try {
    const g = A();
    return Vi.pop(), g;
  } catch (g) {
    throw Vi.pop(), g;
  }
}
function Xy(C) {
  if (!vy(C))
    throw new Error("Not a valid tensor name: '" + C + "'");
  return (Vi.length === 0 ? "" : Vi.join(pc) + pc) + C;
}
function Oy(C) {
  if (!vy(C))
    throw new Error("Not a valid tensor name: '" + C + "'");
  RE.has(C) || RE.set(C, 0);
  const A = RE.get(C);
  if (RE.set(C, RE.get(C) + 1), A > 0) {
    const g = `${C}_${A}`;
    return RE.set(g, 1), g;
  }
  return C;
}
const uK = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function vy(C) {
  return !!C.match(uK);
}
function nQ(C, A, g) {
  A == null && (A = 0), g == null && (g = C.length);
  let I = 1;
  for (let B = A; B < g; ++B)
    I *= C[B];
  return I;
}
function Ai(C) {
  if (C.length === 0)
    return Number.NaN;
  let A = Number.POSITIVE_INFINITY;
  for (let g = 0; g < C.length; g++) {
    const I = C[g];
    I < A && (A = I);
  }
  return A;
}
function hQ(C) {
  if (C.length === 0)
    return Number.NaN;
  let A = Number.NEGATIVE_INFINITY;
  for (let g = 0; g < C.length; g++) {
    const I = C[g];
    I > A && (A = I);
  }
  return A;
}
function hB(C, A) {
  if (A < C)
    throw new X(`end (${A}) < begin (${C}) is forbidden.`);
  const g = [];
  for (let I = C; I < A; ++I)
    g.push(I);
  return g;
}
let pa;
function mI() {
  return pa == null && (pa = iQ().epsilon()), pa;
}
function PB(C, A) {
  return bA(C, A);
}
function nt(C, A = -1) {
  const g = C.shape.slice();
  return A < 0 && (A = g.length + A + 1), g.splice(A, 0, 1), CA(C, g);
}
function $Q(C, A, g) {
  return IA(() => {
    switch (C.rank) {
      case 1:
        return Fh(C, A, g);
      case 2:
        return PG(C, [A, 0], [g, C.shape[1]]);
      case 3:
        return Rh(C, [A, 0, 0], [g, C.shape[1], C.shape[2]]);
      case 4:
        return we(C, [A, 0, 0, 0], [g, C.shape[1], C.shape[2], C.shape[3]]);
      case 5:
        return iI(C, [A, 0, 0, 0, 0], [g, C.shape[1], C.shape[2], C.shape[3], C.shape[4]]);
      case 6:
        return iI(C, [A, 0, 0, 0, 0, 0], [g, C.shape[1], C.shape[2], C.shape[3], C.shape[4], C.shape[5]]);
      default:
        throw new X(`sliceAlongFirstAxis() received an unsupported tensor rank: ${C.rank}`);
    }
  });
}
function Ma(C, A, g) {
  return IA(() => {
    switch (C.rank) {
      case 1:
        return Fh(C, A, g);
      case 2:
        return PG(C, [0, A], [C.shape[0], g]);
      case 3:
        return Rh(C, [0, 0, A], [C.shape[0], C.shape[1], g]);
      case 4:
        return we(C, [0, 0, 0, A], [C.shape[0], C.shape[1], C.shape[2], g]);
      default:
        throw new X(`sliceAlongLastAxis() received an unsupported tensor rank: ${C.rank}`);
    }
  });
}
function qt(C, A, g, I) {
  return IA(() => {
    switch (C.rank) {
      case 1:
        return Fh(C, A, g);
      case 2:
        switch (I) {
          case 1:
            return $Q(C, A, g);
          case 2:
            return Ma(C, A, g);
          default:
            throw new X(`The axis is not within the rank of the tensor ${I}`);
        }
      case 3:
        switch (I) {
          case 1:
            return $Q(C, A, g);
          case 2:
            return Rh(C, [0, A, 0], [C.shape[0], g, C.shape[2]]);
          case 3:
            return Ma(C, A, g);
          default:
            throw new X(`The axis is not within the rank of the tensor ${I}`);
        }
      case 4:
        switch (I) {
          case 1:
            return $Q(C, A, g);
          case 2:
            return we(C, [0, A, 0, 0], [C.shape[0], g, C.shape[2], C.shape[3]]);
          case 3:
            return we(C, [0, 0, A, 0], [C.shape[0], C.shape[1], g, C.shape[3]]);
          case 4:
            return Ma(C, A, g);
          default:
            throw new X(`The axis is not within the rank of the tensor ${I}`);
        }
      default:
        throw new X(`sliceAlongLastAxis() received an unsupported tensor rank: ${C.rank}`);
    }
  });
}
function QD(C, A = -1) {
  let g;
  return A < 0 && (g = C[0].rank, A = g !== 0 ? g : 0), A === C[0].rank && (A = -1), DC(C, A);
}
function Mc(C, A) {
  switch (C.rank) {
    case 1:
      return JN([C, A]);
    case 2:
      return fN([C, A], 0);
    case 3:
      return LN([C, A], 0);
    case 4:
      return mN([C, A], 0);
    default:
      throw new X(`concatAlongFirstAxis() received an unsupported tensor rank: ${C.rank}`);
  }
}
function bn(C, A) {
  if (Array.isArray(A) || (A = [A]), C.rank !== A.length)
    throw new X(`The length of input n (${A.length}) does not match the number of dimensions in input x (${C.rank})`);
  return sB(C, A);
}
function _s(C, A = 0, g = 1, I, B) {
  return Gu(C, A, g, I, B);
}
function VB(C, A, g, I) {
  if (C.rank < 2 || A.rank < 2)
    throw new dg(`dot requires both inputs to be rank >= 2 but got x shape = ${C.shape} and y shape = ${A.shape}`);
  if (A.rank >= 3 && C.shape.slice(-1)[0] !== A.shape.slice(-2)[0])
    throw new dg(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${C.shape} and  y shape = ${A.shape}`);
  if (C.rank === 2 && A.rank === 2)
    return sc({ a: C, b: A, transposeA: !1, transposeB: !1, bias: I ? Hn(C.rank, I, "channelsLast") : null, activation: g });
  {
    const B = C.shape.slice(), Q = B.pop();
    C = CA(C, [-1, Q]);
    const E = A.shape.slice(), i = E.pop(), o = E.pop(), t = [...E, i], e = Array.from({ length: A.rank }, (a, r) => r === 0 ? A.rank - 2 : r <= A.rank - 2 ? r - 1 : r);
    A = CA(mg(A, e), [o, -1]);
    const s = [...B, ...t];
    return CA(sc({ a: C, b: A, transposeA: !1, transposeB: !1, bias: I ? Hn(C.rank, I, "channelsLast") : null, activation: g }), s);
  }
}
function Py(C, A, g) {
  return IA(() => (A = Array.isArray(A) ? MC(A, "int32") : bA(A, "int32"), rh(C, A, g)));
}
function vi(C) {
  return z(C, C);
}
function Hn(C, A, g) {
  const I = A.shape;
  if (A.rank !== 1 && A.rank !== C)
    throw new X(`Unexpected bias dimensions: ${A.rank}; expected it to be 1 or ${C}`);
  if (C === 5) {
    if (g === "channelsFirst")
      return I.length === 1 ? CA(A, [1, I[0], 1, 1, 1]) : CA(A, [1, I[3], I[0], I[1], I[2]]);
    if (g === "channelsLast")
      return I.length === 1 ? CA(A, [1, 1, 1, 1, I[0]]) : CA(A, [1].concat(I));
  } else if (C === 4) {
    if (g === "channelsFirst")
      return I.length === 1 ? CA(A, [1, I[0], 1, 1]) : CA(A, [1, I[2], I[0], I[1]]);
    if (g === "channelsLast")
      return I.length === 1 ? CA(A, [1, 1, 1, I[0]]) : CA(A, [1].concat(I));
  } else if (C === 3) {
    if (g === "channelsFirst")
      return I.length === 1 ? CA(A, [1, I[0], 1]) : CA(A, [1, I[1], I[0]]);
    if (g === "channelsLast")
      return I.length === 1 ? CA(A, [1, 1, I[0]]) : CA(A, [1].concat(I));
  } else if (C < 3)
    return A;
  throw new X(`Unsupported input rank by biasAdd: ${A.rank}`);
}
function DB(C, A, g) {
  return IA(() => (g == null && (g = "channelsLast"), kI(g), kA(C, Hn(C.rank, A, g))));
}
function zy(C, A, g, I) {
  return IA(() => pu(C, A, g, I));
}
function rt(C, A, g = !1) {
  return g ? C() : A();
}
const kK = ["fanIn", "fanOut", "fanAvg"], KK = ["normal", "uniform", "truncatedNormal"];
class AB extends ei {
  fromConfigUsesCustomObjects() {
    return !1;
  }
  getConfig() {
    return {};
  }
}
class Uc extends AB {
  apply(A, g) {
    return ZI(A, g);
  }
}
Uc.className = "Zeros", RA(Uc);
class xn extends AB {
  apply(A, g) {
    return zQ(A, g);
  }
}
xn.className = "Ones", RA(xn);
class Yc extends AB {
  constructor(A) {
    if (super(), typeof A != "object")
      throw new X(`Expected argument of type ConstantConfig but got ${A}`);
    if (A.value === void 0)
      throw new X(`config must have value set but got ${A}`);
    this.value = A.value;
  }
  apply(A, g) {
    return IA(() => z(Pg(this.value), zQ(A, g)));
  }
  getConfig() {
    return { value: this.value };
  }
}
Yc.className = "Constant", RA(Yc);
class Jc extends AB {
  constructor(A) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = A.minval || this.DEFAULT_MINVAL, this.maxval = A.maxval || this.DEFAULT_MAXVAL, this.seed = A.seed;
  }
  apply(A, g) {
    return it(A, this.minval, this.maxval, g, this.seed);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
Jc.className = "RandomUniform", RA(Jc);
class fc extends AB {
  constructor(A) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = A.mean || this.DEFAULT_MEAN, this.stddev = A.stddev || this.DEFAULT_STDDEV, this.seed = A.seed;
  }
  apply(A, g) {
    if ((g = g || "float32") !== "float32" && g !== "int32")
      throw new dg(`randomNormal does not support dType ${g}.`);
    return _s(A, this.mean, this.stddev, g, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
fc.className = "RandomNormal", RA(fc);
class Lc extends AB {
  constructor(A) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = A.mean || this.DEFAULT_MEAN, this.stddev = A.stddev || this.DEFAULT_STDDEV, this.seed = A.seed;
  }
  apply(A, g) {
    if ((g = g || "float32") !== "float32" && g !== "int32")
      throw new dg(`truncatedNormal does not support dType ${g}.`);
    return jG(A, this.mean, this.stddev, g, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Lc.className = "TruncatedNormal", RA(Lc);
class mc extends AB {
  constructor(A) {
    super(), this.gain = A.gain != null ? A.gain : 1;
  }
  apply(A, g) {
    return IA(() => {
      if (A.length !== 2 || A[0] !== A[1])
        throw new X("Identity matrix initializer can only be used for 2D square matrices.");
      return z(this.gain, SG(A[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
mc.className = "Identity", RA(mc);
class uC extends AB {
  constructor(A) {
    if (super(), A.scale < 0)
      throw new X(`scale must be a positive float. Got: ${A.scale}`);
    var g;
    this.scale = A.scale == null ? 1 : A.scale, this.mode = A.mode == null ? "fanIn" : A.mode, g = this.mode, EE(kK, "FanMode", g), this.distribution = A.distribution == null ? "normal" : A.distribution, function(I) {
      EE(KK, "Distribution", I);
    }(this.distribution), this.seed = A.seed;
  }
  apply(A, g) {
    const I = function(i, o = "channelsLast") {
      let t, e;
      if (kI(o), i.length === 2)
        t = i[0], e = i[1];
      else if ([3, 4, 5].indexOf(i.length) !== -1) {
        if (o === "channelsFirst") {
          const s = nQ(i, 2);
          t = i[1] * s, e = i[0] * s;
        } else if (o === "channelsLast") {
          const s = nQ(i, 0, i.length - 2);
          t = i[i.length - 2] * s, e = i[i.length - 1] * s;
        }
      } else {
        const s = nQ(i);
        t = Math.sqrt(s), e = Math.sqrt(s);
      }
      return [t, e];
    }(A), B = I[0], Q = I[1];
    let E = this.scale;
    if (this.mode === "fanIn" ? E /= Math.max(1, B) : this.mode === "fanOut" ? E /= Math.max(1, Q) : E /= Math.max(1, (B + Q) / 2), this.distribution === "normal") {
      const i = Math.sqrt(E);
      if ((g = g || "float32") !== "float32" && g !== "int32")
        throw new dg(`${this.getClassName()} does not support dType ${g}.`);
      return jG(A, 0, i, g, this.seed);
    }
    {
      const i = Math.sqrt(3 * E);
      return it(A, -i, i, g, this.seed);
    }
  }
  getConfig() {
    return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
  }
}
uC.className = "VarianceScaling", RA(uC);
class qn extends uC {
  constructor(A) {
    super({ scale: 1, mode: "fanAvg", distribution: "uniform", seed: A == null ? null : A.seed });
  }
  getClassName() {
    return uC.className;
  }
}
qn.className = "GlorotUniform", RA(qn);
class Vn extends uC {
  constructor(A) {
    super({ scale: 1, mode: "fanAvg", distribution: "normal", seed: A == null ? null : A.seed });
  }
  getClassName() {
    return uC.className;
  }
}
Vn.className = "GlorotNormal", RA(Vn);
class Wn extends uC {
  constructor(A) {
    super({ scale: 2, mode: "fanIn", distribution: "normal", seed: A == null ? null : A.seed });
  }
  getClassName() {
    return uC.className;
  }
}
Wn.className = "HeNormal", RA(Wn);
class Tn extends uC {
  constructor(A) {
    super({ scale: 2, mode: "fanIn", distribution: "uniform", seed: A == null ? null : A.seed });
  }
  getClassName() {
    return uC.className;
  }
}
Tn.className = "HeUniform", RA(Tn);
class Zn extends uC {
  constructor(A) {
    super({ scale: 1, mode: "fanIn", distribution: "normal", seed: A == null ? null : A.seed });
  }
  getClassName() {
    return uC.className;
  }
}
Zn.className = "LeCunNormal", RA(Zn);
class Xn extends uC {
  constructor(A) {
    super({ scale: 1, mode: "fanIn", distribution: "uniform", seed: A == null ? null : A.seed });
  }
  getClassName() {
    return uC.className;
  }
}
Xn.className = "LeCunUniform", RA(Xn);
class bc extends AB {
  constructor(A) {
    super(), this.DEFAULT_GAIN = 1, this.ELEMENTS_WARN_SLOW = 2e3, this.gain = A.gain == null ? this.DEFAULT_GAIN : A.gain, this.seed = A.seed;
  }
  apply(A, g) {
    return IA(() => {
      if (A.length < 2)
        throw new dg("Shape must be at least 2D.");
      if (g !== "int32" && g !== "float32" && g !== void 0)
        throw new TypeError(`Unsupported data type ${g}.`);
      const I = cA(A.slice(0, -1)), B = A[A.length - 1], Q = I * B;
      Q > this.ELEMENTS_WARN_SLOW && console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${Q}) elements: Slowness may result.`);
      const E = _s([Math.max(B, I), Math.min(B, I)], 0, 1, g, this.seed), i = zu.qr(E, !1);
      let o = i[0];
      const t = i[1].flatten().stridedSlice([0], [Math.min(B, I) * Math.min(B, I)], [Math.min(B, I) + 1]);
      return o = z(o, t.sign()), I < B && (o = o.transpose()), z(Pg(this.gain), o.reshape(A));
    });
  }
  getConfig() {
    return { gain: this.gain, seed: this.seed };
  }
}
bc.className = "Orthogonal", RA(bc);
const Hc = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", heUniform: "HeUniform", identity: "Identity", leCunNormal: "LeCunNormal", leCunUniform: "LeCunUniform", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" };
function xc(C, A = {}) {
  return at(C, vC.getMap().classNameMap, A, "initializer");
}
function lI(C) {
  return CD(C);
}
function DI(C) {
  if (typeof C == "string") {
    const A = C in Hc ? Hc[C] : C;
    if (A === "GlorotNormal")
      return new Vn();
    if (A === "GlorotUniform")
      return new qn();
    if (A === "HeNormal")
      return new Wn();
    if (A === "HeUniform")
      return new Tn();
    if (A === "LeCunNormal")
      return new Zn();
    if (A === "LeCunUniform")
      return new Xn();
    {
      const g = {};
      return g.className = A, g.config = {}, xc(g);
    }
  }
  return C instanceof AB ? C : xc(C);
}
function On(C) {
  return Array.isArray(C) && Array.isArray(C[0]);
}
function le(C) {
  return C.length === 0 ? [] : Array.isArray(C[0]) ? C : [C];
}
function ig(C) {
  let A;
  if (Array.isArray(C)) {
    if (C.length !== 1)
      throw new X(`Expected Tensor length to be 1; got ${C.length}`);
    A = C[0];
  } else
    A = C;
  return A;
}
function qg(C) {
  if (Array.isArray(C) && Array.isArray(C[0])) {
    if (C.length === 1)
      return C[0];
    throw new X(`Expected exactly 1 Shape; got ${C.length}`);
  }
  return C;
}
function Be(C) {
  let A = 0;
  for (const g of C)
    g.shape.length === 0 ? A += 1 : A += g.shape.reduce((I, B) => I * B);
  return A;
}
const qc = "Variable";
class SK {
  constructor(A, g = "float32", I = qc, B = !0, Q = null) {
    this.dtype = g ?? "float32", this.shape = A.shape, this.id = Ty(), I = I ?? qc, this.originalName = Xy(I), this.name = Oy(this.originalName), this.trainable_ = B, this.constraint = Q, this.val = function(E, i = !0, o, t) {
      return v.makeVariable(E, i, o, t);
    }(A, this.trainable_, this.name, this.dtype);
  }
  read() {
    return this.assertNotDisposed(), this.val;
  }
  write(A) {
    return this.assertNotDisposed(), function(g, I) {
      if (g.shape.toString() !== I.shape.toString())
        throw new Error("Shape mismatch: " + JSON.stringify(g.shape) + " vs. " + JSON.stringify(I.shape));
    }(this.val, A), this.val.id !== A.id && (this.val.assign(A), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(A) {
    this.trainable_ = A, this.val.trainable = A;
  }
}
function vn(C) {
  return C.map((A) => A.read());
}
function ED(C) {
  C.forEach((A) => {
    A[0].write(A[1]);
  });
}
class bI {
  constructor(A) {
    this.dtype = A.dtype, this.shape = A.shape, A.shape != null ? this.ndim = A.shape.length : this.ndim = A.ndim, this.maxNDim = A.maxNDim, this.minNDim = A.minNDim, this.axes = A.axes || {};
  }
}
class uB {
  constructor(A, g, I, B, Q, E, i) {
    this.dtype = A, this.shape = g, this.sourceLayer = I, this.inputs = B, this.callArgs = Q, this.outputTensorIndex = i, this.id = Ty(), E != null && (this.originalName = Xy(E), this.name = Oy(this.originalName)), this.rank = g.length;
  }
}
let pK = 0;
class Aa {
  constructor(A, g) {
    this.callArgs = g, this.id = pK++, this.outboundLayer = A.outboundLayer, this.inboundLayers = A.inboundLayers, this.nodeIndices = A.nodeIndices, this.tensorIndices = A.tensorIndices, this.inputTensors = A.inputTensors, this.outputTensors = A.outputTensors, this.inputMasks = A.inputMasks, this.outputMasks = A.outputMasks, this.inputShapes = A.inputShapes, this.outputShapes = A.outputShapes;
    for (const I of A.inboundLayers)
      I != null && I.outboundNodes.push(this);
    A.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const A = [];
    for (const g of this.inboundLayers)
      g != null ? A.push(g.name) : A.push(null);
    return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: A, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
  }
}
let MK = 0;
class pg extends ei {
  constructor(A = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = MK++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = [];
    let g = A.name;
    if (!g) {
      const I = this.getClassName();
      g = mB(I) + "_" + $s(I);
    }
    if (this.name = g, this.trainable_ = A.trainable == null || A.trainable, A.inputShape != null || A.batchInputShape != null) {
      let I;
      if (A.batchInputShape != null)
        I = A.batchInputShape;
      else if (A.inputShape != null) {
        let Q = null;
        A.batchSize != null && (Q = A.batchSize), I = [Q].concat(A.inputShape);
      }
      this.batchInputShape = I;
      let B = A.dtype;
      B == null && (B = A.inputDType), B == null && (B = "float32"), this.dtype = B;
    }
    A.weights != null ? this.initialWeights = A.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1;
  }
  static nodeKey(A, g) {
    return A.name + "_ib-" + g.toString();
  }
  getNodeAtIndex(A, g) {
    if (this.inboundNodes.length === 0)
      throw new PC(`The layer has never been called and thus has no defined ${g}.`);
    if (this.inboundNodes.length <= A)
      throw new X(`Asked to get ${g} at node ${A}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[A];
  }
  getInputAt(A) {
    return rC(this.getNodeAtIndex(A, "input").inputTensors);
  }
  getOutputAt(A) {
    return rC(this.getNodeAtIndex(A, "output").outputTensors);
  }
  get input() {
    if (this.inboundNodes.length > 1)
      throw new yB(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new yB(`Layer ${this.name} is not connected, no input to return.`);
    return rC(this.getNodeAtIndex(0, "input").inputTensors);
  }
  get output() {
    if (this.inboundNodes.length === 0)
      throw new yB(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new yB(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return rC(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  calculateLosses() {
    return this.losses.map((A) => A());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(A) {
    this._built = A;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(A) {
    this._trainableWeights.forEach((g) => g.trainable = A), this.trainable_ = A;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((A) => A.trainable) : [];
  }
  set trainableWeights(A) {
    this._trainableWeights = A;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((A) => !A.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(A) {
    this._nonTrainableWeights = A;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  assertInputCompatibility(A) {
    if (A = eI(A), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    const g = eI(this.inputSpec);
    if (A.length !== g.length)
      throw new X(`Layer ${this.name} expects ${g.length} inputs, but it received ${A.length} input tensors. Input received: ${A}`);
    for (let I = 0; I < A.length; I++) {
      const B = A[I], Q = g[I];
      if (Q == null)
        continue;
      const E = B.rank;
      if (Q.ndim != null && E !== Q.ndim)
        throw new X(`Input ${I} is incompatible with layer ${this.name}: expected ndim=${Q.ndim}, found ndim=${E}`);
      if (Q.maxNDim != null && E > Q.maxNDim)
        throw new X(`Input ${I} is incompatible with layer ${this.name}: expected max_ndim=${Q.maxNDim}, found ndim=${E}`);
      if (Q.minNDim != null && E < Q.minNDim)
        throw new X(`Input ${I} is incompatible with layer ${this.name}: expected min_ndim=${Q.minNDim}, found ndim=${E}.`);
      if (Q.dtype != null && B.dtype !== Q.dtype)
        throw new X(`Input ${I} is incompatible with layer ${this.name} : expected dtype=${Q.dtype}, found dtype=${B.dtype}.`);
      if (Q.axes) {
        const i = B.shape;
        for (const o in Q.axes) {
          const t = Number(o), e = Q.axes[o], s = t >= 0 ? i[t] : i[i.length + t];
          if (e != null && [e, null].indexOf(s) === -1)
            throw new X(`Input ${I} is incompatible with layer ${this.name}: expected axis ${t} of input shape to have value ${e} but got shape ${i}.`);
        }
      }
      if (Q.shape != null)
        for (let i = 0; i < Q.shape.length; ++i) {
          const o = Q.shape[i], t = B.shape[i];
          if (o != null && t != null && o !== t)
            throw new X(`Input ${I} is incompatible with layer ${this.name}: expected shape=${Q.shape}, found shape=${B.shape}.`);
        }
    }
  }
  call(A, g) {
    return A;
  }
  invokeCallHook(A, g) {
    this._callHook != null && this._callHook(A, g);
  }
  setCallHook(A) {
    this._callHook = A;
  }
  clearCallHook() {
    this._callHook = null;
  }
  apply(A, g) {
    g = g || {}, this.assertNotDisposed();
    const I = eI(A);
    let B = !0;
    for (const E of I)
      if (!(E instanceof uB)) {
        B = !1;
        break;
      }
    let Q = !0;
    for (const E of I)
      if (E instanceof uB) {
        Q = !1;
        break;
      }
    if (B === Q)
      throw new X("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return jQ(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(A);
        const E = [];
        for (const i of eI(A))
          E.push(i.shape);
        this.build(rC(E)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && Q && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(A), Q) {
        let E = this.call(A, g);
        const i = eI(E), o = [];
        for (let t of i)
          I.indexOf(t) !== -1 && (t = t.clone()), o.push(t);
        if (E = rC(o), this.activityRegularizer != null)
          throw new dg("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return E;
      }
      {
        const E = function(e) {
          e = eI(e);
          const s = [];
          for (const a of e)
            s.push(a.shape);
          return rC(s);
        }(A), i = this.computeOutputShape(E);
        let o;
        const t = "float32";
        if (this.warnOnIncompatibleInputShape(Array.isArray(A) ? E[0] : E), o = i != null && i.length > 0 && Array.isArray(i[0]) ? i.map((e, s) => new uB(t, e, this, eI(A), g, this.name, s)) : new uB(t, i, this, eI(A), g, this.name), this.addInboundNode(A, o, null, null, E, i, g), this._refCount++, this.activityRegularizer != null)
          throw new dg("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return o;
      }
    });
  }
  warnOnIncompatibleInputShape(A) {
    if (this.batchInputShape != null)
      if (A.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(A)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let g = !1;
        this.batchInputShape.forEach((I, B) => {
          I != null && A[B] != null && A[B] !== I && (g = !0);
        }), g && console.warn(`The shape of the input tensor (${JSON.stringify(A)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new yB(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const A = [];
    for (const g of this.inboundNodes) {
      const I = JSON.stringify(g.outputShapes);
      A.indexOf(I) === -1 && A.push(I);
    }
    if (A.length === 1) {
      const g = this.inboundNodes[0].outputShapes;
      return Array.isArray(g) && Array.isArray(g[0]) && g.length === 1 ? g[0] : g;
    }
    throw new yB(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  countParams() {
    if (!this.built)
      throw new PC(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return Be(this.weights);
  }
  build(A) {
    this.built = !0;
  }
  getWeights(A = !1) {
    return vn(A ? this.trainableWeights : this.weights);
  }
  setWeights(A) {
    IA(() => {
      const g = this.weights;
      if (g.length !== A.length)
        throw new X(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${A.length}, but the layer was expecting ${g.length} weights. Provided weights: ${A}...`);
      if (g.length === 0)
        return;
      const I = [], B = vn(g);
      for (let Q = 0; Q < B.length; ++Q) {
        const E = B[Q], i = g[Q], o = A[Q];
        if (!Zg(E.shape, o.shape))
          throw new X(`Layer weight shape ${E.shape} not compatible with provided weight shape ${o.shape}`);
        I.push([i, o]);
      }
      ED(I);
    });
  }
  addWeight(A, g, I, B, Q, E, i, o) {
    if (this._addedWeightNames.indexOf(A) !== -1)
      throw new X(`Duplicate weight name ${A} for layer ${this.name}`);
    this._addedWeightNames.push(A), I == null && (I = "float32"), this.fastWeightInitDuringBuild && (B = o != null ? o() : DI("zeros"));
    const t = B.apply(g, I), e = new SK(t, I, A, E, i);
    return t.dispose(), Q != null && this.addLoss(() => Q.apply(e.read())), E == null && (E = !0), E ? this._trainableWeights.push(e) : this._nonTrainableWeights.push(e), e;
  }
  setFastWeightInitDuringBuild(A) {
    this.fastWeightInitDuringBuild = A;
  }
  addLoss(A) {
    A == null || Array.isArray(A) && A.length === 0 || (A = eI(A), this._losses !== void 0 && this._losses !== null && this.losses.push(...A));
  }
  computeOutputShape(A) {
    return A;
  }
  computeMask(A, g) {
    if (!this.supportsMasking) {
      if (g != null) {
        if (!Array.isArray(g))
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
        g.forEach((I) => {
          if (I != null)
            throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
        });
      }
      return null;
    }
    return g;
  }
  addInboundNode(A, g, I, B, Q, E, i = null) {
    const o = eI(A);
    g = eI(g), I = eI(I), B = eI(B), Q = le(Q), E = le(E);
    const t = [], e = [], s = [];
    for (const a of o)
      t.push(a.sourceLayer), e.push(a.nodeIndex), s.push(a.tensorIndex);
    new Aa({ outboundLayer: this, inboundLayers: t, nodeIndices: e, tensorIndices: s, inputTensors: o, outputTensors: g, inputMasks: I, outputMasks: B, inputShapes: Q, outputShapes: E }, i);
    for (let a = 0; a < g.length; a++)
      g[a].sourceLayer = this, g[a].nodeIndex = this.inboundNodes.length - 1, g[a].tensorIndex = a;
  }
  getConfig() {
    const A = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (A.batchInputShape = this.batchInputShape), this.dtype != null && (A.dtype = this.dtype), A;
  }
  disposeWeights() {
    return this.weights.forEach((A) => A.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let A = 0;
    return --this._refCount == 0 && (A = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: A };
  }
}
function jy(C, A, g) {
  if ((A == null || g != null && g > 0) && (A = C.sourceLayer, g = C.nodeIndex), A.inboundNodes.length === 0)
    return [C];
  {
    const I = A.inboundNodes[g];
    if (I.inboundLayers.length === 0)
      return I.inputTensors;
    {
      const B = [];
      for (let Q = 0; Q < I.inboundLayers.length; Q++) {
        const E = jy(I.inputTensors[Q], I.inboundLayers[Q], I.nodeIndices[Q]);
        for (const i of E)
          B.indexOf(i) === -1 && B.push(i);
      }
      return B;
    }
  }
}
class Pi extends pg {
  constructor(A) {
    if (super({ dtype: A.dtype, name: A.name != null ? A.name : $s("input").toString() }), A.batchSize == null && (A.batchSize = null), A.sparse == null && (A.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = A.sparse, A.inputShape != null && A.batchInputShape != null)
      throw new X("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let g = A.batchInputShape;
    if (g == null) {
      if (A.inputShape == null)
        throw new X("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      g = [A.batchSize].concat(A.inputShape);
    } else if (A.batchSize != null)
      throw new X("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const I = A.dtype || "float32";
    this.batchInputShape = g, this.dtype = I, this.inputSpec = [{ shape: g }];
    const B = new uB(this.dtype, this.batchInputShape, this, [], {}, this.name);
    B.nodeIndex = 0, B.tensorIndex = 0, new Aa({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [B], outputTensors: [B], inputMasks: [null], outputMasks: [null], inputShapes: [g], outputShapes: [g] });
  }
  apply(A, g) {
    throw new X(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
  }
}
Pi.className = "InputLayer", RA(Pi);
class oQ {
  constructor(A) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, A instanceof oQ)
      for (const g in A.id2Value)
        this.id2Value[g] = A.id2Value[g], g in A.id2Mask && (this.id2Mask[g] = A.id2Mask[g]);
    else {
      if (A == null)
        return;
      for (const g of A)
        this.add(g.key, g.value);
    }
  }
  add(A, g, I) {
    if (this.id2Value[A.id] != null)
      throw new X(`Duplicate key: name=${A.name}, id=${A.id}`);
    return this.id2Value[A.id] = function(B, Q) {
      if (B.dtype == null || B.dtype === Q.dtype)
        return Q;
      try {
        return bA(Q, B.dtype);
      } catch {
        throw new X(`The dtype of the feed (${Q.dtype}) can not be cast to the dtype of the key '${B.name}' (${B.dtype}).`);
      }
    }(A, g), this.name2Id[A.name] = A.id, I != null && (this.id2Mask[A.id] = I), this;
  }
  addFeed(A) {
    this.add(A.key, A.value);
  }
  hasKey(A) {
    return this.id2Value[A.id] != null;
  }
  names() {
    return Object.keys(this.name2Id);
  }
  getValue(A) {
    if (A instanceof uB) {
      if (this.id2Value[A.id] == null)
        throw new X(`Nonexistent key: ${A.name}`);
      return this.id2Value[A.id];
    }
    {
      const g = this.name2Id[A];
      if (g == null)
        throw new X(`Feed dict has no SymbolicTensor name: ${A}`);
      return this.id2Value[g];
    }
  }
  getMask(A) {
    if (A instanceof uB) {
      if (this.id2Value[A.id] == null)
        throw new X(`Nonexistent key: ${A.name}`);
      return this.id2Mask[A.id];
    }
    {
      const g = this.name2Id[A];
      if (g == null)
        throw new X(`Feed dict has no SymbolicTensor name: ${A}`);
      return this.id2Mask[g];
    }
  }
  disposeMasks() {
    this.id2Mask != null && Ug(this.id2Mask);
  }
}
const Ge = new qy(), ye = new qy();
function Li(C, A, g, I) {
  const B = g != null && g.training, Q = Array.isArray(C), E = Q ? C : [C], i = E.map((h) => h.name), o = [], t = A.names();
  for (const h of i)
    t.indexOf(h) !== -1 ? o.push(A.getValue(h)) : o.push(null);
  I != null && (I.maxNumTensors = -1 / 0, I.minNumTensors = 1 / 0);
  const e = i.join(",") + "|" + A.names().sort().join(",");
  let s, a = Ge.get(e);
  if (a == null) {
    const h = function(w, G) {
      f(w != null && w.length > 0, () => "Expected at least one fetch, got none");
      let D = [], l = {};
      if (w.length === 1) {
        const d = Vc(w[0], G);
        D = d.sorted, l = d.recipientMap;
      } else {
        const d = /* @__PURE__ */ new Set();
        for (const N of w) {
          const { sorted: k, recipientMap: p } = Vc(N, G);
          for (const Y of k)
            d.has(Y.name) || (D.push(Y), d.add(Y.name));
          for (const Y in p)
            l[Y] == null && (l[Y] = /* @__PURE__ */ new Set()), p[Y].forEach((M) => l[Y].add(M));
        }
      }
      return { sorted: D, recipientCounts: UK(l) };
    }(E, A);
    a = h.sorted, s = h.recipientCounts, Ge.put(e, a), ye.put(e, s);
  }
  s = {}, B || Object.assign(s, ye.get(e));
  const r = new oQ(A);
  for (let h = 0; h < a.length; ++h) {
    if (I != null) {
      const L = ne().numTensors;
      L > I.maxNumTensors && (I.maxNumTensors = L), L < I.minNumTensors && (I.minNumTensors = L);
    }
    const w = a[h], G = w.sourceLayer;
    if (G instanceof Pi)
      continue;
    const D = [], l = [], d = [];
    let N = !1;
    for (const L of w.inputs) {
      const m = r.getValue(L), x = r.getMask(L);
      D.push(m), l.push(x), x != null && (N = !0), B || (s[L.name]--, s[L.name] !== 0 || A.hasKey(L) || i.indexOf(L.name) !== -1 || m.isDisposed || L.sourceLayer.stateful === !0 || d.push(m));
    }
    N && ((g = g || {}).mask = l[0]);
    const k = eI(G.apply(D, g));
    let p = null;
    G.supportsMasking && (p = G.computeMask(D, l));
    const Y = YK(w), M = Array.isArray(Y) ? Y : [Y];
    for (let L = 0; L < M.length; ++L) {
      r.hasKey(M[L]) || r.add(M[L], k[L], Array.isArray(p) ? p[0] : p);
      const m = i.indexOf(M[L].name);
      m !== -1 && (o[m] = k[L]);
    }
    B || Ug(d);
  }
  return r.disposeMasks(), Q ? o : o[0];
}
function UK(C) {
  const A = {};
  for (const g in C)
    A[g] = C[g].size;
  return A;
}
function Vc(C, A) {
  const g = /* @__PURE__ */ new Set(), I = [], B = {};
  for (const i of A.names())
    g.add(i);
  const Q = [], E = [];
  for (Q.push(C); Q.length > 0; ) {
    const i = Q[Q.length - 1];
    if (g.has(i.name)) {
      Q.pop();
      continue;
    }
    const o = E[E.length - 1] === Q.length - 1;
    if (i.inputs.length === 0 || o)
      Q.pop(), I.push(i), g.add(i.name), o && E.pop();
    else {
      E.push(Q.length - 1);
      for (const t of i.inputs)
        B[t.name] == null && (B[t.name] = /* @__PURE__ */ new Set()), B[t.name].add(i.name), g.has(t.name) || Q.push(t);
    }
  }
  return { sorted: I, recipientMap: B };
}
function YK(C) {
  let A;
  if (C.sourceLayer.inboundNodes.length === 1)
    A = C.sourceLayer.output;
  else {
    let g = null;
    for (let I = 0; I < C.sourceLayer.inboundNodes.length; ++I)
      for (const B of C.sourceLayer.inboundNodes[I].outputTensors)
        if (B.id === C.id) {
          g = I;
          break;
        }
    A = C.sourceLayer.getOutputAt(g);
  }
  return A;
}
function iD(C, A) {
  return IA(() => eC($A(z(C, C), A, !0)));
}
aA().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, function(C) {
  Ge != null && Ge.setMaxEntries(C), ye != null && ye.setMaxEntries(C);
});
class ht extends ei {
  getConfig() {
    return {};
  }
}
class Wc extends ht {
  constructor(A) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = A.maxValue != null ? A.maxValue : this.defaultMaxValue, this.axis = A.axis != null ? A.axis : this.defaultAxis;
  }
  apply(A) {
    return IA(() => {
      const g = iD(A, this.axis), I = UC(g, 0, this.maxValue);
      return z(A, Cg(I, kA(mI(), g)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
Wc.className = "MaxNorm", RA(Wc);
class Tc extends ht {
  constructor(A) {
    super(), this.defaultAxis = 0, this.axis = A.axis != null ? A.axis : this.defaultAxis;
  }
  apply(A) {
    return IA(() => Cg(A, kA(mI(), iD(A, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
Tc.className = "UnitNorm", RA(Tc);
class Zc extends ht {
  apply(A) {
    return rE(A);
  }
}
Zc.className = "NonNeg", RA(Zc);
class Xc extends ht {
  constructor(A) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = A.minValue != null ? A.minValue : this.defaultMinValue, this.maxValue = A.maxValue != null ? A.maxValue : this.defaultMaxValue, this.rate = A.rate != null ? A.rate : this.defaultRate, this.axis = A.axis != null ? A.axis : this.defaultAxis;
  }
  apply(A) {
    return IA(() => {
      const g = iD(A, this.axis), I = kA(z(this.rate, UC(g, this.minValue, this.maxValue)), z(1 - this.rate, g));
      return z(A, Cg(I, kA(mI(), g)));
    });
  }
  getConfig() {
    return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
  }
}
Xc.className = "MinMaxNorm", RA(Xc);
const Oc = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" };
function HI(C) {
  return CD(C);
}
function vc(C, A = {}) {
  return at(C, vC.getMap().classNameMap, A, "constraint");
}
function xI(C) {
  return C == null ? null : typeof C == "string" ? vc({ className: C in Oc ? Oc[C] : C, config: {} }) : C instanceof ht ? C : vc(C);
}
async function JQ(C) {
  if (C == null)
    return;
  const A = [], g = [], I = [];
  for (const B in C) {
    const Q = C[B];
    if (typeof Q != "number") {
      const E = Q;
      A.push(E.data()), g.push(B), I.push(E);
    }
  }
  if (A.length > 0) {
    const B = await Promise.all(A);
    for (let Q = 0; Q < B.length; ++Q)
      C[g[Q]] = B[Q][0];
    Ug(I);
  }
}
function $y(C) {
  if (C != null)
    for (const A in C) {
      const g = C[A];
      typeof g != "number" && g.dispose();
    }
}
var Pc;
(function(C) {
  C[C.SILENT = 0] = "SILENT", C[C.VERBOSE = 1] = "VERBOSE";
})(Pc || (Pc = {}));
class zi {
  constructor() {
    this.validationData = null;
  }
  setParams(A) {
    this.params = A;
  }
  async onEpochBegin(A, g) {
  }
  async onEpochEnd(A, g) {
  }
  async onBatchBegin(A, g) {
  }
  async onBatchEnd(A, g) {
  }
  async onTrainBegin(A) {
  }
  async onTrainEnd(A) {
  }
  setModel(A) {
  }
}
class JK {
  constructor(A, g = 10) {
    A == null && (A = []), this.callbacks = A, this.queueLength = g;
  }
  append(A) {
    this.callbacks.push(A);
  }
  setParams(A) {
    for (const g of this.callbacks)
      g.setParams(A);
  }
  setModel(A) {
    for (const g of this.callbacks)
      g.setModel(A);
  }
  async onEpochBegin(A, g) {
    g == null && (g = {});
    for (const I of this.callbacks)
      await I.onEpochBegin(A, g);
  }
  async onEpochEnd(A, g) {
    g == null && (g = {});
    for (const I of this.callbacks)
      await I.onEpochEnd(A, g);
  }
  async onBatchBegin(A, g) {
    g == null && (g = {});
    for (const I of this.callbacks)
      await I.onBatchBegin(A, g);
  }
  async onBatchEnd(A, g) {
    g == null && (g = {});
    for (const I of this.callbacks)
      await I.onBatchEnd(A, g);
  }
  async onTrainBegin(A) {
    A == null && (A = {});
    for (const g of this.callbacks)
      await g.onTrainBegin(A);
  }
  async onTrainEnd(A) {
    A == null && (A = {});
    for (const g of this.callbacks)
      await g.onTrainEnd(A);
  }
}
class fK extends zi {
  constructor() {
    super();
  }
  async onEpochBegin(A) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(A, g) {
    g == null && (g = {});
    const I = g.size == null ? 0 : g.size;
    this.seen += I;
    for (const B in g) {
      const Q = g[B];
      if (typeof Q == "number")
        this.totals.hasOwnProperty(B) || (this.totals[B] = 0), this.totals[B] = this.totals[B] + Q * I;
      else {
        let E;
        B in this.totals ? E = this.totals[B] : this.totals[B] = 0;
        const i = IA(() => kA(this.totals[B], z(Q, I)));
        this.totals[B] = i, E != null && E.dispose();
      }
    }
  }
  async onEpochEnd(A, g) {
    if (g != null)
      for (const I of this.params.metrics)
        this.totals[I] != null && (typeof this.totals[I] == "number" ? g[I] = this.totals[I] / this.seen : IA(() => {
          const B = z(Cg(1, this.seen), this.totals[I]);
          g[I] = B, this.totals[I].dispose(), JC(g[I]);
        }));
  }
}
class LK extends zi {
  async onTrainBegin(A) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(A, g) {
    g == null && (g = {}), this.epoch.push(A);
    for (const I in g)
      this.history[I] == null && (this.history[I] = []), this.history[I].push(g[I]);
  }
  async syncData() {
    const A = [], g = [], I = [];
    for (const Q in this.history) {
      const E = this.history[Q];
      for (let i = 0; i < E.length; ++i)
        if (typeof E[i] != "number") {
          const o = E[i];
          A.push(o.data()), g.push(Q), I.push(i);
        }
    }
    const B = await Promise.all(A);
    for (let Q = 0; Q < B.length; ++Q)
      this.history[g[Q]][I[Q]].dispose(), this.history[g[Q]][I[Q]] = B[Q][0];
  }
}
class mK extends zi {
  constructor(A, g) {
    if (super(), this.currentEpoch = 0, this.nowFunc = A.nowFunc, this.nextFrameFunc = A.nextFrameFunc || zs, this.yieldEvery = g || "auto", this.yieldEvery === "auto" && (this.yieldEvery = 125), this.yieldEvery === "never" && A.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    nn(this.yieldEvery) && (this.maybeWait = function(I, B, Q) {
      let E, i = Q != null ? Q() : nC();
      return (...o) => {
        const t = Q != null ? Q() : nC();
        return t - i < B || (i = t, E = I(...o)), E;
      };
    }(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = A.onTrainBegin, this.trainEnd = A.onTrainEnd, this.epochBegin = A.onEpochBegin, this.epochEnd = A.onEpochEnd, this.batchBegin = A.onBatchBegin, this.batchEnd = A.onBatchEnd, this.yield = A.onYield;
  }
  async maybeWait(A, g, I) {
    const B = [];
    this.yield != null && (await JQ(I), B.push(this.yield(A, g, I))), B.push(this.nextFrameFunc()), await Promise.all(B);
  }
  async onEpochBegin(A, g) {
    this.currentEpoch = A, this.epochBegin != null && (await JQ(g), await this.epochBegin(A, g));
  }
  async onEpochEnd(A, g) {
    const I = [];
    this.epochEnd != null && (await JQ(g), I.push(this.epochEnd(A, g))), this.yieldEvery === "epoch" && I.push(this.nextFrameFunc()), await Promise.all(I);
  }
  async onBatchBegin(A, g) {
    this.batchBegin != null && (await JQ(g), await this.batchBegin(A, g));
  }
  async onBatchEnd(A, g) {
    const I = [];
    this.batchEnd != null && (await JQ(g), I.push(this.batchEnd(A, g))), this.yieldEvery === "batch" ? I.push(this.nextFrameFunc()) : nn(this.yieldEvery) && I.push(this.maybeWait(this.currentEpoch, A, g)), await Promise.all(I);
  }
  async onTrainBegin(A) {
    this.trainBegin != null && (await JQ(A), await this.trainBegin(A));
  }
  async onTrainEnd(A) {
    this.trainEnd != null && (await JQ(A), await this.trainEnd(A));
  }
}
function _y(C, A) {
  return C == null && (C = {}), C instanceof zi ? [C] : Array.isArray(C) && C[0] instanceof zi ? C : eI(C).map((g) => new mK(g, A));
}
class ZC {
  constructor() {
  }
  static registerCallbackConstructor(A, g) {
    f(A >= 0 && Number.isInteger(A), () => `Verbosity level is expected to be an integer >= 0, but got ${A}`), ZC.checkForDuplicate(g), ZC.constructors[A] == null && (ZC.constructors[A] = []), ZC.constructors[A].push(g);
  }
  static checkForDuplicate(A) {
    for (const g in ZC.constructors)
      ZC.constructors[+g].forEach((I) => {
        if (I === A)
          throw new X("Duplicate callback constructor.");
      });
  }
  static clear() {
    ZC.constructors = {};
  }
  static createCallbacks(A) {
    const g = [];
    for (const I in ZC.constructors) {
      const B = +I;
      A >= B && g.push(...ZC.constructors[B]);
    }
    return g.map((I) => new I());
  }
}
function Ad(C, A, g, I, B, Q, E, i, o) {
  const t = new LK(), e = [new fK(), ...ZC.createCallbacks(A)];
  C != null && e.push(...C), e.push(t);
  const s = new JK(e);
  return s.setParams({ epochs: g, initialEpoch: I, samples: B, steps: Q, batchSize: E, verbose: A, doValidation: i, metrics: o }), { callbackList: s, history: t };
}
function WB(C, A = {}, g = !1) {
  return at(C, vC.getMap().classNameMap, A, "layer", g);
}
function de(C, A) {
  return IA(() => {
    C.dtype !== "float32" && (C = bA(C, "float32"));
    const g = $A(vi(C), A, !0), I = Zs(g.shape, mI()), B = eC(sQ(g, I));
    return Cg(C, B);
  });
}
function Fe(C, A) {
  return IA(() => UI(vi(tg(A, C)), -1));
}
function Pn(C, A) {
  return IA(() => UI(EC(tg(A, C)), -1));
}
function zn(C, A) {
  return IA(() => {
    const g = tg(C, A), I = UC(EC(C), mI(), Number.MAX_VALUE), B = EC(Cg(g, I));
    return z(100, UI(B, -1));
  });
}
function ji(C, A, g = !1) {
  return IA(() => {
    if (g)
      A = Nh(A);
    else {
      const I = $A(A, A.shape.length - 1, !0);
      A = Cg(A, I);
    }
    return A = UC(A, mI(), 1 - mI()), RI($A(z(bA(C, "float32"), NB(A)), A.shape.length - 1));
  });
}
function Re(C, A, g = !1) {
  return IA(() => {
    const I = bA(vs(function(Q) {
      const E = [nQ(Q.shape)];
      return CA(Q, E);
    }(C)), "int32"), B = (A = UC(A, mI(), 1 - mI())).shape;
    return ji(CA(YG(I, B[B.length - 1]), B), A, g);
  });
}
function Ne(C, A) {
  return IA(() => {
    let g;
    return g = UC(A, mI(), 1 - mI()), g = NB(Cg(g, tg(1, g))), UI(function(I, B) {
      if (!Zg(I.shape, B.shape))
        throw new X(`logits and labels must have the same shape, but got shapes ${JSON.stringify(I.shape)} and ${JSON.stringify(B.shape)}`);
      return IA(() => {
        const Q = rE(B), E = RI(EC(B));
        return kA(tg(Q, z(B, I)), pG(ZB(E)));
      });
    }(C, g), -1);
  });
}
function gd(C, A) {
  return IA(() => {
    const g = de(C, -1), I = de(A, -1), B = z(g, I);
    return RI($A(B, -1));
  });
}
ZC.constructors = {};
const ue = { meanSquaredError: Fe, meanAbsoluteError: Pn, meanAbsolutePercentageError: zn, meanSquaredLogarithmicError: function(C, A) {
  return IA(() => {
    const g = UC(A, mI(), Number.MAX_VALUE), I = NB(kA(1, g)), B = UC(C, mI(), Number.MAX_VALUE), Q = NB(kA(1, B));
    return UI(vi(tg(I, Q)), -1);
  });
}, squaredHinge: function(C, A) {
  return IA(() => {
    const g = sQ(0, tg(1, z(C, A)));
    return UI(vi(g), -1);
  });
}, hinge: function(C, A) {
  return IA(() => {
    const g = sQ(0, tg(1, z(C, A)));
    return UI(g, -1);
  });
}, categoricalHinge: function(C, A) {
  return IA(() => {
    const g = $A(z(C, A), -1), I = nB(z(tg(1, C), A), -1);
    return sQ(0, kA(1, tg(I, g)));
  });
}, logcosh: function(C, A) {
  return IA(() => {
    const g = Math.log(2), I = tg(A, C), B = tg(kA(I, Et(z(-2, I))), g);
    return UI(B, -1);
  });
}, categoricalCrossentropy: ji, sparseCategoricalCrossentropy: Re, binaryCrossentropy: Ne, kullbackLeiblerDivergence: function(C, A) {
  return IA(() => {
    const g = UC(C, mI(), 1), I = UC(A, mI(), 1);
    return $A(z(C, NB(Cg(g, I))), -1);
  });
}, poisson: function(C, A) {
  return IA(() => {
    const g = NB(kA(mI(), A));
    return UI(tg(A, z(C, g)), -1);
  });
}, cosineProximity: gd };
function Ua(C) {
  if (typeof C == "string") {
    if (C in ue)
      return ue[C];
    let A = `Unknown loss ${C}`;
    throw C.toLowerCase().includes("softmaxcrossentropy") && (A = `Unknown loss ${C}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new X(A);
  }
  return C;
}
function Id(C, A) {
  return IA(() => {
    const g = z(0.5, $C(A)), I = PB(LC(A, g), C.dtype);
    return UI(RB(C, I), -1);
  });
}
function Cd(C, A) {
  return IA(() => PB(RB(Wi(C, -1), Wi(A, -1)), "float32"));
}
function bK(C, A) {
  return Ne(C, A);
}
function HK(C, A) {
  return C.rank === A.rank && (C = ot(C, [C.rank - 1])), (A = Wi(A, -1)).dtype !== C.dtype && (A = bA(A, C.dtype)), bA(RB(C, A), "float32");
}
const Bd = ji, Qd = Re, ke = { binaryAccuracy: Id, categoricalAccuracy: Cd, precision: function(C, A) {
  return IA(() => {
    const g = function(Q, E) {
      return IA(() => bA($A(XB(RB(Q, 1), RB(E, 1))), "float32"));
    }(C, A), I = function(Q, E) {
      return IA(() => bA($A(XB(RB(Q, 0), RB(E, 1))), "float32"));
    }(C, A), B = kA(g, I);
    return bA(tC(LC(B, 0), Cg(g, B), 0), "float32");
  });
}, categoricalCrossentropy: Bd, sparseCategoricalCrossentropy: Qd, mse: Fe, MSE: Fe, mae: Pn, MAE: Pn, mape: zn, MAPE: zn, cosine: gd };
function xK(C) {
  if (typeof C == "string" && C in ke)
    return ke[C];
  if (typeof C != "string" && C != null)
    return C;
  throw new X(`Unknown metric ${C}`);
}
function Vt(C) {
  if (dB(C !== null, `Unknown LossOrMetricFn ${C}`), typeof C == "string")
    return C;
  {
    let A;
    for (const g of Object.keys(ue))
      if (ue[g] === C) {
        A = g;
        break;
      }
    if (A !== void 0)
      return A;
    for (const g of Object.keys(ke))
      if (ke[g] === C) {
        A = g;
        break;
      }
    return A !== void 0 ? A : C.name;
  }
}
const qK = 1048576;
function zc(C, A, g = !1) {
  if (C == null || typeof C != "object" || Object.getPrototypeOf(C) !== Object.prototype || !jn(C))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (g) {
    const I = JSON.stringify(C);
    I.length > qK && console.warn(`User-defined metadata of model "${A}" is too large in size (length=${I.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`);
  }
}
function jn(C) {
  if (C === null)
    return !0;
  if (typeof C == "object") {
    if (Object.getPrototypeOf(C) === Object.prototype) {
      const A = Object.keys(C);
      for (const g of A)
        if (typeof g != "string" || !jn(C[g]))
          return !1;
      return !0;
    }
    if (Array.isArray(C)) {
      for (const A of C)
        if (!jn(A))
          return !1;
      return !0;
    }
    return !1;
  }
  {
    const A = typeof C;
    return A === "string" || A === "number" || A === "boolean";
  }
}
function VK(C, A, g, I = console.log) {
  const B = function(e) {
    let s = !0;
    const a = [], r = [];
    for (const h in e.nodesByDepth)
      a.push(e.nodesByDepth[h]);
    for (const h of a) {
      if (h.length > 1 || h.length === 1 && h[0].inboundLayers.length > 1) {
        s = !1;
        break;
      }
      r.push(...h);
    }
    if (s)
      for (const h of e.layers) {
        let w = !1;
        for (const G of h.inboundNodes)
          if (r.indexOf(G) !== -1) {
            if (w) {
              s = !1;
              break;
            }
            w = !0;
          }
        if (!s)
          break;
      }
    return s;
  }(C), Q = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  let E;
  if (B ? (A = A || 90, g = g || [0.32, 0.61, 0.89, 1]) : (A = A || 115, g = g || [0.24, 0.48, 0.7, 0.8, 1]), g[g.length - 1] <= 1 && (g = g.map((e) => Math.floor(A * e))), !B) {
    Q.push("Receives inputs"), E = [];
    for (const e in C.nodesByDepth)
      E.push(...C.nodesByDepth[e]);
  }
  I("_".repeat(A)), Ke(Q, g, I), I("=".repeat(A));
  const i = C.layers;
  for (let e = 0; e < i.length; ++e)
    B ? WK(i[e], g, I) : TK(i[e], g, E, I), I((e === i.length - 1 ? "=" : "_").repeat(A));
  C.checkTrainableWeightsConsistency();
  const o = function(e) {
    let s;
    return s = e.collectedTrainableWeights != null ? Be(e.collectedTrainableWeights) : Be(e.trainableWeights), s;
  }(C), t = Be(C.nonTrainableWeights);
  I(`Total params: ${o + t}`), I(`Trainable params: ${o}`), I(`Non-trainable params: ${t}`), I("_".repeat(A));
}
function Ke(C, A, g = console.log) {
  let I = "";
  for (let B = 0; B < C.length; ++B)
    B > 0 && (I = I.slice(0, I.length - 1) + " "), I += C[B], I = I.slice(0, A[B]), I += " ".repeat(A[B] - I.length);
  g(I);
}
function WK(C, A, g) {
  let I, B;
  try {
    B = C.inboundNodes.map((Q) => JSON.stringify(Q.inputShapes)).join(",");
  } catch {
    B = "multiple";
  }
  try {
    I = JSON.stringify(C.outputShape);
  } catch {
    I = "multiple";
  }
  Ke([`${C.name} (${C.getClassName()})`, B, I, C.countParams().toString()], A, g);
}
function TK(C, A, g, I) {
  let B, Q;
  try {
    Q = C.inboundNodes.map((e) => JSON.stringify(e.inputShapes)).join(",");
  } catch {
    Q = "multiple";
  }
  try {
    B = JSON.stringify(C.outputShape);
  } catch {
    B = "multiple";
  }
  const E = [];
  for (const e of C.inboundNodes)
    if (!(g != null && g.length > 0 && g.indexOf(e) === -1))
      for (let s = 0; s < e.inboundLayers.length; ++s) {
        const a = e.inboundLayers[s].name, r = e.nodeIndices[s], h = e.tensorIndices[s];
        E.push(`${a}[${r}][${h}]`);
      }
  const i = C.name, o = C.getClassName(), t = E.length === 0 ? "" : E[0];
  Ke([`${i} (${o})`, Q, B, C.countParams().toString(), t], A, I);
  for (let e = 1; e < E.length; ++e)
    Ke(["", "", "", "", E[e]], A, I);
}
function Ed(C, A, g) {
  return (C === "inboundNodes" || C === "outputLayers" || C === "inputLayers") && A === 0 && typeof g == "string";
}
function $n(C, A) {
  if (C === null)
    return null;
  if (typeof C == "string")
    return xQ(C);
  if (typeof C == "number" || typeof C == "boolean")
    return C;
  if (C instanceof Array) {
    const g = [], I = C.length;
    for (let B = 0; B < I; ++B) {
      const Q = C[B];
      Ed(A, B, Q) ? g.push(Q) : g.push($n(Q, A));
    }
    return g;
  }
  {
    const g = {};
    for (const I of Object.keys(C)) {
      const B = C[I];
      if (I === "name" && typeof B == "string")
        g[I] = B;
      else {
        const Q = xQ(I);
        g[Q] = $n(B, Q);
      }
    }
    return g;
  }
}
function _n(C, A) {
  if (C == null)
    return null;
  if (typeof C == "string")
    return mB(C);
  if (typeof C == "number" || typeof C == "boolean")
    return C;
  if (C instanceof Array) {
    const g = [], I = C.length;
    for (let B = 0; B < I; ++B) {
      const Q = C[B];
      Ed(A, B, Q) ? g.push(Q) : g.push(_n(Q, A));
    }
    return g;
  }
  {
    const g = {};
    for (const I of Object.keys(C)) {
      const B = C[I], Q = mB(I);
      g[Q] = I !== "name" && I !== "className" || typeof B != "string" ? _n(B, I) : B;
    }
    return g;
  }
}
const id = "4.8.0";
class iB extends pg {
  constructor(A) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = A.name, this.name == null) {
      const l = this.getClassName().toLowerCase();
      this.name = $s(l);
    }
    if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(A.inputs) ? this.inputs = A.inputs.slice() : this.inputs = [A.inputs], Array.isArray(A.outputs) ? this.outputs = A.outputs.slice() : this.outputs = [A.outputs], aQ(this.inputs).length !== this.inputs.length)
      throw new X(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((l) => l.name)}`);
    aQ(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((l) => l.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const l of this.outputs) {
      const d = l.sourceLayer, N = l.nodeIndex, k = l.tensorIndex;
      this.outputLayers.push(d), this.outputLayersNodeIndices.push(N), this.outputLayersTensorIndices.push(k);
    }
    for (const l of this.inputs) {
      const d = l.sourceLayer, N = l.nodeIndex, k = l.tensorIndex;
      dB(N === 0, "input layer has >1 nodes"), dB(k === 0, "input layer has >1 tensors"), this.inputLayers.push(d), this.inputLayersNodeIndices.push(N), this.inputLayersTensorIndices.push(k);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let l = 0; l < this.inputLayers.length; l++) {
      const d = this.inputLayers[l];
      if (!(d instanceof Pi))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${A.inputs}. Input ${l} (0-based) originates from layer type ${d.getClassName()}.`);
      this.inputNames.push(d.name), this.feedInputShapes.push(d.batchInputShape), this.feedInputNames.push(d.name);
    }
    for (const l of this.outputLayers)
      this.outputNames.push(l.name);
    this.internalInputShapes = this.inputs.map((l) => l.shape), this.internalOutputShapes = this.outputs.map((l) => l.shape);
    const g = {}, I = {}, B = {}, Q = {}, E = {}, i = [], o = (l, d, N, k, p, Y) => {
      k != null && p != null && Y != null || (k = l.sourceLayer, p = l.nodeIndex, Y = l.tensorIndex);
      const M = k.inboundNodes[p];
      if (N.indexOf(M) !== -1)
        throw new PC(`The tensor ${l.name} at layer "${k.name}" is part of a cycle.`);
      if (d.indexOf(M) !== -1)
        return;
      this.containerNodes.add(iB.nodeKey(k, p)), k.id in E || (E[k.id] = Object.keys(E).length), N.indexOf(M) === -1 && N.push(M);
      const L = M.inboundLayers.length;
      for (let m = 0; m < L; m++) {
        const x = M.inputTensors[m], T = M.inboundLayers[m], Z = M.nodeIndices[m], $ = M.tensorIndices[m];
        o(x, d, N, T, Z, $);
      }
      for (d.push(M); N.indexOf(M) >= 0; )
        N.splice(N.indexOf(M), 1);
      i.push(M);
    }, t = [], e = [];
    for (const l of this.outputs)
      o(l, t, e);
    const s = i.slice().reverse();
    for (const l of s) {
      I[l.id] = l, l.id in g || (g[l.id] = 0);
      let d = g[l.id];
      const N = B[l.outboundLayer.id] == null ? 0 : B[l.outboundLayer.id];
      d = Math.max(d, N), B[l.outboundLayer.id] = d, Q[l.outboundLayer.id] = l.outboundLayer, g[l.id] = d;
      for (let k = 0; k < l.inboundLayers.length; k++) {
        const p = l.inboundLayers[k], Y = l.nodeIndices[k], M = p.inboundNodes[Y], L = g[M.id] == null ? 0 : g[M.id];
        g[M.id] = Math.max(d + 1, L), I[M.id] = M;
      }
    }
    const a = {};
    for (const l in g) {
      const d = g[l];
      d in a || (a[d] = []), a[d].push(I[l]);
    }
    const r = {};
    for (const l in B) {
      const d = B[l];
      d in r || (r[d] = []), r[d].push(Q[l]);
    }
    let h = Object.keys(r).map((l) => parseInt(l, 10)).sort(Ht);
    this.layers = [];
    for (const l of h) {
      const d = r[l];
      d.sort((N, k) => {
        const p = E[N.id], Y = E[k.id];
        return p < Y ? -1 : p > Y ? 1 : 0;
      });
      for (const N of d)
        N instanceof iB && this.internalContainerRefs.push(N), this.layers.push(N);
    }
    this.layersByDepth = r, h = Object.keys(a).map((l) => parseInt(l, 10)).sort(Ht);
    const w = this.inputs.slice(), G = [];
    for (const l of h)
      for (const d of a[l]) {
        const N = d.outboundLayer;
        if (N != null) {
          for (const k of d.inputTensors)
            if (w.indexOf(k) === -1)
              throw new PC(`Graph disconnected: cannot obtain value for tensor ${k} at layer "${N.name}". The following previous layers were accessed without issue: ${G}`);
          for (const k of d.outputTensors)
            w.push(k);
          G.push(N.name);
        }
      }
    this.nodesByDepth = a;
    const D = this.layers.map((l) => l.name);
    for (const l of D) {
      const d = D.filter((N) => N === l).length;
      if (d !== 1)
        throw new PC(`The name "${l}" is used ${d} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(D));
    }
    this.outboundNodes = [], this.inboundNodes = [], new Aa({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: this.inputs.map((l) => null), outputMasks: this.outputs.map((l) => null), inputShapes: this.inputs.map((l) => l.shape), outputShapes: this.outputs.map((l) => l.shape) }), this.built = !0, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  dispose() {
    this.assertNotDisposed();
    const A = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount == 0) {
      for (const g of this.layers)
        A.numDisposedVariables += g.dispose().numDisposedVariables;
      for (const g of this.internalContainerRefs)
        A.numDisposedVariables += g.dispose().numDisposedVariables;
    }
    return A.refCountAfterDispose = this._refCount, A;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(A) {
    this.layers.forEach((g) => {
      g._trainableWeights.forEach((I) => I.trainable = A);
    }), this.trainable_ = A;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new X("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let A = [];
    for (const g of this.layers)
      A = A.concat(g.trainableWeights);
    return A;
  }
  get nonTrainableWeights() {
    const A = [];
    for (const g of this.layers)
      A.push(...g.nonTrainableWeights);
    if (!this.trainable) {
      const g = [];
      for (const I of this.layers)
        g.push(...I.trainableWeights);
      return g.concat(A);
    }
    return A;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  loadWeights(A, g = !0) {
    const I = {};
    let B = 0;
    for (const E of this.layers)
      for (const i of E.weights) {
        if (I[i.originalName] != null)
          throw new X(`Duplicate weight name: ${i.originalName}`);
        I[i.originalName] = i, B++;
      }
    const Q = [];
    for (const E in A) {
      let i = E;
      if (I[E] == null) {
        const o = E.split("/");
        i = o.slice(0, -2).concat([o[o.length - 1]]).join("/");
      }
      if (I[i] != null)
        Q.push([I[i], A[E]]);
      else if (g)
        throw new X(`Provided weight data has no target variable: ${E}`);
      delete I[i];
    }
    if (g) {
      const E = [];
      for (const i in I)
        E.push(i);
      if (E.length > 0)
        throw new X(`${E.length} of ${B} weights are not set: ${E}`);
    }
    ED(Q);
  }
  updatedConfig() {
    const A = this.getConfig(), g = {};
    return g.className = this.getClassName(), g.config = A, g.kerasVersion = `tfjs-layers ${id}`, g.backend = "TensorFlow.js", g;
  }
  toJSON(A, g = !0) {
    const I = _n(this.updatedConfig());
    return g ? JSON.stringify(I) : I;
  }
  call(A, g) {
    return IA(() => {
      A = eI(A);
      const I = new oQ();
      for (let B = 0; B < this.inputs.length; ++B)
        I.add(this.inputs[B], A[B]);
      return Li(this.outputs, I, g);
    });
  }
  computeMask(A, g) {
    return IA(() => {
      let I;
      return A = eI(A), I = g == null ? QE(null, A.length) : eI(g), this.runInternalGraph(A, I)[1];
    });
  }
  computeOutputShape(A) {
    const g = le(A);
    if (g.length !== this.inputLayers.length)
      throw new X(`Invalid inputShape argument ${A}: model has ${this.inputLayers.length} tensor inputs.`);
    const I = {};
    for (let i = 0; i < g.length; i++) {
      const o = this.inputLayers[i], t = g[i];
      I[o.name + "_0_0"] = t;
    }
    const B = Object.keys(this.nodesByDepth).map((i) => parseInt(i, 10)).sort(Ht);
    if (B.length > 1)
      for (const i of B) {
        const o = this.nodesByDepth[i];
        for (const t of o) {
          const e = t.outboundLayer;
          if (this.inputLayers.map((h) => h.id).indexOf(e.id) !== -1)
            continue;
          const s = [];
          for (let h = 0; h < t.inboundLayers.length; h++) {
            const w = t.inboundLayers[h], G = t.nodeIndices[h], D = t.tensorIndices[h], l = I[`${w.name}_${G}_${D}`];
            s.push(l);
          }
          const a = le(e.computeOutputShape(rC(s))), r = e.inboundNodes.indexOf(t);
          for (let h = 0; h < a.length; h++)
            I[`${e.name}_${r}_${h}`] = a[h];
        }
      }
    const Q = [], E = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const o = this.outputLayers[i], t = this.outputLayersNodeIndices[i], e = this.outputLayersTensorIndices[i], s = `${o.name}_${t}_${e}`;
      E.push(s);
    }
    for (let i = 0; i < E.length; i++) {
      const o = E[i];
      dB(o in I), Q.push(I[o]);
    }
    return rC(Q);
  }
  runInternalGraph(A, g) {
    g == null && (g = QE(null, A.length));
    const I = {};
    for (let o = 0; o < this.inputs.length; ++o) {
      const t = this.inputs[o], e = A[o], s = g[o];
      I[t.id] = [e, s];
    }
    const B = Object.keys(this.nodesByDepth).map((o) => parseInt(o, 10)).sort(Ht);
    for (const o of B) {
      const t = this.nodesByDepth[o];
      for (const e of t) {
        const s = e.outboundLayer, a = e.inputTensors, r = e.outputTensors, h = new Array();
        for (const w of a)
          w.id in I && h.push(I[w.id]);
        if (h.length === a.length) {
          let w, G, D, l, d = {};
          if (e.callArgs != null && (d = e.callArgs), h.length === 1) {
            const [N, k] = h[0];
            d.mask == null && (d.mask = k), D = eI(s.call(N, d)), l = eI(s.computeMask(N, k)), w = [N], G = [k];
          } else
            w = h.map((N) => N[0]), G = h.map((N) => N[1]), d.mask == null && (d.mask = G), D = eI(s.call(w, d)), l = eI(s.computeMask(w, G));
          if (s.activityRegularizer)
            throw new dg("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let N = 0; N < r.length; ++N) {
            const k = r[N], p = D[N], Y = l[N];
            I[k.id] = [p, Y];
          }
        }
      }
    }
    const Q = [], E = [], i = [];
    for (const o of this.outputs) {
      dB(o.id in I, `Could not compute output ${o.name} : ${o.id}`);
      const [t, e] = I[o.id];
      i.push(t.shape), Q.push(t), E.push(e);
    }
    return [Q, E, i];
  }
  buildNodeConversionMap(A) {
    const g = {};
    let I;
    for (const B of this.layers) {
      I = B instanceof iB ? 1 : 0;
      for (let Q = 0; Q < B.inboundNodes.length; Q++) {
        const E = iB.nodeKey(B, Q);
        this.containerNodes.has(E) && (g[E] = I, I += 1);
      }
    }
    return g;
  }
  getLayer(A, g) {
    if (g != null)
      return this.findLayer(g);
    if (A == null)
      throw new X("Provide either a layer name or layer index");
    if (typeof A == "number")
      return this.findLayer(A);
    for (const I of this.layers)
      if (I.name === A)
        return I;
    throw new X(`No such layer: ${A}`);
  }
  findLayer(A) {
    if (this.layers.length <= A)
      throw new X(`Was asked to retrieve layer at index ${A}, but model only has ${this.layers.length} layer(s).`);
    return this.layers[A];
  }
  calculateLosses() {
    return IA(() => {
      const A = [];
      for (const g of this.layers)
        for (let I = 0; I < g.inboundNodes.length; ++I) {
          const B = iB.nodeKey(g, I);
          this.containerNodes.has(B) && A.push(...g.calculateLosses());
        }
      return A;
    });
  }
  getConfig() {
    const A = { name: this.name }, g = this.buildNodeConversionMap(this.layers), I = [];
    for (const E of this.layers) {
      const i = E.getClassName(), o = E.getConfig(), t = [];
      for (let s = 0; s < E.inboundNodes.length; s++) {
        const a = E.inboundNodes[s], r = iB.nodeKey(E, s);
        let h = {};
        if (this.containerNodes.has(r)) {
          if (a.callArgs)
            try {
              JSON.stringify(a.callArgs), h = a.callArgs;
            } catch {
              console.warn(`Layer ${E.name} was passed non-serializable keyword arguments: ${a.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), h = {};
            }
          if (a.inboundLayers.length > 0) {
            const w = [];
            for (let G = 0; G < a.inboundLayers.length; G++) {
              const D = a.inboundLayers[G], l = a.nodeIndices[G], d = a.tensorIndices[G];
              let N = g[iB.nodeKey(D, l)];
              N == null && (N = 0), w.push([D.name, N, d, h]);
            }
            t.push(w);
          }
        }
      }
      const e = {};
      e.name = E.name, e.className = i, e.config = o, e.inboundNodes = t, I.push(e);
    }
    A.layers = I;
    const B = [];
    for (let E = 0; E < this.inputLayers.length; E++) {
      const i = this.inputLayers[E], o = this.inputLayersNodeIndices[E], t = iB.nodeKey(i, o);
      if (!this.containerNodes.has(t))
        continue;
      let e = g[t];
      e == null && (e = 0);
      const s = this.inputLayersTensorIndices[E];
      B.push([i.name, e, s]);
    }
    A.inputLayers = B;
    const Q = [];
    for (let E = 0; E < this.outputLayers.length; E++) {
      const i = this.outputLayers[E], o = this.outputLayersNodeIndices[E], t = iB.nodeKey(i, o);
      if (!this.containerNodes.has(t))
        continue;
      let e = g[t];
      e == null && (e = 0);
      const s = this.outputLayersTensorIndices[E];
      Q.push([i.name, e, s]);
    }
    return A.outputLayers = Q, A;
  }
  static fromConfig(A, g, I = {}, B = !1) {
    const Q = {}, E = {};
    function i(G, D) {
      G.name in E ? E[G.name].push(D) : E[G.name] = [D];
    }
    function o(G, D) {
      const l = [];
      let d;
      for (const N of D) {
        const k = N[0], p = N[1], Y = N[2];
        if (d = N[3] == null ? {} : N[3], !(k in Q))
          return void i(G, D);
        const M = Q[k];
        if (M.inboundNodes.length <= p)
          return void i(G, D);
        const L = M.inboundNodes[p];
        l.push(L.outputTensors[Y]);
      }
      l.length > 0 && G.apply(rC(l), d);
    }
    function t(G) {
      const D = G.name, l = WB(G, g.customObjects != null ? g.customObjects : {});
      l.setFastWeightInitDuringBuild(B), Q[D] = l, G.inboundNodes.forEach((d) => {
        if (!(d instanceof Array))
          throw new X(`Corrupted configuration, expected array for nodeData: ${d}`);
        i(l, d);
      });
    }
    const e = g.name, s = g.layers;
    for (const G of s)
      t(G);
    for (; !lK(E); )
      for (const G of s) {
        const D = Q[G.name];
        if (D.name in E) {
          const l = E[D.name];
          delete E[D.name];
          for (const d of l)
            o(D, d);
        }
      }
    const a = [], r = [], h = g.inputLayers;
    for (const G of h) {
      const D = G[0], l = G[1], d = G[2];
      dB(D in Q);
      const N = Q[D].inboundNodes[l].outputTensors;
      a.push(N[d]);
    }
    const w = g.outputLayers;
    for (const G of w) {
      const D = G[0], l = G[1], d = G[2];
      dB(D in Q);
      const N = Q[D].inboundNodes[l].outputTensors;
      r.push(N[d]);
    }
    return new A({ inputs: a, outputs: r, name: e });
  }
  get stateful() {
    if (this._stateful)
      throw new X("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const A of this.layers)
      if (A.stateful)
        return !0;
    return !1;
  }
  resetStates() {
    IA(() => {
      this.layers.forEach((A) => {
        A.stateful && A.resetStates();
      });
    });
  }
}
function od(C, A) {
  return function(g, I, B) {
    const Q = I.length;
    if (g == null || Array.isArray(g) && g.length === 0)
      return I.map((E) => null);
    if (Q === 1)
      return Array.isArray(g) && g.length === 1 ? g : typeof g == "object" && I[0] in g ? [g[I[0]]] : [g];
    if (Array.isArray(g)) {
      if (g.length !== Q)
        throw new Error(`Provided ${B} is an array of ${g.length} element(s), but the model has ${Q} outputs. Make sure a set of weights is provided for each model output.`);
      return g;
    }
    if (typeof g == "object" && Object.keys(g).length > 0 && typeof g[Object.keys(g)[0]] == "object") {
      const E = [];
      return I.forEach((i) => {
        i in g ? E.push(g[i]) : E.push(null);
      }), E;
    }
    throw new Error(`The model has multiple (${Q}) outputs, so ${B} must be either an array with ${Q} elements or an object with ${I} keys. Provided ${B} not understood: ${JSON.stringify(g)}`);
  }(C, A, "classWeight");
}
async function td(C, A, g, I) {
  if (A != null || I != null)
    throw new Error("Support sampleWeight is not implemented yet");
  if (g != null) {
    const B = IA(() => {
      if (C.shape.length === 1)
        return PQ(C);
      if (C.shape.length === 2) {
        if (C.shape[1] > 1)
          return Wi(C, 1);
        if (C.shape[1] === 1)
          return CA(C, [C.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${C.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      }
      throw new Error(`Unexpected rank of target (y) tensor (${C.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), Q = Array.from(await B.data());
    Ug(B);
    const E = [];
    return Q.forEach((i) => {
      if (g[i] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);
      E.push(g[i]);
    }), MC(E, "float32");
  }
  return null;
}
function ZK(C, A) {
  return z(C, A);
}
function ed(C, A) {
  let g, I;
  const B = A;
  g = B.xs, I = B.ys, f(g != null && I != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${A}`);
  const Q = jc("input", C.inputNames, g), E = jc("output", C.outputNames, I), i = Q[0].shape[0];
  f(Q.length === C.inputs.length, () => `LayersModel has ${C.inputs.length} inputs, but the dataset provides ${Q.length} inputs.  (Expected input keys: ${JSON.stringify(C.inputNames)})`), f(E.length === C.outputs.length, () => `LayersModel has ${C.outputs.length} outputs, but the dataset provides ${E.length} outputs.  (Expected output keys: ${JSON.stringify(C.outputNames)})`);
  for (let o = 0; o < Q.length; o++)
    f(Q[o].shape[0] === i, () => `Batch size mismatch: input ${C.inputNames[o]} has ${Q[o].shape[0]}; expected  ${i} based on input ${C.inputNames[0]}.`);
  for (let o = 0; o < E.length; o++)
    f(E[o].shape[0] === i, () => `Batch size mismatch: output ${C.outputNames[o]} has ${E[o].shape[0]}; expected  ${i} based on input ${C.inputNames[0]}.`);
  return { xs: Q, ys: E };
}
function jc(C, A, g) {
  if (g instanceof MI)
    return [g];
  if (Array.isArray(g))
    return f(g.length === A.length, () => `Received an array of ${g.length} Tensors, but expected ${A.length} to match the ${C} keys ${A}.`), g;
  {
    const I = [];
    for (const B of A) {
      if (g[B] == null)
        throw new X(`The feature data generated by the dataset lacks the required ${C} key '${B}'.`);
      I.push(g[B]);
    }
    return I;
  }
}
async function XK(C, A, g) {
  const I = g.batchesPerEpoch != null;
  if (f(C.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), f(g != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), f(g.epochs != null && g.epochs > 0 && Number.isInteger(g.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${g.epochs}`), f(!I || g.batchesPerEpoch > 0 && Number.isInteger(g.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${g.batchesPerEpoch}`), f(g.validationSplit == null, () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), C.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  C.isTraining = !0;
  try {
    const B = g.validationData != null;
    let Q, E;
    if (B)
      if ($c(g.validationData))
        f(g.validationBatches == null || g.validationBatches > 0 && Number.isInteger(g.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${g.validationBatches}`);
      else {
        const G = function(D) {
          if (D.length === 3)
            throw new dg("Validation with sample weights is not implemented yet.");
          return { xs: D[0], ys: D[1] };
        }(g.validationData);
        Q = G.xs, E = G.ys;
      }
    const i = C.makeTrainFunction(), o = C.getDedupedMetricsNames();
    let t;
    t = B ? o.slice().concat(o.map((G) => "val_" + G)) : o.slice();
    const e = _y(g.callbacks, g.yieldEvery), s = g.verbose == null ? 1 : g.verbose, { callbackList: a, history: r } = Ad(e, s, g.epochs, null, null, function(G, D) {
      let l = null;
      return D.batchesPerEpoch != null ? l = D.batchesPerEpoch : Number.isFinite(G.size) && (l = G.size), l;
    }(A, g), null, B, t);
    a.setModel(C), C.history = r, await a.onTrainBegin(), C.stopTraining_ = !1;
    let h = g.initialEpoch == null ? 0 : g.initialEpoch, w = await A.iterator();
    for (; h < g.epochs; ) {
      const G = {};
      await a.onEpochBegin(h);
      let D = 0, l = 0;
      for (I || (w = await A.iterator()); !I || D < g.batchesPerEpoch; ) {
        const d = await w.next();
        if (I && d.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${g.batchesPerEpoch}, but your dataset iterator ran out of data after ${D} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ` + g.batchesPerEpoch * g.epochs + " batches). You may need to use the repeat() function when building your dataset.");
          break;
        }
        if (d.value != null) {
          const { xs: N, ys: k } = ed(C, d.value), p = {};
          p.batch = l, p.size = N[0].shape[0], await a.onBatchBegin(l, p);
          const Y = [];
          if (g.classWeight != null) {
            const m = od(g.classWeight, C.outputNames);
            for (let x = 0; x < m.length; ++x)
              Y.push(await td(k[x], null, m[x]));
          }
          const M = N.concat(k).concat(Y), L = i(M);
          Ug(M);
          for (let m = 0; m < o.length; ++m) {
            const x = o[m], T = L[m];
            p[x] = T, JC(T);
          }
          await a.onBatchEnd(l, p), $y(p), l++, D++;
        }
        if (I ? D >= g.batchesPerEpoch : d.done) {
          if (B) {
            let N;
            N = $c(g.validationData) ? eI(await C.evaluateDataset(g.validationData, { batches: g.validationBatches })) : eI(C.evaluate(Q, E, { batchSize: g.validationBatchSize == null ? 32 : g.validationBatchSize, verbose: 0 }));
            for (let k = 0; k < C.metricsNames.length; ++k)
              G[`val_${C.metricsNames[k]}`] = N[k];
          }
          break;
        }
        if (C.stopTraining_)
          break;
      }
      if (await a.onEpochEnd(h, G), h++, C.stopTraining_)
        break;
    }
    return await a.onTrainEnd(), await C.history.syncData(), C.history;
  } finally {
    C.isTraining = !1;
  }
}
function $c(C) {
  return typeof C.iterator == "function";
}
function Ya(C) {
  f(C > 0 && Number.isInteger(C), () => `batchSize is required to be a positive integer, but got ${C}`);
}
function pi(C, A, g) {
  return C == null ? [null] : Array.isArray(C) ? C.map((I) => $Q(I, A, g - A)) : $Q(C, A, g - A);
}
function Ar(C, A) {
  return IA(() => C == null ? null : Array.isArray(C) ? C.map((g) => Ar(g, A)) : Py(C, A.dtype === "int32" ? A : bA(A, "int32")));
}
function Ja(C, A) {
  const g = [];
  let I = 0, B = null;
  for (; I < C; )
    B = I + A, B >= C && (B = C), g.push([I, B]), I = B;
  return g;
}
function sd(C) {
  const A = [];
  C instanceof MI && (C = [C]);
  for (let g = 0; g < C.length; ++g) {
    const I = C[g];
    if (I.rank === 1)
      A.push(nt(I, 1));
    else {
      if (I.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      A.push(I);
    }
  }
  return A;
}
function QB(C, A) {
  if (C == null)
    return;
  const g = [];
  if (A instanceof MI)
    g.push(A.id);
  else if (Array.isArray(A))
    A.forEach((B) => g.push(B.id));
  else if (A != null)
    for (const B in A) {
      const Q = A[B];
      g.push(Q.id);
    }
  const I = [];
  if (C instanceof MI)
    g.indexOf(C.id) === -1 && I.push(C);
  else if (Array.isArray(C))
    C.forEach((B) => {
      g.indexOf(B.id) === -1 && I.push(B);
    });
  else if (C != null)
    for (const B in C) {
      const Q = C[B];
      g.indexOf(Q.id) === -1 && I.push(Q);
    }
  I.forEach((B) => {
    B.isDisposed || B.dispose();
  });
}
function gr(C) {
  return Array.isArray(C);
}
function _c(C) {
  return !function(A) {
    return A instanceof MI;
  }(C) && !gr(C);
}
function A0(C, A, g, I = !0, B = "") {
  if (A == null || A.length === 0) {
    if (C != null) {
      let E = !1;
      if (gr(C) && C.length > 0)
        E = !0;
      else if (_c(C)) {
        for (const i in C)
          if (C.hasOwnProperty(i)) {
            E = !0;
            break;
          }
      } else
        E = !0;
      if (E)
        throw new X(`Error when checking model ${B} expected no data, but got ${C}`);
    }
    return [];
  }
  if (C == null)
    return A.map((E) => null);
  let Q;
  if (_c(C)) {
    Q = [];
    for (const E of A) {
      if (C[E] == null)
        throw new X(`No data provided for "${E}". Need data for each key in: ${A}`);
      Q.push(C[E]);
    }
  } else if (gr(C)) {
    if (C.length !== A.length)
      throw new X(`Error when checking model ${B}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${A.length} Tensor(s), but instead got the following list of Tensor(s): ${C}`);
    Q = C;
  } else {
    if (A.length > 1)
      throw new X(`The model ${B} expects ${A.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${C.shape}`);
    Q = [C];
  }
  if (Q = sd(Q), g != null)
    for (let E = 0; E < A.length; ++E) {
      if (g[E] == null)
        continue;
      const i = Q[E];
      if (i.shape.length !== g[E].length)
        throw new X(`Error when checking ${B}: expected ${A[E]} to have ${g[E].length} dimension(s). but got array with shape ${i.shape}`);
      for (let o = 0; o < g[E].length; ++o) {
        if (o === 0 && !I)
          continue;
        const t = i.shape[o], e = g[E][o];
        if (e != null && e >= 0 && t !== e)
          throw new X(`${B} expected a batch of elements where each example has shape [${g[E].slice(1, g[E].length)}] (i.e.,tensor shape [*,${g[E].slice(1, g[E].length)}]) but the ${B} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1, i.shape.length)}] (tensor shape [${i.shape}])`);
      }
    }
  return Q;
}
function g0(C, A, g, I = !0, B = "") {
  let Q;
  if (Array.isArray(C)) {
    if (C.length !== A.length)
      throw new X(`Error when checking model ${B}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${A.length} Tensor(s), but instead got ${C.length} Tensors(s).`);
    Q = C;
  } else {
    if (A.length > 1)
      throw new X(`The model expects ${A.length} ${B} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(C.shape)}.`);
    Q = [C];
  }
  if (g != null)
    for (let E = 0; E < A.length; ++E) {
      if (g[E] == null)
        continue;
      const i = Q[E];
      if (i.shape.length !== g[E].length)
        throw new X(`Error when checking ${B}: expected ${A[E]} to have ${g[E].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);
      for (let o = 0; o < g[E].length; ++o) {
        if (o === 0 && !I)
          continue;
        const t = i.shape[o], e = g[E][o];
        if (e != null && e !== t)
          throw new X(`Error when checking ${B}: expected ${A[E]} to have shape ${JSON.stringify(g[E])} but got array with shape ${JSON.stringify(i.shape)}.`);
      }
    }
}
class HE extends iB {
  constructor(A) {
    super(A), this.isTraining = !1;
  }
  summary(A, g, I = console.log) {
    if (!this.built)
      throw new X("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    VK(this, A, g, I);
  }
  compile(A) {
    if (A.loss == null && (A.loss = []), this.loss = A.loss, typeof A.optimizer == "string")
      this.optimizer_ = function(E) {
        const i = { Adagrad: () => FE.adagrad(0.01), Adadelta: () => FE.adadelta(1, 0.95, mI()), Adam: () => FE.adam(1e-3, 0.9, 0.999, mI()), Adamax: () => FE.adamax(2e-3, 0.9, 0.999, mI(), 0), RMSProp: () => FE.rmsprop(1e-3, 0.9, 0, mI()), SGD: () => FE.sgd(0.01) };
        if (i.adagrad = i.Adagrad, i.adadelta = i.Adadelta, i.adam = i.Adam, i.adamax = i.Adamax, i.rmsprop = i.RMSProp, i.sgd = i.SGD, E in i)
          return i[E]();
        throw new X(`Unknown Optimizer ${E}`);
      }(A.optimizer), this.isOptimizerOwned = !0;
    else {
      if (!(A.optimizer instanceof RQ))
        throw new X("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = A.optimizer, this.isOptimizerOwned = !1;
    }
    let g = [];
    if (Array.isArray(A.loss) || typeof A.loss == "string" || typeof A.loss == "function")
      if (Array.isArray(A.loss)) {
        if (A.loss.length !== this.outputs.length)
          throw new X(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${A.loss}.`);
        g = A.loss.map((i) => Ua(i));
      } else {
        const E = Ua(A.loss);
        this.outputs.forEach((i) => {
          g.push(E);
        });
      }
    else {
      A.loss = A.loss;
      for (const E in A.loss)
        if (this.outputNames.indexOf(E) === -1)
          throw new X(`Unknown entry in loss dictionary: "${E}". Only expected the following keys: ${this.outputNames}`);
      for (const E of this.outputNames)
        A.loss[E] == null && console.warn(`Output "${E}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${E} during training`), g.push(Ua(A.loss[E]));
    }
    this.lossFunctions = g, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let E = 0; E < this.outputs.length; ++E) {
      const i = this.internalOutputShapes[E], o = this.outputNames[E];
      this.feedOutputNames.push(o), this.feedOutputShapes.push(i), this.feedLossFns.push(this.lossFunctions[E]);
    }
    const I = [];
    this.metrics = A.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], jQ("loss", () => {
      for (let E = 0; E < this.outputs.length; ++E) {
        if (I.indexOf(E) !== -1)
          continue;
        const i = this.lossFunctions[E];
        this.outputs.length > 1 && (this.metricsTensors.push([i, E]), this.metricsNames.push(this.outputNames[E] + "_loss"));
      }
    });
    const B = function(E, i) {
      if (E == null || Array.isArray(E) && E.length === 0)
        return i.map((t) => []);
      let o;
      if (typeof E == "string" || typeof E == "function")
        o = [E];
      else {
        if (!Array.isArray(E) && typeof E != "object")
          throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${E}`);
        o = E;
      }
      if (Array.isArray(o))
        return i.map((t) => o);
      {
        const t = [];
        for (const e of i) {
          let s = o.hasOwnProperty(e) ? o[e] : [];
          Array.isArray(s) || (s = [s]), t.push(s);
        }
        return t;
      }
    }(A.metrics, this.outputNames), Q = (E, i, o) => {
      this.outputNames.length > 1 && (i = this.outputNames[E] + "_" + i), this.metricsNames.push(i), this.metricsTensors.push([o, E]);
    };
    jQ("metric", () => {
      for (let E = 0; E < this.outputs.length; ++E)
        I.indexOf(E) === -1 && ((i) => {
          let o, t, e;
          for (const s of i) {
            if (typeof s == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(s) !== -1) {
              const r = this.internalOutputShapes[E];
              let h;
              r[r.length - 1] === 1 || this.lossFunctions[E] === Ne ? ["accuracy", "acc"].indexOf(s) !== -1 ? t = Id : ["crossentropy", "ce"].indexOf(s) !== -1 && (t = bK) : this.lossFunctions[E] === Re ? ["accuracy", "acc"].indexOf(s) !== -1 ? t = HK : ["crossentropy", "ce"].indexOf(s) !== -1 && (t = Qd) : ["accuracy", "acc"].indexOf(s) !== -1 ? t = Cd : ["crossentropy", "ce"].indexOf(s) !== -1 && (t = Bd), ["accuracy", "acc"].indexOf(s) !== -1 ? h = "acc" : ["crossentropy", "ce"].indexOf(s) !== -1 && (h = "ce"), e = t, o = "" + h;
            } else
              e = xK(s), o = "" + Vt(s);
            let a;
            jQ(o, () => {
              a = e;
            }), Q(E, o, a);
          }
        })(B[E]);
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  evaluate(A, g, I = {}) {
    const B = I.batchSize == null ? 32 : I.batchSize;
    Ya(B);
    const Q = this.standardizeUserDataXY(A, g, !0, B);
    try {
      const E = Q[0].concat(Q[1]);
      this.makeTestFunction();
      const i = this.testFunction;
      return rC(this.testLoop(i, E, B, I.verbose, I.steps));
    } finally {
      QB(Q[0], A), QB(Q[1], g);
    }
  }
  async evaluateDataset(A, g) {
    return this.makeTestFunction(), async function(I, B, Q) {
      const E = (Q = Q || {}).batches != null, i = I.testFunction;
      let o = [];
      if (Q.verbose > 0)
        throw new dg("Verbose mode is not implemented yet.");
      f(!E || Q.batches > 0 && Number.isInteger(Q.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(Q.batches)}`);
      const t = typeof B.next == "function" ? B : await B.iterator();
      let e = 0, s = 0;
      for (; !E || s < Q.batches; ) {
        const a = await t.next();
        if (o = IA(() => {
          if (a.value) {
            const { xs: r, ys: h } = ed(I, a.value), w = r.concat(h), G = IA(() => i(w));
            if (Ug(w), s === 0)
              for (let l = 0; l < G.length; ++l)
                o.push(Pg(0));
            const D = w[0].shape[0];
            for (let l = 0; l < G.length; ++l) {
              const d = G[l], N = o[l];
              o[l] = IA(() => kA(o[l], z(D, d))), s > 0 && Ug(N);
            }
            Ug(G), e += D, ++s;
          }
          return o;
        }), a.done) {
          E && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${Q.batches} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
      }
      for (let a = 0; a < o.length; ++a) {
        const r = o[a];
        o[a] = Cg(o[a], e), Ug(r);
      }
      return rC(o);
    }(this, A, g);
  }
  checkNumSamples(A, g, I, B = "steps") {
    let Q;
    if (I != null) {
      if (Q = null, g != null)
        throw new X(`If ${B} is set, batchSize must be null or undefined.Got batchSize = ${g}`);
    } else {
      if (A == null)
        throw new X(`Either the input data should have a defined shape, or ${B} shoud be specified.`);
      Q = Array.isArray(A) ? A[0].shape[0] : A.shape[0];
    }
    return Q;
  }
  execute(A, g) {
    if (Array.isArray(g) && g.length === 0)
      throw new X("`outputs` is an empty Array, which is not allowed.");
    const I = Array.isArray(g), B = I ? g : [g], Q = this.retrieveSymbolicTensors(B), E = new oQ();
    if (A instanceof MI && (A = [A]), Array.isArray(A)) {
      if (A.length !== this.inputs.length)
        throw new X(`The number of inputs provided (${A.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let o = 0; o < this.inputs.length; ++o)
        E.add(this.inputs[o], A[o]);
    } else
      for (const o of this.inputs) {
        const t = A[o.name];
        if (t == null)
          throw new X(`No value is provided for the model's input ${o.name}`);
        E.add(o, t);
      }
    const i = Li(Q, E);
    return I ? i : i[0];
  }
  retrieveSymbolicTensors(A) {
    const g = QE(null, A.length);
    let I = A.length;
    for (const B of this.layers) {
      const Q = Array.isArray(B.output) ? B.output : [B.output], E = Q.map((i) => i.name);
      for (let i = 0; i < A.length; ++i) {
        const o = E.indexOf(A[i]);
        if (o !== -1 && (g[i] = Q[o], I--), I === 0)
          break;
      }
      if (I === 0)
        break;
    }
    if (I > 0) {
      const B = [];
      throw g.forEach((Q, E) => {
        Q == null && B.push(A[E]);
      }), new X(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(B)}`);
    }
    return g;
  }
  predictLoop(A, g = 32, I = !1) {
    return IA(() => {
      const B = this.checkNumSamples(A);
      if (I)
        throw new dg("Verbose predictLoop() is not implemented yet.");
      const Q = Ja(B, g), E = this.outputs.map((i) => []);
      for (let i = 0; i < Q.length; ++i)
        IA(() => {
          const o = Q[i][0], t = Q[i][1], e = pi(A, o, t), s = [];
          if (Array.isArray(e))
            for (let r = 0; r < e.length; ++r)
              s.push({ key: this.inputs[r], value: e[r] });
          else
            s.push({ key: this.inputs[0], value: e });
          const a = new oQ(s);
          return Li(this.outputs, a);
        }).forEach((o, t) => E[t].push(o));
      return rC(E.map((i) => DC(i, 0)));
    });
  }
  predict(A, g = {}) {
    const I = sd(A);
    g0(I, this.inputNames, this.feedInputShapes, !1);
    try {
      const B = g.batchSize == null ? 32 : g.batchSize;
      return Ya(B), this.predictLoop(I, B);
    } finally {
      QB(I, A);
    }
  }
  predictOnBatch(A) {
    g0(A, this.inputNames, this.feedInputShapes, !0);
    const g = (Array.isArray(A) ? A[0] : A).shape[0];
    return this.predictLoop(A, g);
  }
  standardizeUserDataXY(A, g, I = !0, B) {
    if (this.optimizer_ == null)
      throw new PC("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const Q = [];
    for (let E = 0; E < this.feedOutputShapes.length; ++E) {
      const i = this.feedOutputShapes[E];
      this.feedLossFns[E] === Re ? Q.push(i.slice(0, i.length - 1).concat([1])) : Q.push(i);
    }
    if (function(E, i, o) {
      const t = aQ(E.map((s) => s.shape[0]));
      t.sort();
      const e = aQ(i.map((s) => s.shape[0]));
      if (e.sort(), t.length > 1)
        throw new X(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(E.map((s) => s.shape))}`);
      if (e.length > 1)
        throw new X(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(i.map((s) => s.shape))}`);
      if (t.length > 0 && e.length > 0 && !Zg(t, e))
        throw new X(`Input Tensors should have the same number of samples as target Tensors. Found ${t[0]} input sample(s) and ${e[0]} target sample(s).`);
    }(A = A0(A, this.feedInputNames, this.feedInputShapes, !1, "input"), g = A0(g, this.feedOutputNames, Q, !1, "target")), function(E, i, o) {
      const t = [Fe, Ne, ji];
      for (let e = 0; e < E.length; ++e) {
        const s = E[e], a = i[e], r = o[e];
        if (a != null) {
          if (a === ji && s.shape[s.shape.length - 1] === 1)
            throw new X(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
          if (t.indexOf(a) !== -1) {
            const h = s.shape.slice(1), w = r.slice(1);
            for (let G = 0; G < h.length; ++G) {
              const D = h[G], l = w[G];
              if (l != null && D !== l)
                throw new X(`A target Tensor with shape ${s.shape} was passed for an output of shape ${r}, while using a loss function that expects targets to have the same shape as the output.`);
            }
          }
        }
      }
    }(g, this.feedLossFns, this.feedOutputShapes), this.stateful && B != null && B > 0 && A[0].shape[0] % B != 0)
      throw new X(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${B}. Found: ${A[0].shape[0]} sample(s).`);
    return [A, g];
  }
  async standardizeUserData(A, g, I, B, Q = !0, E) {
    const [i, o] = this.standardizeUserDataXY(A, g, Q, E);
    if (I != null)
      throw new Error("sample weight is not supported yet.");
    let t = null;
    if (B != null) {
      const e = od(B, this.outputNames);
      t = [];
      for (let s = 0; s < e.length; ++s)
        t.push(await td(o[s], null, e[s]));
    }
    return [i, o, t];
  }
  testLoop(A, g, I, B = 0, Q) {
    return IA(() => {
      const E = this.checkNumSamples(g, I, Q, "steps"), i = [];
      if (B > 0)
        throw new dg("Verbose mode is not implemented yet.");
      if (Q != null)
        throw new dg("steps mode in testLoop() is not implemented yet");
      {
        const o = Ja(E, I), t = MC(hB(0, E));
        for (let e = 0; e < o.length; ++e) {
          const s = o[e][0], a = o[e][1], r = $Q(t, s, a - s), h = Ar(g, r), w = A(h);
          if (e === 0)
            for (let G = 0; G < w.length; ++G)
              i.push(Pg(0));
          for (let G = 0; G < w.length; ++G) {
            const D = w[G];
            i[G] = kA(i[G], z(a - s, D));
          }
        }
        for (let e = 0; e < i.length; ++e)
          i[e] = Cg(i[e], E);
      }
      return i;
    });
  }
  getDedupedMetricsNames() {
    const A = this.metricsNames, g = [];
    for (let I = 0; I < A.length; ++I) {
      const B = A[I];
      let Q = B;
      Sc(A, B) > 1 && (Q += `_${Sc(A.slice(0, I), B)}`), g.push(Q);
    }
    return g;
  }
  makeTrainFunction() {
    return (A) => {
      const g = [], I = A.slice(0, this.inputs.length), B = A.slice(this.inputs.length, this.inputs.length + this.outputs.length), Q = A.slice(this.inputs.length + this.outputs.length, this.inputs.length + 2 * this.outputs.length), E = [], i = this.collectedTrainableWeights.map((o) => o.read());
      return [this.optimizer_.minimize(() => {
        const o = [];
        for (let a = 0; a < this.inputs.length; ++a)
          o.push({ key: this.inputs[a], value: I[a] });
        const t = new oQ(o), e = Li(this.outputs, t, { training: !0 });
        let s;
        for (let a = 0; a < this.lossFunctions.length; ++a) {
          let r = (0, this.lossFunctions[a])(B[a], e[a]);
          Q[a] != null && (r = ZK(r, Q[a]));
          const h = UI(r);
          g.push(h), s = a === 0 ? r : kA(s, r);
        }
        for (let a = 0; a < this.metricsTensors.length; ++a) {
          let r;
          if (this.outputs.length > 1 && a < this.outputs.length)
            r = g[a];
          else {
            const h = this.metricsTensors[a][0], w = this.metricsTensors[a][1];
            r = UI(h(B[w], e[w]));
          }
          JC(r), E.push(r);
        }
        return s = UI(s), this.calculateLosses().forEach((a) => {
          s = kA(s, a);
        }), s;
      }, !0, i)].concat(E);
    };
  }
  makeTestFunction() {
    this.testFunction = (A) => IA(() => {
      const g = [];
      let I;
      const B = A.slice(0, this.inputs.length), Q = A.slice(this.inputs.length, this.inputs.length + this.outputs.length), E = [];
      for (let t = 0; t < this.inputs.length; ++t)
        E.push({ key: this.inputs[t], value: B[t] });
      const i = new oQ(E), o = Li(this.outputs, i);
      for (let t = 0; t < this.lossFunctions.length; ++t) {
        const e = this.lossFunctions[t], s = UI(e(Q[t], o[t]));
        I = t === 0 ? s : kA(I, s), g.push(I);
      }
      for (let t = 0; t < this.metricsTensors.length; ++t) {
        const e = this.metricsTensors[t][0], s = this.metricsTensors[t][1], a = UI(e(Q[s], o[s]));
        g.push(a);
      }
      return g;
    });
  }
  async fit(A, g, I = {}) {
    if (this.isTraining)
      throw new Error("Cannot start training because another fit() call is ongoing.");
    let B, Q, E, i, o, t, e, s, a;
    this.isTraining = !0;
    try {
      const r = I.batchSize == null ? 32 : I.batchSize;
      Ya(r);
      const h = !1, w = await this.standardizeUserData(A, g, I.sampleWeight, I.classWeight, h, r);
      B = w[0], Q = w[1], a = w[2];
      let G, D = !1;
      if (I.validationData != null && I.validationData.length > 0) {
        if (D = !0, I.validationData.length !== 2)
          throw I.validationData.length === 3 ? new dg("validationData including sample weights is not supported yet.") : new X(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${I.validationData} is invalid.`);
        o = I.validationData[0], t = I.validationData[1];
        const M = !0, L = await this.standardizeUserData(o, t, null, null, M, r);
        e = L[0], s = L[1], G = e.concat(s);
      } else if (I.validationSplit != null && I.validationSplit > 0 && I.validationSplit < 1) {
        D = !0;
        const M = Math.floor(B[0].shape[0] * (1 - I.validationSplit)), L = B[0].shape[0];
        e = pi(B, M, L), E = B, B = pi(B, 0, M), s = pi(Q, M, L), i = Q, Q = pi(Q, 0, M), G = e.concat(s);
      } else
        I.validationSteps != null && (D = !0);
      const l = B.concat(Q).concat(a);
      this.checkTrainableWeightsConsistency();
      const d = this.makeTrainFunction(), N = this.getDedupedMetricsNames();
      let k, p;
      D ? (this.makeTestFunction(), k = this.testFunction, p = N.slice().concat(N.map((M) => "val_" + M))) : (k = null, G = [], p = N.slice());
      const Y = _y(I.callbacks, I.yieldEvery);
      return await this.fitLoop(d, l, N, r, I.epochs, I.verbose, Y, k, G, I.shuffle, p, I.initialEpoch, null, null);
    } finally {
      this.isTraining = !1, QB(B, A), QB(Q, g), QB(E, A), QB(i, g), QB(e, o), QB(s, t), a != null && Ug(a);
    }
  }
  async fitLoop(A, g, I, B, Q, E, i, o, t, e, s, a, r, h) {
    B == null && (B = 32), Q == null && (Q = 1), e == null && (e = !0), a == null && (a = 0);
    let w = !1;
    if (o != null && t != null && (w = !0), h != null && (w = !0, r == null))
      throw new X("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
    const G = this.checkNumSamples(g, B, r, "steps_per_epoch");
    let D;
    G != null && (D = hB(0, G)), E == null && (E = 1);
    const { callbackList: l, history: d } = Ad(i, E, Q, a, G, r, B, w, s);
    l.setModel(this), this.history = d, await l.onTrainBegin(), this.stopTraining_ = !1;
    for (let N = a; N < Q; ++N) {
      await l.onEpochBegin(N);
      const k = {};
      if (r != null)
        throw new dg("stepsPerEpoch mode is not implemented yet.");
      {
        if (e === "batch")
          throw new dg("batch shuffling is not implemneted yet");
        e && $R(D);
        const p = MC(D), Y = Ja(G, B);
        for (let M = 0; M < Y.length; ++M) {
          const L = {};
          if (await l.onBatchBegin(M, L), IA(() => {
            const m = Y[M][0], x = Y[M][1], T = $Q(p, m, x - m);
            L.batch = M, L.size = x - m;
            const Z = Ar(g, T), $ = A(Z);
            for (let AA = 0; AA < I.length; ++AA) {
              const P = I[AA], _ = $[AA];
              L[P] = _, JC(_);
            }
            if (M === Y.length - 1 && w) {
              const AA = this.testLoop(o, t, B);
              for (let P = 0; P < I.length; ++P) {
                const _ = I[P], QA = AA[P];
                JC(QA), k["val_" + _] = QA;
              }
            }
          }), await l.onBatchEnd(M, L), $y(L), this.stopTraining_)
            break;
        }
        p.dispose();
      }
      if (await l.onEpochEnd(N, k), this.stopTraining_)
        break;
    }
    return await l.onTrainEnd(), await this.history.syncData(), this.history;
  }
  async fitDataset(A, g) {
    return XK(this, A, g);
  }
  async trainOnBatch(A, g) {
    const I = await this.standardizeUserData(A, g), B = I[0], Q = I[1], E = this.makeTrainFunction()(B.concat(Q)), i = [];
    for (const o of E) {
      const t = await o.data();
      i.push(t[0]);
    }
    return Ug(E), QB(I[0], A), QB(I[1], g), rC(i);
  }
  getNamedWeights(A) {
    const g = [], I = A != null && A.trainableOnly, B = I ? this.trainableWeights : this.weights, Q = this.getWeights(I);
    for (let E = 0; E < B.length; ++E)
      I && !B[E].trainable || g.push({ name: B[E].originalName, tensor: Q[E] });
    return g;
  }
  set stopTraining(A) {
    this.stopTraining_ = A;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(A) {
    this.optimizer_ !== A && (this.optimizer_ = A, this.isOptimizerOwned = !1);
  }
  dispose() {
    const A = super.dispose();
    if (A.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const g = ne().numTensors;
      this.optimizer_.dispose(), A.numDisposedVariables += g - ne().numTensors;
    }
    return A;
  }
  getLossIdentifiers() {
    let A;
    if (typeof this.loss == "string")
      A = mB(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const g of this.loss)
        if (typeof g != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      A = this.loss.map((g) => mB(g));
    } else {
      const g = Object.keys(this.loss);
      A = {};
      const I = this.loss;
      for (const B of g) {
        if (typeof I[B] != "string")
          throw new Error("Serialization of non-string loss is not supported.");
        A[B] = mB(I[B]);
      }
    }
    return A;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [mB(Vt(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((A) => mB(Vt(A)));
    {
      const A = {};
      for (const g in this.metrics)
        A[g] = mB(Vt(this.metrics[g]));
      return A;
    }
  }
  getTrainingConfig() {
    return { loss: this.getLossIdentifiers(), metrics: this.getMetricIdentifiers(), optimizer_config: { class_name: this.optimizer.getClassName(), config: this.optimizer.getConfig() } };
  }
  loadTrainingConfig(A) {
    if (A.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (A.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (A.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    const g = WB($n(A.optimizer_config));
    let I, B;
    if (typeof A.loss == "string")
      I = xQ(A.loss);
    else if (Array.isArray(A.loss))
      I = A.loss.map((Q) => xQ(Q));
    else if (A.loss != null) {
      I = {};
      for (const Q in A.loss)
        I[Q] = xQ(A.loss[Q]);
    }
    if (Array.isArray(A.metrics))
      B = A.metrics.map((Q) => xQ(Q));
    else if (A.metrics != null) {
      B = {};
      for (const Q in A.metrics)
        B[Q] = xQ(A.metrics[Q]);
    }
    this.compile({ loss: I, metrics: B, optimizer: g });
  }
  async save(A, g) {
    if (typeof A == "string") {
      const i = (I = A, QC.getSaveHandlers(I));
      if (i.length === 0)
        throw new X(`Cannot find any save handlers for URL '${A}'`);
      if (i.length > 1)
        throw new X(`Found more than one (${i.length}) save handlers for URL '${A}'`);
      A = i[0];
    }
    var I;
    if (A.save == null)
      throw new X("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const B = await Ec(this.getNamedWeights(g)), Q = { modelTopology: this.toJSON(null, !1), format: "layers-model", generatedBy: `TensorFlow.js tfjs-layers v${id}`, convertedBy: null };
    if (g != null && g.includeOptimizer && this.optimizer != null) {
      Q.trainingConfig = this.getTrainingConfig();
      const i = "optimizer", { data: o, specs: t } = await Ec(await this.optimizer.getWeights(), i);
      B.specs.push(...t), B.data = (E = [B.data, o], ii.join(E));
    }
    var E;
    return this.userDefinedMetadata != null && (zc(this.userDefinedMetadata, this.name, !0), Q.userDefinedMetadata = this.userDefinedMetadata), Q.weightData = B.data, Q.weightSpecs = B.specs, A.save(Q);
  }
  setUserDefinedMetadata(A) {
    zc(A, this.name), this.userDefinedMetadata = A;
  }
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
HE.className = "Model", RA(HE);
class I0 extends HE {
}
I0.className = "Functional", RA(I0);
class $i extends HE {
  constructor(A) {
    if (super({ inputs: [], outputs: [] }), A = A || {}, this.trainable = !0, this.built = !1, this.name = A.name != null ? A.name : $s("sequential_"), A.layers != null)
      for (const g of A.layers)
        this.add(g);
  }
  checkShape(A) {
    if (A.inboundNodes[0].outputTensors[0].shape.some((g) => g < 0))
      throw new X(`Negative dimension size caused by adding layer ${A.name} with input shape [${A.inboundNodes[0].inputTensors[0].shape}]`);
  }
  add(A) {
    const g = A instanceof $i || A instanceof HE;
    let I;
    if (g) {
      if (I = A, I.outputs.length !== 1)
        throw new X("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (I.inputs.length !== 1)
        throw new X("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (A.inboundNodes.length === 0) {
        if (A.batchInputShape == null)
          throw new X("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const B = function(Q) {
          if (Q.batchShape == null && Q.shape == null)
            throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
          if (Q.batchShape != null && Q.shape != null)
            throw new X("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
          let E = Q.batchShape;
          Q.shape != null && E == null && (E = [null].concat(Q.shape));
          let i = Q.dtype;
          return i == null && (i = "float32"), new Pi({ batchInputShape: E, name: Q.name, dtype: i, sparse: Q.sparse }).inboundNodes[0].outputTensors[0];
        }({ batchShape: A.batchInputShape, dtype: A.dtype, name: A.name + "_input" });
        A.apply(B);
      }
      if (g)
        this.outputs = I.outputs, this.inputs = I.inputs;
      else {
        if (A.inboundNodes.length !== 1)
          throw new X(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${A.name} which has ${A.inboundNodes.length} pre-existing inbound connections.`);
        if (A.inboundNodes[0].outputTensors.length !== 1)
          throw new X("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(A), this.outputs = [A.inboundNodes[0].outputTensors[0]], this.inputs = jy(this.outputs[0]);
      }
      this.inboundNodes = [], new Aa({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: QE(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map((B) => B.shape), outputShapes: this.outputs[0].shape });
    } else {
      const B = A.apply(this.outputs[0]);
      if (Array.isArray(B))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(A), this.outputs = [B], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(A), this.built = !1;
  }
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const A = this.layers.length - 1;
      this.layers[A].outboundNodes = [], this.outputs = [this.layers[A].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(A, g) {
    return this.model == null && this.build(), this.model.call(A, g);
  }
  build(A) {
    if (qg(A), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new HE({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  summary(A, g, I = console.log) {
    this.built || this.build(), super.summary(A, g, I);
  }
  setWeights(A) {
    this.model == null && this.build(), this.model.setWeights(A);
  }
  evaluate(A, g, I = {}) {
    if (!this.built)
      throw new PC("The model needs to be compiled before being used.");
    return this.model.evaluate(A, g, I);
  }
  async evaluateDataset(A, g) {
    if (!this.built)
      throw new PC("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(A, g);
  }
  predict(A, g = {}) {
    return this.model == null && this.build(), this.model.predict(A, g);
  }
  predictOnBatch(A) {
    return this.model == null && this.build(), this.model.predictOnBatch(A);
  }
  compile(A) {
    this.build(), this.model.compile(A), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(A) {
    this.model.optimizer = A;
  }
  async fit(A, g, I = {}) {
    if (!this.built)
      throw new PC("The model needs to be compiled before being used.");
    return this.model.fit(A, g, I);
  }
  async fitDataset(A, g) {
    if (!this.built)
      throw new PC("The model needs to be compiled before being used.");
    return this.model.fitDataset(A, g);
  }
  async trainOnBatch(A, g) {
    return this.model.trainOnBatch(A, g);
  }
  static fromConfig(A, g, I = {}, B = !1) {
    let Q, E = {};
    if (g instanceof Array) {
      if (g[0].className == null || g[0].className === "Merge")
        throw new X("Legacy serialization format not supported yet.");
      Q = g;
    } else
      f(g.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), Q = g.layers, delete g.layers, E = g;
    const i = new A(E);
    if (!(i instanceof $i))
      throw new dg(`Sequential.fromConfig called on non-Sequential input: ${i}`);
    for (const o of Q) {
      const t = WB(o, void 0, B);
      B && t.setFastWeightInitDuringBuild(!0), i.add(t);
    }
    return i;
  }
  set stopTraining(A) {
    if (this.model == null)
      throw new X("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = A;
  }
  get stopTraining() {
    if (this.model == null)
      throw new X("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  getConfig() {
    const A = [];
    for (const g of this.layers) {
      const I = {};
      I.className = g.getClassName(), I.config = g.getConfig(), A.push(I);
    }
    return { name: this.name, layers: A };
  }
}
$i.className = "Sequential", RA($i);
let lC = class extends ei {
  getConfig() {
    return {};
  }
};
class C0 extends lC {
  apply(A, g = 1) {
    return function(I, B = 1) {
      if (B !== 1)
        throw new dg(`Support for alpha values other than 1 (${B}) is not implemented yet.`);
      return Xs(I);
    }(A, g);
  }
}
C0.className = "elu", RA(C0);
class B0 extends lC {
  apply(A) {
    return ZG(A);
  }
}
B0.className = "selu", RA(B0);
class Q0 extends lC {
  apply(A) {
    return rE(A);
  }
}
Q0.className = "relu", RA(Q0);
class E0 extends lC {
  apply(A) {
    return IA(() => Zi(6, rE(A)));
  }
}
E0.className = "relu6", RA(E0);
class i0 extends lC {
  apply(A) {
    return A;
  }
}
i0.className = "linear", RA(i0);
class o0 extends lC {
  apply(A) {
    return oi(A);
  }
}
o0.className = "sigmoid", RA(o0);
class t0 extends lC {
  apply(A) {
    return function(g) {
      return IA(() => {
        const I = kA(0.5, z(0.2, g));
        return UC(I, 0, 1);
      });
    }(A);
  }
}
t0.className = "hardSigmoid", RA(t0);
class e0 extends lC {
  apply(A) {
    return Et(A);
  }
}
e0.className = "softplus", RA(e0);
class s0 extends lC {
  apply(A) {
    return function(g) {
      return IA(() => Cg(g, kA(EC(g), 1)));
    }(A);
  }
}
s0.className = "softsign", RA(s0);
class a0 extends lC {
  apply(A) {
    return th(A);
  }
}
a0.className = "tanh", RA(a0);
let Ir = class extends lC {
  apply(C, A = -1) {
    return Nh(C, A);
  }
};
Ir.className = "softmax", RA(Ir);
class n0 extends lC {
  apply(A, g = -1) {
    return MG(A, g);
  }
}
n0.className = "logSoftmax", RA(n0);
class r0 extends lC {
  apply(A, g = 1) {
    return IA(() => z(oi(z(A, g)), A));
  }
}
r0.className = "swish", RA(r0);
class h0 extends lC {
  apply(A) {
    return IA(() => z(A, th(Et(A))));
  }
}
function DQ(C) {
  return C.getClassName();
}
function fa(C, A = {}) {
  return at(C, vC.getMap().classNameMap, A, "activation");
}
function cQ(C) {
  if (C == null)
    return fa({ className: "linear", config: {} });
  if (typeof C == "string") {
    const A = {};
    return A.className = C, A.config = {}, fa(A);
  }
  return C instanceof lC ? C : fa(C);
}
h0.className = "mish", RA(h0);
class ad extends ei {
}
class D0 extends ad {
  constructor(A) {
    super(), function(g) {
      if (g != null && typeof g != "object")
        throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${g}`);
    }(A), this.l1 = A == null || A.l1 == null ? 0.01 : A.l1, this.l2 = A == null || A.l2 == null ? 0.01 : A.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  apply(A) {
    return IA(() => {
      let g = ZI([1]);
      return this.hasL1 && (g = kA(g, $A(z(this.l1, EC(A))))), this.hasL2 && (g = kA(g, $A(z(this.l2, vi(A))))), CA(g, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  static fromConfig(A, g) {
    return new A({ l1: g.l1, l2: g.l2 });
  }
}
D0.className = "L1L2", RA(D0);
const c0 = { l1l2: "L1L2" };
function CI(C) {
  return CD(C);
}
function w0(C, A = {}) {
  return at(C, vC.getMap().classNameMap, A, "regularizer");
}
function cI(C) {
  return C == null ? null : typeof C == "string" ? w0({ className: C in c0 ? c0[C] : C, config: {} }) : C instanceof ad ? C : w0(C);
}
class l0 extends pg {
  constructor(A) {
    super(A ?? {}), this.supportsMasking = !0, A != null && (this.maxValue = A.maxValue);
  }
  call(A, g) {
    A = ig(A);
    let I = rE(A);
    return this.maxValue != null && (I = UC(I, 0, this.maxValue)), I;
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = { maxValue: this.maxValue }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
l0.className = "ReLU", RA(l0);
class G0 extends pg {
  constructor(A) {
    super(A ?? {}), this.DEFAULT_ALPHA = 0.3, A == null && (A = {}), this.alpha = A.alpha == null ? this.DEFAULT_ALPHA : A.alpha;
  }
  call(A, g) {
    const I = ig(A);
    return Dh(I, this.alpha);
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = { alpha: this.alpha }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
G0.className = "LeakyReLU", RA(G0);
class y0 extends pg {
  constructor(A) {
    if (super(A ?? {}), this.DEFAULT_ALPHA_INITIALIZER = "zeros", A == null && (A = {}), this.supportsMasking = !0, this.alphaInitializer = DI(A.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = cI(A.alphaRegularizer), this.alphaConstraint = xI(A.alphaConstraint), A.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(A.sharedAxes))
      this.sharedAxes = A.sharedAxes;
    else {
      if (typeof A.sharedAxes != "number")
        throw new X(`Expected sharedAxes to be a number or an array of numbers, but got ${A.sharedAxes}`);
      this.sharedAxes = [A.sharedAxes];
    }
  }
  build(A) {
    const g = (A = qg(A)).slice(1);
    if (this.sharedAxes != null)
      for (const B of this.sharedAxes)
        g[B - 1] = 1;
    this.alpha = this.addWeight("alpha", g, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
    const I = {};
    if (this.sharedAxes != null)
      for (let B = 1; B < A.length; ++B)
        I[B] = A[B];
    this.inputSpec = [new bI({ ndim: A.length, axes: I })], this.built = !0;
  }
  call(A, g) {
    return A = ig(A), yh(A, this.alpha.read());
  }
  getConfig() {
    const A = { alphaInitializer: lI(this.alphaInitializer), alphaRegularizer: CI(this.alphaRegularizer), alphaConstraint: HI(this.alphaConstraint), sharedAxes: this.sharedAxes }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
y0.className = "PReLU", RA(y0);
let d0 = class extends pg {
  constructor(C) {
    if (super(C ?? {}), this.DEFAULT_ALPHA = 1, C == null && (C = {}), C.alpha != null && C.alpha !== this.DEFAULT_ALPHA)
      throw new dg(`Non-default alpha value (${C.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = C.alpha == null ? this.DEFAULT_ALPHA : C.alpha;
  }
  call(C, A) {
    const g = ig(C);
    return Xs(g);
  }
  computeOutputShape(C) {
    return C;
  }
  getConfig() {
    const C = { alpha: this.alpha }, A = super.getConfig();
    return Object.assign(C, A), C;
  }
};
d0.className = "ELU", RA(d0);
class F0 extends pg {
  constructor(A) {
    super(A ?? {}), this.DEFAULT_THETA = 1, A == null && (A = {}), this.theta = A.theta == null ? this.DEFAULT_THETA : A.theta;
  }
  call(A, g) {
    const I = ig(A);
    return z(I, bA(LC(I, this.theta), "float32"));
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = { theta: this.theta }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
F0.className = "ThresholdedReLU", RA(F0);
class R0 extends pg {
  constructor(A) {
    super(A ?? {}), this.DEFAULT_AXIS = 1, A == null && (A = {}), this.softmax = new Ir().apply, this.axis = A.axis == null ? this.DEFAULT_AXIS : A.axis;
  }
  call(A, g) {
    const I = ig(A);
    return this.softmax(I, this.axis);
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = { axis: this.axis }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
function xE(C, A, g) {
  if (typeof C == "number")
    return QE(C, A);
  if (C.length !== A)
    throw new X(`The ${g} argument must be an integer or tuple of ${A} integers. Received: ${C.length} elements.`);
  for (let B = 0; B < A; ++B) {
    const Q = C[B];
    if ((I = Q) !== parseInt(I.toString(), 10))
      throw new X(`The ${g} argument must be an integer or tuple of ${A} integers. Received: ${JSON.stringify(C)} including a non-integer number ${Q}`);
  }
  return C;
  var I;
}
function rB(C, A, g, I, B = 1) {
  if (C == null)
    return C;
  let Q;
  return Q = g === "same" ? C : C - (A + (A - 1) * (B - 1)) + 1, Math.floor((Q + I - 1) / I);
}
function FB(C, A, g, I) {
  if (C == null)
    return null;
  if (I === "valid")
    C = C * A + hQ([g - A, 0]);
  else {
    if (I !== "same")
      throw new X(`Unsupport padding mode: ${I}.`);
    C *= A;
  }
  return C;
}
function oD(C, A) {
  return IA(() => (kI(A), A === "channelsFirst" ? mg(C, [0, 2, 3, 1]) : C));
}
function nd(C, A) {
  return IA(() => (kI(A), A === "channelsFirst" ? mg(C, [0, 2, 3, 4, 1]) : C));
}
function N0(C, A, g, I = [1, 1], B = "valid", Q, E, i = null) {
  return IA(() => {
    if (Q == null && (Q = "channelsLast"), kI(Q), C.rank !== 3 && C.rank !== 4)
      throw new X(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${C.rank}.`);
    if (A.rank !== 3 && A.rank !== 4)
      throw new X(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${C.rank}.`);
    let o = oD(C, Q);
    if (B === "causal")
      throw new dg("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return o = Mu({ x: o, filter: A, strides: I, pad: B === "same" ? "same" : "valid", dilations: E, dataFormat: "NHWC", bias: g, activation: i }), Q === "channelsFirst" && (o = mg(o, [0, 3, 1, 2])), o;
  });
}
R0.className = "Softmax", RA(R0);
class ga extends pg {
  constructor(A, g) {
    if (super(g), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", ga.verifyArgs(g), this.rank = A, XI(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new dg(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = xE(g.kernelSize, A, "kernelSize"), this.strides = xE(g.strides == null ? 1 : g.strides, A, "strides"), this.padding = g.padding == null ? "valid" : g.padding, mC(this.padding), this.dataFormat = g.dataFormat == null ? "channelsLast" : g.dataFormat, kI(this.dataFormat), this.activation = cQ(g.activation), this.useBias = g.useBias == null || g.useBias, this.biasInitializer = DI(g.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = xI(g.biasConstraint), this.biasRegularizer = cI(g.biasRegularizer), this.activityRegularizer = cI(g.activityRegularizer), this.dilationRate = xE(g.dilationRate == null ? 1 : g.dilationRate, A, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new X(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new X(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new X(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(A) {
    if (dB("kernelSize" in A, "required key 'kernelSize' not in config"), typeof A.kernelSize != "number" && !BD(A.kernelSize, "number", 1, 3))
      throw new X(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(A.kernelSize)}.`);
  }
  getConfig() {
    const A = { kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: DQ(this.activation), useBias: this.useBias, biasInitializer: lI(this.biasInitializer), biasRegularizer: CI(this.biasRegularizer), activityRegularizer: CI(this.activityRegularizer), biasConstraint: HI(this.biasConstraint) }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
class si extends ga {
  constructor(A, g) {
    super(A, g), this.kernel = null, si.verifyArgs(g), this.filters = g.filters, XI(this.filters, "filters"), this.kernelInitializer = DI(g.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = xI(g.kernelConstraint), this.kernelRegularizer = cI(g.kernelRegularizer);
  }
  build(A) {
    A = qg(A);
    const g = this.dataFormat === "channelsFirst" ? 1 : A.length - 1;
    if (A[g] == null)
      throw new X(`The channel dimension of the input should be defined. Found ${A[g]}`);
    const I = A[g], B = this.kernelSize.concat([I, this.filters]);
    this.kernel = this.addWeight("kernel", B, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [g]: I } }], this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      let I;
      A = ig(A);
      const B = this.bias == null ? null : this.bias.read(), Q = Wy(this.activation.getClassName());
      if (Q != null && this.rank === 2)
        I = N0(A, this.kernel.read(), B, this.strides, this.padding, this.dataFormat, this.dilationRate, Q);
      else {
        if (this.rank === 1)
          I = function(E, i, o, t = 1, e = "valid", s, a = 1) {
            return IA(() => {
              if (s == null && (s = "channelsLast"), kI(s), E.shape.length !== 3)
                throw new X(`The input of a conv1dWithBias operation should be 3, but is ${E.shape.length} instead.`);
              if (i.shape.length !== 3)
                throw new X(`The kernel for a conv1dWithBias operation should be 3, but is ${i.shape.length} instead`);
              if (o != null && o.shape.length !== 1)
                throw new X(`The bias for a conv1dWithBias operation should be 1, but is ${i.shape.length} instead`);
              if (s === "channelsFirst" && (E = mg(E, [0, 2, 1])), e === "causal")
                throw new dg("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
              let r = dG(E, i, t, e === "same" ? "same" : "valid", "NWC", a);
              return o != null && (r = DB(r, o)), r;
            });
          }(A, this.kernel.read(), B, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          I = N0(A, this.kernel.read(), B, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else {
          if (this.rank !== 3)
            throw new dg("convolutions greater than 3D are not implemented yet.");
          I = function(E, i, o, t = [1, 1, 1], e = "valid", s, a) {
            return IA(() => {
              if (s == null && (s = "channelsLast"), kI(s), E.rank !== 4 && E.rank !== 5)
                throw new X(`conv3dWithBias expects input to be of rank 4 or 5, but received ${E.rank}.`);
              if (i.rank !== 4 && i.rank !== 5)
                throw new X(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${E.rank}.`);
              let r = nd(E, s);
              if (e === "causal")
                throw new dg("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
              return r = bN(r, i, t, e === "same" ? "same" : "valid", "NDHWC", a), o != null && (r = DB(r, o)), s === "channelsFirst" && (r = mg(r, [0, 4, 1, 2, 3])), r;
            });
          }(A, this.kernel.read(), B, this.strides, this.padding, this.dataFormat, this.dilationRate);
        }
        this.activation != null && (I = this.activation.apply(I));
      }
      return I;
    });
  }
  computeOutputShape(A) {
    A = qg(A);
    const g = [], I = this.dataFormat === "channelsLast" ? A.slice(1, A.length - 1) : A.slice(2);
    for (let Q = 0; Q < I.length; ++Q) {
      const E = rB(I[Q], this.kernelSize[Q], this.padding, this.strides[Q], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[Q]);
      g.push(E);
    }
    let B = [A[0]];
    return this.dataFormat === "channelsLast" ? (B = B.concat(g), B.push(this.filters)) : (B.push(this.filters), B = B.concat(g)), B;
  }
  getConfig() {
    const A = { filters: this.filters, kernelInitializer: lI(this.kernelInitializer), kernelRegularizer: CI(this.kernelRegularizer), kernelConstraint: HI(this.kernelConstraint) }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  static verifyArgs(A) {
    if (!("filters" in A) || typeof A.filters != "number" || A.filters < 1)
      throw new X(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(A.filters)}`);
  }
}
class _i extends si {
  constructor(A) {
    super(2, A), _i.verifyArgs(A);
  }
  getConfig() {
    const A = super.getConfig();
    return delete A.rank, A;
  }
  static verifyArgs(A) {
    if (typeof A.kernelSize != "number" && !BD(A.kernelSize, "number", 1, 2))
      throw new X(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(A.kernelSize)}.`);
  }
}
_i.className = "Conv2D", RA(_i);
class Ao extends si {
  constructor(A) {
    super(3, A), Ao.verifyArgs(A);
  }
  getConfig() {
    const A = super.getConfig();
    return delete A.rank, A;
  }
  static verifyArgs(A) {
    if (typeof A.kernelSize != "number" && (!Array.isArray(A.kernelSize) || A.kernelSize.length !== 1 && A.kernelSize.length !== 3))
      throw new X(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(A.kernelSize)}.`);
  }
}
Ao.className = "Conv3D", RA(Ao);
class u0 extends _i {
  constructor(A) {
    if (super(A), this.inputSpec = [new bI({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new X(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(A) {
    if ((A = qg(A)).length !== 4)
      throw new X("Input should have rank 4; Received input shape: " + JSON.stringify(A));
    const g = this.dataFormat === "channelsFirst" ? 1 : A.length - 1;
    if (A[g] == null)
      throw new X("The channel dimension of the inputs should be defined. Found `None`.");
    const I = A[g], B = this.kernelSize.concat([this.filters, I]);
    this.kernel = this.addWeight("kernel", B, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new bI({ ndim: 4, axes: { [g]: I } })], this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      let I = ig(A);
      if (I.shape.length !== 4)
        throw new X(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${I.shape.length}`);
      const B = I.shape, Q = B[0];
      let E, i;
      this.dataFormat === "channelsFirst" ? (E = 2, i = 3) : (E = 1, i = 2);
      const o = B[E], t = B[i], e = this.kernelSize[0], s = this.kernelSize[1], a = this.strides[0], r = this.strides[1], h = [Q, FB(o, a, e, this.padding), FB(t, r, s, this.padding), this.filters];
      this.dataFormat !== "channelsLast" && (I = mg(I, [0, 2, 3, 1]));
      let w = FG(I, this.kernel.read(), h, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (w = mg(w, [0, 3, 1, 2])), this.bias != null && (w = DB(w, this.bias.read(), this.dataFormat)), this.activation != null && (w = this.activation.apply(w)), w;
    });
  }
  computeOutputShape(A) {
    const g = (A = qg(A)).slice();
    let I, B, Q;
    this.dataFormat === "channelsFirst" ? (I = 1, B = 2, Q = 3) : (I = 3, B = 1, Q = 2);
    const E = this.kernelSize[0], i = this.kernelSize[1], o = this.strides[0], t = this.strides[1];
    return g[I] = this.filters, g[B] = FB(g[B], o, E, this.padding), g[Q] = FB(g[Q], t, i, this.padding), g;
  }
  getConfig() {
    const A = super.getConfig();
    return delete A.dilationRate, A;
  }
}
u0.className = "Conv2DTranspose", RA(u0);
class k0 extends Ao {
  constructor(A) {
    if (super(A), this.inputSpec = [new bI({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new X(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(A) {
    if ((A = qg(A)).length !== 5)
      throw new X("Input should have rank 5; Received input shape: " + JSON.stringify(A));
    const g = this.dataFormat === "channelsFirst" ? 1 : A.length - 1;
    if (A[g] == null)
      throw new X("The channel dimension of the inputs should be defined. Found `None`.");
    const I = A[g], B = this.kernelSize.concat([this.filters, I]);
    this.kernel = this.addWeight("kernel", B, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new bI({ ndim: 5, axes: { [g]: I } })], this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      let I = ig(A);
      if (I.shape.length !== 5)
        throw new X(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${I.shape.length}`);
      const B = I.shape, Q = B[0];
      let E, i, o;
      this.dataFormat === "channelsFirst" ? (o = 2, E = 3, i = 4) : (o = 1, E = 2, i = 3);
      const t = B[o], e = B[E], s = B[i], a = this.kernelSize[0], r = this.kernelSize[1], h = this.kernelSize[2], w = this.strides[0], G = this.strides[1], D = this.strides[2], l = [Q, FB(t, w, a, this.padding), FB(e, G, r, this.padding), FB(s, D, h, this.padding), this.filters];
      this.dataFormat !== "channelsLast" && (I = mg(I, [0, 2, 3, 4, 1]));
      let d = HN(I, this.kernel.read(), l, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (d = mg(d, [0, 4, 1, 2, 3])), this.bias !== null && (d = DB(d, this.bias.read(), this.dataFormat)), this.activation !== null && (d = this.activation.apply(d)), d;
    });
  }
  computeOutputShape(A) {
    const g = (A = qg(A)).slice();
    let I, B, Q, E;
    this.dataFormat === "channelsFirst" ? (I = 1, B = 2, Q = 3, E = 4) : (I = 4, B = 1, Q = 2, E = 3);
    const i = this.kernelSize[0], o = this.kernelSize[1], t = this.kernelSize[2], e = this.strides[0], s = this.strides[1], a = this.strides[2];
    return g[I] = this.filters, g[B] = FB(g[B], e, i, this.padding), g[Q] = FB(g[Q], s, o, this.padding), g[E] = FB(g[E], a, t, this.padding), g;
  }
  getConfig() {
    const A = super.getConfig();
    return delete A.dilationRate, A;
  }
}
k0.className = "Conv3DTranspose", RA(k0);
class rd extends si {
  constructor(A, g) {
    if (super(A, g), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, g.filters == null)
      throw new X("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (g.kernelInitializer != null || g.kernelRegularizer != null || g.kernelConstraint != null)
      throw new X("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (g.padding != null && g.padding !== "same" && g.padding !== "valid")
      throw new X(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(g.padding)}`);
    this.depthMultiplier = g.depthMultiplier == null ? 1 : g.depthMultiplier, this.depthwiseInitializer = DI(g.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = cI(g.depthwiseRegularizer), this.depthwiseConstraint = xI(g.depthwiseConstraint), this.pointwiseInitializer = DI(g.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = cI(g.pointwiseRegularizer), this.pointwiseConstraint = xI(g.pointwiseConstraint);
  }
  build(A) {
    if ((A = qg(A)).length < this.rank + 2)
      throw new X(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(A)}`);
    const g = this.dataFormat === "channelsFirst" ? 1 : A.length - 1;
    if (A[g] == null || A[g] < 0)
      throw new X(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(A[g])}`);
    const I = A[g], B = this.kernelSize.concat([I, this.depthMultiplier]), Q = [];
    for (let i = 0; i < this.rank; ++i)
      Q.push(1);
    Q.push(I * this.depthMultiplier, this.filters);
    const E = !0;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", B, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, E, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", Q, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, E, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, E, this.biasConstraint) : this.bias = null, this.inputSpec = [new bI({ ndim: this.rank + 2, axes: { [g]: I } })], this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      let I;
      if (A = ig(A), this.rank === 1)
        throw new dg("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (A = mg(A, [0, 2, 3, 1])), I = XG(A, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (I = DB(I, this.bias.read(), this.dataFormat)), this.activation != null && (I = this.activation.apply(I)), this.dataFormat === "channelsFirst" && (I = mg(I, [0, 3, 1, 2])), I;
    });
  }
  getConfig() {
    const A = super.getConfig();
    return delete A.rank, delete A.kernelInitializer, delete A.kernelRegularizer, delete A.kernelConstraint, A.depthwiseInitializer = lI(this.depthwiseInitializer), A.pointwiseInitializer = lI(this.pointwiseInitializer), A.depthwiseRegularizer = CI(this.depthwiseRegularizer), A.pointwiseRegularizer = CI(this.pointwiseRegularizer), A.depthwiseConstraint = HI(this.depthwiseConstraint), A.pointwiseConstraint = HI(this.pointwiseConstraint), A;
  }
}
rd.className = "SeparableConv";
class K0 extends rd {
  constructor(A) {
    super(2, A);
  }
}
K0.className = "SeparableConv2D", RA(K0);
class Se extends si {
  constructor(A) {
    super(1, A), Se.verifyArgs(A), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const A = super.getConfig();
    return delete A.rank, delete A.dataFormat, A;
  }
  static verifyArgs(A) {
    if (typeof A.kernelSize != "number" && !BD(A.kernelSize, "number", 1, 1))
      throw new X(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(A.kernelSize)}.`);
  }
}
Se.className = "Conv1D", RA(Se);
class S0 extends pg {
  constructor(A) {
    super(A), typeof A.cropping == "number" ? this.cropping = [[A.cropping, A.cropping], [A.cropping, A.cropping]] : typeof A.cropping[0] == "number" ? this.cropping = [[A.cropping[0], A.cropping[0]], [A.cropping[1], A.cropping[1]]] : this.cropping = A.cropping, this.dataFormat = A.dataFormat === void 0 ? "channelsLast" : A.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(A) {
    return this.dataFormat === "channelsFirst" ? [A[0], A[1], A[2] - this.cropping[0][0] - this.cropping[0][1], A[3] - this.cropping[1][0] - this.cropping[1][1]] : [A[0], A[1] - this.cropping[0][0] - this.cropping[0][1], A[2] - this.cropping[1][0] - this.cropping[1][1], A[3]];
  }
  call(A, g) {
    return IA(() => {
      if (A = ig(A), this.dataFormat === "channelsLast") {
        const I = qt(A, this.cropping[0][0], A.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return qt(I, this.cropping[1][0], A.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      }
      {
        const I = qt(A, this.cropping[0][0], A.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return qt(I, this.cropping[1][0], A.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const A = { cropping: this.cropping, dataFormat: this.dataFormat }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
S0.className = "Cropping2D", RA(S0);
class p0 extends pg {
  constructor(A) {
    var g;
    super(A), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = A.size == null ? this.DEFAULT_SIZE : A.size, this.dataFormat = A.dataFormat == null ? "channelsLast" : A.dataFormat, kI(this.dataFormat), this.interpolation = A.interpolation == null ? "nearest" : A.interpolation, g = this.interpolation, EE(dK, "InterpolationFormat", g);
  }
  computeOutputShape(A) {
    if (this.dataFormat === "channelsFirst") {
      const g = A[2] == null ? null : this.size[0] * A[2], I = A[3] == null ? null : this.size[1] * A[3];
      return [A[0], A[1], g, I];
    }
    {
      const g = A[1] == null ? null : this.size[0] * A[1], I = A[2] == null ? null : this.size[1] * A[2];
      return [A[0], g, I, A[3]];
    }
  }
  call(A, g) {
    return IA(() => {
      let I = ig(A);
      const B = I.shape;
      if (this.dataFormat === "channelsFirst") {
        I = mg(I, [0, 2, 3, 1]);
        const Q = this.size[0] * B[2], E = this.size[1] * B[3], i = this.interpolation === "nearest" ? qB.resizeNearestNeighbor(I, [Q, E]) : qB.resizeBilinear(I, [Q, E]);
        return mg(i, [0, 3, 1, 2]);
      }
      {
        const Q = this.size[0] * B[1], E = this.size[1] * B[2];
        return this.interpolation === "nearest" ? qB.resizeNearestNeighbor(I, [Q, E]) : qB.resizeBilinear(I, [Q, E]);
      }
    });
  }
  getConfig() {
    const A = { size: this.size, dataFormat: this.dataFormat, interpolation: this.interpolation }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
p0.className = "UpSampling2D", RA(p0);
class M0 extends ga {
  constructor(A) {
    super(2, A), this.depthwiseKernel = null, this.depthMultiplier = A.depthMultiplier == null ? 1 : A.depthMultiplier, this.depthwiseInitializer = DI(A.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = xI(A.depthwiseConstraint), this.depthwiseRegularizer = cI(A.depthwiseRegularizer);
  }
  build(A) {
    if ((A = qg(A)).length < 4)
      throw new X(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(A)}.`);
    const g = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (A[g] == null || A[g] < 0)
      throw new X(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${A[g]}).`);
    const I = A[g], B = [this.kernelSize[0], this.kernelSize[1], I, this.depthMultiplier];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", B, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [I * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      let I = function(B, Q, E = [1, 1], i = "valid", o, t) {
        return IA(() => {
          o == null && (o = "channelsLast"), kI(o);
          let e = oD(B, o);
          if (B.rank !== 4)
            throw new X(`Input for depthwiseConv2d is required to be 4-D, but is instead ${B.rank}-D`);
          if (Q.rank !== 4)
            throw new X(`depthwiseKernel is required to be 4-D, but is instead ${Q.rank}-D`);
          return e = ah(e, Q, E, i === "same" ? "same" : "valid", "NHWC", t), o === "channelsFirst" && (e = mg(e, [0, 3, 1, 2])), e;
        });
      }(A = ig(A), this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (I = DB(I, this.bias.read(), this.dataFormat)), this.activation != null && (I = this.activation.apply(I)), I;
    });
  }
  computeOutputShape(A) {
    A = qg(A);
    const g = this.dataFormat === "channelsFirst" ? A[2] : A[1], I = this.dataFormat === "channelsFirst" ? A[3] : A[2], B = this.dataFormat === "channelsFirst" ? A[1] * this.depthMultiplier : A[3] * this.depthMultiplier, Q = rB(g, this.kernelSize[0], this.padding, this.strides[0]), E = rB(I, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [A[0], B, Q, E] : [A[0], Q, E, B];
  }
  getConfig() {
    const A = super.getConfig();
    return A.depthMultiplier = this.depthMultiplier, A.depthwiseInitializer = lI(this.depthwiseInitializer), A.depthwiseRegularizer = CI(this.depthwiseRegularizer), A.depthwiseConstraint = HI(this.depthwiseRegularizer), A;
  }
}
function hd(C, A, g, I) {
  if (Array.isArray(C)) {
    if (A != null || g != null)
      throw new X("When inputs is an array, neither initialState or constants should be provided");
    I != null && (g = C.slice(C.length - I, C.length), C = C.slice(0, C.length - I)), C.length > 1 && (A = C.slice(1, C.length)), C = C[0];
  }
  function B(Q) {
    return Q == null || Array.isArray(Q) ? Q : [Q];
  }
  return { inputs: C, initialState: A = B(A), constants: g = B(g) };
}
function Dd(C, A, g, I = !1, B, Q, E = !1, i = !1) {
  return IA(() => {
    const o = A.shape.length;
    if (o < 3)
      throw new X(`Input should be at least 3D, but is ${o}D.`);
    const t = [1, 0].concat(hB(2, o));
    if (A = mg(A, t), Q != null)
      throw new dg("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    E && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), B != null && ((B = bA(bA(B, "bool"), "float32")).rank === o - 1 && (B = FC(B, -1)), B = mg(B, t)), I && (A = CE(A, 0), B != null && (B = CE(B, 0)));
    const e = [];
    let s, a = g;
    const r = A.shape[0], h = BE(A);
    let w, G;
    B != null && (w = BE(B));
    for (let D = 0; D < r; ++D) {
      const l = h[D], d = IA(() => C(l, a));
      if (B == null)
        s = d[0], a = d[1];
      else {
        const N = IA(() => {
          const k = w[D], p = tg($C(k), k);
          return { output: kA(z(d[0], k), z(a[0], p)), newStates: a.map((Y, M) => kA(z(d[1][M], k), z(Y, p))) };
        });
        s = N.output, a = N.newStates;
      }
      i && e.push(s);
    }
    return i && (G = xB(e, 1)), [s, G, a];
  });
}
M0.className = "DepthwiseConv2D", RA(M0);
class wQ extends pg {
  constructor(A) {
    let g;
    if (super(A), A.cell == null)
      throw new X("cell property is missing for the constructor of RNN.");
    if (g = Array.isArray(A.cell) ? new Qr({ cells: A.cell }) : A.cell, g.stateSize == null)
      throw new X("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = g, this.returnSequences = A.returnSequences != null && A.returnSequences, this.returnState = A.returnState != null && A.returnState, this.goBackwards = A.goBackwards != null && A.goBackwards, this._stateful = A.stateful != null && A.stateful, this.unroll = A.unroll != null && A.unroll, this.supportsMasking = !0, this.inputSpec = [new bI({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  getStates() {
    return this.states_ == null ? hB(0, Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1).map((A) => null) : this.states_;
  }
  setStates(A) {
    this.states_ = A;
  }
  computeOutputShape(A) {
    On(A) && (A = A[0]);
    let g = this.cell.stateSize;
    Array.isArray(g) || (g = [g]);
    const I = g[0];
    let B;
    if (B = this.returnSequences ? [A[0], A[1], I] : [A[0], I], this.returnState) {
      const Q = [];
      for (const E of g)
        Q.push([A[0], E]);
      return [B].concat(Q);
    }
    return B;
  }
  computeMask(A, g) {
    return IA(() => {
      Array.isArray(g) && (g = g[0]);
      const I = this.returnSequences ? g : null;
      if (this.returnState) {
        const B = this.states.map((Q) => null);
        return [I].concat(B);
      }
      return I;
    });
  }
  get states() {
    if (this.states_ == null) {
      const A = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, g = [];
      for (let I = 0; I < A; ++I)
        g.push(null);
      return g;
    }
    return this.states_;
  }
  set states(A) {
    this.states_ = A;
  }
  build(A) {
    if (this.numConstants != null)
      throw new dg("Constants support is not implemented in RNN yet.");
    On(A) && (A = A[0]);
    const g = this.stateful ? A[0] : null, I = A.slice(2);
    this.inputSpec[0] = new bI({ shape: [g, null, ...I] });
    const B = [A[0]].concat(A.slice(2));
    let Q;
    if (this.cell.build(B), Q = Array.isArray(this.cell.stateSize) ? this.cell.stateSize : [this.cell.stateSize], this.stateSpec != null) {
      if (!Zg(this.stateSpec.map((E) => E.shape[E.shape.length - 1]), Q))
        throw new X(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = Q.map((E) => new bI({ shape: [null, E] }));
    this.stateful && this.resetStates();
  }
  resetStates(A, g = !1) {
    IA(() => {
      if (!this.stateful)
        throw new yB("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const I = this.inputSpec[0].shape[0];
      if (I == null)
        throw new X("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((B) => ZI([I, B])) : this.states_ = [ZI([I, this.cell.stateSize])];
      else if (A == null)
        Ug(this.states_), this.keptStates != null && (Ug(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((B) => ZI([I, B])) : this.states_[0] = ZI([I, this.cell.stateSize]);
      else {
        if (Array.isArray(A) || (A = [A]), A.length !== this.states_.length)
          throw new X(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${A.length} state value(s). Input received: ${A}`);
        g === !0 ? this.keptStates.push(this.states_.slice()) : Ug(this.states_);
        for (let B = 0; B < this.states_.length; ++B) {
          const Q = A[B], E = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[B] : this.cell.stateSize, i = [I, E];
          if (!Zg(Q.shape, i))
            throw new X(`State ${B} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${Q.shape}`);
          this.states_[B] = Q;
        }
      }
      this.states_ = this.states_.map((B) => JC(B.clone()));
    });
  }
  apply(A, g) {
    let I = g == null ? null : g.initialState, B = g == null ? null : g.constants;
    g == null && (g = {});
    const Q = hd(A, I, B, this.numConstants);
    A = Q.inputs, I = Q.initialState, B = Q.constants;
    let E = [], i = [];
    if (I != null) {
      g.initialState = I, E = E.concat(I), this.stateSpec = [];
      for (const o of I)
        this.stateSpec.push(new bI({ shape: o.shape }));
      i = i.concat(this.stateSpec);
    }
    if (B != null && (g.constants = B, E = E.concat(B), this.numConstants = B.length), E[0] instanceof uB) {
      const o = [A].concat(E), t = this.inputSpec.concat(i), e = this.inputSpec;
      this.inputSpec = t;
      const s = super.apply(o, g);
      return this.inputSpec = e, s;
    }
    return super.apply(A, g);
  }
  call(A, g) {
    return IA(() => {
      const I = g == null ? null : g.mask, B = g == null ? null : g.training;
      let Q = g == null ? null : g.initialState;
      A = ig(A), Q == null && (Q = this.stateful ? this.states_ : this.getInitialState(A));
      const E = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (Q.length !== E)
        throw new X(`RNN Layer has ${E} state(s) but was passed ${Q.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const i = { training: B }, o = Dd((r, h) => {
        const w = this.cell.call([r].concat(h), i);
        return [w[0], w.slice(1)];
      }, A, Q, this.goBackwards, I, null, this.unroll, this.returnSequences), t = o[0], e = o[1], s = o[2];
      this.stateful && this.resetStates(s, B);
      const a = this.returnSequences ? e : t;
      return this.returnState ? [a].concat(s) : a;
    });
  }
  getInitialState(A) {
    return IA(() => {
      let g = ZI(A.shape);
      return g = $A(g, [1, 2]), g = nt(g), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((I) => I > 1 ? bn(g, [1, I]) : g) : this.cell.stateSize > 1 ? [bn(g, [1, this.cell.stateSize])] : [g];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(A) {
    super.setFastWeightInitDuringBuild(A), this.cell != null && this.cell.setFastWeightInitDuringBuild(A);
  }
  getConfig() {
    const A = super.getConfig(), g = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };
    this.numConstants != null && (g.numConstants = this.numConstants);
    const I = this.cell.getConfig();
    return this.getClassName() === wQ.className && (g.cell = { className: this.cell.getClassName(), config: I }), Object.assign(Object.assign(Object.assign({}, I), A), g);
  }
  static fromConfig(A, g, I = {}) {
    const B = WB(g.cell, I);
    return new A(Object.assign(g, { cell: B }));
  }
}
wQ.className = "RNN", RA(wQ);
class Ia extends pg {
}
class Cr extends Ia {
  constructor(A) {
    super(A), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = A.units, XI(this.units, "units"), this.activation = cQ(A.activation == null ? this.DEFAULT_ACTIVATION : A.activation), this.useBias = A.useBias == null || A.useBias, this.kernelInitializer = DI(A.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = DI(A.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = DI(A.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = cI(A.kernelRegularizer), this.recurrentRegularizer = cI(A.recurrentRegularizer), this.biasRegularizer = cI(A.biasRegularizer), this.kernelConstraint = xI(A.kernelConstraint), this.recurrentConstraint = xI(A.recurrentConstraint), this.biasConstraint = xI(A.biasConstraint), this.dropout = Ai([1, hQ([0, A.dropout == null ? 0 : A.dropout])]), this.recurrentDropout = Ai([1, hQ([0, A.recurrentDropout == null ? 0 : A.recurrentDropout])]), this.dropoutFunc = A.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(A) {
    A = qg(A), this.kernel = this.addWeight("kernel", [A[A.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      if (A.length !== 2)
        throw new X(`SimpleRNNCell expects 2 input Tensors, got ${A.length}.`);
      let I = A[1];
      A = A[0];
      const B = g.training != null && g.training;
      let Q;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = lQ({ ones: () => $C(A), rate: this.dropout, training: B, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = lQ({ ones: () => $C(I), rate: this.recurrentDropout, training: B, dropoutFunc: this.dropoutFunc }));
      const E = this.dropoutMask, i = this.recurrentDropoutMask;
      Q = VB(E != null ? z(A, E) : A, this.kernel.read()), this.bias != null && (Q = DB(Q, this.bias.read())), i != null && (I = z(I, i));
      let o = kA(Q, VB(I, this.recurrentKernel.read()));
      return this.activation != null && (o = this.activation.apply(o)), [o, o];
    });
  }
  getConfig() {
    const A = super.getConfig(), g = { units: this.units, activation: DQ(this.activation), useBias: this.useBias, kernelInitializer: lI(this.kernelInitializer), recurrentInitializer: lI(this.recurrentInitializer), biasInitializer: lI(this.biasInitializer), kernelRegularizer: CI(this.kernelRegularizer), recurrentRegularizer: CI(this.recurrentRegularizer), biasRegularizer: CI(this.biasRegularizer), activityRegularizer: CI(this.activityRegularizer), kernelConstraint: HI(this.kernelConstraint), recurrentConstraint: HI(this.recurrentConstraint), biasConstraint: HI(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout };
    return Object.assign(Object.assign({}, A), g);
  }
}
Cr.className = "SimpleRNNCell", RA(Cr);
class U0 extends wQ {
  constructor(A) {
    A.cell = new Cr(A), super(A);
  }
  call(A, g) {
    return IA(() => {
      this.cell.dropoutMask != null && (Ug(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ug(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const I = g == null ? null : g.mask, B = g == null ? null : g.training, Q = g == null ? null : g.initialState;
      return super.call(A, { mask: I, training: B, initialState: Q });
    });
  }
  static fromConfig(A, g) {
    return new A(g);
  }
}
U0.className = "SimpleRNN", RA(U0);
class Br extends Ia {
  constructor(A) {
    if (super(A), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", A.resetAfter)
      throw new X("GRUCell does not support reset_after parameter set to true.");
    this.units = A.units, XI(this.units, "units"), this.activation = cQ(A.activation === void 0 ? this.DEFAULT_ACTIVATION : A.activation), this.recurrentActivation = cQ(A.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : A.recurrentActivation), this.useBias = A.useBias == null || A.useBias, this.kernelInitializer = DI(A.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = DI(A.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = DI(A.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = cI(A.kernelRegularizer), this.recurrentRegularizer = cI(A.recurrentRegularizer), this.biasRegularizer = cI(A.biasRegularizer), this.kernelConstraint = xI(A.kernelConstraint), this.recurrentConstraint = xI(A.recurrentConstraint), this.biasConstraint = xI(A.biasConstraint), this.dropout = Ai([1, hQ([0, A.dropout == null ? 0 : A.dropout])]), this.recurrentDropout = Ai([1, hQ([0, A.recurrentDropout == null ? 0 : A.recurrentDropout])]), this.dropoutFunc = A.dropoutFunc, this.implementation = A.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(A) {
    const g = (A = qg(A))[A.length - 1];
    this.kernel = this.addWeight("kernel", [g, 3 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 3 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [3 * this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      if (A.length !== 2)
        throw new X(`GRUCell expects 2 input Tensors (inputs, h, c), got ${A.length}.`);
      const I = g.training != null && g.training;
      let B = A[1];
      A = A[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = lQ({ ones: () => $C(A), rate: this.dropout, training: I, count: 3, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = lQ({ ones: () => $C(B), rate: this.recurrentDropout, training: I, count: 3, dropoutFunc: this.dropoutFunc }));
      const Q = this.dropoutMask, E = this.recurrentDropoutMask;
      let i, o, t;
      0 < this.dropout && this.dropout < 1 && (A = z(A, Q[0]));
      let e = VB(A, this.kernel.read());
      this.useBias && (e = DB(e, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (B = z(B, E[0]));
      const s = this.recurrentKernel.read(), [a, r] = fC(s, [2 * this.units, this.units], s.rank - 1), h = VB(B, a), [w, G, D] = fC(e, 3, e.rank - 1), [l, d] = fC(h, 2, h.rank - 1);
      i = this.recurrentActivation.apply(kA(w, l)), o = this.recurrentActivation.apply(kA(G, d));
      const N = VB(z(o, B), r);
      t = this.activation.apply(kA(D, N));
      const k = kA(z(i, B), z(kA(1, RI(i)), t));
      return [k, k];
    });
  }
  getConfig() {
    const A = super.getConfig(), g = { units: this.units, activation: DQ(this.activation), recurrentActivation: DQ(this.recurrentActivation), useBias: this.useBias, kernelInitializer: lI(this.kernelInitializer), recurrentInitializer: lI(this.recurrentInitializer), biasInitializer: lI(this.biasInitializer), kernelRegularizer: CI(this.kernelRegularizer), recurrentRegularizer: CI(this.recurrentRegularizer), biasRegularizer: CI(this.biasRegularizer), activityRegularizer: CI(this.activityRegularizer), kernelConstraint: HI(this.kernelConstraint), recurrentConstraint: HI(this.recurrentConstraint), biasConstraint: HI(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation, resetAfter: !1 };
    return Object.assign(Object.assign({}, A), g);
  }
}
Br.className = "GRUCell", RA(Br);
class Y0 extends wQ {
  constructor(A) {
    A.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), A.cell = new Br(A), super(A);
  }
  call(A, g) {
    return IA(() => {
      this.cell.dropoutMask != null && (Ug(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ug(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const I = g == null ? null : g.mask, B = g == null ? null : g.training, Q = g == null ? null : g.initialState;
      return super.call(A, { mask: I, training: B, initialState: Q });
    });
  }
  static fromConfig(A, g) {
    return g.implmentation === 0 && (g.implementation = 1), new A(g);
  }
}
Y0.className = "GRU", RA(Y0);
class pe extends Ia {
  constructor(A) {
    super(A), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = A.units, XI(this.units, "units"), this.activation = cQ(A.activation === void 0 ? this.DEFAULT_ACTIVATION : A.activation), this.recurrentActivation = cQ(A.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : A.recurrentActivation), this.useBias = A.useBias == null || A.useBias, this.kernelInitializer = DI(A.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = DI(A.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = DI(A.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = A.unitForgetBias, this.kernelRegularizer = cI(A.kernelRegularizer), this.recurrentRegularizer = cI(A.recurrentRegularizer), this.biasRegularizer = cI(A.biasRegularizer), this.kernelConstraint = xI(A.kernelConstraint), this.recurrentConstraint = xI(A.recurrentConstraint), this.biasConstraint = xI(A.biasConstraint), this.dropout = Ai([1, hQ([0, A.dropout == null ? 0 : A.dropout])]), this.recurrentDropout = Ai([1, hQ([0, A.recurrentDropout == null ? 0 : A.recurrentDropout])]), this.dropoutFunc = A.dropoutFunc, this.implementation = A.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(A) {
    var g;
    const I = (A = qg(A))[A.length - 1];
    let B;
    if (this.kernel = this.addWeight("kernel", [I, 4 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 4 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      if (this.unitForgetBias) {
        const Q = this.biasInitializer, E = this.units;
        B = new ((g = class extends AB {
          apply(i, o) {
            const t = Q.apply([E]), e = new xn().apply([E]), s = Q.apply([2 * E]);
            return Mc(Mc(t, e), s);
          }
        }).className = "CustomInit", g)();
      } else
        B = this.biasInitializer;
      this.bias = this.addWeight("bias", [4 * this.units], null, B, this.biasRegularizer, !0, this.biasConstraint);
    } else
      this.bias = null;
    this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      const I = g.training != null && g.training;
      if (A.length !== 3)
        throw new X(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${A.length}.`);
      let B = A[1];
      const Q = A[2];
      A = A[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = lQ({ ones: () => $C(A), rate: this.dropout, training: I, count: 4, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = lQ({ ones: () => $C(B), rate: this.recurrentDropout, training: I, count: 4, dropoutFunc: this.dropoutFunc }));
      const E = this.dropoutMask, i = this.recurrentDropoutMask;
      let o, t, e, s;
      0 < this.dropout && this.dropout < 1 && (A = z(A, E[0]));
      let a = VB(A, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (B = z(B, i[0])), a = kA(a, VB(B, this.recurrentKernel.read())), this.useBias && (a = DB(a, this.bias.read()));
      const [r, h, w, G] = fC(a, 4, a.rank - 1);
      o = this.recurrentActivation.apply(r), t = this.recurrentActivation.apply(h), e = kA(z(t, Q), z(o, this.activation.apply(w))), s = this.recurrentActivation.apply(G);
      const D = z(s, this.activation.apply(e));
      return [D, D, e];
    });
  }
  getConfig() {
    const A = super.getConfig(), g = { units: this.units, activation: DQ(this.activation), recurrentActivation: DQ(this.recurrentActivation), useBias: this.useBias, kernelInitializer: lI(this.kernelInitializer), recurrentInitializer: lI(this.recurrentInitializer), biasInitializer: lI(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: CI(this.kernelRegularizer), recurrentRegularizer: CI(this.recurrentRegularizer), biasRegularizer: CI(this.biasRegularizer), activityRegularizer: CI(this.activityRegularizer), kernelConstraint: HI(this.kernelConstraint), recurrentConstraint: HI(this.recurrentConstraint), biasConstraint: HI(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation };
    return Object.assign(Object.assign({}, A), g);
  }
}
pe.className = "LSTMCell", RA(pe);
class J0 extends wQ {
  constructor(A) {
    A.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), A.cell = new pe(A), super(A);
  }
  call(A, g) {
    return IA(() => {
      this.cell.dropoutMask != null && (Ug(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ug(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const I = g == null ? null : g.mask, B = g == null ? null : g.training, Q = g == null ? null : g.initialState;
      return super.call(A, { mask: I, training: B, initialState: Q });
    });
  }
  static fromConfig(A, g) {
    return g.implmentation === 0 && (g.implementation = 1), new A(g);
  }
}
J0.className = "LSTM", RA(J0);
class Qr extends Ia {
  constructor(A) {
    super(A), this.cells = A.cells;
  }
  get stateSize() {
    const A = [];
    for (const g of this.cells.slice().reverse())
      Array.isArray(g.stateSize) ? A.push(...g.stateSize) : A.push(g.stateSize);
    return A;
  }
  call(A, g) {
    return IA(() => {
      let I = A.slice(1);
      const B = [];
      for (const i of this.cells.slice().reverse())
        Array.isArray(i.stateSize) ? B.push(I.splice(0, i.stateSize.length)) : B.push(I.splice(0, 1));
      B.reverse();
      const Q = [];
      let E;
      for (let i = 0; i < this.cells.length; ++i) {
        const o = this.cells[i];
        I = B[i], E = i === 0 ? [A[0]].concat(I) : [E[0]].concat(I), E = o.call(E, g), Q.push(E.slice(1));
      }
      I = [];
      for (const i of Q.slice().reverse())
        I.push(...i);
      return [E[0]].concat(I);
    });
  }
  build(A) {
    let g;
    On(A) && (A = A[0]), this.cells.forEach((I, B) => {
      jQ(`RNNCell_${B}`, () => {
        I.build(A), g = Array.isArray(I.stateSize) ? I.stateSize[0] : I.stateSize, A = [A[0], g];
      });
    }), this.built = !0;
  }
  getConfig() {
    const A = super.getConfig(), g = { cells: this.cells.map((I) => ({ className: I.getClassName(), config: I.getConfig() })) };
    return Object.assign(Object.assign({}, A), g);
  }
  static fromConfig(A, g, I = {}) {
    const B = [];
    for (const Q of g.cells)
      B.push(WB(Q, I));
    return new A({ cells: B });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    const A = [];
    for (const g of this.cells)
      A.push(...g.trainableWeights);
    return A;
  }
  get nonTrainableWeights() {
    const A = [];
    for (const g of this.cells)
      A.push(...g.nonTrainableWeights);
    if (!this.trainable) {
      const g = [];
      for (const I of this.cells)
        g.push(...I.trainableWeights);
      return g.concat(A);
    }
    return A;
  }
  getWeights() {
    const A = [];
    for (const g of this.cells)
      A.push(...g.weights);
    return vn(A);
  }
  setWeights(A) {
    const g = [];
    for (const I of this.cells) {
      const B = I.weights.length, Q = A.splice(B);
      for (let E = 0; E < I.weights.length; ++E)
        g.push([I.weights[E], Q[E]]);
    }
    ED(g);
  }
}
function lQ(C) {
  const { ones: A, rate: g, training: I = !1, count: B = 1, dropoutFunc: Q } = C, E = () => Q != null ? Q(A(), g) : zy(A(), g), i = () => rt(E, A, I);
  return !B || B <= 1 ? JC(i().clone()) : Array(B).fill(void 0).map(i).map((o) => JC(o.clone()));
}
Qr.className = "StackedRNNCells", RA(Qr);
var OK = globalThis && globalThis.__rest || function(C, A) {
  var g = {};
  for (var I in C)
    Object.prototype.hasOwnProperty.call(C, I) && A.indexOf(I) < 0 && (g[I] = C[I]);
  if (C != null && typeof Object.getOwnPropertySymbols == "function") {
    var B = 0;
    for (I = Object.getOwnPropertySymbols(C); B < I.length; B++)
      A.indexOf(I[B]) < 0 && Object.prototype.propertyIsEnumerable.call(C, I[B]) && (g[I[B]] = C[I[B]]);
  }
  return g;
};
class cd extends wQ {
  constructor(A) {
    if (A.unroll)
      throw new dg("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(A.cell))
      throw new dg("It is not possible at the moment to stack convolutional cells.");
    super(A), this.inputSpec = [new bI({ ndim: 5 })];
  }
  call(A, g) {
    return IA(() => {
      if (this.cell.dropoutMask != null && (Ug(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ug(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), g && g.constants)
        throw new X("ConvRNN2D cell does not support constants");
      const I = g == null ? null : g.mask, B = g == null ? null : g.training, Q = g == null ? null : g.initialState;
      return super.call(A, { mask: I, training: B, initialState: Q });
    });
  }
  computeOutputShape(A) {
    let g = this.computeSingleOutputShape(A);
    return this.returnSequences || (g = [g[0], ...g.slice(2)]), this.returnState && (g = [g, ...Array(2).fill([A[0], ...g.slice(-3)])]), g;
  }
  getInitialState(A) {
    return IA(() => {
      const { stateSize: g } = this.cell, I = A.shape, B = this.computeSingleOutputShape(I), Q = ZI([B[0], ...B.slice(2)]);
      return Array.isArray(g) ? Array(g.length).fill(Q) : [Q];
    });
  }
  resetStates(A, g = !1) {
    IA(() => {
      if (!this.stateful)
        throw new yB("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const I = this.inputSpec[0].shape, B = this.computeSingleOutputShape(I), Q = [B[0], ...B.slice(2)];
      if (I[0] == null)
        throw new X("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ZI(Q)) : this.states_ = [ZI(Q)];
      else if (A == null)
        Ug(this.states_), this.keptStates != null && (Ug(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ZI(Q)) : this.states_[0] = ZI(Q);
      else {
        if (Array.isArray(A) || (A = [A]), A.length !== this.states_.length)
          throw new X(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${A.length} state value(s). Input received: ${A}`);
        g ? this.keptStates.push(this.states_.slice()) : Ug(this.states_);
        for (let E = 0; E < this.states_.length; ++E) {
          const i = A[E], o = Q;
          if (!Zg(i.shape, o))
            throw new X(`State ${E} is incompatible with layer ${this.name}: expected shape=${o}, received shape=${i.shape}`);
          this.states_[E] = i;
        }
      }
      this.states_ = this.states_.map((E) => JC(E.clone()));
    });
  }
  computeSingleOutputShape(A) {
    const { dataFormat: g, filters: I, kernelSize: B, padding: Q, strides: E, dilationRate: i } = this.cell, o = g === "channelsFirst", t = A[o ? 3 : 2], e = A[o ? 4 : 3], s = rB(t, B[0], Q, E[0], i[0]), a = rB(e, B[1], Q, E[1], i[1]);
    return [...A.slice(0, 2), ...o ? [I, s, a] : [s, a, I]];
  }
}
cd.className = "ConvRNN2D";
class Er extends pe {
  constructor(A) {
    const { filters: g, kernelSize: I, strides: B, padding: Q, dataFormat: E, dilationRate: i } = A;
    super(Object.assign(Object.assign({}, A), { units: g })), this.filters = g, XI(this.filters, "filters"), this.kernelSize = xE(I, 2, "kernelSize"), this.kernelSize.forEach((o) => XI(o, "kernelSize")), this.strides = xE(B || 1, 2, "strides"), this.strides.forEach((o) => XI(o, "strides")), this.padding = Q || "valid", mC(this.padding), this.dataFormat = E || "channelsLast", kI(this.dataFormat), this.dilationRate = xE(i || 1, 2, "dilationRate"), this.dilationRate.forEach((o) => XI(o, "dilationRate"));
  }
  build(A) {
    var g;
    A = qg(A);
    const I = this.dataFormat === "channelsFirst" ? 1 : A.length - 1;
    if (A[I] == null)
      throw new X(`The channel dimension of the input should be defined. Found ${A[I]}`);
    const B = A[I], Q = this.kernelSize.concat([B, 4 * this.filters]);
    this.kernel = this.addWeight("kernel", Q, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint);
    const E = this.kernelSize.concat([this.filters, 4 * this.filters]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", E, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      let i;
      if (this.unitForgetBias) {
        const o = this.biasInitializer, t = this.filters;
        i = new ((g = class extends AB {
          apply(e, s) {
            return QD([o.apply([t]), zQ([t]), o.apply([2 * t])]);
          }
        }).className = "CustomInit", g)();
      } else
        i = this.biasInitializer;
      this.bias = this.addWeight("bias", [4 * this.filters], null, i, this.biasRegularizer, !0, this.biasConstraint);
    }
    this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      if (A.length !== 3)
        throw new X(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${A.length}.`);
      const I = g.training || !1, B = A[0], Q = A[1], E = A[2];
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = lQ({ ones: () => $C(B), rate: this.dropout, training: I, count: 4, dropoutFunc: this.dropoutFunc }));
      const i = this.dropoutMask, o = (QA, tA, O) => tA && tA[O] ? z(tA[O], QA) : QA;
      let t = o(B, i, 0), e = o(B, i, 1), s = o(B, i, 2), a = o(B, i, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = lQ({ ones: () => $C(Q), rate: this.recurrentDropout, training: I, count: 4, dropoutFunc: this.dropoutFunc }));
      const r = this.recurrentDropoutMask;
      let h = o(Q, r, 0), w = o(Q, r, 1), G = o(Q, r, 2), D = o(Q, r, 3);
      const [l, d, N, k] = fC(this.kernel.read(), 4, 3), [p, Y, M, L] = this.useBias ? fC(this.bias.read(), 4) : [null, null, null, null];
      t = this.inputConv(t, l, p, this.padding), e = this.inputConv(e, d, Y, this.padding), s = this.inputConv(s, N, M, this.padding), a = this.inputConv(a, k, L, this.padding);
      const [m, x, T, Z] = fC(this.recurrentKernel.read(), 4, 3);
      h = this.recurrentConv(h, m), w = this.recurrentConv(w, x), G = this.recurrentConv(G, T), D = this.recurrentConv(D, Z);
      const $ = this.recurrentActivation.apply(kA(t, h)), AA = this.recurrentActivation.apply(kA(e, w)), P = kA(z(AA, E), z($, this.activation.apply(kA(s, G)))), _ = z(this.recurrentActivation.apply(kA(a, D)), this.activation.apply(P));
      return [_, _, P];
    });
  }
  getConfig() {
    const A = super.getConfig(), g = OK(A, ["units"]), I = { filters: this.filters, kernelSize: this.kernelSize, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, strides: this.strides };
    return Object.assign(Object.assign({}, g), I);
  }
  inputConv(A, g, I, B) {
    const Q = IE(A, g, this.strides, B || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return I ? DB(Q, I, this.dataFormat) : Q;
  }
  recurrentConv(A, g) {
    return IE(A, g, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
Er.className = "ConvLSTM2DCell", RA(Er);
class f0 extends cd {
  constructor(A) {
    const g = new Er(A);
    super(Object.assign(Object.assign({}, A), { cell: g }));
  }
  static fromConfig(A, g) {
    return new A(g);
  }
}
f0.className = "ConvLSTM2D", RA(f0);
class ir extends pg {
  constructor(A) {
    super(A), this.rate = Math.max(Math.min(A.rate, 1), 0), this.noiseShape = A.noiseShape, this.seed = A.seed, this.supportsMasking = !0;
  }
  getNoiseShape(A) {
    if (this.noiseShape == null)
      return this.noiseShape;
    const g = A.shape, I = [];
    for (let B = 0; B < this.noiseShape.length; ++B)
      I.push(this.noiseShape[B] == null ? g[B] : this.noiseShape[B]);
    return I;
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      const I = ig(A);
      if (0 < this.rate && this.rate < 1) {
        const B = g.training != null && g.training, Q = this.getNoiseShape(I);
        return rt(() => zy(I, this.rate, Q, this.seed), () => I, B);
      }
      return A;
    });
  }
  getConfig() {
    const A = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  dispose() {
    return super.dispose();
  }
}
ir.className = "Dropout", RA(ir);
class L0 extends ir {
  constructor(A) {
    super(A), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(A) {
    const g = A.shape;
    return [g[0], 1, g[2]];
  }
}
L0.className = "SpatialDropout1D", RA(L0);
class m0 extends pg {
  constructor(A) {
    if (super(A), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", A.batchInputShape == null && A.inputShape == null && A.inputDim != null) {
      let g = null;
      A.batchSize != null && (g = A.batchSize), this.batchInputShape = [g, A.inputDim];
    }
    this.units = A.units, XI(this.units, "units"), this.activation = cQ(A.activation), A.useBias != null && (this.useBias = A.useBias), this.kernelInitializer = DI(A.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = DI(A.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = xI(A.kernelConstraint), this.biasConstraint = xI(A.biasConstraint), this.kernelRegularizer = cI(A.kernelRegularizer), this.biasRegularizer = cI(A.biasRegularizer), this.activityRegularizer = cI(A.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }];
  }
  build(A) {
    const g = (A = qg(A))[A.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [g, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: g } }], this.built = !0;
  }
  computeOutputShape(A) {
    const g = (A = qg(A)).slice();
    return g[g.length - 1] = this.units, g;
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      const I = ig(A), B = Wy(this.activation.getClassName());
      let Q;
      return B != null ? Q = VB(I, this.kernel.read(), B, this.bias ? this.bias.read() : null) : (Q = VB(I, this.kernel.read()), this.bias != null && (Q = DB(Q, this.bias.read())), this.activation != null && (Q = this.activation.apply(Q))), Q;
    });
  }
  getConfig() {
    const A = { units: this.units, activation: DQ(this.activation), useBias: this.useBias, kernelInitializer: lI(this.kernelInitializer), biasInitializer: lI(this.biasInitializer), kernelRegularizer: CI(this.kernelRegularizer), biasRegularizer: CI(this.biasRegularizer), activityRegularizer: CI(this.activityRegularizer), kernelConstraint: HI(this.kernelConstraint), biasConstraint: HI(this.biasConstraint) }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
m0.className = "Dense", RA(m0);
class b0 extends pg {
  constructor(A) {
    super(A = A || {}), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = A.dataFormat;
  }
  computeOutputShape(A) {
    A = qg(A);
    for (const g of A.slice(1))
      if (g == null)
        throw new X(`The shape of the input to "Flatten" is not fully defined (got ${A.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [A[0], nQ(A, 1)];
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      let I = ig(A);
      if (this.dataFormat === "channelsFirst" && I.rank > 1) {
        const B = [0];
        for (let Q = 2; Q < I.rank; ++Q)
          B.push(Q);
        B.push(1), I = mg(I, B);
      }
      return function(B) {
        if (B.rank <= 1)
          throw new X(`batchFlatten requires a minimum rank of 2. Got rank: ${B.rank}.`);
        const Q = [B.shape[0], nQ(B.shape, 1)];
        return CA(B, Q);
      }(I);
    });
  }
  getConfig() {
    const A = {};
    this.dataFormat != null && (A.dataFormat = this.dataFormat);
    const g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
b0.className = "Flatten", RA(b0);
class H0 extends pg {
  constructor(A) {
    super(A), this.supportsMasking = !0, this.activation = cQ(A.activation);
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      const I = ig(A);
      return this.activation.apply(I);
    });
  }
  getConfig() {
    const A = { activation: DQ(this.activation) }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
H0.className = "Activation", RA(H0);
class x0 extends pg {
  constructor(A) {
    super(A), this.n = A.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(A) {
    return [A[0], this.n, A[1]];
  }
  call(A, g) {
    return IA(() => {
      return A = ig(A), I = A, B = this.n, IA(() => {
        if (I.shape.length !== 2)
          throw new X(`repeat() expects a rank-2 tensor, but received a rank-${I.shape.length} tensor.`);
        return bn(nt(I, 1), [1, B, 1]);
      });
      var I, B;
    });
  }
  getConfig() {
    const A = { n: this.n }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
x0.className = "RepeatVector", RA(x0);
class q0 extends pg {
  constructor(A) {
    super(A), this.targetShape = A.targetShape;
    for (let g = 0; g < this.targetShape.length; ++g)
      this.isUnknown(this.targetShape[g]) && (this.targetShape[g] = null);
  }
  isUnknown(A) {
    return A < 0 || A == null;
  }
  fixUnknownDimension(A, g) {
    const I = "Total size of new array must be unchanged.", B = g.slice();
    let Q = 1, E = null;
    for (let o = 0; o < B.length; ++o) {
      const t = B[o];
      if (this.isUnknown(t)) {
        if (E !== null)
          throw new X("Can only specifiy one unknown dimension.");
        E = o;
      } else
        Q *= t;
    }
    const i = nQ(A);
    if (E !== null) {
      if (Q === 0 || i % Q != 0)
        throw new X(I);
      B[E] = i / Q;
    } else if (i !== Q)
      throw new X(I);
    return B;
  }
  computeOutputShape(A) {
    let g = !1;
    for (let I = 0; I < A.length; ++I)
      if (this.isUnknown(A[I])) {
        g = !0;
        break;
      }
    return g ? A.slice(0, 1).concat(this.targetShape) : A.slice(0, 1).concat(this.fixUnknownDimension(A.slice(1), this.targetShape));
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      const I = ig(A), B = I.shape, Q = B.slice(0, 1).concat(this.fixUnknownDimension(B.slice(1), this.targetShape));
      return CA(I, Q);
    });
  }
  getConfig() {
    const A = { targetShape: this.targetShape }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
q0.className = "Reshape", RA(q0);
class V0 extends pg {
  constructor(A) {
    if (super(A), A.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(A.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${A.dims} instead.`);
    const g = hB(1, A.dims.length + 1);
    if (!Zg(A.dims.slice().sort(), g))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(A.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = A.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new bI({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(A) {
    const g = (A = qg(A)).slice();
    return this.dims.forEach((I, B) => {
      g[B + 1] = A[I];
    }), g;
  }
  call(A, g) {
    return mg(ig(A), this.dimsIncludingBatch);
  }
  getConfig() {
    const A = { dims: this.dims }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
V0.className = "Permute", RA(V0);
class W0 extends pg {
  constructor(A) {
    super(A ?? {}), this.supportsMasking = !0, this.maskValue = A != null ? A.maskValue == null ? 0 : A.maskValue : 0;
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = super.getConfig(), g = { maskValue: this.maskValue };
    return Object.assign(g, A), g;
  }
  computeMask(A, g) {
    const I = ig(A);
    return Mn(De(I, this.maskValue), -1);
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      const I = ig(A), B = Mn(De(I, this.maskValue), -1, !0);
      return z(I, bA(B, I.dtype));
    });
  }
}
W0.className = "Masking", RA(W0);
class T0 extends pg {
  constructor(A) {
    if (super(A), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", A.batchInputShape == null && A.inputShape == null) {
      let g = null;
      A.batchSize != null && (g = A.batchSize), A.inputLength == null ? this.batchInputShape = [g, null] : this.batchInputShape = [g].concat(eI(A.inputLength));
    }
    this.inputDim = A.inputDim, XI(this.inputDim, "inputDim"), this.outputDim = A.outputDim, XI(this.outputDim, "outputDim"), this.embeddingsInitializer = DI(A.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = cI(A.embeddingsRegularizer), this.activityRegularizer = cI(A.activityRegularizer), this.embeddingsConstraint = xI(A.embeddingsConstraint), this.maskZero = A.maskZero, this.supportsMasking = A.maskZero, this.inputLength = A.inputLength;
  }
  build(A) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
  }
  warnOnIncompatibleInputShape(A) {
  }
  computeMask(A, g) {
    return IA(() => this.maskZero ? (A = ig(A), De(A, Lg(A))) : null);
  }
  computeOutputShape(A) {
    if (A = qg(A), this.inputLength == null)
      return [...A, this.outputDim];
    const g = eI(this.inputLength);
    if (g.length !== A.length - 1)
      throw new X(`"inputLength" is ${this.inputLength}, but received input shape has shape ${A}`);
    {
      let I = 0;
      for (let B = 0; B < g.length; ++B) {
        const Q = g[B], E = A[B + 1];
        if (Q != null && E != null && Q !== E)
          throw new X(`"inputLength" is ${this.inputLength}, but received input shape has shape ${A}`);
        Q == null && (g[I] = E), I++;
      }
    }
    return [A[0], ...g, this.outputDim];
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      let I = ig(A);
      I.dtype !== "int32" && (I = PB(I, "int32"));
      const B = Py(this.embeddings.read(), CA(I, [I.size]));
      return CA(B, qg(this.computeOutputShape(I.shape)));
    });
  }
  getConfig() {
    const A = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: lI(this.embeddingsInitializer), embeddingsRegularizer: CI(this.embeddingsRegularizer), activityRegularizer: CI(this.activityRegularizer), embeddingsConstraint: HI(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
T0.className = "Embedding", RA(T0);
class DE extends pg {
  constructor(A) {
    super(A || {}), this.supportsMasking = !0;
  }
  mergeFunction(A) {
    throw new dg();
  }
  computeElementwiseOpOutputShape(A, g) {
    if (A == null || g == null)
      return null;
    if (A.length < g.length)
      return this.computeElementwiseOpOutputShape(g, A);
    if (g.length === 0)
      return A;
    const I = A.slice(0, A.length - g.length);
    for (let B = 0; B < g.length; ++B) {
      const Q = A[A.length - g.length + B], E = g[B];
      if (Q == null || E == null || Q < 0 || E < 0)
        I.push(null);
      else if (Q === 1)
        I.push(E);
      else if (E === 1)
        I.push(Q);
      else {
        if (Q !== E)
          throw new X("Operands could not be broadcast together with shapes " + JSON.stringify(A) + " " + JSON.stringify(g));
        I.push(Q);
      }
    }
    return I;
  }
  build(A) {
    if (Array.isArray(A) && !Array.isArray(A[0]) && (A = [qg(A)]), A.length < 2)
      throw new X(`A merge layer should be called on an Array of at least 2 inputs. Got ${A.length} input(s).`);
    let g = [];
    for (const Q of A)
      Q != null && Q[0] !== null && g.push(Q[0]);
    if (g = aQ(g), g.length > 1)
      throw new X(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(A)}.`);
    let I = A[0] == null ? null : A[0].slice(1);
    for (let Q = 1; Q < A.length; ++Q) {
      const E = A[Q] == null ? null : A[Q].slice(1);
      I = this.computeElementwiseOpOutputShape(I, E);
    }
    const B = A.map((Q) => Q.length);
    A.indexOf(null) === -1 && aQ(B).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
  }
  call(A, g) {
    return IA(() => {
      if (this.reshapeRequired) {
        const I = [], B = A.map((Q) => Q.rank);
        if (B.indexOf(null) === -1) {
          const Q = hQ(B);
          for (let E of A) {
            const i = E.rank;
            for (let o = 0; o < Q - i; ++o)
              E = nt(E, 1);
            I.push(E);
          }
          return this.mergeFunction(I);
        }
        {
          let Q = !1;
          for (const o of A) {
            const t = o.rank;
            if (t == null) {
              const e = o.shape, s = e[0], a = e.slice(1).concat([s]);
              let r = CA(o, [s].concat(nQ(e.slice(1))));
              r = mg(r, [1, 0]), r = CA(r, a), I.push(r), Q = !0;
            } else if (t > 1) {
              const e = hB(1, t).concat([0]);
              I.push(mg(o, e)), Q = !0;
            } else
              I.push(o);
          }
          let E = this.mergeFunction(I);
          const i = E.rank;
          if (Q) {
            if (i == null) {
              const o = E.shape, t = o[o.length - 1], e = [t].concat(o.slice(0, o.length - 1));
              E = CA(mg(CA(E, [-1, t]), [1, 0]), e);
            } else if (i > 1) {
              const o = [i - 1].concat(hB(0, i - 1));
              E = mg(E, o);
            }
          }
          return E;
        }
      }
      return this.mergeFunction(A);
    });
  }
  computeOutputShape(A) {
    let g;
    g = A[0] == null ? null : A[0].slice(1);
    for (let B = 1; B < A.length; ++B) {
      const Q = A[B] == null ? null : A[B].slice(1);
      g = this.computeElementwiseOpOutputShape(g, Q);
    }
    let I = [];
    for (const B of A)
      B != null && B[0] !== null && I.push(B[0]);
    return I = aQ(I), g = I.length === 1 ? I.concat(g) : [null].concat(g), g;
  }
  computeMask(A, g) {
    return IA(() => {
      if (g == null)
        return null;
      if (!Array.isArray(g))
        throw new X("`mask` should be an Array");
      if (!Array.isArray(A))
        throw new X("`inputs` should be an Array");
      if (g.length !== A.length)
        throw new X(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${A.length} vs ${g.length})`);
      if (g.every((B) => B == null))
        return null;
      let I = (g = g.map((B) => B == null ? B : FC(B, 0)))[0];
      for (let B = 1; B < g.length - 1; ++B)
        I = XB(I, g[B]);
      return I;
    });
  }
}
class Z0 extends DE {
  constructor(A) {
    super(A);
  }
  mergeFunction(A) {
    return IA(() => {
      let g = A[0].clone();
      for (let I = 1; I < A.length; ++I)
        g = kA(g, A[I]);
      return g;
    });
  }
}
Z0.className = "Add", RA(Z0);
class X0 extends DE {
  constructor(A) {
    super(A);
  }
  mergeFunction(A) {
    return IA(() => {
      let g = A[0].clone();
      for (let I = 1; I < A.length; ++I)
        g = z(g, A[I]);
      return g;
    });
  }
}
X0.className = "Multiply", RA(X0);
class O0 extends DE {
  constructor(A) {
    super(A);
  }
  mergeFunction(A) {
    return IA(() => {
      let g = A[0].clone();
      for (let I = 1; I < A.length; ++I)
        g = kA(g, A[I]);
      return z(1 / A.length, g);
    });
  }
}
O0.className = "Average", RA(O0);
class v0 extends DE {
  constructor(A) {
    super(A);
  }
  mergeFunction(A) {
    return IA(() => {
      let g = A[0];
      for (let I = 1; I < A.length; ++I)
        g = sQ(g, A[I]);
      return g;
    });
  }
}
v0.className = "Maximum", RA(v0);
class P0 extends DE {
  constructor(A) {
    super(A);
  }
  mergeFunction(A) {
    return IA(() => {
      let g = A[0];
      for (let I = 1; I < A.length; ++I)
        g = Zi(g, A[I]);
      return g;
    });
  }
}
P0.className = "Minimum", RA(P0);
class z0 extends DE {
  constructor(A) {
    super(A), this.DEFAULT_AXIS = -1, A == null && (A = {}), this.axis = A.axis == null ? this.DEFAULT_AXIS : A.axis, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(A) {
    if (!Array.isArray(A) || !Array.isArray(A[0]) || A.length === 1)
      throw new X("A `Concatenate` layer should be called on a list of at least 2 inputs");
    let g = !0;
    for (const B of A)
      if (B != null) {
        g = !1;
        break;
      }
    if (g)
      return;
    const I = [];
    for (let B = 0; B < A.length; ++B) {
      const Q = A[B].slice();
      Q.splice(this.axis, 1);
      let E = !1;
      for (const i of I)
        if (Zg(i, Q)) {
          E = !0;
          break;
        }
      E || I.push(Q);
    }
    if (I.length > 1)
      throw new X("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(A));
  }
  mergeFunction(A) {
    return IA(() => QD(A, this.axis));
  }
  computeOutputShape(A) {
    if (!Array.isArray(A) || !Array.isArray(A[0]))
      throw new X("A `Concatenate` layer should be called on a list of inputs.");
    const g = A, I = g[0].slice(), B = this.axis < 0 ? I.length + this.axis : this.axis;
    for (const Q of g.slice(1)) {
      if (I[B] == null || Q[B] == null) {
        I[B] = null;
        break;
      }
      I[B] += Q[B];
    }
    return I;
  }
  computeMask(A, g) {
    if (g == null)
      return null;
    if (!Array.isArray(g))
      throw new X("`mask` should be an array for Concatenate");
    if (!Array.isArray(A))
      throw new X("`inputs` should be an array for Concatenate");
    if (g.length !== A.length)
      throw new X(`Mismatch in the length of mask (${g.length}) and the legnth of inputs (${A.length})`);
    return IA(() => {
      let I = !0;
      if (g.forEach((E) => {
        E == null || (I = !1);
      }), I)
        return null;
      const B = [];
      for (let E = 0; E < A.length; ++E)
        g[E] == null ? B.push(bA($C(A[E]), "bool")) : g[E].rank < A[E].rank ? B.push(FC(g[E], -1)) : B.push(g[E]);
      const Q = DC(B, this.axis);
      return yG(Q, -1, !1);
    });
  }
  getConfig() {
    const A = { axis: this.axis }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
function Mi(C, A) {
  for (; C < 0; )
    C += A;
  return C;
}
z0.className = "Concatenate", RA(z0);
class j0 extends DE {
  constructor(A) {
    super(A), this.axes = A.axes, this.normalize = A.normalize != null && A.normalize, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(A) {
    f(Array.isArray(A) && A.length === 2 && Array.isArray(A[0]) && Array.isArray(A[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const g = A[0], I = A[1];
    if (g.length > 3 || I.length > 3)
      throw new dg("Dot layer does not support tensors of 4D or higher rank yet.");
    const B = this.interpretAxes(g, I);
    if (g[B[0]] !== I[B[1]])
      throw new X(`Dimension incompatibility: ${g[B[0]]} !== ${I[B[1]]}`);
  }
  mergeFunction(A) {
    if (A.length !== 2)
      throw new X(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${A.length} input(s).`);
    let g, I = A[0], B = A[1];
    return g = Array.isArray(this.axes) ? this.axes.map((Q, E) => Mi(Q, A[E].shape.length)) : [Mi(this.axes, I.shape.length), Mi(this.axes, B.shape.length)], this.normalize && (I = de(I, g[0]), B = de(B, g[1])), function(Q, E, i) {
      if (Q.shape.length > 3 || E.shape.length > 3)
        throw new dg("batchDot is not implemented for tensors of 4D or higher rank yet");
      if (f(Q.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${Q.shape.length}`), f(Q.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${E.shape.length}`), typeof i == "number" && (i = [i, i]), Q.dtype === "complex64" || E.dtype === "complex64")
        throw new dg("batchDot is not implemented for complex64-type Tensors yet.");
      const o = Q.shape.length, t = E.shape.length;
      i == null && (i = [o - 1, t - 2]);
      const e = i;
      return IA(() => {
        let s, a;
        if (o > t) {
          s = o - t;
          const r = [];
          for (let h = 0; h < s; ++h)
            r.push(1);
          E = CA(E, E.shape.concat(r));
        } else if (t > o) {
          s = t - o;
          const r = [];
          for (let h = 0; h < s; ++h)
            r.push(1);
          Q = CA(Q, Q.shape.concat(r));
        } else
          s = 0;
        if (Q.shape.length === 2 && E.shape.length === 2)
          a = e[0] === e[1] ? $A(z(Q, E), e[0]) : $A(z(mg(Q, [1, 0]), E), e[1]);
        else {
          const r = e[0] !== Q.shape.length - 1, h = e[1] === E.shape.length - 1;
          a = Tg(Q, E, r, h);
        }
        if (s > 0) {
          let r;
          r = o > t ? o + t - 3 : o - 1;
          const h = [];
          for (let w = r; w < r + s; ++w)
            h.push(w);
          a = ot(a, h);
        }
        return a.shape.length === 1 && (a = FC(a, 1)), a;
      });
    }(I, B, g);
  }
  interpretAxes(A, g) {
    let I;
    return I = Array.isArray(this.axes) ? this.axes : [Mi(this.axes, A.length), Mi(this.axes, g.length)], I;
  }
  computeOutputShape(A) {
    f(Array.isArray(A) && A.length === 2 && Array.isArray(A[0]) && Array.isArray(A[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const g = A[0].slice(), I = A[1].slice();
    if (g.length > 3 || I.length > 3)
      throw new dg("Dot layer does not support tensors of 4D or higher rank yet.");
    const B = this.interpretAxes(g, I);
    g.splice(B[0], 1), I.splice(B[1], 1), I.splice(0, 1);
    const Q = g.concat(I);
    return Q.length === 1 && Q.push(1), Q;
  }
  computeMask(A, g) {
    return null;
  }
  getConfig() {
    const A = { axes: this.axes, normalize: this.normalize }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
j0.className = "Dot", RA(j0);
class $0 extends pg {
  constructor(A) {
    super(A), this.supportsMasking = !0, this.stddev = A.stddev;
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = super.getConfig(), g = { stddev: this.stddev };
    return Object.assign(g, A), g;
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      const I = ig(A);
      return rt(() => kA(_s(I.shape, 0, this.stddev), I), () => I, g.training || !1);
    });
  }
}
$0.className = "GaussianNoise", RA($0);
class _0 extends pg {
  constructor(A) {
    super(A), this.supportsMasking = !0, this.rate = A.rate;
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = super.getConfig(), g = { rate: this.rate };
    return Object.assign(g, A), g;
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g);
      const I = ig(A);
      return this.rate > 0 && this.rate < 1 ? rt(() => {
        const B = Math.sqrt(this.rate / (1 - this.rate));
        return z(I, _s(I.shape, 1, B));
      }, () => I, g.training || !1) : I;
    });
  }
}
_0.className = "GaussianDropout", RA(_0);
class Aw extends pg {
  constructor(A) {
    super(A), this.supportsMasking = !0, this.rate = A.rate, this.noiseShape = A.noiseShape;
  }
  _getNoiseShape(A) {
    return this.noiseShape || ig(A).shape;
  }
  computeOutputShape(A) {
    return A;
  }
  getConfig() {
    const A = super.getConfig(), g = { rate: this.rate };
    return Object.assign(g, A), g;
  }
  call(A, g) {
    return IA(() => {
      if (this.rate < 1 && this.rate > 0) {
        const I = this._getNoiseShape(A);
        return rt(() => {
          const B = ig(A), Q = -1.7580993408473766;
          let E = nE(it(I), this.rate);
          E = PB(E, "float32");
          const i = ((1 - this.rate) * (1 + this.rate * Q ** 2)) ** -0.5, o = -i * Q * this.rate, t = kA(z(B, E), z(kA(E, -1), Q));
          return kA(z(t, i), o);
        }, () => ig(A), g.training || !1);
      }
      return A;
    });
  }
}
function go(C, A, g, I, B, Q = 1e-3) {
  let E;
  if (C.rank === 2)
    E = SN(C, A, g, I, B, Q);
  else if (C.rank === 3)
    E = pN(C, A, g, I, B, Q);
  else {
    if (C.rank !== 4)
      throw new dg(`batchNormalization is not implemented for array of rank ${C.rank} yet`);
    E = MN(C, A, g, I, B, Q);
  }
  return E;
}
function vK(C, A, g, I, B = 1e-3) {
  return Zg(I.slice().sort(), hB(0, C.rank - 1)) ? function(Q, E, i, o, t = 1e-3) {
    return IA(() => {
      const e = fn(Q, o), s = e.mean, a = e.variance;
      return [go(Q, s, a, i, E, t), s, a];
    });
  }(C, A, g, I, B) : function(Q, E, i, o, t = 1e-3) {
    return IA(() => {
      const e = fn(Q, o), s = e.mean, a = e.variance, r = [];
      for (const l of hB(0, Q.rank))
        o.indexOf(l) !== -1 ? r.push(1) : r.push(Q.shape[l]);
      const h = CA(s, r), w = CA(a, r), G = E == null ? null : CA(E, r), D = i == null ? null : CA(i, r);
      return [go(Q, h, w, D, G, t), s, a];
    });
  }(C, A, g, I, B);
}
Aw.className = "AlphaDropout", RA(Aw);
class gw extends pg {
  constructor(A) {
    A == null && (A = {}), super(A), this.supportsMasking = !0, this.axis = A.axis == null ? -1 : A.axis, this.momentum = A.momentum == null ? 0.99 : A.momentum, this.epsilon = A.epsilon == null ? 1e-3 : A.epsilon, this.center = A.center == null || A.center, this.scale = A.scale == null || A.scale, this.betaInitializer = DI(A.betaInitializer || "zeros"), this.gammaInitializer = DI(A.gammaInitializer || "ones"), this.movingMeanInitializer = DI(A.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = DI(A.movingVarianceInitializer || "ones"), this.betaConstraint = xI(A.betaConstraint), this.gammaConstraint = xI(A.gammaConstraint), this.betaRegularizer = cI(A.betaRegularizer), this.gammaRegularizer = cI(A.gammaRegularizer);
  }
  build(A) {
    A = qg(A);
    const g = this.axis >= 0 ? this.axis : this.axis + A.length, I = A[g];
    if (I == null)
      throw new X(`Axis ${g} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(A)}.`);
    this.inputSpec = [new bI({ ndim: A.length, axes: { [g]: I } })];
    const B = [I];
    this.scale && (this.gamma = this.addWeight("gamma", B, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", B, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", B, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", B, null, this.movingVarianceInitializer, null, !1), this.built = !0;
  }
  call(A, g) {
    return IA(() => {
      const I = g.training != null && g.training, B = ig(A), Q = B.shape, E = Q.length, i = hB(0, E), o = this.axis >= 0 ? this.axis : this.axis + E;
      i.splice(o, 1);
      const t = QE(1, E);
      t[o] = Q[o];
      const e = i.slice();
      e.sort();
      const s = !Zg(e, hB(0, E).slice(0, E - 1));
      if (!I)
        return (() => {
          if (s) {
            const G = CA(this.movingMean.read(), t), D = CA(this.movingVariance.read(), t), l = this.center ? CA(this.beta.read(), t) : null, d = this.scale ? CA(this.gamma.read(), t) : null;
            return go(B, G, D, l, d, this.epsilon);
          }
          return go(B, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
        })();
      const [a, r, h] = vK(B, this.gamma.read(), this.beta.read(), i, this.epsilon), w = (G, D, l) => {
        IA(() => {
          const d = 1 - l, N = G.read(), k = z(tg(N, D), d);
          G.write(tg(N, k));
        });
      };
      return w(this.movingMean, r, this.momentum), w(this.movingVariance, h, this.momentum), a;
    });
  }
  getConfig() {
    const A = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: lI(this.betaInitializer), gammaInitializer: lI(this.gammaInitializer), movingMeanInitializer: lI(this.movingMeanInitializer), movingVarianceInitializer: lI(this.movingVarianceInitializer), betaRegularizer: CI(this.betaRegularizer), gammaRegularizer: CI(this.gammaRegularizer), betaConstraint: HI(this.betaConstraint), gammaConstraint: HI(this.gammaConstraint) }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
gw.className = "BatchNormalization", RA(gw);
class Iw extends pg {
  constructor(A) {
    if (A == null && (A = {}), super(A), this.axis = A.axis == null ? -1 : A.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else {
      if (!Array.isArray(this.axis))
        throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
      for (const g of this.axis)
        if (!Number.isInteger(g))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    }
    this.epsilon = A.epsilon == null ? 1e-3 : A.epsilon, this.center = A.center == null || A.center, this.scale = A.scale == null || A.scale, this.betaInitializer = DI(A.betaInitializer || "zeros"), this.gammaInitializer = DI(A.gammaInitializer || "ones"), this.betaRegularizer = cI(A.betaRegularizer), this.gammaRegularizer = cI(A.gammaRegularizer), this.supportsMasking = !0;
  }
  build(A) {
    const g = (A = qg(A)).length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let B = 0; B < this.axis.length; ++B)
      this.axis[B] < 0 && (this.axis[B] += g);
    for (const B of this.axis)
      if (B < 0 || B >= g)
        throw new Error(`Invalid axis: ${B}`);
    if (this.axis.length !== aQ(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    const I = this.axis.map((B) => A[B]);
    this.scale ? this.gamma = this.addWeight("gamma", I, "float32", this.gammaInitializer, this.gammaRegularizer, !0) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", I, "float32", this.betaInitializer, this.betaRegularizer, !0) : this.beta = null, this.built = !0;
  }
  call(A, g) {
    const I = ig(A), B = I.shape, Q = B.length;
    return IA(() => {
      let { mean: E, variance: i } = fn(I, this.axis, !0);
      const o = QE(1, Q);
      for (const h of this.axis)
        o[h] = B[h];
      const t = (h) => h != null && h.shape.length !== Q ? CA(h, o) : h;
      let e = this.scale ? t(this.gamma.read()) : null, s = this.center ? t(this.beta.read()) : null;
      const a = [], r = [];
      for (let h = 0; h < Q; ++h)
        this.axis.indexOf(h) !== -1 ? (a.push(B[h]), r.push(1)) : (a.push(1), r.push(B[h]));
      return E = sB(E, a), i = sB(i, a), e != null && (e = sB(e, r)), s != null && (s = sB(s, r)), go(I, E, i, s, e, this.epsilon);
    });
  }
  getConfig() {
    const A = { axis: this.axis, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: lI(this.betaInitializer), gammaInitializer: lI(this.gammaInitializer), betaRegularizer: CI(this.betaRegularizer), gammaRegularizer: CI(this.gammaRegularizer) }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
Iw.className = "LayerNormalization", RA(Iw);
class Cw extends pg {
  constructor(A) {
    if (A == null && (A = {}), super(A), this.dataFormat = A.dataFormat == null ? "channelsLast" : A.dataFormat, A.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof A.padding == "number")
      this.padding = [[A.padding, A.padding], [A.padding, A.padding]];
    else {
      if (A.padding = A.padding, A.padding.length !== 2)
        throw new X(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${A.padding.length} array.`);
      let g, I;
      if (typeof A.padding[0] == "number")
        g = [A.padding[0], A.padding[0]], I = [A.padding[1], A.padding[1]];
      else {
        if (A.padding = A.padding, A.padding[0].length !== 2)
          throw new X(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${A.padding[0].length} array.`);
        if (g = A.padding[0], A.padding[1].length !== 2)
          throw new X(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${A.padding[1].length} array.`);
        I = A.padding[1];
      }
      this.padding = [g, I];
    }
    this.inputSpec = [new bI({ ndim: 4 })];
  }
  computeOutputShape(A) {
    let g, I;
    return A = qg(A), this.dataFormat === "channelsFirst" ? (g = A[2] != null && A[2] >= 0 ? A[2] + this.padding[0][0] + this.padding[0][1] : null, I = A[3] != null && A[3] >= 0 ? A[3] + this.padding[1][0] + this.padding[1][1] : null, [A[0], A[1], g, I]) : (g = A[1] != null && A[1] >= 0 ? A[1] + this.padding[0][0] + this.padding[0][1] : null, I = A[2] != null && A[2] >= 0 ? A[2] + this.padding[1][0] + this.padding[1][1] : null, [A[0], g, I, A[3]]);
  }
  call(A, g) {
    return IA(() => {
      return I = ig(A), B = this.padding, Q = this.dataFormat, IA(() => {
        if (I.rank !== 4)
          throw new X(`temporalPadding expects input tensor to be 4-D, but received a ${I.rank}-D tensor.`);
        if (B == null && (B = [[1, 1], [1, 1]]), B.length !== 2 || B[0].length !== 2 || B[1].length !== 2)
          throw new X("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
        if (Q == null && (Q = "channelsLast"), Q !== "channelsLast" && Q !== "channelsFirst")
          throw new X(`Unknown data format: ${Q}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
        let E;
        return E = Q === "channelsFirst" ? [[0, 0], [0, 0], B[0], B[1]] : [[0, 0], B[0], B[1], [0, 0]], lh(I, E);
      });
      var I, B, Q;
    });
  }
  getConfig() {
    const A = { padding: this.padding, dataFormat: this.dataFormat }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
function Ca(C, A, g, I, B, Q) {
  return IA(() => {
    let E;
    kI(B), Zy(Q), mC(I), g == null && (g = [1, 1]), I == null && (I = "valid"), B == null && (B = "channelsLast"), Q == null && (Q = "max"), C = oD(C, B);
    const i = I === "same" ? "same" : "valid";
    return E = Q === "max" ? wh(C, A, g, i) : oh(C, A, g, i), B === "channelsFirst" && (E = mg(E, [0, 3, 1, 2])), E;
  });
}
function wd(C, A, g, I, B, Q) {
  return IA(() => {
    let E;
    kI(B), Zy(Q), mC(I), g == null && (g = [1, 1, 1]), I == null && (I = "valid"), B == null && (B = "channelsLast"), Q == null && (Q = "max"), C = nd(C, B);
    const i = I === "same" ? "same" : "valid";
    return E = Q === "max" ? gu(C, A, g, i) : KN(C, A, g, i), B === "channelsFirst" && (E = mg(E, [0, 4, 1, 2, 3])), E;
  });
}
Cw.className = "ZeroPadding2D", RA(Cw);
class ld extends pg {
  constructor(A) {
    if (A.poolSize == null && (A.poolSize = 2), super(A), typeof A.poolSize == "number")
      this.poolSize = [A.poolSize];
    else {
      if (!Array.isArray(A.poolSize) || A.poolSize.length !== 1 || typeof A.poolSize[0] != "number")
        throw new X(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(A.poolSize)}`);
      this.poolSize = A.poolSize;
    }
    if (XI(this.poolSize, "poolSize"), A.strides == null)
      this.strides = this.poolSize;
    else if (typeof A.strides == "number")
      this.strides = [A.strides];
    else {
      if (!Array.isArray(A.strides) || A.strides.length !== 1 || typeof A.strides[0] != "number")
        throw new X(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(A.strides)}`);
      this.strides = A.strides;
    }
    XI(this.strides, "strides"), this.padding = A.padding == null ? "valid" : A.padding, mC(this.padding), this.inputSpec = [new bI({ ndim: 3 })];
  }
  computeOutputShape(A) {
    const g = rB((A = qg(A))[1], this.poolSize[0], this.padding, this.strides[0]);
    return [A[0], g, A[2]];
  }
  call(A, g) {
    return IA(() => {
      this.invokeCallHook(A, g), A = nt(ig(A), 2);
      const I = this.poolingFunction(ig(A), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return ot(I, [2]);
    });
  }
  getConfig() {
    const A = { poolSize: this.poolSize, padding: this.padding, strides: this.strides }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
class Bw extends ld {
  constructor(A) {
    super(A);
  }
  poolingFunction(A, g, I, B, Q) {
    return kI(Q), mC(B), Ca(A, g, I, B, Q, "max");
  }
}
Bw.className = "MaxPooling1D", RA(Bw);
class Qw extends ld {
  constructor(A) {
    super(A);
  }
  poolingFunction(A, g, I, B, Q) {
    return kI(Q), mC(B), Ca(A, g, I, B, Q, "avg");
  }
}
Qw.className = "AveragePooling1D", RA(Qw);
class Gd extends pg {
  constructor(A) {
    if (A.poolSize == null && (A.poolSize = [2, 2]), super(A), this.poolSize = Array.isArray(A.poolSize) ? A.poolSize : [A.poolSize, A.poolSize], A.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(A.strides)) {
      if (A.strides.length !== 2)
        throw new X(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${A.strides.length}.`);
      this.strides = A.strides;
    } else
      this.strides = [A.strides, A.strides];
    XI(this.poolSize, "poolSize"), XI(this.strides, "strides"), this.padding = A.padding == null ? "valid" : A.padding, this.dataFormat = A.dataFormat == null ? "channelsLast" : A.dataFormat, kI(this.dataFormat), mC(this.padding), this.inputSpec = [new bI({ ndim: 4 })];
  }
  computeOutputShape(A) {
    A = qg(A);
    let g = this.dataFormat === "channelsFirst" ? A[2] : A[1], I = this.dataFormat === "channelsFirst" ? A[3] : A[2];
    return g = rB(g, this.poolSize[0], this.padding, this.strides[0]), I = rB(I, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [A[0], A[1], g, I] : [A[0], g, I, A[3]];
  }
  call(A, g) {
    return IA(() => (this.invokeCallHook(A, g), this.poolingFunction(ig(A), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const A = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
class Ew extends Gd {
  constructor(A) {
    super(A);
  }
  poolingFunction(A, g, I, B, Q) {
    return kI(Q), mC(B), Ca(A, g, I, B, Q, "max");
  }
}
Ew.className = "MaxPooling2D", RA(Ew);
class iw extends Gd {
  constructor(A) {
    super(A);
  }
  poolingFunction(A, g, I, B, Q) {
    return kI(Q), mC(B), Ca(A, g, I, B, Q, "avg");
  }
}
iw.className = "AveragePooling2D", RA(iw);
class yd extends pg {
  constructor(A) {
    if (A.poolSize == null && (A.poolSize = [2, 2, 2]), super(A), this.poolSize = Array.isArray(A.poolSize) ? A.poolSize : [A.poolSize, A.poolSize, A.poolSize], A.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(A.strides)) {
      if (A.strides.length !== 3)
        throw new X(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${A.strides.length}.`);
      this.strides = A.strides;
    } else
      this.strides = [A.strides, A.strides, A.strides];
    XI(this.poolSize, "poolSize"), XI(this.strides, "strides"), this.padding = A.padding == null ? "valid" : A.padding, this.dataFormat = A.dataFormat == null ? "channelsLast" : A.dataFormat, kI(this.dataFormat), mC(this.padding), this.inputSpec = [new bI({ ndim: 5 })];
  }
  computeOutputShape(A) {
    A = qg(A);
    let g = this.dataFormat === "channelsFirst" ? A[2] : A[1], I = this.dataFormat === "channelsFirst" ? A[3] : A[2], B = this.dataFormat === "channelsFirst" ? A[4] : A[3];
    return g = rB(g, this.poolSize[0], this.padding, this.strides[0]), I = rB(I, this.poolSize[1], this.padding, this.strides[1]), B = rB(B, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [A[0], A[1], g, I, B] : [A[0], g, I, B, A[4]];
  }
  call(A, g) {
    return IA(() => (this.invokeCallHook(A, g), this.poolingFunction(ig(A), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const A = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
class ow extends yd {
  constructor(A) {
    super(A);
  }
  poolingFunction(A, g, I, B, Q) {
    return kI(Q), mC(B), wd(A, g, I, B, Q, "max");
  }
}
ow.className = "MaxPooling3D", RA(ow);
class tw extends yd {
  constructor(A) {
    super(A);
  }
  poolingFunction(A, g, I, B, Q) {
    return kI(Q), mC(B), wd(A, g, I, B, Q, "avg");
  }
}
tw.className = "AveragePooling3D", RA(tw);
class dd extends pg {
  constructor(A) {
    super(A), this.inputSpec = [new bI({ ndim: 3 })];
  }
  computeOutputShape(A) {
    return [A[0], A[2]];
  }
  call(A, g) {
    throw new dg();
  }
}
class ew extends dd {
  constructor(A) {
    super(A || {});
  }
  call(A, g) {
    return IA(() => {
      const I = ig(A);
      return UI(I, 1);
    });
  }
}
ew.className = "GlobalAveragePooling1D", RA(ew);
class sw extends dd {
  constructor(A) {
    super(A || {});
  }
  call(A, g) {
    return IA(() => {
      const I = ig(A);
      return nB(I, 1);
    });
  }
}
sw.className = "GlobalMaxPooling1D", RA(sw);
class Fd extends pg {
  constructor(A) {
    super(A), this.dataFormat = A.dataFormat == null ? "channelsLast" : A.dataFormat, kI(this.dataFormat), this.inputSpec = [new bI({ ndim: 4 })];
  }
  computeOutputShape(A) {
    return this.dataFormat === "channelsLast" ? [A[0], A[3]] : [A[0], A[1]];
  }
  call(A, g) {
    throw new dg();
  }
  getConfig() {
    const A = { dataFormat: this.dataFormat }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
class aw extends Fd {
  call(A, g) {
    return IA(() => {
      const I = ig(A);
      return this.dataFormat === "channelsLast" ? UI(I, [1, 2]) : UI(I, [2, 3]);
    });
  }
}
aw.className = "GlobalAveragePooling2D", RA(aw);
class nw extends Fd {
  call(A, g) {
    return IA(() => {
      const I = ig(A);
      return this.dataFormat === "channelsLast" ? nB(I, [1, 2]) : nB(I, [2, 3]);
    });
  }
}
nw.className = "GlobalMaxPooling2D", RA(nw);
class Rd extends pg {
  constructor(A) {
    super(A), this.layer = A.layer;
  }
  build(A) {
    this.built = !0;
  }
  get trainable() {
    return this.layer != null && this.layer.trainable;
  }
  set trainable(A) {
    this.layer != null && (this.layer.trainable = A);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  get updates() {
    return this.layer._updates;
  }
  get losses() {
    return this.layer.losses;
  }
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(A) {
    this.layer.setWeights(A);
  }
  getConfig() {
    const A = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  setFastWeightInitDuringBuild(A) {
    super.setFastWeightInitDuringBuild(A), this.layer != null && this.layer.setFastWeightInitDuringBuild(A);
  }
  static fromConfig(A, g, I = {}) {
    const B = WB(g.layer, I);
    delete g.layer;
    const Q = { layer: B };
    return Object.assign(Q, g), new A(Q);
  }
}
class rw extends Rd {
  constructor(A) {
    super(A), this.supportsMasking = !0;
  }
  build(A) {
    if ((A = qg(A)).length < 3)
      throw new X(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(A)}`);
    this.inputSpec = [{ shape: A }];
    const g = [A[0]].concat(A.slice(2));
    this.layer.built || (this.layer.build(g), this.layer.built = !0), super.build(A);
  }
  computeOutputShape(A) {
    const g = [(A = qg(A))[0]].concat(A.slice(2)), I = this.layer.computeOutputShape(g), B = A[1];
    return [I[0], B].concat(I.slice(1));
  }
  call(A, g) {
    return IA(() => Dd((I, B) => [ig(this.layer.call(I, g)), []], A = ig(A), [], !1, null, null, !1, !0)[1]);
  }
}
rw.className = "TimeDistributed", RA(rw);
class hw extends Rd {
  constructor(A) {
    super(A);
    const g = A.layer.getConfig(), I = {};
    I.className = A.layer.getClassName(), I.config = g, this.forwardLayer = WB(I), g.goBackwards = g.goBackwards !== !0;
    const B = {};
    var Q;
    if (B.className = A.layer.getClassName(), B.config = g, this.backwardLayer = WB(B), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = A.mergeMode === void 0 ? "concat" : A.mergeMode, Q = this.mergeMode, EE(NK, "BidirectionalMergeMode", Q), A.weights)
      throw new dg("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = A.layer.stateful, this.returnSequences = A.layer.returnSequences, this.returnState = A.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = A.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(A) {
    this._trainable = A, this.forwardLayer != null && (this.forwardLayer.trainable = A), this.backwardLayer != null && (this.backwardLayer.trainable = A);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(A) {
    const g = A.length, I = Math.floor(g / 2);
    this.forwardLayer.setWeights(A.slice(0, I)), this.backwardLayer.setWeights(A.slice(I));
  }
  computeOutputShape(A) {
    let g, I, B, Q = this.forwardLayer.computeOutputShape(A);
    return Array.isArray(Q) && Array.isArray(Q[0]) || (Q = [Q]), this.returnState && (B = Q.slice(1)), g = Q[0], this.mergeMode === "concat" ? (g[g.length - 1] *= 2, I = [g]) : I = this.mergeMode == null ? [g, g.slice()] : [g], this.returnState ? this.mergeMode == null ? I.concat(B).concat(B.slice()) : [g].concat(B).concat(B.slice()) : rC(I);
  }
  apply(A, g) {
    let I = g == null ? null : g.initialState, B = g == null ? null : g.constants;
    g == null && (g = {});
    const Q = hd(A, I, B, this.numConstants);
    if (A = Q.inputs, I = Q.initialState, B = Q.constants, Array.isArray(A) && (I = A.slice(1), A = A[0]), (I == null || I.length === 0) && B == null)
      return super.apply(A, g);
    const E = [], i = [];
    if (I != null) {
      const t = I.length;
      if (t % 2 > 0)
        throw new X("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      g.initialState = I, E.push(...I);
      const e = I.map((s) => new bI({ shape: s.shape }));
      this.forwardLayer.stateSpec = e.slice(0, t / 2), this.backwardLayer.stateSpec = e.slice(t / 2), i.push(...e);
    }
    if (B != null)
      throw new dg("Support for constants in Bidirectional layers is not implemented yet.");
    const o = E[0] instanceof uB;
    for (const t of E)
      if (t instanceof uB !== o)
        throw new X("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (o) {
      const t = [A].concat(E), e = this.inputSpec.concat(i), s = this.inputSpec;
      this.inputSpec = e;
      const a = super.apply(t, g);
      return this.inputSpec = s, a;
    }
    return super.apply(A, g);
  }
  call(A, g) {
    return IA(() => {
      const I = g.initialState;
      let B, Q, E, i;
      if (I == null)
        B = this.forwardLayer.call(A, g), Q = this.backwardLayer.call(A, g);
      else {
        const o = I.slice(0, I.length / 2), t = I.slice(I.length / 2);
        B = this.forwardLayer.call(A, Object.assign(g, { initialState: o })), Q = this.backwardLayer.call(A, Object.assign(g, { initialState: t }));
      }
      return this.returnState && (Array.isArray(B) && (E = B.slice(1).concat(Q.slice(1))), B = B[0], Q = Q[0]), this.returnSequences && (Q = CE(Q, 1)), this.mergeMode === "concat" ? i = QD([B, Q]) : this.mergeMode === "sum" ? i = kA(B, Q) : this.mergeMode === "ave" ? i = z(0.5, kA(B, Q)) : this.mergeMode === "mul" ? i = z(B, Q) : this.mergeMode == null && (i = [B, Q]), this.returnState ? this.mergeMode == null ? i.concat(E) : [i].concat(E) : i;
    });
  }
  resetStates(A) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(A) {
    jQ(this.forwardLayer.name, () => {
      this.forwardLayer.build(A);
    }), jQ(this.backwardLayer.name, () => {
      this.backwardLayer.build(A);
    }), this.built = !0;
  }
  computeMask(A, g) {
    let I;
    if (Array.isArray(g) && (g = g[0]), I = this.returnSequences ? this.mergeMode == null ? [g, g] : g : this.mergeMode == null ? [null, null] : null, this.returnState) {
      const B = this.forwardLayer.states.map((Q) => null);
      return Array.isArray(I) ? I.concat(B).concat(B) : [I].concat(B).concat(B);
    }
    return I;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  setFastWeightInitDuringBuild(A) {
    super.setFastWeightInitDuringBuild(A), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(A), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(A);
  }
  getConfig() {
    const A = { mergeMode: this.mergeMode }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  static fromConfig(A, g) {
    const I = WB(g.layer);
    if (delete g.layer, g.numConstants != null)
      throw new dg("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const B = g;
    return B.layer = I, new A(B);
  }
}
hw.className = "Bidirectional", RA(hw);
class Dw extends pg {
  constructor(A) {
    super(A), this.scale = A.scale, A.offset ? this.offset = A.offset : this.offset = 0;
  }
  getConfig() {
    const A = { scale: this.scale, offset: this.offset }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  call(A, g) {
    return IA(() => ((A = ig(A)).dtype !== "float32" && (A = PB(A, "float32")), kA(z(A, this.scale), this.offset)));
  }
}
Dw.className = "Rescaling", RA(Dw);
const { resizeBilinear: PK, cropAndResize: zK } = qB;
class cw extends pg {
  constructor(A) {
    super(A), this.height = A.height, this.width = A.width;
  }
  centerCrop(A, g, I, B, Q, E, i, o) {
    return IA(() => {
      let t, e = !1;
      const s = [g / E, I / i, (B + g) / E, (Q + I) / i], a = [];
      A.rank === 3 ? (e = !0, t = xB([A])) : t = A;
      for (let G = 0; G < t.shape[0]; G++)
        a.push(s);
      const r = pC(a, [a.length, 4]), h = Xi(0, a.length, 1, "int32"), w = zK(t, r, h, [B, Q], "nearest");
      return PB(e ? ig(BE(w)) : w, o);
    });
  }
  upsize(A, g, I, B) {
    return IA(() => PB(PK(A, [g, I]), B));
  }
  call(A, g) {
    return IA(() => {
      const I = ig(A), B = I.dtype, Q = I.shape, E = Q[Q.length - 3], i = Q[Q.length - 2];
      let o = 0;
      E !== this.height && (o = Math.floor((E - this.height) / 2));
      let t = 0;
      return i !== this.width && (t = Math.floor((i - this.width) / 2), t === 0 && (t = 1)), o >= 0 && t >= 0 ? this.centerCrop(I, o, t, this.height, this.width, E, i, B) : this.upsize(A, this.height, this.width, B);
    });
  }
  getConfig() {
    const A = { height: this.height, width: this.width }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  computeOutputShape(A) {
    const g = (A = qg(A)).length - 3, I = A.length - 2;
    return A[g] = this.height, A[I] = this.width, A;
  }
}
cw.className = "CenterCrop", RA(cw);
class ww extends pg {
  constructor(A) {
    super(A), this.numTokens = A.numTokens, A.outputMode ? this.outputMode = A.outputMode : this.outputMode = "multiHot";
  }
  getConfig() {
    const A = { numTokens: this.numTokens, outputMode: this.outputMode }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  computeOutputShape(A) {
    return (A = qg(A)) == null ? [this.numTokens] : this.outputMode === "oneHot" && A[A.length - 1] !== 1 ? (A.push(this.numTokens), A) : (A[A.length - 1] = this.numTokens, A);
  }
  call(A, g) {
    return IA(() => {
      let I;
      if ((A = ig(A)).dtype !== "int32" && (A = PB(A, "int32")), g.countWeights !== void 0) {
        if (this.outputMode !== "count")
          throw new X(`countWeights is not used when outputMode !== count.
              Received countWeights=${g.countWeights}`);
        I = ig(g.countWeights);
      }
      const B = nB(A), Q = re(A), E = LC(this.numTokens, B).bufferSync().get(0), i = nE(Q, 0).bufferSync().get(0);
      if (!E || !i)
        throw new X(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);
      return function(o, t, e, s) {
        let a = ig(o);
        if (a.dtype !== "int32" && (a = PB(a, "int32")), t === "int")
          return a;
        const r = a.shape;
        if (a.rank === 0 && (a = FC(a, -1)), t === "oneHot" && a.shape[a.shape.length - 1] !== 1 && (a = FC(a, -1)), a.rank > 2)
          throw new X(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${r} which would result in output rank ${a.rank}.`);
        const h = ["multiHot", "oneHot"].includes(t);
        let w;
        if (w = xN(a, s !== void 0 && t === "count" ? s : [], e, h), t !== "tfIdf")
          return w;
        if (s)
          return z(w, s);
        throw new X("When outputMode is 'tfIdf', weights must be provided.");
      }(A, this.outputMode, this.numTokens, I);
    });
  }
}
ww.className = "CategoryEncoding", RA(ww);
const lw = /* @__PURE__ */ new Set(["bilinear", "nearest"]);
class Gw extends pg {
  constructor(A) {
    if (super(A), this.height = A.height, this.width = A.width, A.interpolation) {
      if (!lw.has(A.interpolation))
        throw new X(`Invalid interpolation parameter: ${A.interpolation} is not implemented`);
      this.interpolation = A.interpolation;
    } else
      this.interpolation = "bilinear";
    this.cropToAspectRatio = !!A.cropToAspectRatio;
  }
  computeOutputShape(A) {
    const g = (A = qg(A))[2];
    return [this.height, this.width, g];
  }
  getConfig() {
    const A = { height: this.height, width: this.width, interpolation: this.interpolation, cropToAspectRatio: this.cropToAspectRatio }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  call(A, g) {
    return IA(() => {
      const I = [this.height, this.width];
      if (this.interpolation === "bilinear")
        return qB.resizeBilinear(A, I, !this.cropToAspectRatio);
      if (this.interpolation === "nearest")
        return qB.resizeNearestNeighbor(A, I, !this.cropToAspectRatio);
      throw new Error(`Interpolation is ${this.interpolation} but only ${[...lw]} are supported`);
    });
  }
}
Gw.className = "Resizing", RA(Gw);
class Nd {
  constructor(A) {
    this.seed = A;
  }
  next() {
    if (this.seed !== void 0)
      return this.seed++;
  }
}
Nd.className = "RandomSeed";
class ud extends pg {
  constructor(A) {
    super(A), this.randomGenerator = new Nd(A.seed);
  }
  getConfig() {
    const A = { seed: this.randomGenerator.seed }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
}
ud.className = "BaseRandomLayer";
const yw = /* @__PURE__ */ new Set(["bilinear", "nearest"]);
class dw extends ud {
  constructor(A) {
    super(A);
    const { factor: g, interpolation: I = "bilinear" } = A;
    if (this.factor = g, Array.isArray(this.factor) && this.factor.length === 2)
      this.widthLower = this.factor[0], this.widthUpper = this.factor[1];
    else {
      if (Array.isArray(this.factor) || !(this.factor > 0))
        throw new X(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);
      this.widthLower = -this.factor, this.widthUpper = this.factor;
    }
    if (this.widthLower < -1 || this.widthUpper < -1)
      throw new X(`factor must have values larger than -1. Got: ${this.factor}`);
    if (this.widthUpper < this.widthLower)
      throw new X(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
    if (I) {
      if (!yw.has(I))
        throw new X(`Invalid interpolation parameter: ${I} is not implemented`);
      this.interpolation = I;
    }
  }
  getConfig() {
    const A = { factor: this.factor, interpolation: this.interpolation }, g = super.getConfig();
    return Object.assign(A, g), A;
  }
  computeOutputShape(A) {
    const g = (A = qg(A))[2];
    return [this.imgHeight, -1, g];
  }
  call(A, g) {
    return IA(() => {
      const I = ig(A);
      this.imgHeight = I.shape[I.shape.length - 3];
      const B = I.shape[I.shape.length - 2];
      this.widthFactor = it([1], 1 + this.widthLower, 1 + this.widthUpper, "float32", this.randomGenerator.next());
      let Q = this.widthFactor.dataSync()[0] * B;
      Q = Math.round(Q);
      const E = [this.imgHeight, Q];
      switch (this.interpolation) {
        case "bilinear":
          return qB.resizeBilinear(A, E);
        case "nearest":
          return qB.resizeNearestNeighbor(A, E);
        default:
          throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...yw]} are supported`);
      }
    });
  }
}
dw.className = "RandomWidth", RA(dw);
var Fw, Rw, Nw;
function VA(C, A) {
  Array.isArray(C) || (C = [C]), C.forEach((g) => {
    g != null && f(g.dtype !== "complex64", () => `${A} does not support complex64 tensors in the CPU backend.`);
  });
}
aA().registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, (C) => {
  C && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
}), function(C) {
  C[C.DT_INVALID = 0] = "DT_INVALID", C[C.DT_FLOAT = 1] = "DT_FLOAT", C[C.DT_DOUBLE = 2] = "DT_DOUBLE", C[C.DT_INT32 = 3] = "DT_INT32", C[C.DT_UINT8 = 4] = "DT_UINT8", C[C.DT_INT16 = 5] = "DT_INT16", C[C.DT_INT8 = 6] = "DT_INT8", C[C.DT_STRING = 7] = "DT_STRING", C[C.DT_COMPLEX64 = 8] = "DT_COMPLEX64", C[C.DT_INT64 = 9] = "DT_INT64", C[C.DT_BOOL = 10] = "DT_BOOL", C[C.DT_QINT8 = 11] = "DT_QINT8", C[C.DT_QUINT8 = 12] = "DT_QUINT8", C[C.DT_QINT32 = 13] = "DT_QINT32", C[C.DT_BFLOAT16 = 14] = "DT_BFLOAT16", C[C.DT_QINT16 = 15] = "DT_QINT16", C[C.DT_QUINT16 = 16] = "DT_QUINT16", C[C.DT_UINT16 = 17] = "DT_UINT16", C[C.DT_COMPLEX128 = 18] = "DT_COMPLEX128", C[C.DT_HALF = 19] = "DT_HALF", C[C.DT_RESOURCE = 20] = "DT_RESOURCE", C[C.DT_VARIANT = 21] = "DT_VARIANT", C[C.DT_UINT32 = 22] = "DT_UINT32", C[C.DT_UINT64 = 23] = "DT_UINT64", C[C.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", C[C.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", C[C.DT_INT32_REF = 103] = "DT_INT32_REF", C[C.DT_UINT8_REF = 104] = "DT_UINT8_REF", C[C.DT_INT16_REF = 105] = "DT_INT16_REF", C[C.DT_INT8_REF = 106] = "DT_INT8_REF", C[C.DT_STRING_REF = 107] = "DT_STRING_REF", C[C.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", C[C.DT_INT64_REF = 109] = "DT_INT64_REF", C[C.DT_BOOL_REF = 110] = "DT_BOOL_REF", C[C.DT_QINT8_REF = 111] = "DT_QINT8_REF", C[C.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", C[C.DT_QINT32_REF = 113] = "DT_QINT32_REF", C[C.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", C[C.DT_QINT16_REF = 115] = "DT_QINT16_REF", C[C.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", C[C.DT_UINT16_REF = 117] = "DT_UINT16_REF", C[C.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", C[C.DT_HALF_REF = 119] = "DT_HALF_REF", C[C.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", C[C.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", C[C.DT_UINT32_REF = 122] = "DT_UINT32_REF", C[C.DT_UINT64_REF = 123] = "DT_UINT64_REF";
}(Fw || (Fw = {})), function(C) {
  var A;
  (A = C.CheckpointFormatVersion || (C.CheckpointFormatVersion = {}))[A.LEGACY = 0] = "LEGACY", A[A.V1 = 1] = "V1", A[A.V2 = 2] = "V2";
}(Rw || (Rw = {})), function(C) {
  C[C.FAIL = 0] = "FAIL", C[C.SHORTEST = 1] = "SHORTEST", C[C.LONGEST = 2] = "LONGEST";
}(Nw || (Nw = {}));
const jK = _G;
class Ba extends rr {
  nextDataId() {
    return Ba.nextDataId++;
  }
  constructor() {
    super(), this.blockSize = 48, this.firstUse = !0, this.data = new dl(this, EI());
  }
  write(A, g, I) {
    this.firstUse && (this.firstUse = !1, aA().get("IS_NODE") && SC(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details.
============================`));
    const B = { id: this.nextDataId() };
    return this.data.set(B, { values: A, dtype: I, refCount: 1 }), B;
  }
  makeTensorInfo(A, g, I) {
    let B;
    if (g === "string" && I != null && I.length > 0 && Eo(I[0])) {
      const Q = I.map((E) => eQ(E));
      B = this.write(Q, A, g);
    } else
      B = this.write(I, A, g);
    return { dataId: B, shape: A, dtype: g };
  }
  refCount(A) {
    return this.data.has(A) ? this.data.get(A).refCount : 0;
  }
  incRef(A) {
    this.data.get(A).refCount++;
  }
  decRef(A) {
    this.data.has(A) && this.data.get(A).refCount--;
  }
  move(A, g, I, B, Q) {
    this.data.set(A, { values: g, dtype: B, refCount: Q });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(A) {
    return this.readSync(A);
  }
  readSync(A) {
    const { dtype: g, complexTensorInfos: I } = this.data.get(A);
    return g === "complex64" ? OB(this.readSync(I.real.dataId), this.readSync(I.imag.dataId)) : function(B, Q) {
      if (Array.isArray(B))
        return B;
      if (Q === "float32")
        return B instanceof Float32Array ? B : new Float32Array(B);
      if (Q === "int32")
        return B instanceof Int32Array ? B : new Int32Array(B);
      if (Q === "bool" || Q === "string")
        return Uint8Array.from(new Int32Array(B));
      throw new Error(`Unknown dtype ${Q}`);
    }(this.data.get(A).values, g);
  }
  bufferSync(A) {
    const g = this.readSync(A.dataId);
    if (A.dtype === "string")
      try {
        const I = g.map((B) => rQ(B));
        return Sg(A.shape, A.dtype, I);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Sg(A.shape, A.dtype, g);
  }
  makeOutput(A, g, I) {
    return EI().makeTensorFromTensorInfo(this.makeTensorInfo(g, I, A), this);
  }
  disposeData(A, g = !1) {
    if (this.data.has(A)) {
      if (this.data.get(A).refCount--, !g && this.data.get(A).refCount > 0)
        return !1;
      const { complexTensorInfos: I } = this.data.get(A);
      I != null && (this.disposeData(I.real.dataId, !0), this.disposeData(I.imag.dataId, !0)), this.data.delete(A);
    }
    return !0;
  }
  disposeIntermediateTensorInfo(A) {
    this.disposeData(A.dataId);
  }
  async time(A) {
    const g = nC();
    return A(), { kernelMs: nC() - g };
  }
  memory() {
    return { unreliable: !0, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }
  where(A) {
    VA([A], "where");
    const g = this.readSync(A.dataId);
    return jK(A.shape, g);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
}
function kd(C) {
  const A = new Float32Array(C.length);
  for (let g = 0; g < C.length; ++g)
    A[g] = Math.abs(C[g]);
  return A;
}
Ba.nextDataId = 0;
const $K = { kernelName: We, backendName: "cpu", kernelFunc: (C) => {
  const { x: A } = C.inputs, g = C.backend;
  VA(A, "abs");
  let I = new Float32Array(cA(A.shape));
  return I = kd(g.data.get(A.dataId).values), g.makeOutput(I, A.shape, A.dtype);
} };
function SI(C) {
  return (A, g, I, B, Q) => {
    const E = wg(A, g), i = E.length, o = zA(E), t = AC(Q, cA(E)), e = A.length, s = g.length, a = zA(A), r = zA(g), h = zE(A, E), w = zE(g, E);
    if (h.length + w.length === 0)
      for (let G = 0; G < t.length; ++G)
        t[G] = C(I[G % I.length], B[G % B.length]);
    else
      for (let G = 0; G < t.length; ++G) {
        const D = Qi(G, i, o), l = D.slice(-e);
        h.forEach((p) => l[p] = 0);
        const d = KB(l, e, a), N = D.slice(-s);
        w.forEach((p) => N[p] = 0);
        const k = KB(N, s, r);
        t[G] = C(I[d], B[k]);
      }
    return [t, E];
  };
}
function RC(C) {
  const { inputs: A, backend: g } = C, { real: I, imag: B } = A, Q = g.data.get(I.dataId).values, E = g.data.get(B.dataId).values, i = g.makeTensorInfo(I.shape, "complex64");
  return g.data.get(i.dataId).complexTensorInfos = { real: g.makeTensorInfo(I.shape, "float32", Q), imag: g.makeTensorInfo(B.shape, "float32", E) }, i;
}
const _K = { kernelName: kr, backendName: "cpu", kernelFunc: RC };
function Me(C, A, g = "float32") {
  if (g === "complex64")
    return RC({ inputs: { real: Me(C, A, "float32"), imag: Me(C, A, "float32") }, backend: C });
  const I = gC(cA(A), g);
  return C.makeTensorInfo(A, g, I);
}
function pB(C) {
  const { inputs: A, backend: g } = C, { x: I } = A;
  return g.incRef(I.dataId), { dataId: I.dataId, shape: I.shape, dtype: I.dtype };
}
const AS = { kernelName: Ko, backendName: "cpu", kernelFunc: pB };
function iE(C) {
  const { inputs: A, backend: g } = C, { input: I } = A, B = g.data.get(I.dataId).complexTensorInfos.real, Q = g.data.get(B.dataId).values;
  return g.makeTensorInfo(B.shape, B.dtype, Q);
}
const gS = { kernelName: zr, backendName: "cpu", kernelFunc: iE };
function Kd(C, A, g, I) {
  if (I === "int32")
    return [A, "int32", Int32Array.from(C)];
  if (I === "bool") {
    const B = aE([0], g), [Q, E] = SI((i, o) => i !== o ? 1 : 0)(A, [], C, B, "bool");
    return [E, "bool", Q];
  }
  throw new Error(`Error in Cast: failed to cast ${g} to ${I}`);
}
function GQ(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { dtype: Q } = I;
  if (Q === "complex64") {
    if (B.dtype === "complex64")
      return pB({ inputs: { x: B }, backend: g });
    const e = Me(g, B.shape, B.dtype), s = GQ({ inputs: { x: B }, backend: g, attrs: { dtype: "float32" } }), a = RC({ inputs: { real: s, imag: e }, backend: g });
    return g.disposeIntermediateTensorInfo(e), g.disposeIntermediateTensorInfo(s), a;
  }
  if (B.dtype === "complex64") {
    const e = iE({ inputs: { input: B }, backend: g }), s = GQ({ inputs: { x: e }, backend: g, attrs: { dtype: Q } });
    return g.disposeIntermediateTensorInfo(e), s;
  }
  if (!Rl(B.dtype, Q)) {
    const e = pB({ inputs: { x: B }, backend: g });
    return { dataId: e.dataId, shape: e.shape, dtype: Q };
  }
  const E = g.data.get(B.dataId).values, [i, o, t] = Kd(E, B.shape, B.dtype, Q);
  return g.makeTensorInfo(i, o, t);
}
const IS = { kernelName: ro, backendName: "cpu", kernelFunc: GQ };
function qI(C, A, g, I) {
  return g == null ? ({ inputs: B, backend: Q }) => {
    const { a: E, b: i } = B, o = Q;
    VA([E, i], C);
    const t = o.data.get(E.dataId).values, e = o.data.get(i.dataId).values, s = E.dtype === "string" ? vB(t) : t, a = E.dtype === "string" ? vB(e) : e, r = I || E.dtype, [h, w] = A(E.shape, i.shape, s, a, r);
    return o.makeTensorInfo(w, r, h);
  } : ({ inputs: B, backend: Q }) => {
    const { a: E, b: i } = B, o = Q;
    if (E.dtype === "complex64" || i.dtype === "complex64") {
      const t = GQ({ inputs: { x: E }, backend: o, attrs: { dtype: "complex64" } }), e = o.data.get(t.dataId), s = e.complexTensorInfos.real, a = e.complexTensorInfos.imag, r = o.data.get(s.dataId).values, h = o.data.get(a.dataId).values, w = GQ({ inputs: { x: i }, backend: o, attrs: { dtype: "complex64" } }), G = o.data.get(w.dataId), D = G.complexTensorInfos.real, l = G.complexTensorInfos.imag, d = o.data.get(D.dataId).values, N = o.data.get(l.dataId).values, [k, p, Y] = g(E.shape, i.shape, r, h, d, N), M = o.makeTensorInfo(Y, "float32", k), L = o.makeTensorInfo(Y, "float32", p), m = RC({ inputs: { real: M, imag: L }, backend: o });
      return o.disposeIntermediateTensorInfo(t), o.disposeIntermediateTensorInfo(w), o.disposeIntermediateTensorInfo(M), o.disposeIntermediateTensorInfo(L), m;
    }
    {
      const t = o.data.get(E.dataId).values, e = o.data.get(i.dataId).values, s = I || E.dtype, [a, r] = A(E.shape, i.shape, t, e, s);
      return o.makeTensorInfo(r, s, a);
    }
  };
}
function tD(C) {
  return (A, g, I, B, Q, E) => {
    const i = wg(A, g), o = cA(i), t = i.length, e = zA(i), s = AC("float32", o), a = AC("float32", o), r = zE(A, i), h = zE(g, i), w = OB(I, B), G = OB(Q, E), D = A.length, l = zA(A), d = g.length, N = zA(g);
    if (r.length + h.length === 0)
      for (let k = 0; k < s.length; k++) {
        const p = k % w.length, Y = k % G.length, M = C(w[2 * p], w[2 * p + 1], G[2 * Y], G[2 * Y + 1]);
        s[k] = M.real, a[k] = M.imag;
      }
    else
      for (let k = 0; k < s.length; k++) {
        const p = Qi(k, t, e), Y = p.slice(-D);
        r.forEach((T) => Y[T] = 0);
        const M = KB(Y, D, l), L = p.slice(-d);
        h.forEach((T) => L[T] = 0);
        const m = KB(L, d, N), x = C(w[2 * M], w[2 * M + 1], G[2 * m], G[2 * m + 1]);
        s[k] = x.real, a[k] = x.imag;
      }
    return [s, a, i];
  };
}
const Sd = SI((C, A) => C + A), CS = tD((C, A, g, I) => ({ real: C + g, imag: A + I })), gi = qI(Ei, Sd, CS), BS = { kernelName: Ei, backendName: "cpu", kernelFunc: gi };
function eD(C, A, g, I, B) {
  const Q = cA(I), E = gC(B, g);
  for (let i = 0; i < C.length; i++) {
    const o = C[i];
    if (o < 0)
      throw new Error("Input x must be non-negative!");
    o >= B || (E[o] += Q > 0 ? A[i] : 1);
  }
  return E;
}
function pd(C, A, g, I = !1) {
  const B = C.shape[0], Q = C.shape[1], E = Sg([B, g], A.dtype);
  for (let i = 0; i < B; i++)
    for (let o = 0; o < Q; o++) {
      const t = C.get(i, o);
      if (t < 0)
        throw new Error("Input x must be non-negative!");
      t >= g || (I ? E.set(1, i, t) : A.size > 0 ? E.set(E.get(i, t) + A.get(i, o), i, t) : E.set(E.get(i, t) + 1, i, t));
    }
  return E;
}
const Md = SI((C, A) => C & A), QS = { kernelName: Dn, backendName: "cpu", kernelFunc: qI(Dn, Md) };
function MB(C) {
  return (A, g, I) => {
    const B = NI(g, A.length);
    for (let Q = 0; Q < A.length; ++Q)
      B[Q] = C(A[Q], I);
    return B;
  };
}
function jg(C, A, g) {
  return NQ(C, MB(A), g);
}
function NQ(C, A, g) {
  return ({ inputs: I, attrs: B, backend: Q }) => {
    const { x: E } = I;
    VA(E, C);
    const i = Q, o = i.data.get(E.dataId).values;
    let t;
    if (E.dtype === "string") {
      if (!Array.isArray(o))
        throw new Error("String tensor's value was not an instance of Array");
      t = vB(o);
    } else
      t = o;
    const e = g || E.dtype, s = A(t, e, B);
    return i.makeTensorInfo(E.shape, e, s);
  };
}
const Ud = MB((C) => Math.ceil(C)), ES = NQ(ho, Ud), iS = { kernelName: ho, backendName: "cpu", kernelFunc: ES };
function Yd(C, A, g, I) {
  const B = NI(g, cA(A));
  if (I && g !== "string") {
    let Q = 0;
    C.forEach((E) => {
      const i = cA(E.shape);
      B.set(E.vals, Q), Q += i;
    });
  } else {
    let Q = 0;
    C.forEach((E) => {
      const i = g === "string" ? vB(E.vals) : E.vals;
      let o = 0;
      for (let t = 0; t < E.shape[0]; ++t) {
        const e = t * A[1] + Q;
        for (let s = 0; s < E.shape[1]; ++s)
          B[e + s] = i[o++];
      }
      Q += E.shape[1];
    });
  }
  return B;
}
const Jd = SI((C, A) => C === A ? 1 : 0), fd = qI(Bs, Jd, null, "bool"), oS = { kernelName: Bs, backendName: "cpu", kernelFunc: fd }, Ld = MB((C) => Math.exp(C)), md = NQ(Fo, Ld, "float32"), tS = { kernelName: Fo, backendName: "cpu", kernelFunc: md }, bd = MB((C) => Math.expm1(C)), eS = NQ(Ro, bd), sS = { kernelName: Ro, backendName: "cpu", kernelFunc: eS }, Hd = MB((C) => Math.floor(C)), aS = NQ(No, Hd), nS = { kernelName: No, backendName: "cpu", kernelFunc: aS }, xd = SI((C, A) => Math.floor(C / A)), rS = qI(uo, xd, null, "int32"), hS = { kernelName: uo, backendName: "cpu", kernelFunc: rS };
function qd(C, A, g, I, B, Q, E, i, o) {
  const t = Sg([I, Q], g);
  for (let e = 0; e < I; e++) {
    const s = [];
    let a = 0;
    for (let r = 0; r < B; r++) {
      const h = C[e * B + r];
      a += h * E[r], s.push(h);
    }
    if (a < 0 || a >= o / Q)
      throw new Error(`Invalid indices: ${s} does not index into ${i}`);
    for (let r = 0; r < Q; r++)
      t.values[e * Q + r] = A.get(...A.indexToLoc(a * Q + r));
  }
  return t;
}
function Vd(C, A, g) {
  const I = Sg(g, C.dtype);
  for (let B = 0; B < I.size; ++B) {
    const Q = I.indexToLoc(B).slice(), E = Q[0], i = Q[2], o = A.locToIndex([E, i]);
    Q[2] = A.values[o];
    const t = C.locToIndex(Q);
    0 <= t && t < C.values.length && (I.values[B] = C.values[t]);
  }
  return I;
}
const Wd = SI((C, A) => C > A ? 1 : 0), DS = qI(os, Wd, null, "bool"), cS = { kernelName: os, backendName: "cpu", kernelFunc: DS }, Td = SI((C, A) => C >= A ? 1 : 0), wS = qI(ko, Td, null, "bool"), lS = { kernelName: ko, backendName: "cpu", kernelFunc: wS }, Zd = SI((C, A) => C < A ? 1 : 0), GS = qI(es, Zd, null, "bool"), yS = { kernelName: es, backendName: "cpu", kernelFunc: GS }, Xd = SI((C, A) => C <= A ? 1 : 0), dS = qI(ss, Xd, null, "bool"), FS = { kernelName: ss, backendName: "cpu", kernelFunc: dS };
function Od(C, A, g) {
  const I = (A - C) / (g - 1), B = gC(g, "float32");
  B[0] = C;
  for (let Q = 1; Q < B.length; Q++)
    B[Q] = B[Q - 1] + I;
  return B;
}
const vd = MB((C) => Math.log(C)), RS = NQ(Uo, vd), NS = { kernelName: Uo, backendName: "cpu", kernelFunc: RS };
function Pd(C, A, g, I) {
  const B = AC(I, cA(g));
  for (let Q = 0; Q < B.length; ++Q) {
    const E = Q * A;
    let i = C[E];
    for (let o = 0; o < A; ++o) {
      const t = C[E + o];
      (Number.isNaN(t) || t > i) && (i = t);
    }
    B[Q] = i;
  }
  return B;
}
const zd = SI((C, A) => Math.max(C, A)), uS = qI(Jo, zd), kS = { kernelName: Jo, backendName: "cpu", kernelFunc: uS }, jd = SI((C, A) => Math.min(C, A)), KS = qI(fo, jd), SS = { kernelName: fo, backendName: "cpu", kernelFunc: KS }, sD = SI((C, A) => C * A), pS = tD((C, A, g, I) => ({ real: C * g - A * I, imag: C * I + A * g })), Qa = qI(mo, sD, pS), MS = { kernelName: mo, backendName: "cpu", kernelFunc: Qa };
function $d(C, A, g) {
  const I = yQ(-1, g);
  return sD([], A, I, C, g);
}
const US = { kernelName: ds, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { x: I } = A;
  VA(I, "neg");
  const B = g.data.get(I.dataId).values, [Q, E] = $d(B, I.shape, I.dtype);
  return g.makeTensorInfo(E, I.dtype, Q);
} }, _d = SI((C, A) => C !== A ? 1 : 0), YS = qI(Fs, _d, null, "bool"), JS = { kernelName: Fs, backendName: "cpu", kernelFunc: YS };
function aD(C, A, g, I, B) {
  const Q = A.length, E = cA(A), i = zA(A), o = zA(B), t = AC(g, cA(B));
  for (let e = 0; e < E; ++e) {
    const s = Qi(e, Q, i), a = new Array(s.length);
    for (let r = 0; r < a.length; r++)
      a[r] = s[I[r]];
    t[KB(a, Q, o)] = C[e];
  }
  return t;
}
function cC(C) {
  const { inputs: A, attrs: g, backend: I } = C, { x: B } = A, { perm: Q } = g;
  VA(B, "transpose");
  const E = B.shape.length, i = new Array(E);
  for (let t = 0; t < i.length; t++)
    i[t] = B.shape[Q[t]];
  const o = aD(I.data.get(B.dataId).values, B.shape, B.dtype, Q, i);
  return { dataId: I.write(o, i, B.dtype), shape: i, dtype: B.dtype };
}
const fS = { kernelName: mE, backendName: "cpu", kernelFunc: cC };
function AF(C, A, g, I) {
  const [B, Q] = OI(C, I), E = NC(A, "int32"), i = gC(cA(B), E), o = cA(Q);
  for (let t = 0; t < i.length; ++t) {
    const e = t * o;
    let s = 1;
    for (let a = 0; a < o; ++a)
      s *= g[e + a];
    i[t] = s;
  }
  return { outVals: i, outShape: B, outDtype: E };
}
const LS = { kernelName: Ss, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I;
  VA(B, "prod");
  const i = B.shape.length, o = Kg(Q, B.shape), t = GI(o, i);
  let e = o, s = B;
  const a = [];
  t != null && (s = cC({ inputs: { x: B }, backend: g, attrs: { perm: t } }), a.push(s), e = KI(e.length, i));
  const r = g.data.get(s.dataId).values, { outVals: h, outShape: w, outDtype: G } = AF(s.shape, s.dtype, r, e);
  let D = w;
  return E && (D = YI(w, o)), a.forEach((l) => g.disposeIntermediateTensorInfo(l)), g.makeTensorInfo(D, G, h);
} };
function mS(C, A, g, I) {
  const B = [];
  let Q = 0;
  const E = A.length - 1 + g.length, i = new Array(E).fill(null).map(() => [0]);
  (function(t, e) {
    for (let s = 0; s < t.length; ++s) {
      const a = t[s], r = s === t.length - 1 ? e : t[s + 1].length;
      if (a.length === 0)
        throw new Error("Ragged splits may not be empty");
      if (a[0] < 0)
        throw new Error("Ragged splits must be non-negative");
      if (a[a.length - 1] > r)
        throw new Error("Ragged splits must not point past values");
      for (let h = 1; h < a.length; ++h)
        if (a[h - 1] > a[h])
          throw new Error("Ragged splits must be sorted in ascending order");
    }
  })(g, I);
  let o = 1;
  for (let t = 0; t < A.length - 1; ++t) {
    o *= A[t];
    const e = A[t + 1];
    for (let s = 1; s < o + 1; ++s)
      i[t].push(s * e);
  }
  for (let t = 0; t < C.length; ++t) {
    let e = C[t], s = C[t] + 1;
    for (let a = 0; a < g.length; ++a) {
      const r = g[a], h = a + A.length - 1;
      if (h >= 0) {
        const w = i[h], G = w[w.length - 1] - r[e];
        for (let D = e; D < s; ++D)
          i[h].push(r[D + 1] + G);
      }
      e = r[e], s = r[s];
    }
    s !== e && (B.push([e, s]), Q += s - e);
  }
  return { outSplits: i, valueSlices: B, numValues: Q };
}
function uw(C, A) {
  const g = C.slice(0, A);
  for (; g.length < A; )
    g.push(1);
  for (let I = A; I < C.length; I++)
    g[A - 1] *= C[I];
  return g;
}
function bS(C, A, g, I, B) {
  const Q = A.slice();
  Q[0] = B;
  const E = NI(g, cA(Q)), i = C.length;
  return function(o, t, e, s, a, r) {
    const h = uw(t, 2)[1], w = uw(r, 2)[1];
    let G = 0;
    for (const D of e)
      for (let l = D[0]; l < D[1]; ++l) {
        for (let d = 0; d < s; ++d)
          a[G * w + d] = o[l * h + d];
        ++G;
      }
  }(C, A, I, i === 0 ? 0 : i / A[0], E, Q), [E, Q];
}
function gF(C, A, g, I, B, Q, E, i) {
  if (C.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (A[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  if (function(h, w, G) {
    h.forEach((D, l) => {
      if (D < 0 || D >= G) {
        const d = Qi(l, w.length, zA(w)).join(",");
        throw new Error(`indices[${d}] = ${D} is not in [0, ${G})`);
      }
    });
  }(Q, E, A[0][0] - 1), I.length === 0)
    throw new Error("params.rank must be nonzero");
  const o = I[0], { outSplits: t, valueSlices: e, numValues: s } = mS(Q, E, C, o), a = function(h) {
    const w = [];
    for (let G = 0; G < h.length; ++G) {
      const D = NI("int32", h[G].length);
      w.push(D), h[G].forEach((l, d) => D[d] = l);
    }
    return w;
  }(t), r = bS(g, I, B, e, s);
  return [a, r[0], r[1]];
}
const kw = 2147483647;
function IF(C, A, g, I, B, Q, E) {
  if (A.length > 1)
    throw new Error("starts must be a scalar or vector");
  if (B.length > 1)
    throw new Error("limits must be a scalar or vector");
  if (E.length > 1)
    throw new Error("deltas must be a scalar or vector");
  const i = A.length === 0, o = B.length === 0, t = E.length === 0, e = [];
  i || e.push(A[0]), o || e.push(B[0]), t || e.push(E[0]);
  for (let w = 1; w < e.length; ++w)
    if (e[w] !== e[w - 1])
      throw new Error("starts, limits, and deltas must have the same shape");
  const s = e.length === 0 ? 1 : e[0], a = NI("int32", s + 1);
  a[0] = 0;
  for (let w = 0; w < s; ++w) {
    const G = i ? C[0] : C[w], D = o ? I[0] : I[w], l = t ? Q[0] : Q[w];
    if (l === 0)
      throw new Error("Requires delta != 0");
    let d;
    if (l > 0 && D < G || l < 0 && D > G)
      d = 0;
    else if (d = Math.ceil(Math.abs((D - G) / l)), d > kw)
      throw new Error(`Requires ((limit - start) / delta) <= ${kw}`);
    a[w + 1] = a[w] + d;
  }
  const r = NI(g, a[s]);
  let h = 0;
  for (let w = 0; w < s; ++w) {
    const G = a[w + 1] - a[w];
    let D = i ? C[0] : C[w];
    const l = t ? Q[0] : Q[w];
    for (let d = 0; d < G; ++d)
      r[h++] = D, D += l;
  }
  return [a, r];
}
var WC = tB;
class Ue {
  constructor(A, g, I, B, Q, E, i, o, t, e) {
    this.shape = A, this.shapeShape = g, this.values = I, this.valuesShape = B, this.valuesDType = Q, this.defaultValue = E, this.defaultValueShape = i, this.rowPartitionValues = o, this.rowPartitionValuesShapes = t, this.rowPartitionTypes = sy(e), this.raggedRank = ay(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(A) {
    return this.rowPartitionTypes[0] === WC.FIRST_DIM_SIZE ? this.rowPartitionTypes[A + 1] : this.rowPartitionTypes[A];
  }
  getRowPartitionTensor(A) {
    return this.rowPartitionTypes[0] === WC.FIRST_DIM_SIZE ? this.rowPartitionValues[A + 1] : this.rowPartitionValues[A];
  }
  getMaxWidth(A) {
    const g = this.getRowPartitionTensor(A - 1);
    switch (this.getRowPartitionTypeByDimension(A - 1)) {
      case WC.VALUE_ROWIDS:
        return Ue.getMaxWidthValueRowID(g);
      case WC.ROW_SPLITS:
        return Ue.getMaxWidthRowSplit(g);
      default:
        throw new Error(`Cannot handle partition type ${WC[this.getRowPartitionTypeByDimension(A - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(A) {
    const g = A.length;
    if (g === 0 || g === 1)
      return 0;
    let I = 0;
    for (let B = 0; B < g - 1; ++B) {
      const Q = A[B + 1] - A[B];
      Q > I && (I = Q);
    }
    return I;
  }
  static getMaxWidthValueRowID(A) {
    const g = A.length;
    if (g === 0)
      return 0;
    let I = 0, B = A[0], Q = 0;
    for (let E = 1; E < g; ++E) {
      const i = A[E];
      i !== B && (B = i, Q = Math.max(E - I, Q), I = E);
    }
    return Math.max(g - I, Q);
  }
  tensorShapeFromTensor(A, g, I = !0) {
    if (g.length === 0) {
      if (A[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return Sw(A, I);
  }
  calculateOutputSize(A) {
    const g = this.valuesShape;
    ny(this.defaultValueShape, g);
    const I = this.tensorShapeFromTensor(this.shape, this.shapeShape), B = ey(this.raggedRank, I, g);
    B[0] < 0 && (B[0] = A);
    for (let Q = 1; Q <= this.raggedRank; ++Q)
      B[Q] < 0 && (B[Q] = this.getMaxWidth(Q));
    return B;
  }
  calculateFirstParentOutputIndex(A, g, I) {
    const B = Math.min(A, I), Q = [];
    let E = 0;
    for (let i = 0; i < B; ++i, E += g)
      Q.push(E);
    for (let i = B; i < A; ++i)
      Q.push(-1);
    return f(Q.length === A, () => "Final length of result must be equal to firstDimension."), Q;
  }
  calculateOutputIndexRowSplit(A, g, I, B) {
    const Q = A.length, E = [];
    for (let i = 0; i < Q - 1; ++i) {
      const o = A[i + 1] - A[i];
      let t = Math.min(B, o), e = g[i];
      e === -1 && (t = 0);
      for (let s = 0; s < t; ++s)
        E.push(e), e += I;
      for (let s = 0; s < o - t; ++s)
        E.push(-1);
    }
    if (Q > 0 && E.length !== A[Q - 1])
      throw new Error("Invalid row split size.");
    return E;
  }
  calculateOutputIndexValueRowID(A, g, I, B) {
    const Q = A.length, E = [];
    if (Q === 0)
      return [];
    let i = 0, o = A[0];
    if (o >= g.length)
      throw new Error(`Got currentValueRowId=${o}, which is not less than ${g.length}`);
    let t = g[o];
    E.push(t);
    for (let e = 1; e < Q; ++e) {
      const s = A[e];
      if (s === o)
        t >= 0 && (++i, i < B ? t += I : t = -1);
      else {
        if (i = 0, o = s, s >= g.length)
          throw new Error(`Got nextValueRowId=${s} which is not less than ${g.length}`);
        t = g[s];
      }
      E.push(t);
    }
    if (E.length !== A.length)
      throw new Error("Invalid row ids.");
    return E;
  }
  calculateOutputIndex(A, g, I, B) {
    const Q = this.getRowPartitionTensor(A), E = this.getRowPartitionTypeByDimension(A);
    switch (E) {
      case WC.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(Q, g, I, B);
      case WC.ROW_SPLITS:
        if (Q.length - 1 > g.length)
          throw new Error(`Row partition size is greater than output size: ${Q.length - 1} > ${g.length}`);
        return this.calculateOutputIndexRowSplit(Q, g, I, B);
      default:
        throw new Error(`Unsupported partition type: ${WC[E]}`);
    }
  }
  getFirstDimensionSize() {
    const A = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const g = this.rowPartitionTypes[0];
    switch (g) {
      case WC.FIRST_DIM_SIZE:
        return A[0];
      case WC.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case WC.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${WC[g]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const A = this.getFirstDimensionSize(), g = this.calculateOutputSize(A), I = new Array(this.raggedRank + 1);
    I[I.length - 1] = 1;
    for (let E = I.length - 2; E >= 0; --E)
      I[E] = I[E + 1] * g[E + 1];
    const B = Sw(g, !1), Q = NI(this.valuesDType, cA(B));
    if (I[0] * g[0] > 0) {
      let E = this.calculateFirstParentOutputIndex(A, I[0], g[0]);
      for (let i = 1; i <= this.raggedRank; ++i)
        E = this.calculateOutputIndex(i - 1, E, I[i], g[i]);
      this.setOutput(this.raggedRank, E, Q, B);
    }
    return [B, Q];
  }
  setOutput(A, g, I, B) {
    if (I.length === 0)
      return;
    const Q = this.values, E = I;
    let i = B.slice();
    i = i.slice(A + 1);
    const o = cA(i), t = g.length;
    let e = this.defaultValue;
    if (e.length !== o && e.length !== 1) {
      const h = this.defaultValueShape;
      IA(() => {
        const w = CA(e, h);
        e = qi(w, i).dataSync();
      });
    }
    let s = 0, a = 0, r = 0;
    for (let h = 0; h <= t; ++h) {
      let w = h < t ? g[h] : -1;
      if (w !== r) {
        if (a < r) {
          const G = Q.subarray(s * o);
          Kw(E.subarray(a * o), G, (r - a) * o);
        }
        if (h >= t) {
          const G = I.length;
          w = Math.floor(G / o);
        }
        if (w > r)
          if (this.defaultValue.length === 1)
            E.subarray(r * o, w * o).fill(this.defaultValue[0]), r = w;
          else
            for (; w > r; )
              Kw(E.slice(r * o), e, o), ++r;
        w < 0 ? (s = h + 1, a = r) : (s = h, a = r, r = a + 1);
      } else
        ++r;
    }
  }
}
function Kw(C, A, g) {
  for (let I = 0; I < g; I++)
    C[I] = A[I];
}
function Sw(C, A) {
  const g = [];
  for (let I of C) {
    if (I < 0) {
      if (!A)
        throw new Error(`Dimension ${I} must be >= 0`);
      if (I < -1)
        throw new Error(`Dimension ${I} must be >= -1`);
      I = -1;
    }
    g.push(I);
  }
  return g;
}
function CF(C, A, g, I, B, Q, E, i, o, t) {
  return new Ue(C, A, g, I, B, Q, E, i, o, t).compute();
}
function BF(C, A, g, I) {
  if (C === A || C < A && g < 0 || A < C && g > 1)
    return gC(0, I);
  const B = gC(Math.abs(Math.ceil((A - C) / g)), I);
  A < C && g === 1 && (g = -1), B[0] = C;
  for (let Q = 1; Q < B.length; Q++)
    B[Q] = B[Q - 1] + g;
  return B;
}
const QF = MB((C) => 1 / Math.sqrt(C)), HS = NQ(Wo, QF), xS = { kernelName: Wo, backendName: "cpu", kernelFunc: HS };
function TQ(C, A, g, I, B, Q, E, i, o, t) {
  const e = [I / B, B], s = C.values, a = A.values;
  if (I === 0)
    return Sg(g, A.dtype);
  const r = o instanceof PI ? o : Sg(e, A.dtype);
  typeof o == "string" || typeof o == "number" ? r.values.fill(o) : typeof o == "boolean" && r.values.fill(+o);
  for (let h = 0; h < Q; h++) {
    const w = [];
    let G = 0;
    for (let D = 0; D < E; D++) {
      const l = s[h * E + D];
      w.push(l), G += l * i[D];
    }
    if (G < 0 || G >= I / B)
      throw new Error(`Invalid indices: ${w} does not index into ${g}`);
    for (let D = 0; D < B; D++)
      t ? r.values[G * B + D] += a[h * B + D] : r.values[G * B + D] = A.rank === 0 ? a[0] : a[h * B + D];
  }
  return r;
}
const qS = MB((C) => 1 / (1 + Math.exp(-C))), EF = jg(vo, (C) => 1 / (1 + Math.exp(-C))), VS = { kernelName: vo, backendName: "cpu", kernelFunc: EF };
function iF(C, A, g, I, B) {
  const Q = Hh(I, A, g), E = cA(g), i = zA(I);
  if (Q) {
    const e = xh(A, i);
    return B === "string" ? C.slice(e, e + E) : C.subarray(e, e + E);
  }
  const o = Sg(I, B, B === "string" ? vB(C) : C), t = Sg(g, B);
  for (let e = 0; e < t.size; ++e) {
    const s = t.indexToLoc(e), a = s.map((r, h) => r + A[h]);
    t.set(o.get(...a), ...s);
  }
  return B === "string" ? by(t.values) : t.values;
}
function oE(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { begin: Q, size: E } = I;
  VA(B, "slice");
  const [i, o] = Ps(B, Q, E);
  mh(B, i, o);
  const t = iF(g.data.get(B.dataId).values, i, o, B.shape, B.dtype);
  return g.makeTensorInfo(o, B.dtype, t);
}
const WS = { kernelName: fs, backendName: "cpu", kernelFunc: oE };
function oF(C, A, g, I, B, Q, E) {
  const i = A[0], o = Q[0], t = new Array(o), e = new Array(i), s = A[1];
  if (o === 0) {
    if (i !== 0)
      throw new Error(ky(i));
    return [NI(g, 0), [0, s], NI(B, 0), t, e];
  }
  let a = !0, r = 0;
  const h = new Array(o).fill(0);
  for (let G = 0; G < i; ++G) {
    const D = C[G * s];
    if (D < 0)
      throw new Error(Ky(G, D));
    if (D >= o)
      throw new Error(Sy(G, D, o));
    ++h[D], a = a && D >= r, r = D;
  }
  let w = !0;
  for (let G = 0; G < o; ++G) {
    const D = h[G] === 0;
    t[G] = D, w = w && !D, h[G] = Math.max(h[G], 1), G > 0 && (h[G] += h[G - 1]);
  }
  if (w && a) {
    const G = C, D = I;
    for (let l = 0; l < i; ++l)
      e[l] = l;
    return [G, [i, s], D, t, e];
  }
  {
    const G = h[o - 1], D = NI(g, G * s), l = NI(B, G), d = new Array(o).fill(0);
    for (let N = 0; N < i; ++N) {
      const k = C[N * s], p = d[k], Y = (k === 0 ? 0 : h[k - 1]) + p;
      d[k]++;
      for (let M = 0; M < s; ++M)
        D[Y * s + M] = C[N * s + M];
      l[Y] = I[N], e[N] = Y;
    }
    for (let N = 0; N < o; ++N)
      if (d[N] === 0) {
        const k = N === 0 ? 0 : h[N - 1];
        D[k * s + 0] = N;
        for (let p = 1; p < s; ++p)
          D[k * s + p] = 0;
        l[k] = E;
      }
    return [D, [G, s], l, t, e];
  }
}
function tF(C, A, g, I, B) {
  const Q = cA(I), E = A[0], i = B.length, o = [];
  let t = 1, e = -1;
  for (let w = 0; w < i; ++w) {
    const G = B[w];
    if (G === -1) {
      if (e !== -1)
        throw new Error(py(e, w));
      e = w, o.push(1);
    } else {
      if (G < 0)
        throw new Error(My(w, G));
      t *= G, o.push(G);
    }
  }
  if (e !== -1) {
    if (t <= 0)
      throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");
    const w = Math.trunc(Q / t);
    if (t * w !== Q)
      throw new Error(Uy(I, o));
    o[e] = w;
  }
  if (cA(o) !== Q)
    throw new Error(Yy(I, o));
  const s = I.length, a = [];
  if (s > 0) {
    a[s - 1] = 1;
    for (let w = s - 2; w >= 0; --w)
      a[w] = a[w + 1] * I[w + 1];
  }
  const r = [];
  if (i > 0) {
    r[i - 1] = 1;
    for (let w = i - 2; w >= 0; --w)
      r[w] = r[w + 1] * o[w + 1];
  }
  const h = NI(g, E * i);
  for (let w = 0; w < E; ++w) {
    let G = 0;
    for (let D = 0; D < s; ++D)
      G += C[w * s + D] * a[D];
    for (let D = 0; D < i; ++D)
      h[w * i + D] = Math.trunc(G / r[D]), G %= r[D];
  }
  return [h, [E, i], o];
}
function nD(C, A, g, I, B, Q = !1, E = 0) {
  const i = I.length, o = [A[0], C.length / A[0]], t = o[1], e = i > 0 ? B[i - 1] + 1 : 0;
  if (e < 0)
    throw new Error("segment ids must be >= 0");
  const s = A.slice();
  s[0] = e;
  const a = NI(g, s.reduce((D, l) => D * l, 1));
  if (i === 0)
    return e > 0 && a.fill(E), [a, s];
  if (e <= 0)
    throw new Error("segment ids must be >= 0");
  let r = 0, h = 1, w = 0, G = B[r];
  for (; ; ) {
    let D = 0;
    if (h < i) {
      if (D = B[h], G === D) {
        ++h;
        continue;
      }
      if (G >= D)
        throw new Error("segment ids are not increasing");
    }
    if (G < 0 || G >= e)
      throw new Error(Jy(G, e));
    G > w && a.fill(E, w * t, G * t);
    for (let l = r; l < h; ++l) {
      const d = I[l];
      if (d < 0 || d >= o[0])
        throw new Error(fy(l, I[l], o[0]));
      for (let N = 0; N < t; N++)
        a[G * t + N] += C[d * t + N];
    }
    if (Q)
      for (let l = 0; l < t; l++)
        a[G * t + l] /= h - r;
    if (r = h, ++h, w = G + 1, G = D, h > i)
      break;
  }
  return w < e && a.fill(E, w * t, e * t), [a, s];
}
const TS = MB((C) => Math.sqrt(C)), ZS = jg(zo, (C) => Math.sqrt(C)), XS = { kernelName: zo, backendName: "cpu", kernelFunc: ZS }, eF = SI((C, A) => {
  const g = C - A;
  return g * g;
}), OS = qI(jo, eF), vS = { kernelName: jo, backendName: "cpu", kernelFunc: OS }, sF = MB((C, A) => {
  const { pattern: g, replaceGlobal: I, rewrite: B } = A;
  return C.replace(new RegExp(g, I ? "g" : ""), B);
}), PS = { kernelName: ln, backendName: "cpu", kernelFunc: NQ(ln, sF) };
function aF(C, A, g, I) {
  const B = Sg(C, A.dtype);
  for (let Q = 0; Q < B.size; Q++) {
    const E = B.indexToLoc(Q), i = new Array(E.length);
    for (let o = 0; o < i.length; o++)
      i[o] = E[o] * g[o] + I[o];
    B.set(A.get(...i), ...E);
  }
  return B;
}
class zS {
  constructor(A, g, I, B, Q, E) {
    this.separator = eQ(A), this.nGramWidths = g, this.leftPad = eQ(I), this.rightPad = eQ(B), this.padWidth = Q, this.preserveShort = E;
  }
  getPadWidth(A) {
    return Math.min(this.padWidth < 0 ? A - 1 : this.padWidth, A - 1);
  }
  getNumNGrams(A, g) {
    const I = this.getPadWidth(g);
    return Math.max(0, A + 2 * I - g + 1);
  }
  createNGrams(A, g, I, B, Q, E) {
    for (let i = 0; i < Q; ++i) {
      const o = this.getPadWidth(E), t = Math.max(0, o - i), e = Math.max(0, o - (Q - (i + 1))), s = E - (t + e), a = g + (t > 0 ? 0 : i - o);
      let r = 0;
      r += t * this.leftPad.length;
      for (let D = 0; D < s; ++D)
        r += A[a + D].length;
      r += e * this.rightPad.length, r += (t + e + s - 1) * this.separator.length, I[B + i] = new Uint8Array(r);
      const h = I[B + i];
      let w = 0;
      const G = (D) => D.forEach((l) => h[w++] = l);
      for (let D = 0; D < t; ++D)
        G(this.leftPad), G(this.separator);
      for (let D = 0; D < s - 1; ++D)
        G(A[a + D]), G(this.separator);
      if (s > 0) {
        G(A[a + s - 1]);
        for (let D = 0; D < e; ++D)
          G(this.separator), G(this.rightPad);
      } else {
        for (let D = 0; D < e - 1; ++D)
          G(this.rightPad), G(this.separator);
        G(this.rightPad);
      }
    }
  }
  compute(A, g) {
    const I = A.length, B = g.length;
    if (B > 0) {
      let o = g[0];
      if (o !== 0)
        throw new Error(`First split value must be 0, got ${o}`);
      for (let t = 1; t < B; ++t) {
        let e = g[t] >= o;
        if (e = e && g[t] <= I, !e)
          throw new Error(`Invalid split value ${g[t]}, must be in [${o}, ${I}]`);
        o = g[t];
      }
      if (o !== I)
        throw new Error(`Last split value must be data size. Expected ${I}, got ${o}`);
    }
    const Q = B - 1, E = NI("int32", B);
    if (I === 0 || B === 0) {
      const o = new Array(I);
      for (let t = 0; t <= Q; ++t)
        E[t] = 0;
      return [o, E];
    }
    E[0] = 0;
    for (let o = 1; o <= Q; ++o) {
      const t = g[o] - g[o - 1];
      let e = 0;
      this.nGramWidths.forEach((s) => {
        e += this.getNumNGrams(t, s);
      }), this.preserveShort && t > 0 && e === 0 && (e = 1), E[o] = E[o - 1] + e;
    }
    const i = new Array(E[Q]);
    for (let o = 0; o < Q; ++o) {
      const t = g[o];
      let e = E[o];
      if (this.nGramWidths.forEach((s) => {
        const a = g[o + 1] - g[o], r = this.getNumNGrams(a, s);
        this.createNGrams(A, t, i, e, r, s), e += r;
      }), this.preserveShort && e === E[o]) {
        const s = g[o + 1] - g[o];
        if (s === 0)
          continue;
        const a = s + 2 * this.padWidth, r = 1;
        this.createNGrams(A, t, i, e, r, a);
      }
    }
    return [i, E];
  }
}
function nF(C, A, g, I, B, Q, E, i) {
  return new zS(g, I, B, Q, E, i).compute(C, A);
}
function jS(C, A, g, I) {
  if (!C.length)
    return;
  if (A.length === 0) {
    for (let Q = 0; Q < C.length; ++Q)
      I.push(C.subarray(Q, Q + 1));
    return;
  }
  if (A.length === 1) {
    const Q = A[0];
    let E = C.indexOf(Q);
    for (; E !== -1; ) {
      const i = C.subarray(0, E);
      g && i.length === 0 || I.push(i), E = (C = C.subarray(E + 1)).indexOf(Q);
    }
    return void (g && C.length === 0 || I.push(C));
  }
  let B = 0;
  for (let Q = 0; Q < C.length + 1; Q++)
    if (Q === C.length || A.indexOf(C[Q]) !== -1) {
      const E = C.subarray(B, Q);
      g && E.length === 0 || I.push(E), B = Q + 1;
    }
}
function rF(C, A, g) {
  const I = C.length, B = [];
  let Q = 0, E = 0;
  const i = new Array(I);
  for (let a = 0; a < I; ++a) {
    const r = B.length;
    jS(C[a], A, g, B);
    const h = B.length - r;
    i[a] = h, Q += h, E = Math.max(E, h);
  }
  const o = NI("int32", 2 * Q), t = new Array(Q), e = [I, E];
  let s = 0;
  for (let a = 0; a < I; ++a)
    for (let r = 0; r < i[a]; ++r)
      o[2 * s] = a, o[2 * s + 1] = r, t[s] = B[s], ++s;
  return [o, t, e];
}
function hF(C, A) {
  const g = NI("int32", C.length);
  for (let I = 0; I < C.length; ++I)
    g[I] = IN(C[I]).modulo(A).getLowBitsUnsigned();
  return g;
}
const DF = SI((C, A) => C - A), $S = tD((C, A, g, I) => ({ real: C - g, imag: A - I })), rD = qI($o, DF, $S), _S = { kernelName: $o, backendName: "cpu", kernelFunc: rD };
function cF(C, A) {
  const g = new Array(C.rank);
  for (let B = 0; B < g.length; B++)
    g[B] = C.shape[B] * A[B];
  const I = Sg(g, C.dtype);
  for (let B = 0; B < I.values.length; ++B) {
    const Q = I.indexToLoc(B), E = new Array(C.rank);
    for (let o = 0; o < E.length; o++)
      E[o] = Q[o] % C.shape[o];
    const i = C.locToIndex(E);
    I.values[B] = C.values[i];
  }
  return I;
}
const mi = (C, A) => {
  const g = A.value - C.value;
  return g === 0 ? C.index - A.index : g;
};
function wF(C, A, g = 0, I = C.length - 1) {
  for (; I > g; ) {
    if (I - g > 600) {
      const i = I - g + 1, o = A - g + 1, t = Math.log(i), e = 0.5 * Math.exp(2 * t / 3), s = 0.5 * Math.sqrt(t * e * (i - e) / i) * Math.sign(o - i / 2);
      wF(C, A, Math.max(g, Math.floor(A - o * e / i + s)), Math.min(I, Math.floor(A + (i - o) * e / i + s)));
    }
    const B = C[A];
    let Q = g, E = I;
    for (kE(C, g, A), mi(C[I], B) > 0 && kE(C, g, I); Q < E; ) {
      for (kE(C, Q, E), Q++, E--; mi(C[Q], B) < 0; )
        Q += 1;
      for (; mi(C[E], B) > 0; )
        E -= 1;
    }
    mi(C[g], B) === 0 ? kE(C, g, E) : (E += 1, kE(C, E, I)), E <= A && (g = E + 1), A <= E && (I = E - 1);
  }
}
function lF(C, A, g, I, B) {
  const Q = A[A.length - 1], [E, i] = [C.length / Q, Q], o = AC(g, E * I), t = AC("int32", E * I);
  for (let s = 0; s < E; s++) {
    const a = s * i, r = C.subarray(a, a + i);
    let h = new Array(r.length);
    r.forEach((l, d) => h[d] = { value: l, index: d }), I < h.length && (wF(h, I), h = h.slice(0, I)), B && h.sort(mi);
    const w = s * I, G = o.subarray(w, w + I), D = t.subarray(w, w + I);
    for (let l = 0; l < I; l++)
      G[l] = h[l].value, D[l] = h[l].index;
  }
  const e = A.slice();
  return e[e.length - 1] = I, [Sg(e, g, o), Sg(e, "int32", t)];
}
function GF(C, A, g, I) {
  const B = Kg(A, g)[0], Q = [1, g[0], 1];
  for (let h = 0; h < B; h++)
    Q[0] *= g[h];
  Q[1] = g[B];
  for (let h = B + 1; h < g.length; h++)
    Q[2] *= g[h];
  const E = /* @__PURE__ */ new Map(), i = new Int32Array(g[B]), o = new PI(Q, I, C), t = [], e = Q[0] === 1 && Q[2] === 1;
  for (let h = 0; h < g[B]; h++) {
    let w;
    if (e)
      w = C[h].toString();
    else {
      const D = [];
      for (let l = 0; l < Q[0]; l++)
        for (let d = 0; d < Q[2]; d++)
          D.push(o.get(l, h, d));
      w = D.join(",");
    }
    const G = E.get(w);
    if (G != null)
      i[h] = G;
    else {
      const D = E.size;
      E.set(w, D), i[h] = D, t.push(h);
    }
  }
  const s = Q.slice();
  s[1] = E.size;
  const a = new PI(s, I);
  t.forEach((h, w) => {
    for (let G = 0; G < Q[0]; G++)
      for (let D = 0; D < Q[2]; D++)
        a.set(o.get(G, h, D), G, w, D);
  });
  const r = g.slice();
  return r[B] = s[1], { outputValues: a.values, outputShape: r, indices: i };
}
const Ap = Object.freeze(Object.defineProperty({ __proto__: null, addImpl: Sd, bincountImpl: eD, bincountReduceImpl: pd, bitwiseAndImpl: Md, castImpl: Kd, ceilImpl: Ud, concatImpl: Yd, equalImpl: Jd, expImpl: Ld, expm1Impl: bd, floorDivImpl: xd, floorImpl: Hd, gatherNdImpl: qd, gatherV2Impl: Vd, greaterEqualImpl: Td, greaterImpl: Wd, lessEqualImpl: Xd, lessImpl: Zd, linSpaceImpl: Od, logImpl: vd, maxImpl: Pd, maximumImpl: zd, minimumImpl: jd, multiplyImpl: sD, negImpl: $d, notEqualImpl: _d, prodImpl: AF, raggedGatherImpl: gF, raggedRangeImpl: IF, raggedTensorToTensorImpl: CF, rangeImpl: BF, rsqrtImpl: QF, scatterImpl: TQ, sigmoidImpl: qS, simpleAbsImpl: kd, sliceImpl: iF, sparseFillEmptyRowsImpl: oF, sparseReshapeImpl: tF, sparseSegmentReductionImpl: nD, sqrtImpl: TS, squaredDifferenceImpl: eF, staticRegexReplaceImpl: sF, stridedSliceImpl: aF, stringNGramsImpl: nF, stringSplitImpl: rF, stringToHashBucketFastImpl: hF, subImpl: DF, tileImpl: cF, topKImpl: lF, transposeImpl: aD, uniqueImpl: GF }, Symbol.toStringTag, { value: "Module" }));
lG("cpu", () => new Ba(), 1);
const yF = jg(Go, (C) => C >= 0 ? C : Math.exp(C) - 1), gp = { kernelName: Go, backendName: "cpu", kernelFunc: yF };
function dF(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { alpha: Q } = I;
  VA([B], "leakyRelu");
  const E = cA(B.shape), i = g.data.get(B.dataId).values, o = AC("float32", E);
  for (let t = 0; t < i.length; t++)
    o[t] = i[t] < 0 ? Q * i[t] : i[t];
  return g.makeTensorInfo(B.shape, "float32", o);
}
const Ip = { kernelName: ts, backendName: "cpu", kernelFunc: dF }, Cp = SI((C, A) => C < 0 ? A * C : C);
function FF(C) {
  const { inputs: A, backend: g } = C, { x: I, alpha: B } = A;
  VA([I, B], "prelu");
  const Q = g.data.get(I.dataId).values, E = g.data.get(B.dataId).values, [i, o] = Cp(I.shape, B.shape, Q, E, "float32");
  return g.makeTensorInfo(o, "float32", i);
}
const Bp = { kernelName: Ks, backendName: "cpu", kernelFunc: FF }, RF = jg(xo, (C) => Math.max(0, C)), Qp = { kernelName: xo, backendName: "cpu", kernelFunc: RF }, NF = jg(qo, (C) => Math.min(Math.max(0, C), 6)), Ep = { kernelName: qo, backendName: "cpu", kernelFunc: NF };
function Ye(C, A, g, I, B) {
  if (g === "linear")
    return pB({ inputs: { x: A }, backend: C });
  if (g === "relu")
    return RF({ inputs: { x: A }, backend: C });
  if (g === "elu")
    return yF({ inputs: { x: A }, backend: C });
  if (g === "relu6")
    return NF({ inputs: { x: A }, backend: C });
  if (g === "prelu")
    return FF({ inputs: { x: A, alpha: I }, backend: C });
  if (g === "leakyrelu")
    return dF({ inputs: { x: A }, backend: C, attrs: { alpha: B } });
  if (g === "sigmoid")
    return EF({ inputs: { x: A }, backend: C });
  throw new Error(`Activation ${g} has not been implemented for the CPU backend.`);
}
function oI(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { shape: Q } = I, E = cA(B.shape), i = Fl(Q, E), o = cA(i);
  f(E === o, () => `The new shape (${i}) has ${o} elements and the old shape (${B.shape}) has ${E} elements. The new shape and old shape must have the same number of elements.`), g.incRef(B.dataId);
  const t = g.data.get(B.dataId);
  if (t.complexTensorInfos != null) {
    const e = t.complexTensorInfos.real, s = t.complexTensorInfos.imag;
    e.shape = i, s.shape = i;
  }
  return { dataId: B.dataId, shape: i, dtype: B.dtype };
}
const ip = { kernelName: ps, backendName: "cpu", kernelFunc: oI };
function uF(C) {
  const { inputs: A, backend: g, attrs: I } = C, { a: B, b: Q } = A, { transposeA: E, transposeB: i } = I;
  VA([B, Q], "matMul");
  const o = B.shape.length, t = Q.shape.length, e = E ? B.shape[o - 2] : B.shape[o - 1], s = i ? Q.shape[t - 1] : Q.shape[t - 2], a = E ? B.shape[o - 1] : B.shape[o - 2], r = i ? Q.shape[t - 2] : Q.shape[t - 1], h = B.shape.slice(0, -2), w = Q.shape.slice(0, -2), G = cA(h), D = cA(w), l = wg(B.shape.slice(0, -2), Q.shape.slice(0, -2)).concat([a, r]);
  f(e === s, () => `Error in matMul: inner shapes (${e}) and (${s}) of Tensors with shapes ${B.shape} and ${Q.shape} and transposeA=${E} and transposeB=${i} must match.`);
  const d = i ? [D, r, s] : [D, s, r], N = oI({ inputs: { x: B }, backend: g, attrs: { shape: E ? [G, e, a] : [G, a, e] } }), k = oI({ inputs: { x: Q }, backend: g, attrs: { shape: d } }), p = E ? N.shape[1] : N.shape[2], Y = E ? N.shape[2] : N.shape[1], M = i ? k.shape[1] : k.shape[2], L = Math.max(G, D), m = g.data.get(N.dataId).values, x = g.data.get(k.dataId).values, T = zA(N.shape), Z = zA(k.shape), [$, AA, P] = E ? [T[0], 1, T[1]] : [T[0], T[1], 1], [_, QA, tA] = i ? [1, Z[1], Z[0]] : [Z[1], 1, Z[0]], O = Y * M, rA = Sg([L, Y, M], N.dtype), eA = rA.values, DA = g.blockSize;
  for (let GA = 0; GA < L; GA++) {
    const NA = GA % G, UA = GA % D;
    for (let pA = 0; pA < Y; pA += DA) {
      const XA = Math.min(pA + DA, Y);
      for (let WA = 0; WA < M; WA += DA) {
        const PA = Math.min(WA + DA, M);
        for (let fA = 0; fA < p; fA += DA) {
          const gg = Math.min(fA + DA, p);
          for (let Bg = pA; Bg < XA; Bg++)
            for (let lg = WA; lg < PA; lg++) {
              let jA = 0;
              for (let eg = fA; eg < gg; eg++)
                jA += m[NA * $ + Bg * AA + eg * P] * x[eg * _ + lg * QA + UA * tA];
              eA[GA * O + (Bg * M + lg)] += jA;
            }
        }
      }
    }
  }
  return g.disposeIntermediateTensorInfo(N), g.disposeIntermediateTensorInfo(k), g.makeTensorInfo(l, rA.dtype, rA.values);
}
const op = { kernelName: ve, backendName: "cpu", kernelFunc: uF }, tp = { kernelName: oe, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { a: B, b: Q, bias: E, preluActivationWeights: i } = A, { transposeA: o, transposeB: t, activation: e, leakyreluAlpha: s } = I;
  let a, r, h;
  const w = [];
  a = uF({ inputs: { a: B, b: Q }, attrs: { transposeA: o, transposeB: t }, backend: g }), E && (r = gi({ inputs: { a, b: E }, backend: g }), w.push(a), a = r), e && (h = Ye(g, a, e, i, s), w.push(a), a = h);
  for (const G of w)
    g.disposeIntermediateTensorInfo(G);
  return a;
} }, ep = jg(io, (C) => Math.acos(C)), sp = { kernelName: io, backendName: "cpu", kernelFunc: ep }, ap = jg(oo, (C) => Math.acosh(C)), np = { kernelName: oo, backendName: "cpu", kernelFunc: ap }, rp = { kernelName: yr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, I = A;
  VA(A, "addN");
  const B = I.map((i) => g.data.get(i.dataId).values), Q = Sg(I[0].shape, I[0].dtype), E = Q.values;
  for (let i = 0; i < I.length; i++) {
    const o = B[i];
    for (let t = 0; t < E.length; t++)
      E[t] += o[t];
  }
  return g.makeTensorInfo(Q.shape, Q.dtype, Q.values);
} }, hp = { kernelName: dr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I;
  VA(B, "all");
  const i = Kg(Q, B.shape);
  let o = i;
  const t = GI(o, B.shape.length);
  let e = B;
  t != null && (e = cC({ inputs: { x: B }, backend: g, attrs: { perm: t } }), o = KI(o.length, B.shape.length)), jI("all", o, e.shape.length);
  const [s, a] = OI(e.shape, o), r = cA(a), h = gC(cA(s), e.dtype), w = g.data.get(e.dataId).values;
  for (let D = 0; D < h.length; ++D) {
    const l = D * r;
    let d = w[l];
    for (let N = 0; N < r; ++N) {
      const k = w[l + N];
      d = d && k;
    }
    h[D] = d;
  }
  t != null && g.disposeIntermediateTensorInfo(e);
  const G = g.makeTensorInfo(s, e.dtype, h);
  if (E) {
    const D = oI({ inputs: { x: G }, backend: g, attrs: { shape: YI(s, i) } });
    return g.disposeIntermediateTensorInfo(G), D;
  }
  return G;
} }, Dp = { kernelName: Fr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I;
  VA(B, "any");
  const i = Kg(Q, B.shape);
  let o = i;
  const t = GI(o, B.shape.length);
  let e = B;
  t != null && (e = cC({ inputs: { x: B }, backend: g, attrs: { perm: t } }), o = KI(o.length, B.shape.length)), jI("any", o, e.shape.length);
  const [s, a] = OI(e.shape, o), r = cA(a), h = gC(cA(s), e.dtype), w = g.data.get(e.dataId).values;
  for (let D = 0; D < h.length; ++D) {
    const l = D * r;
    let d = w[l];
    for (let N = 0; N < r; ++N) {
      const k = w[l + N];
      d = d || k;
    }
    h[D] = d;
  }
  t != null && g.disposeIntermediateTensorInfo(e);
  const G = g.makeTensorInfo(s, e.dtype, h);
  if (E) {
    const D = oI({ inputs: { x: G }, backend: g, attrs: { shape: YI(s, i) } });
    return g.disposeIntermediateTensorInfo(G), D;
  }
  return G;
} }, cp = { kernelName: Te, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q } = I;
  VA(B, "argMax");
  let E = Kg(Q, B.shape);
  const i = GI(E, B.shape.length);
  let o = B;
  const t = [];
  i != null && (o = cC({ inputs: { x: B }, backend: g, attrs: { perm: i } }), t.push(o), E = KI(E.length, o.shape.length)), E = [E[0]], jI("argMax", E, o.shape.length);
  const [e, s] = OI(o.shape, E), a = gC(cA(e), "int32"), r = cA(s), h = g.data.get(o.dataId).values;
  for (let w = 0; w < a.length; ++w) {
    const G = w * r;
    let D = h[G], l = 0;
    for (let d = 0; d < r; ++d) {
      const N = h[G + d];
      N > D && (D = N, l = d);
    }
    a[w] = l;
  }
  return t.forEach((w) => g.disposeIntermediateTensorInfo(w)), g.makeTensorInfo(e, "int32", a);
} }, wp = { kernelName: Ze, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q } = I;
  VA(B, "argMin");
  let E = Kg(Q, B.shape);
  const i = GI(E, B.shape.length);
  let o = B;
  const t = [];
  i != null && (o = cC({ inputs: { x: B }, backend: g, attrs: { perm: i } }), t.push(o), E = KI(E.length, o.shape.length)), E = [E[0]], jI("argMin", E, o.shape.length);
  const [e, s] = OI(o.shape, E), a = gC(cA(e), "int32"), r = cA(s), h = g.data.get(o.dataId).values;
  for (let w = 0; w < a.length; ++w) {
    const G = w * r;
    let D = h[G], l = 0;
    for (let d = 0; d < r; ++d) {
      const N = h[G + d];
      N < D && (D = N, l = d);
    }
    a[w] = l;
  }
  return t.forEach((w) => g.disposeIntermediateTensorInfo(w)), g.makeTensorInfo(e, "int32", a);
} }, lp = jg(to, (C) => Math.asin(C)), Gp = { kernelName: to, backendName: "cpu", kernelFunc: lp }, yp = jg(eo, (C) => Math.asinh(C)), dp = { kernelName: eo, backendName: "cpu", kernelFunc: yp }, Fp = jg(so, (C) => Math.atan(C)), Rp = { kernelName: so, backendName: "cpu", kernelFunc: Fp }, Np = SI((C, A) => Math.atan2(C, A)), up = qI(no, Np), kp = { kernelName: no, backendName: "cpu", kernelFunc: up }, Kp = jg(ao, (C) => Math.atanh(C)), Sp = { kernelName: ao, backendName: "cpu", kernelFunc: Kp };
function hD(C, A, g, I, B, Q) {
  const E = B.strideHeight, i = B.strideWidth, o = B.dilationHeight, t = B.dilationWidth, e = B.effectiveFilterHeight, s = B.effectiveFilterWidth, a = B.padInfo.top, r = B.padInfo.left, h = Q === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, w = Sg(B.outShape, g), G = w.values, D = B.outShape[1] * B.outShape[2] * B.outShape[3], l = B.outShape[2] * B.outShape[3], d = B.outShape[3];
  for (let N = 0; N < B.batchSize; ++N) {
    const k = N * D, p = N * I[0];
    for (let Y = 0; Y < B.inChannels; ++Y)
      for (let M = 0; M < B.outHeight; ++M) {
        const L = M * E - a, m = Math.max(0, L), x = Math.min(B.inHeight, e + L), T = k + M * l;
        for (let Z = 0; Z < B.outWidth; ++Z) {
          const $ = Z * i - r, AA = Math.max(0, $), P = Math.min(B.inWidth, s + $);
          let _ = h, QA = 0, tA = 0;
          for (let O = m; O < x; O += o) {
            const rA = p + O * I[1];
            for (let eA = AA; eA < P; eA += t) {
              const DA = C[rA + eA * I[2] + Y];
              Q === "max" && DA > _ ? _ = DA : Q === "avg" && (QA += DA, tA++);
            }
            if (isNaN(_))
              break;
          }
          G[T + Z * d + Y] = Q === "avg" ? QA / tA : _;
        }
      }
  }
  return w;
}
function kF(C, A, g, I, B = !1, Q = !1) {
  const E = Sg(I.outShape, "int32"), i = I.strideHeight, o = I.strideWidth, t = I.dilationHeight, e = I.dilationWidth, s = I.effectiveFilterHeight, a = I.effectiveFilterWidth, r = I.padInfo.top, h = I.padInfo.left, w = Sg(A, g, C);
  for (let G = 0; G < I.batchSize; ++G)
    for (let D = 0; D < I.inChannels; ++D)
      for (let l = 0; l < I.outHeight; ++l) {
        const d = l * i - r;
        let N = d;
        for (; N < 0; )
          N += t;
        const k = Math.min(I.inHeight, s + d);
        for (let p = 0; p < I.outWidth; ++p) {
          const Y = p * o - h;
          let M = Y;
          for (; M < 0; )
            M += e;
          const L = Math.min(I.inWidth, a + Y);
          let m = Number.NEGATIVE_INFINITY, x = -1;
          for (let T = N; T < k; T += t) {
            const Z = T - d;
            for (let $ = M; $ < L; $ += e) {
              const AA = $ - Y, P = w.get(G, T, $, D);
              P > m && (m = P, x = B ? Q ? ((G * I.inHeight + T) * I.inWidth + $) * I.inChannels + D : (T * I.inWidth + $) * I.inChannels + D : Z * a + AA);
            }
          }
          E.set(x, G, l, p, D);
        }
      }
  return E;
}
function KF(C, A, g, I, B, Q) {
  const E = B.strideDepth, i = B.strideHeight, o = B.strideWidth, t = B.dilationDepth, e = B.dilationHeight, s = B.dilationWidth, a = B.effectiveFilterDepth, r = B.effectiveFilterHeight, h = B.effectiveFilterWidth, w = B.padInfo.front, G = B.padInfo.top, D = B.padInfo.left, l = Q === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, d = Sg(B.outShape, g), N = d.values, k = B.outShape[1] * B.outShape[2] * B.outShape[3] * B.outShape[4], p = B.outShape[2] * B.outShape[3] * B.outShape[4], Y = B.outShape[3] * B.outShape[4], M = B.outShape[4];
  for (let L = 0; L < B.batchSize; ++L) {
    const m = L * k, x = L * I[0];
    for (let T = 0; T < B.inChannels; ++T)
      for (let Z = 0; Z < B.outDepth; ++Z) {
        const $ = Z * E - w;
        let AA = $;
        for (; AA < 0; )
          AA += t;
        const P = Math.min(B.inDepth, a + $), _ = m + Z * p;
        for (let QA = 0; QA < B.outHeight; ++QA) {
          const tA = QA * i - G;
          let O = tA;
          for (; O < 0; )
            O += e;
          const rA = Math.min(B.inHeight, r + tA), eA = _ + QA * Y;
          for (let DA = 0; DA < B.outWidth; ++DA) {
            const GA = DA * o - D;
            let NA = GA;
            for (; NA < 0; )
              NA += s;
            const UA = Math.min(B.inWidth, h + GA), pA = eA + DA * M;
            let XA = l, WA = 0, PA = 0;
            for (let fA = AA; fA < P; fA += t) {
              const gg = x + fA * I[1];
              for (let Bg = O; Bg < rA; Bg += e) {
                const lg = gg + Bg * I[2];
                for (let jA = NA; jA < UA; jA += s) {
                  const eg = C[lg + jA * I[3] + T];
                  if (Q === "max" && eg > XA ? XA = eg : Q === "avg" && (WA += eg, PA++), isNaN(XA))
                    break;
                }
                if (isNaN(XA))
                  break;
              }
              if (isNaN(XA))
                break;
            }
            N[pA + T] = Q === "avg" ? WA / Math.max(PA, 1) : XA;
          }
        }
      }
  }
  return d;
}
const pp = { kernelName: Xe, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A;
  VA(B, "avgPool");
  const { filterSize: Q, strides: E, pad: i, dimRoundingMode: o } = I;
  f(IC(E, 1), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${E} and dilations '1'`);
  const t = _C(B.shape, Q, E, 1, i, o);
  let e;
  if (t.filterWidth === 1 && t.filterHeight === 1 && Zg(t.inShape, t.outShape))
    e = pB({ inputs: { x: B }, backend: g });
  else {
    const s = g.data.get(B.dataId).values, a = zA(B.shape), r = hD(s, B.shape, B.dtype, a, t, "avg");
    e = g.makeTensorInfo(t.outShape, B.dtype, r.values);
  }
  return e;
} }, Mp = { kernelName: Oe, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { filterSize: Q, strides: E, pad: i, dimRoundingMode: o, dataFormat: t } = I;
  VA(B, "avgPool3d");
  const e = jB(B.shape, Q, E, 1, i, o, t), s = KF(g.data.get(B.dataId).values, B.shape, B.dtype, zA(B.shape), e, "avg");
  return g.makeTensorInfo(s.shape, "float32", s.values);
} }, Up = { kernelName: Nr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q } = A, { filterSize: E, strides: i, pad: o, dimRoundingMode: t } = I;
  VA([B, Q], "avgPool3DGrad");
  const e = jB(Q.shape, E, i, 1, o, t), s = e.strideDepth, a = e.strideHeight, r = e.strideWidth, h = e.filterDepth, w = e.filterHeight, G = e.filterWidth, D = e.dilationDepth, l = e.dilationHeight, d = e.dilationWidth, N = e.effectiveFilterDepth, k = e.effectiveFilterHeight, p = e.effectiveFilterWidth, Y = N - 1 - e.padInfo.front, M = p - 1 - e.padInfo.left, L = k - 1 - e.padInfo.top, m = Sg(Q.shape, "float32"), x = 1 / (h * w * G), T = g.bufferSync(B);
  for (let Z = 0; Z < e.batchSize; ++Z)
    for (let $ = 0; $ < e.inChannels; ++$)
      for (let AA = 0; AA < e.inDepth; ++AA)
        for (let P = 0; P < e.inHeight; ++P)
          for (let _ = 0; _ < e.inWidth; ++_) {
            const QA = AA - Y, tA = P - L, O = _ - M;
            let rA = 0;
            for (let eA = 0; eA < N; eA += D) {
              const DA = (QA + eA) / s;
              if (!(DA < 0 || DA >= e.outDepth || Math.floor(DA) !== DA))
                for (let GA = 0; GA < k; GA += l) {
                  const NA = (tA + GA) / a;
                  if (!(NA < 0 || NA >= e.outHeight || Math.floor(NA) !== NA))
                    for (let UA = 0; UA < p; UA += d) {
                      const pA = (O + UA) / r;
                      pA < 0 || pA >= e.outWidth || Math.floor(pA) !== pA || (rA += T.get(Z, DA, NA, pA, $));
                    }
                }
            }
            m.set(rA * x, Z, AA, P, _, $);
          }
  return g.makeTensorInfo(m.shape, m.dtype, m.values);
} }, Yp = { kernelName: Rr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q } = A, E = Q;
  VA([B, Q], "avgPoolGrad");
  const { filterSize: i, strides: o, pad: t } = I, e = _C(E.shape, i, o, 1, t), s = e.strideHeight, a = e.strideWidth, r = e.filterHeight, h = e.filterWidth, w = e.dilationHeight, G = e.dilationWidth, D = e.effectiveFilterHeight, l = e.effectiveFilterWidth, d = l - 1 - e.padInfo.left, N = D - 1 - e.padInfo.top, k = Sg(E.shape, "float32"), p = 1 / (r * h), Y = g.data.get(B.dataId).values, M = Sg(B.shape, "float32", Y);
  for (let L = 0; L < e.batchSize; ++L)
    for (let m = 0; m < e.inChannels; ++m)
      for (let x = 0; x < e.inHeight; ++x)
        for (let T = 0; T < e.inWidth; ++T) {
          const Z = x - N, $ = T - d;
          let AA = 0;
          for (let P = 0; P < D; P += w) {
            const _ = (Z + P) / s;
            if (!(_ < 0 || _ >= e.outHeight || Math.floor(_) !== _))
              for (let QA = 0; QA < l; QA += G) {
                const tA = ($ + QA) / a;
                tA < 0 || tA >= e.outWidth || Math.floor(tA) !== tA || (AA += M.get(L, _, tA, m));
              }
          }
          k.set(AA * p, L, x, T, m);
        }
  return g.makeTensorInfo(k.shape, k.dtype, k.values);
} }, Jp = { kernelName: Es, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, scale: Q, offset: E, mean: i, variance: o } = A;
  f(i.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), f(E == null || i.shape.length === E.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), f(Q == null || i.shape.length === Q.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), VA([B, i, o, Q, E], "batchNorm");
  let { varianceEpsilon: t } = I;
  t == null && (t = 1e-3);
  const e = g.data.get(B.dataId).values, s = g.data.get(i.dataId).values, a = g.data.get(o.dataId).values, r = Q ? g.data.get(Q.dataId).values : new Float32Array([1]), h = E ? g.data.get(E.dataId).values : new Float32Array([0]), w = new Float32Array(e.length), G = h.length, D = r.length, l = a.length, d = s.length;
  let N = 0, k = 0, p = 0, Y = 0;
  for (let M = 0; M < e.length; ++M)
    w[M] = h[N++] + (e[M] - s[k++]) * r[p++] / Math.sqrt(a[Y++] + t), N >= G && (N = 0), k >= d && (k = 0), p >= D && (p = 0), Y >= l && (Y = 0);
  return g.makeTensorInfo(B.shape, B.dtype, w);
} }, fp = { kernelName: Pe, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { blockShape: Q, crops: E } = I;
  VA([B], "batchToSpaceND");
  const i = Q.reduce((D, l) => D * l), o = tt(B.shape, Q, i), t = et(o.length, Q.length), e = st(B.shape, Q, i), s = Zh(E, Q.length), a = Xh(e, E, Q.length), r = oI({ inputs: { x: B }, backend: g, attrs: { shape: o } }), h = cC({ inputs: { x: r }, backend: g, attrs: { perm: t } }), w = oI({ inputs: { x: h }, backend: g, attrs: { shape: e } }), G = oE({ inputs: { x: w }, backend: g, attrs: { begin: s, size: a } });
  return g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), G;
} }, Lp = { kernelName: ur, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, weights: Q } = A, { size: E } = I, i = eD(g.data.get(B.dataId).values, g.data.get(Q.dataId).values, Q.dtype, Q.shape, E);
  return g.makeTensorInfo([E], Q.dtype, i);
} }, mp = { kernelName: Sl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { s0: I, s1: B } = A, Q = g.data.get(I.dataId).values, E = g.data.get(B.dataId).values, i = wg(Array.from(Q), Array.from(E));
  return g.makeTensorInfo([i.length], "int32", Int32Array.from(i));
} }, bp = jg(Do, (C, A) => {
  const g = A;
  return C > g.clipValueMax ? g.clipValueMax : C < g.clipValueMin ? g.clipValueMin : C;
}), Hp = { kernelName: Do, backendName: "cpu", kernelFunc: bp }, xp = { kernelName: ze, backendName: "cpu", kernelFunc: (C) => {
  const { x: A } = C.inputs, g = C.backend, I = new Float32Array(cA(A.shape)), B = g.data.get(A.dataId), Q = B.complexTensorInfos.real, E = B.complexTensorInfos.imag, i = g.data.get(Q.dataId).values, o = g.data.get(E.dataId).values;
  for (let t = 0; t < i.length; t++) {
    const e = i[t], s = o[t];
    I[t] = Math.hypot(e, s);
  }
  return g.makeOutput(I, A.shape, "float32");
} };
function Ii(C) {
  const { inputs: A, backend: g } = C, { input: I } = A, B = g.data.get(I.dataId).complexTensorInfos.imag, Q = g.data.get(B.dataId).values;
  return g.makeTensorInfo(B.shape, B.dtype, Q);
}
const qp = { kernelName: Vr, backendName: "cpu", kernelFunc: Ii };
function Ci(C) {
  const { inputs: A, backend: g, attrs: I } = C, { axis: B } = I, Q = Kg(B, A[0].shape)[0];
  Vh(A.map((h) => h.shape), Q);
  let E = SB(A.map((h) => h.shape), Q);
  if (cA(E) === 0)
    return g.makeTensorInfo(E, A[0].dtype, []);
  const i = A.filter((h) => cA(h.shape) > 0);
  if (i.length === 1)
    return pB({ inputs: { x: i[0] }, backend: g });
  if (i[0].dtype === "complex64") {
    const h = i.map((d) => iE({ inputs: { input: d }, backend: g })), w = i.map((d) => Ii({ inputs: { input: d }, backend: g })), G = Ci({ inputs: h, backend: g, attrs: { axis: Q } }), D = Ci({ inputs: w, backend: g, attrs: { axis: Q } }), l = RC({ inputs: { real: G, imag: D }, backend: g });
    return h.forEach((d) => g.disposeIntermediateTensorInfo(d)), w.forEach((d) => g.disposeIntermediateTensorInfo(d)), g.disposeIntermediateTensorInfo(G), g.disposeIntermediateTensorInfo(D), l;
  }
  const o = i.map((h) => {
    const w = cA(h.shape.slice(Q));
    return oI({ inputs: { x: h }, backend: g, attrs: { shape: [-1, w] } });
  }), t = o.map((h) => ({ vals: g.data.get(h.dataId).values, shape: h.shape }));
  E = SB(o.map((h) => h.shape), 1);
  const e = o[0].shape[0] === 1, s = Yd(t, E, A[0].dtype, e), a = SB(i.map((h) => h.shape), Q), r = g.makeTensorInfo(a, A[0].dtype, s);
  return o.forEach((h) => g.disposeIntermediateTensorInfo(h)), r;
}
const Vp = { kernelName: je, backendName: "cpu", kernelFunc: Ci };
function SF(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q } = A, { strides: E, pad: i, dataFormat: o, dilations: t, dimRoundingMode: e } = I;
  VA([B, Q], "conv2d");
  const s = $B(o), a = zI(B.shape, Q.shape, E, t, i, e, !1, s), r = a.filterHeight, h = a.filterWidth, w = a.dilationHeight, G = a.dilationWidth, D = a.padInfo.left, l = a.padInfo.top, d = a.dataFormat === "channelsLast", N = new PI(a.outShape, B.dtype), k = zA(B.shape), p = zA(Q.shape), Y = k[0], M = d ? k[1] : k[2], L = d ? k[2] : 1, m = d ? 1 : k[1], x = N.strides[0], T = d ? N.strides[1] : N.strides[2], Z = d ? N.strides[2] : 1, $ = d ? 1 : N.strides[1], AA = g.data.get(B.dataId).values, P = g.data.get(Q.dataId).values, _ = N.values;
  for (let QA = 0; QA < a.batchSize; ++QA) {
    const tA = QA * Y, O = QA * x;
    for (let rA = 0; rA < a.outHeight; ++rA) {
      const eA = O + rA * T, DA = rA * a.strideHeight - l;
      for (let GA = 0; GA < r; ++GA) {
        const NA = DA + GA * w;
        if (NA < 0 || NA >= a.inHeight)
          continue;
        const UA = GA * p[0], pA = tA + NA * M;
        for (let XA = 0; XA < a.outWidth; ++XA) {
          const WA = eA + XA * Z, PA = XA * a.strideWidth - D;
          for (let fA = 0; fA < h; ++fA) {
            const gg = PA + fA * G;
            if (gg < 0 || gg >= a.inWidth)
              continue;
            const Bg = pA + gg * L;
            let lg = UA + fA * p[1];
            for (let jA = 0; jA < a.inChannels; ++jA) {
              const eg = AA[Bg + jA * m];
              for (let rg = 0; rg < a.outChannels; ++rg)
                _[WA + rg * $] += eg * P[lg + rg];
              lg += a.outChannels;
            }
          }
        }
      }
    }
  }
  return g.makeTensorInfo(N.shape, N.dtype, _);
}
const Wp = { kernelName: $e, backendName: "cpu", kernelFunc: SF }, Tp = { kernelName: Kr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, dy: Q } = A, { strides: E, pad: i, dataFormat: o, dimRoundingMode: t, filterShape: e } = I;
  VA([B, Q], "conv2dBackpropFilter");
  const s = $B(o), a = zI(B.shape, e, E, 1, i, t, !1, s), { strideHeight: r, strideWidth: h, filterHeight: w, filterWidth: G } = a, D = a.dataFormat === "channelsLast", l = new PI(a.filterShape, "float32"), d = a.padInfo.left, N = a.padInfo.top, k = g.data.get(B.dataId).values, p = g.data.get(Q.dataId).values, Y = new PI(B.shape, B.dtype, k), M = new PI(Q.shape, Q.dtype, p);
  for (let L = 0; L < w; ++L) {
    const m = Math.max(0, Math.ceil((N - L) / r)), x = Math.min(a.outHeight, (a.inHeight + N - L) / r);
    for (let T = 0; T < G; ++T) {
      const Z = Math.max(0, Math.ceil((d - T) / h)), $ = Math.min(a.outWidth, (a.inWidth + d - T) / h);
      for (let AA = 0; AA < a.inChannels; ++AA)
        for (let P = 0; P < a.outChannels; ++P) {
          let _ = 0;
          for (let QA = 0; QA < a.batchSize; ++QA)
            for (let tA = m; tA < x; ++tA) {
              const O = L + tA * r - N;
              for (let rA = Z; rA < $; ++rA) {
                const eA = T + rA * h - d;
                _ += D ? Y.get(QA, O, eA, AA) * M.get(QA, tA, rA, P) : Y.get(QA, AA, O, eA) * M.get(QA, P, tA, rA);
              }
            }
          l.set(_, L, T, AA, P);
        }
    }
  }
  return g.makeTensorInfo(l.shape, l.dtype, l.values);
} }, Zp = { kernelName: _e, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, filter: Q } = A, { inputShape: E, strides: i, pad: o, dataFormat: t, dimRoundingMode: e } = I;
  VA([B, Q], "conv2dBackpropInput");
  const s = zA(Q.shape), a = zA(B.shape);
  let r = $B(t);
  const h = zI(E, Q.shape, i, 1, o, e, !1, r), w = new PI(h.inShape, "float32"), G = w.values, D = g.data.get(B.dataId).values, l = g.data.get(Q.dataId).values, [d, N, k] = s, { batchSize: p, filterHeight: Y, filterWidth: M, inChannels: L, inHeight: m, inWidth: x, outChannels: T, outHeight: Z, outWidth: $, strideHeight: AA, strideWidth: P } = h;
  r = h.dataFormat;
  const _ = Y - 1 - h.padInfo.top, QA = M - 1 - h.padInfo.left, tA = r === "channelsLast", O = w.strides[0], rA = tA ? w.strides[1] : w.strides[2], eA = tA ? w.strides[2] : 1, DA = tA ? 1 : w.strides[1], GA = a[0], NA = tA ? a[1] : a[2], UA = tA ? a[2] : 1, pA = tA ? 1 : a[1];
  for (let XA = 0; XA < p; ++XA)
    for (let WA = 0; WA < L; ++WA)
      for (let PA = 0; PA < m; ++PA) {
        const fA = PA - _, gg = Math.max(0, Math.ceil(fA / AA)), Bg = Math.min(Z, (Y + fA) / AA);
        for (let lg = 0; lg < x; ++lg) {
          const jA = lg - QA, eg = Math.max(0, Math.ceil(jA / P)), rg = Math.min($, (M + jA) / P);
          let Wg = 0;
          for (let Yg = gg; Yg < Bg; ++Yg) {
            const Xg = Yg * AA - fA;
            for (let hg = eg; hg < rg; ++hg) {
              const wI = GA * XA + NA * Yg + UA * hg, yI = d * (Y - 1 - Xg) + N * (M - 1 - (hg * P - jA)) + k * WA;
              for (let FI = 0; FI < T; ++FI)
                Wg += D[wI + pA * FI] * l[yI + FI];
            }
          }
          G[O * XA + rA * PA + eA * lg + DA * WA] = Wg;
        }
      }
  return g.makeTensorInfo(w.shape, w.dtype, w.values);
} }, Xp = { kernelName: As, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q } = A, { strides: E, pad: i, dilations: o } = I;
  VA([B, Q], "conv3d");
  const t = dQ(B.shape, Q.shape, E, o, i), { filterDepth: e, filterHeight: s, filterWidth: a, dilationDepth: r, dilationHeight: h, dilationWidth: w, padInfo: G } = t, D = G.front, l = G.left, d = G.top, N = new PI(t.outShape, B.dtype), k = g.data.get(B.dataId).values, p = g.data.get(Q.dataId).values, Y = N.values, M = zA(B.shape), L = zA(Q.shape);
  for (let m = 0; m < t.batchSize; ++m) {
    const x = m * M[0], T = m * N.strides[0];
    for (let Z = 0; Z < t.outDepth; ++Z) {
      const $ = T + Z * N.strides[1], AA = Z * t.strideDepth - D;
      for (let P = 0; P < e; ++P) {
        const _ = AA + P * r;
        if (_ < 0 || _ >= t.inDepth)
          continue;
        const QA = P * L[0], tA = x + _ * M[1];
        for (let O = 0; O < t.outHeight; ++O) {
          const rA = $ + O * N.strides[2], eA = O * t.strideHeight - d;
          for (let DA = 0; DA < s; ++DA) {
            const GA = eA + DA * h;
            if (GA < 0 || GA >= t.inHeight)
              continue;
            const NA = QA + DA * L[1], UA = tA + GA * M[2];
            for (let pA = 0; pA < t.outWidth; ++pA) {
              const XA = rA + pA * t.outChannels, WA = pA * t.strideWidth - l;
              for (let PA = 0; PA < a; ++PA) {
                const fA = WA + PA * w;
                if (fA < 0 || fA >= t.inWidth)
                  continue;
                const gg = NA + PA * L[2], Bg = UA + fA * t.inChannels;
                let lg = gg;
                for (let jA = 0; jA < t.inChannels; ++jA) {
                  const eg = k[Bg + jA];
                  for (let rg = 0; rg < t.outChannels; ++rg)
                    Y[XA + rg] += eg * p[lg + rg];
                  lg += t.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return g.makeTensorInfo(N.shape, N.dtype, N.values);
} }, Op = { kernelName: Sr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, dy: Q } = A, { strides: E, pad: i, filterShape: o } = I;
  VA([B, Q], "conv3dBackpropFilterV2");
  const t = zA(B.shape), e = zA(Q.shape), s = dQ(B.shape, o, E, 1, i), a = s.strideDepth, r = s.strideHeight, h = s.strideWidth, w = s.filterDepth, G = s.filterHeight, D = s.filterWidth, l = new PI(s.filterShape, "float32"), d = l.values, [N, k, p, Y] = l.strides, M = g.data.get(Q.dataId).values, [L, m, x, T] = e, Z = g.data.get(B.dataId).values, [$, AA, P, _] = t, QA = s.padInfo.front, tA = s.padInfo.left, O = s.padInfo.top;
  for (let rA = 0; rA < w; ++rA) {
    const eA = Math.max(0, Math.ceil((QA - rA) / a)), DA = Math.min(s.outDepth, (s.inDepth + QA - rA) / a), GA = rA * N;
    for (let NA = 0; NA < G; ++NA) {
      const UA = Math.max(0, Math.ceil((O - NA) / r)), pA = Math.min(s.outHeight, (s.inHeight + O - NA) / r), XA = NA * k + GA;
      for (let WA = 0; WA < D; ++WA) {
        const PA = Math.max(0, Math.ceil((tA - WA) / h)), fA = Math.min(s.outWidth, (s.inWidth + tA - WA) / h), gg = WA * p + XA;
        for (let Bg = 0; Bg < s.inChannels; ++Bg) {
          const lg = Bg * Y + gg;
          for (let jA = 0; jA < s.outChannels; ++jA) {
            let eg = 0;
            for (let rg = 0; rg < s.batchSize; ++rg) {
              const Wg = rg * $, Yg = rg * L;
              for (let Xg = eA; Xg < DA; ++Xg) {
                const hg = (rA + Xg * a - QA) * AA + Wg, wI = Xg * m + Yg;
                for (let yI = UA; yI < pA; ++yI) {
                  const FI = (NA + yI * r - O) * P + hg, VI = yI * x + wI;
                  for (let JI = PA; JI < fA; ++JI) {
                    const fI = JI * T + VI;
                    eg += Z[(WA + JI * h - tA) * _ + FI + Bg] * M[fI + jA];
                  }
                }
              }
            }
            d[lg + jA] = eg;
          }
        }
      }
    }
  }
  return g.makeTensorInfo(l.shape, l.dtype, l.values);
} }, vp = { kernelName: pr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, filter: Q } = A, { pad: E, strides: i, inputShape: o } = I;
  VA([B], "conv3dBackpropInputV2");
  const t = zA(B.shape), e = zA(Q.shape), s = dQ(o, Q.shape, i, 1, E), a = new PI(s.inShape, "float32"), r = a.values, [h, w, G, D] = a.strides, l = g.data.get(B.dataId).values, [d, N, k, p] = t, Y = g.data.get(Q.dataId).values, [M, L, m, x] = e, { batchSize: T, filterDepth: Z, filterHeight: $, filterWidth: AA, inChannels: P, inDepth: _, inHeight: QA, inWidth: tA, outChannels: O, outDepth: rA, outHeight: eA, outWidth: DA, strideDepth: GA, strideHeight: NA, strideWidth: UA } = s, pA = Z - 1 - s.padInfo.front, XA = $ - 1 - s.padInfo.top, WA = AA - 1 - s.padInfo.left;
  for (let PA = 0; PA < T; ++PA)
    for (let fA = 0; fA < P; ++fA)
      for (let gg = 0; gg < _; ++gg) {
        const Bg = gg - pA, lg = Math.max(0, Math.ceil(Bg / GA)), jA = Math.min(rA, (Z + Bg) / GA);
        for (let eg = 0; eg < QA; ++eg) {
          const rg = eg - XA, Wg = Math.max(0, Math.ceil(rg / NA)), Yg = Math.min(eA, ($ + rg) / NA);
          for (let Xg = 0; Xg < tA; ++Xg) {
            const hg = Xg - WA, wI = Math.max(0, Math.ceil(hg / UA)), yI = Math.min(DA, (AA + hg) / UA);
            let FI = 0;
            for (let VI = lg; VI < jA; ++VI) {
              const JI = VI * GA - Bg;
              for (let fI = Wg; fI < Yg; ++fI) {
                const nI = fI * NA - rg;
                for (let dI = wI; dI < yI; ++dI) {
                  const gI = d * PA + N * VI + k * fI + p * dI, pI = M * (Z - 1 - JI) + L * ($ - 1 - nI) + m * (AA - 1 - (dI * UA - hg)) + x * fA;
                  for (let bC = 0; bC < O; ++bC)
                    FI += l[gI + bC] * Y[pI + bC];
                }
              }
            }
            r[h * PA + w * gg + G * eg + D * Xg + fA] = FI;
          }
        }
      }
  return g.makeTensorInfo(a.shape, a.dtype, a.values);
} }, Pp = jg(co, (C) => Math.cos(C)), zp = { kernelName: co, backendName: "cpu", kernelFunc: Pp }, jp = jg(wo, (C) => Math.cosh(C)), $p = { kernelName: wo, backendName: "cpu", kernelFunc: jp }, _p = { kernelName: Ur, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { image: B, boxes: Q, boxInd: E } = A, { cropSize: i, method: o, extrapolationValue: t } = I, [e, s, a, r] = B.shape, h = Q.shape[0], [w, G] = i, D = Sg([h, w, G, r], "float32"), l = g.data.get(Q.dataId).values, d = g.data.get(E.dataId).values, N = g.data.get(B.dataId).values, k = zA(B.shape), p = zA(D.shape);
  for (let Y = 0; Y < h; Y++) {
    const M = 4 * Y, L = l[M], m = l[M + 1], x = l[M + 2], T = l[M + 3], Z = d[Y];
    if (Z >= e)
      continue;
    const $ = w > 1 ? (x - L) * (s - 1) / (w - 1) : 0, AA = G > 1 ? (T - m) * (a - 1) / (G - 1) : 0;
    for (let P = 0; P < w; P++) {
      const _ = w > 1 ? L * (s - 1) + P * $ : 0.5 * (L + x) * (s - 1);
      if (_ < 0 || _ > s - 1)
        for (let QA = 0; QA < G; QA++)
          for (let tA = 0; tA < r; tA++) {
            const O = tA + QA * p[2] + P * p[1] + Y * p[0];
            D.values[O] = t;
          }
      else if (o === "bilinear") {
        const QA = Math.floor(_), tA = Math.ceil(_), O = _ - QA;
        for (let rA = 0; rA < G; rA++) {
          const eA = G > 1 ? m * (a - 1) + rA * AA : 0.5 * (m + T) * (a - 1);
          if (eA < 0 || eA > a - 1) {
            for (let UA = 0; UA < r; UA++) {
              const pA = UA + rA * p[2] + P * p[1] + Y * p[0];
              D.values[pA] = t;
            }
            continue;
          }
          const DA = Math.floor(eA), GA = Math.ceil(eA), NA = eA - DA;
          for (let UA = 0; UA < r; UA++) {
            let pA = UA + DA * k[2] + QA * k[1] + Z * k[0];
            const XA = N[pA];
            pA = UA + GA * k[2] + QA * k[1] + Z * k[0];
            const WA = N[pA];
            pA = UA + DA * k[2] + tA * k[1] + Z * k[0];
            const PA = N[pA];
            pA = UA + GA * k[2] + tA * k[1] + Z * k[0];
            const fA = XA + (WA - XA) * NA, gg = PA + (N[pA] - PA) * NA;
            pA = UA + rA * p[2] + P * p[1] + Y * p[0], D.values[pA] = fA + (gg - fA) * O;
          }
        }
      } else
        for (let QA = 0; QA < G; ++QA) {
          const tA = G > 1 ? m * (a - 1) + QA * AA : 0.5 * (m + T) * (a - 1);
          if (tA < 0 || tA > a - 1) {
            for (let eA = 0; eA < r; eA++) {
              const DA = eA + QA * p[2] + P * p[1] + Y * p[0];
              D.values[DA] = t;
            }
            continue;
          }
          const O = Math.round(tA), rA = Math.round(_);
          for (let eA = 0; eA < r; eA++) {
            const DA = eA + O * k[2] + rA * k[1] + Z * k[0], GA = eA + QA * p[2] + P * p[1] + Y * p[0];
            D.values[GA] = N[DA];
          }
        }
    }
  }
  return g.makeTensorInfo(D.shape, D.dtype, D.values);
} }, AM = { kernelName: Mr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, exclusive: E, reverse: i } = I;
  VA(B, "cumprod");
  const o = GI([Q], B.shape.length);
  let t = B;
  o != null && (t = cC({ inputs: { x: B }, backend: g, attrs: { perm: o } }));
  const e = KI(1, B.shape.length)[0];
  if (e !== t.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${t.shape.length - 1} but got axis=${e}`);
  const s = NC(t.dtype, "int32"), a = wr(cA(t.shape), s), r = g.data.get(t.dataId).values, h = t.shape[t.shape.length - 1], w = i ? (D, l) => D + h - l - 1 : (D, l) => D + l;
  for (let D = 0; D < r.length; D += h)
    for (let l = 0; l < h; l++) {
      const d = w(D, l);
      if (l === 0)
        a[d] = E ? 1 : r[d];
      else {
        const N = w(D, l - 1);
        a[d] = E ? r[N] * a[N] : r[d] * a[N];
      }
    }
  const G = g.makeTensorInfo(t.shape, s, a);
  if (o != null) {
    const D = cC({ inputs: { x: G }, backend: g, attrs: { perm: FQ(o) } });
    return g.disposeIntermediateTensorInfo(G), g.disposeIntermediateTensorInfo(t), D;
  }
  return G;
} }, gM = { kernelName: gs, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, exclusive: E, reverse: i } = I;
  VA(B, "cumsum");
  const o = GI([Q], B.shape.length);
  let t = B;
  o != null && (t = cC({ inputs: { x: B }, backend: g, attrs: { perm: o } }));
  const e = KI(1, B.shape.length)[0];
  if (e !== t.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.shape.length - 1} but got axis=${e}`);
  const s = NC(t.dtype, "int32"), a = gC(cA(t.shape), s), r = g.data.get(t.dataId).values, h = t.shape[t.shape.length - 1], w = i ? (D, l) => D + h - l - 1 : (D, l) => D + l;
  for (let D = 0; D < r.length; D += h)
    for (let l = 0; l < h; l++) {
      const d = w(D, l);
      if (l === 0)
        a[d] = E ? 0 : r[d];
      else {
        const N = w(D, l - 1);
        a[d] = E ? r[N] + a[N] : r[d] + a[N];
      }
    }
  const G = g.makeTensorInfo(t.shape, s, a);
  if (o != null) {
    const D = cC({ inputs: { x: G }, backend: g, attrs: { perm: FQ(o) } });
    return g.disposeIntermediateTensorInfo(G), g.disposeIntermediateTensorInfo(t), D;
  }
  return G;
} }, IM = { kernelName: Yr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, weights: Q } = A, { size: E, binaryOutput: i } = I;
  if (B.shape.length === 1) {
    const o = eD(g.data.get(B.dataId).values, g.data.get(Q.dataId).values, Q.dtype, Q.shape, E);
    return g.makeTensorInfo([E], Q.dtype, o);
  }
  if (B.shape.length === 2) {
    const o = pd(g.bufferSync(B), g.bufferSync(Q), E, i);
    return g.makeTensorInfo(o.shape, Q.dtype, o.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${B.shape.length}.`);
} }, CM = { kernelName: Jr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { blockSize: Q, dataFormat: E } = I;
  f(E === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${E}`);
  const i = B.shape[0], o = B.shape[1], t = B.shape[2], e = B.shape[3], s = o * Q, a = t * Q, r = e / (Q * Q), h = g.data.get(B.dataId).values, w = new Float32Array(i * s * a * r);
  let G = 0;
  for (let D = 0; D < i; ++D)
    for (let l = 0; l < s; ++l) {
      const d = Math.floor(l / Q), N = l % Q;
      for (let k = 0; k < a; ++k) {
        const p = Math.floor(k / Q), Y = (N * Q + k % Q) * r;
        for (let M = 0; M < r; ++M) {
          const L = M + Y + e * (p + t * (d + o * D));
          w[G++] = h[L];
        }
      }
    }
  return g.makeTensorInfo([i, s, a, r], B.dtype, w);
} };
function pF(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q } = A, { strides: E, pad: i, dilations: o, dimRoundingMode: t } = I;
  VA([B, Q], "depthwiseConv2DNative");
  const e = zA(B.shape), s = zA(Q.shape);
  let a = o;
  a == null && (a = [1, 1]), f(IC(E, a), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${E} and dilations '${a}'`);
  const r = zI(B.shape, Q.shape, E, a, i, t, !0), { filterHeight: h, filterWidth: w, dilationHeight: G, dilationWidth: D, padInfo: l } = r, d = l.left, N = l.top, k = r.outChannels / r.inChannels, p = new PI(r.outShape, B.dtype), Y = g.data.get(B.dataId).values, M = g.data.get(Q.dataId).values, L = p.values;
  for (let m = 0; m < r.batchSize; ++m) {
    const x = m * e[0], T = m * p.strides[0];
    for (let Z = 0; Z < r.outHeight; ++Z) {
      const $ = T + Z * p.strides[1], AA = Z * r.strideHeight - N;
      for (let P = 0; P < h; ++P) {
        const _ = AA + P * G;
        if (_ < 0 || _ >= r.inHeight)
          continue;
        const QA = P * s[0], tA = x + _ * e[1];
        for (let O = 0; O < r.outWidth; ++O) {
          const rA = $ + O * p.strides[2], eA = O * r.strideWidth - d;
          for (let DA = 0; DA < w; ++DA) {
            const GA = eA + DA * D;
            if (GA < 0 || GA >= r.inWidth)
              continue;
            const NA = QA + DA * s[1], UA = tA + GA * r.inChannels;
            let pA = rA, XA = NA;
            for (let WA = 0; WA < r.inChannels; ++WA) {
              const PA = Y[UA + WA];
              for (let fA = 0; fA < k; ++fA)
                L[pA + fA] += PA * M[XA + fA];
              pA += k, XA += k;
            }
          }
        }
      }
    }
  }
  return g.makeTensorInfo(p.shape, p.dtype, p.values);
}
const BM = { kernelName: Is, backendName: "cpu", kernelFunc: pF }, QM = { kernelName: fr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, dy: Q } = A, { strides: E, dilations: i, pad: o, dimRoundingMode: t, filterShape: e } = I;
  VA([B, Q], "depthwiseConv2dNativeBackpropFilter");
  const s = zI(B.shape, e, E, i, o, t, !0), { strideHeight: a, strideWidth: r, filterHeight: h, filterWidth: w } = s, G = new PI(s.filterShape, "float32"), D = s.padInfo.left, l = s.padInfo.top, d = s.outChannels / s.inChannels, N = g.data.get(B.dataId).values, k = new PI(B.shape, B.dtype, N), p = g.data.get(Q.dataId).values, Y = new PI(Q.shape, Q.dtype, p);
  for (let M = 0; M < h; ++M) {
    const L = Math.max(0, Math.ceil((l - M) / a)), m = Math.min(s.outHeight, (s.inHeight + l - M) / a);
    for (let x = 0; x < w; ++x) {
      const T = Math.max(0, Math.ceil((D - x) / r)), Z = Math.min(s.outWidth, (s.inWidth + D - x) / r);
      for (let $ = 0; $ < s.outChannels; ++$) {
        const AA = Math.trunc($ / d), P = $ % d;
        let _ = 0;
        for (let QA = 0; QA < s.batchSize; ++QA)
          for (let tA = L; tA < m; ++tA) {
            const O = M + tA * a - l;
            for (let rA = T; rA < Z; ++rA) {
              const eA = x + rA * r - D;
              _ += k.get(QA, O, eA, AA) * Y.get(QA, tA, rA, $);
            }
          }
        G.set(_, M, x, AA, P);
      }
    }
  }
  return g.makeTensorInfo(G.shape, G.dtype, G.values);
} }, EM = { kernelName: Lr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, filter: Q } = A, { strides: E, dilations: i, pad: o, dimRoundingMode: t, inputShape: e } = I;
  VA([B, Q], "depthwiseConv2DNativeBackpropInput");
  const s = zA(B.shape), a = zA(Q.shape), r = zI(e, Q.shape, E, i, o, t, !0), h = new PI(r.inShape, "float32"), w = h.values, [G, D, l] = h.strides, d = g.data.get(B.dataId).values, [N, k, p] = s, Y = g.data.get(Q.dataId).values, [M, L, m] = a, { batchSize: x, filterHeight: T, filterWidth: Z, inChannels: $, inHeight: AA, inWidth: P, outChannels: _, outHeight: QA, outWidth: tA, strideHeight: O, strideWidth: rA } = r, eA = T - 1 - r.padInfo.top, DA = Z - 1 - r.padInfo.left, GA = _ / $;
  for (let NA = 0; NA < x; ++NA)
    for (let UA = 0; UA < $; ++UA)
      for (let pA = 0; pA < AA; ++pA) {
        const XA = pA - eA, WA = Math.max(0, Math.ceil(XA / O)), PA = Math.min(QA, (T + XA) / O);
        for (let fA = 0; fA < P; ++fA) {
          const gg = fA - DA, Bg = Math.max(0, Math.ceil(gg / rA)), lg = Math.min(tA, (Z + gg) / rA);
          let jA = 0;
          for (let eg = WA; eg < PA; ++eg) {
            const rg = eg * O - XA;
            for (let Wg = Bg; Wg < lg; ++Wg) {
              const Yg = N * NA + k * eg + p * Wg, Xg = M * (T - 1 - rg) + L * (Z - 1 - (Wg * rA - gg)) + m * UA;
              for (let hg = 0; hg < GA; ++hg)
                jA += d[Yg + (UA * GA + hg)] * Y[Xg + hg];
            }
          }
          w[G * NA + D * pA + l * fA + UA] = jA;
        }
      }
  return g.makeTensorInfo(h.shape, h.dtype, h.values);
} }, iM = { kernelName: pl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { x: I } = A, B = cA(I.shape), Q = g.data.get(I.dataId).values, E = Sg([B, B], I.dtype), i = E.values;
  for (let t = 0; t < Q.length; t++)
    i[t * B + t] = Q[t];
  const o = [...I.shape, ...I.shape];
  return g.makeTensorInfo(o, E.dtype, E.values);
} }, oM = { kernelName: Cs, backendName: "cpu", kernelFunc: ({ inputs: C, backend: A, attrs: g }) => {
  const { x: I, filter: B } = C, { strides: Q, pad: E, dilations: i } = g, o = A, t = o.data.get(I.dataId).values, e = I.shape.length, s = o.data.get(B.dataId).values, a = B.shape.length, { batchSize: r, inHeight: h, inWidth: w, inChannels: G, outHeight: D, outWidth: l, padInfo: d, strideHeight: N, strideWidth: k, filterHeight: p, filterWidth: Y, dilationHeight: M, dilationWidth: L, outShape: m } = Qt(I.shape, B.shape, Q, E, "NHWC", i), x = cA(m), T = m.length, Z = NI(I.dtype, x);
  for (let $ = 0; $ < r; ++$)
    for (let AA = 0; AA < D; ++AA) {
      const P = AA * N - d.top;
      for (let _ = 0; _ < l; ++_) {
        const QA = _ * k - d.left;
        for (let tA = 0; tA < G; ++tA) {
          let O = Number.MIN_SAFE_INTEGER;
          for (let rA = 0; rA < p; ++rA) {
            const eA = P + rA * M;
            if (eA >= 0 && eA < h)
              for (let DA = 0; DA < Y; ++DA) {
                const GA = QA + DA * L;
                if (GA >= 0 && GA < w) {
                  const NA = KB([$, eA, GA, tA], e, zA(I.shape)), UA = KB([rA, DA, tA], a, zA(B.shape)), pA = t[NA] + s[UA];
                  pA > O && (O = pA);
                }
              }
          }
          Z[KB([$, AA, _, tA], T, zA(m))] = O;
        }
      }
    }
  return { dataId: o.write(aE(Z, I.dtype), m, I.dtype), shape: m, dtype: I.dtype };
} }, tM = { kernelName: wn, backendName: "cpu", kernelFunc: ({ inputs: C, backend: A, attrs: g }) => {
  const { x: I, filter: B, dy: Q } = C, { strides: E, pad: i, dilations: o } = g, t = A, e = aB(I.shape, t.data.get(I.dataId).values), s = aB(B.shape, t.data.get(B.dataId).values), { batchSize: a, inHeight: r, inWidth: h, inChannels: w, outHeight: G, outWidth: D, padInfo: l, strideHeight: d, strideWidth: N, filterHeight: k, filterWidth: p, dilationHeight: Y, dilationWidth: M, outShape: L } = Qt(I.shape, B.shape, E, i, "NHWC", o);
  f(Q.rank === L.length, () => `Error in ${wn}, dy must have the same rank as output ${L.length}, but got ${Q.rank}`);
  const m = aB(L, t.data.get(Q.dataId).values), x = ul(B.shape, B.dtype);
  for (let T = 0; T < a; ++T)
    for (let Z = 0; Z < G; ++Z) {
      const $ = Z * d - l.top;
      for (let AA = 0; AA < D; ++AA) {
        const P = AA * N - l.left;
        for (let _ = 0; _ < w; ++_) {
          let QA = Number.MIN_SAFE_INTEGER, tA = 0, O = 0;
          for (let rA = 0; rA < k; ++rA) {
            const eA = $ + rA * Y;
            if (eA >= 0 && eA < r)
              for (let DA = 0; DA < p; ++DA) {
                const GA = P + DA * M;
                if (GA >= 0 && GA < h) {
                  const NA = e[T][eA][GA][_] + s[rA][DA][_];
                  NA > QA && (QA = NA, tA = rA, O = DA);
                }
              }
          }
          x[tA][O][_] += m[T][Z][AA][_];
        }
      }
    }
  return { dataId: t.write(aE(x, I.dtype), B.shape, B.dtype), shape: B.shape, dtype: B.dtype };
} }, eM = { kernelName: cn, backendName: "cpu", kernelFunc: ({ inputs: C, backend: A, attrs: g }) => {
  const { x: I, filter: B, dy: Q } = C, { strides: E, pad: i, dilations: o } = g, t = A, e = aB(I.shape, t.data.get(I.dataId).values), s = aB(B.shape, t.data.get(B.dataId).values), { batchSize: a, inHeight: r, inWidth: h, inChannels: w, outHeight: G, outWidth: D, padInfo: l, strideHeight: d, strideWidth: N, filterHeight: k, filterWidth: p, dilationHeight: Y, dilationWidth: M, outShape: L } = Qt(I.shape, B.shape, E, i, "NHWC", o);
  f(Q.rank === L.length, () => `Error in ${cn}, dy must have the same rank as output ${L.length}, but got ${Q.rank}`);
  const m = aB(L, t.data.get(Q.dataId).values), x = ul(I.shape, I.dtype);
  for (let T = 0; T < a; ++T)
    for (let Z = 0; Z < G; ++Z) {
      const $ = Z * d - l.top;
      for (let AA = 0; AA < D; ++AA) {
        const P = AA * N - l.left;
        for (let _ = 0; _ < w; ++_) {
          let QA = Number.MIN_SAFE_INTEGER, tA = $ < 0 ? 0 : $, O = P < 0 ? 0 : P;
          for (let rA = 0; rA < k; ++rA) {
            const eA = $ + rA * Y;
            if (eA >= 0 && eA < r)
              for (let DA = 0; DA < p; ++DA) {
                const GA = P + DA * M;
                if (GA >= 0 && GA < h) {
                  const NA = e[T][eA][GA][_] + s[rA][DA][_];
                  NA > QA && (QA = NA, tA = eA, O = GA);
                }
              }
          }
          x[T][tA][O][_] += m[T][Z][AA][_];
        }
      }
    }
  return { dataId: t.write(aE(x, I.dtype), I.shape, I.dtype), shape: I.shape, dtype: I.dtype };
} }, sM = { kernelName: "Draw", backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { image: B } = A, { canvas: Q, options: E } = I, { contextOptions: i, imageOptions: o } = E || {}, t = (o == null ? void 0 : o.alpha) || 1, e = (i == null ? void 0 : i.contextType) || "2d";
  if (e !== "2d")
    throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);
  const s = Q.getContext(e, (i == null ? void 0 : i.contextAttributes) || {});
  if (s == null)
    throw new Error(`Could not get the context with ${e} type.`);
  const [a, r] = B.shape.slice(0, 2), h = B.shape.length === 2 ? 1 : B.shape[2], w = g.data.get(B.dataId).values, G = B.dtype === "float32" ? 255 : 1, D = new Uint8ClampedArray(r * a * 4);
  for (let d = 0; d < a * r; ++d) {
    const N = [0, 0, 0, 255 * t];
    for (let p = 0; p < h; p++) {
      const Y = w[d * h + p];
      if (B.dtype === "float32") {
        if (Y < 0 || Y > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${Y}.`);
      } else if (B.dtype === "int32" && (Y < 0 || Y > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${Y}.`);
      h === 1 ? (N[0] = Y * G, N[1] = Y * G, N[2] = Y * G) : N[p] = Y * G;
    }
    const k = 4 * d;
    D[k + 0] = Math.round(N[0]), D[k + 1] = Math.round(N[1]), D[k + 2] = Math.round(N[2]), D[k + 3] = Math.round(N[3]);
  }
  Q.width = r, Q.height = a;
  const l = new ImageData(D, r, a);
  return s.putImageData(l, 0, 0), B;
} };
function Dt(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I;
  let i;
  VA(B, "sum"), i = B.dtype === "bool" ? GQ({ inputs: { x: B }, backend: g, attrs: { dtype: "int32" } }) : pB({ inputs: { x: B }, backend: g });
  const o = i.shape.length, t = Kg(Q, i.shape), e = GI(t, o);
  let s = t, a = i;
  e != null && (a = cC({ inputs: { x: i }, backend: g, attrs: { perm: e } }), s = KI(s.length, o)), jI("sum", s, a.shape.length);
  const [r, h] = OI(a.shape, s);
  let w = Me(g, r, NC(a.dtype, "int32"));
  const G = cA(h), D = g.data.get(w.dataId).values, l = g.data.get(a.dataId).values;
  for (let d = 0; d < D.length; ++d) {
    const N = d * G;
    let k = 0;
    for (let p = 0; p < G; ++p)
      k += l[N + p];
    D[d] = k;
  }
  if (E) {
    const d = w;
    w = oI({ inputs: { x: w }, backend: g, attrs: { shape: YI(w.shape, t) } }), g.disposeIntermediateTensorInfo(d);
  }
  return g.disposeIntermediateTensorInfo(i), e != null && g.disposeIntermediateTensorInfo(a), w;
}
const aM = { kernelName: Ls, backendName: "cpu", kernelFunc: Dt }, nM = { kernelName: Ml, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { equation: B } = I, Q = A, { allDims: E, summedDims: i, idDims: o } = Ph(B, Q.length);
  jh(E.length, o, Q);
  const { path: t, steps: e } = $h(i, o), s = e.length;
  let a = null, r = E.length;
  const h = [];
  for (let w = 0; w < s; ++w) {
    for (const G of e[w]) {
      const { permutationIndices: D, expandDims: l } = zh(r, o[G]);
      let d;
      _h(D) ? d = Q[G] : (d = cC({ inputs: { x: Q[G] }, backend: g, attrs: { perm: D } }), h.push(d));
      const N = d.shape.slice();
      for (let k = 0; k < l.length; ++k)
        N.splice(l[k], 0, 1);
      Zg(d.shape, N) || (d = oI({ inputs: { x: d }, backend: g, attrs: { shape: N } }), h.push(d)), a === null ? a = d : (a = Qa({ inputs: { a: d, b: a }, backend: g }), h.push(a));
    }
    w < s - 1 && (t[w] >= 0 && (a = Dt({ inputs: { x: a }, backend: g, attrs: { axis: t[w] - (E.length - r), keepDims: !1 } }), h.push(a)), r--);
  }
  for (const w of h)
    w !== a && g.disposeIntermediateTensorInfo(w);
  return a;
} }, rM = { kernelName: mr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { dy: I, y: B } = A;
  VA([I, B], "eluGrad");
  const Q = new Float32Array(cA(B.shape)), E = g.data.get(B.dataId).values, i = g.data.get(I.dataId).values;
  for (let o = 0; o < E.length; ++o) {
    const t = E[o];
    Q[o] = t >= 0 ? i[o] : i[o] * (t + 1);
  }
  return g.makeTensorInfo(B.shape, "float32", Q);
} }, hM = jg(yo, (C) => {
  const A = Math.sign(C), g = Math.abs(C), I = 1 / (1 + 0.3275911 * g);
  return A * (1 - ((((1.061405429 * I - 1.453152027) * I + 1.421413741) * I - 0.284496736) * I + 0.254829592) * I * Math.exp(-g * g));
}), DM = { kernelName: yo, backendName: "cpu", kernelFunc: hM };
function Je(C) {
  const { inputs: A, backend: g, attrs: I } = C, { input: B } = A, { dim: Q } = I, E = B.shape.length, i = B.shape.slice();
  let o = Q;
  return Q < 0 && (f(-(E + 1) <= Q, () => `Axis must be in the interval [${-(E + 1)}, ${E}]`), o = E + Q + 1), i.splice(o, 0, 1), oI({ inputs: { x: B }, backend: g, attrs: { shape: i } });
}
const cM = { kernelName: Qs, backendName: "cpu", kernelFunc: Je }, wM = SI((C, A) => C / A), DD = qI(lo, wM), or = { kernelName: lo, backendName: "cpu", kernelFunc: DD };
function MF(C, A, g) {
  const I = C.shape, B = I[0], Q = I[1], E = g.data.get(C.dataId), i = E.complexTensorInfos.real, o = E.complexTensorInfos.imag, t = [B, Q], e = cA(t), s = AC("float32", e), a = AC("float32", e);
  for (let G = 0; G < B; G++) {
    const D = oE({ inputs: { x: i }, backend: g, attrs: { begin: [G, 0], size: [1, Q] } }), l = oE({ inputs: { x: o }, backend: g, attrs: { begin: [G, 0], size: [1, Q] } }), d = RC({ inputs: { real: D, imag: l }, backend: g }), { real: N, imag: k } = lM(d, A, g), p = OB(N, k);
    for (let Y = 0; Y < Q; Y++) {
      const M = vh(p, Y);
      s[G * Q + Y] = M.real, a[G * Q + Y] = M.imag;
    }
    g.disposeIntermediateTensorInfo(D), g.disposeIntermediateTensorInfo(l), g.disposeIntermediateTensorInfo(d);
  }
  const r = g.makeTensorInfo(t, "float32", s), h = g.makeTensorInfo(t, "float32", a), w = RC({ inputs: { real: r, imag: h }, backend: g });
  return g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(h), w;
}
function lM(C, A, g) {
  const I = cA(C.shape), B = g.data.get(C.dataId), Q = g.data.get(B.complexTensorInfos.real.dataId).values, E = g.data.get(B.complexTensorInfos.imag.dataId).values;
  if (!((i = I) & i - 1)) {
    const o = tr(Q, E, I, A, g), t = [C.shape[0], C.shape[1]];
    if (A) {
      const e = g.makeTensorInfo(t, "float32", o.real), s = g.makeTensorInfo(t, "float32", o.imag), a = g.makeTensorInfo([], "float32", yQ(I, "float32")), r = pB({ inputs: { x: a }, backend: g }), h = or.kernelFunc({ inputs: { a: e, b: a }, backend: g }), w = or.kernelFunc({ inputs: { a: s, b: r }, backend: g }), G = g.data.get(h.dataId).values, D = g.data.get(w.dataId).values;
      return g.disposeIntermediateTensorInfo(e), g.disposeIntermediateTensorInfo(s), g.disposeIntermediateTensorInfo(a), g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), { real: G, imag: D };
    }
    return o;
  }
  {
    const o = function(t, e, s) {
      const a = new Float32Array(2 * e);
      for (let r = 0; r < e; r++) {
        let h = 0, w = 0;
        for (let G = 0; G < e; G++) {
          const D = uy(r * G, e, s), l = vh(t, G);
          h += l.real * D.real - l.imag * D.imag, w += l.real * D.imag + l.imag * D.real;
        }
        s && (h /= e, w /= e), Ry(a, h, w, r);
      }
      return a;
    }(OB(Q, E), I, A);
    return yy(o);
  }
  var i;
}
function tr(C, A, g, I, B) {
  if (g === 1)
    return { real: C, imag: A };
  const Q = OB(C, A), E = g / 2, i = dy(Q), o = i.real, t = i.imag, e = [o.length], s = B.makeTensorInfo(e, "float32", o), a = B.makeTensorInfo(e, "float32", t), r = RC({ inputs: { real: s, imag: a }, backend: B }), h = Fy(Q), w = h.real, G = h.imag, D = [w.length], l = B.makeTensorInfo(D, "float32", w), d = B.makeTensorInfo(D, "float32", G), N = RC({ inputs: { real: l, imag: d }, backend: B }), k = tr(o, t, E, I, B), p = k.real, Y = k.imag, M = [p.length], L = B.makeTensorInfo(M, "float32", p), m = B.makeTensorInfo(M, "float32", Y), x = RC({ inputs: { real: L, imag: m }, backend: B }), T = tr(w, G, E, I, B), Z = T.real, $ = T.imag, AA = [Z.length], P = B.makeTensorInfo(AA, "float32", Z), _ = B.makeTensorInfo(AA, "float32", $), QA = RC({ inputs: { real: P, imag: _ }, backend: B }), tA = Ny(g, I), O = [tA.real.length], rA = B.makeTensorInfo(O, "float32", tA.real), eA = B.makeTensorInfo(O, "float32", tA.imag), DA = RC({ inputs: { real: rA, imag: eA }, backend: B }), GA = Qa({ inputs: { a: DA, b: QA }, backend: B }), NA = gi({ inputs: { a: x, b: GA }, backend: B }), UA = rD({ inputs: { a: x, b: GA }, backend: B }), pA = iE({ inputs: { input: NA }, backend: B }), XA = iE({ inputs: { input: UA }, backend: B }), WA = Ii({ inputs: { input: NA }, backend: B }), PA = Ii({ inputs: { input: UA }, backend: B }), fA = Ci({ inputs: [pA, XA], backend: B, attrs: { axis: 0 } }), gg = Ci({ inputs: [WA, PA], backend: B, attrs: { axis: 0 } }), Bg = B.data.get(fA.dataId).values, lg = B.data.get(gg.dataId).values;
  return B.disposeIntermediateTensorInfo(s), B.disposeIntermediateTensorInfo(a), B.disposeIntermediateTensorInfo(r), B.disposeIntermediateTensorInfo(l), B.disposeIntermediateTensorInfo(d), B.disposeIntermediateTensorInfo(N), B.disposeIntermediateTensorInfo(L), B.disposeIntermediateTensorInfo(m), B.disposeIntermediateTensorInfo(x), B.disposeIntermediateTensorInfo(P), B.disposeIntermediateTensorInfo(_), B.disposeIntermediateTensorInfo(QA), B.disposeIntermediateTensorInfo(rA), B.disposeIntermediateTensorInfo(eA), B.disposeIntermediateTensorInfo(DA), B.disposeIntermediateTensorInfo(GA), B.disposeIntermediateTensorInfo(NA), B.disposeIntermediateTensorInfo(UA), B.disposeIntermediateTensorInfo(pA), B.disposeIntermediateTensorInfo(WA), B.disposeIntermediateTensorInfo(XA), B.disposeIntermediateTensorInfo(PA), B.disposeIntermediateTensorInfo(fA), B.disposeIntermediateTensorInfo(gg), { real: Bg, imag: lg };
}
const GM = { kernelName: br, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { input: I } = A, B = cA(I.shape), Q = I.shape[I.shape.length - 1], E = oI({ inputs: { x: I }, backend: g, attrs: { shape: [B / Q, Q] } }), i = MF(E, !1, g), o = oI({ inputs: { x: i }, backend: g, attrs: { shape: I.shape } });
  return g.disposeIntermediateTensorInfo(E), g.disposeIntermediateTensorInfo(i), o;
} };
function cD(C) {
  const { backend: A, attrs: g } = C, { shape: I, value: B, dtype: Q } = g, E = Q || Bi(B), i = NI(E, cA(I));
  return function(o, t, e) {
    o.fill(t);
  }(i, B), A.makeTensorInfo(I, E, i);
}
const yM = { kernelName: Hr, backendName: "cpu", kernelFunc: cD }, dM = { kernelName: xr, backendName: "cpu", kernelFunc: ({ inputs: C, attrs: A, backend: g }) => {
  const { image: I } = C, B = g, Q = AC(I.dtype, cA(I.shape)), [E, i, o, t] = I.shape, e = B.data.get(I.dataId).values;
  for (let s = 0; s < E; s++) {
    const a = s * o * i * t;
    for (let r = 0; r < i; r++) {
      const h = r * (o * t);
      for (let w = 0; w < o; w++) {
        const G = w * t;
        for (let D = 0; D < t; D++) {
          const l = Math.round(o - w - 1), d = a + h + G + D;
          let N = e[d];
          l >= 0 && l < o && (N = e[a + h + l * t + D]), Q[d] = N;
        }
      }
    }
  }
  return { dataId: B.write(Q, I.shape, I.dtype), shape: I.shape, dtype: I.dtype };
} }, FM = { kernelName: te, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q, bias: E, preluActivationWeights: i } = A, { strides: o, pad: t, dataFormat: e, dilations: s, dimRoundingMode: a, activation: r, leakyreluAlpha: h } = I;
  let w = SF({ inputs: { x: B, filter: Q }, backend: g, attrs: { strides: o, pad: t, dataFormat: e, dilations: s, dimRoundingMode: a } });
  if (E) {
    const G = w;
    if (e === "NCHW" && E.shape.length === 1 && E.shape[0] !== 1) {
      const D = oI({ inputs: { x: E }, backend: g, attrs: { shape: [E.shape[0], 1, 1] } });
      w = gi({ inputs: { a: w, b: D }, backend: g }), g.disposeIntermediateTensorInfo(D);
    } else
      w = gi({ inputs: { a: w, b: E }, backend: g });
    g.disposeIntermediateTensorInfo(G);
  }
  if (r) {
    const G = w;
    if (e === "NCHW" && r === "prelu" && i.shape.length === 1 && i.shape[0] !== 1) {
      const D = oI({ inputs: { x: i }, backend: g, attrs: { shape: [i.shape[0], 1, 1] } });
      w = Ye(g, w, r, D, h), g.disposeIntermediateTensorInfo(D);
    } else
      w = Ye(g, w, r, i, h);
    g.disposeIntermediateTensorInfo(G);
  }
  return w;
} }, RM = { kernelName: zl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q, bias: E, preluActivationWeights: i } = A, { strides: o, pad: t, dataFormat: e, dilations: s, dimRoundingMode: a, activation: r, leakyreluAlpha: h } = I;
  let w = pF({ inputs: { x: B, filter: Q }, backend: g, attrs: { strides: o, pad: t, dataFormat: e, dilations: s, dimRoundingMode: a } });
  if (E) {
    const G = w;
    w = gi({ inputs: { a: w, b: E }, backend: g }), g.disposeIntermediateTensorInfo(G);
  }
  if (r) {
    const G = w;
    w = Ye(g, w, r, i, h), g.disposeIntermediateTensorInfo(G);
  }
  return w;
} }, NM = { kernelName: Ul, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { params: I, indices: B } = A, Q = cA(I.shape), E = B.shape, i = E[E.length - 1], [o, t, e, s] = Lh(I, B);
  if (t === 0)
    return g.makeTensorInfo(o, I.dtype, []);
  const a = qd(g.data.get(B.dataId).values, g.bufferSync(I), I.dtype, t, i, e, s, I.shape, Q);
  return g.makeTensorInfo(o, I.dtype, a.values);
} }, uM = { kernelName: is, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, indices: Q } = A, { axis: E, batchDims: i } = I;
  VA([B, Q], "gatherV2");
  const o = Kg(E, B.shape)[0], t = g.data.get(Q.dataId).values, e = B.shape[o];
  for (let d = 0; d < t.length; ++d) {
    const N = t[d];
    f(N <= e - 1 && N >= 0, () => `GatherV2: the index value ${N} is not in [0, ${e - 1}]`);
  }
  let s = i;
  i == null && (s = 0);
  const a = cA(Q.shape), r = gD(B, Q, o, s), h = oI({ inputs: { x: B }, backend: g, attrs: { shape: [r.batchSize, r.outerSize, r.dimSize, r.sliceSize] } }), w = oI({ inputs: { x: Q }, backend: g, attrs: { shape: [r.batchSize, a / r.batchSize] } }), G = [r.batchSize, r.outerSize, a / r.batchSize, r.sliceSize], D = g.bufferSync(w), l = Vd(g.bufferSync(h), D, G);
  return g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), g.makeTensorInfo(r.outputShape, l.dtype, l.values);
} }, kM = { kernelName: qr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { input: I } = A, B = cA(I.shape), Q = I.shape[I.shape.length - 1], E = oI({ inputs: { x: I }, backend: g, attrs: { shape: [B / Q, Q] } }), i = MF(E, !0, g), o = oI({ inputs: { x: i }, backend: g, attrs: { shape: I.shape } });
  return g.disposeIntermediateTensorInfo(E), g.disposeIntermediateTensorInfo(i), o;
} }, KM = jg(So, (C) => Number.isFinite(C) ? 1 : 0, "bool"), SM = { kernelName: So, backendName: "cpu", kernelFunc: KM }, pM = jg(po, (C) => Math.abs(C) === 1 / 0 ? 1 : 0, "bool"), MM = { kernelName: po, backendName: "cpu", kernelFunc: pM }, UM = jg(Mo, (C) => Number.isNaN(C) ? 1 : 0, "bool"), YM = { kernelName: Mo, backendName: "cpu", kernelFunc: UM }, JM = { kernelName: Yl, backendName: "cpu", kernelFunc: function(C) {
  const { backend: A, attrs: g } = C, { start: I, stop: B, num: Q } = g, E = Od(I, B, Q);
  return A.makeTensorInfo([E.length], "float32", E);
} }, fM = jg(Yo, (C) => Math.log1p(C)), LM = { kernelName: Yo, backendName: "cpu", kernelFunc: fM }, mM = SI((C, A) => C && A), bM = qI(as, mM, null, "bool"), HM = { kernelName: as, backendName: "cpu", kernelFunc: bM }, xM = jg(ns, (C) => C ? 0 : 1, "bool"), qM = { kernelName: ns, backendName: "cpu", kernelFunc: xM }, VM = SI((C, A) => C || A), WM = qI(rs, VM, null, "bool"), TM = { kernelName: rs, backendName: "cpu", kernelFunc: WM }, ZM = { kernelName: hs, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { depthRadius: Q, bias: E, alpha: i, beta: o } = I;
  VA(B, "LRN");
  const t = B.shape[3], e = t - 1, s = g.data.get(B.dataId).values, a = cA(B.shape), r = new Float32Array(a);
  function h(w) {
    const G = w % t;
    let D = w - G + Math.max(0, G - Q);
    const l = w - G + Math.min(G + Q, e);
    let d = 0;
    for (; D <= l; D++) {
      const N = s[D];
      d += N * N;
    }
    return d;
  }
  for (let w = 0; w < a; w++) {
    const G = h(w), D = s[w] * Math.pow(E + i * G, -o);
    r[w] = D;
  }
  return g.makeTensorInfo(B.shape, B.dtype, r);
} }, XM = { kernelName: Wr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, y: Q, dy: E } = A, { depthRadius: i, bias: o, alpha: t, beta: e } = I;
  VA(E, "LRNGrad");
  const s = cA(E.shape), a = E.shape[3], r = g.data.get(E.dataId).values, h = g.data.get(B.dataId).values, w = g.data.get(Q.dataId).values, G = new Float32Array(s), D = s;
  for (let l = 0; l < D; l++) {
    const d = l % a, N = l - d + Math.max(0, d - i), k = l - d + Math.min(a, d + i + 1);
    let p = 0;
    for (let Y = N; Y < k; Y++)
      p += Math.pow(h[Y], 2);
    p = t * p + o;
    for (let Y = N; Y < k; Y++) {
      let M = -2 * t * e * h[Y] * w[l] / p;
      l === Y && (M += Math.pow(p, -e)), M *= r[l], G[Y] += M;
    }
  }
  return g.makeTensorInfo(E.shape, B.dtype, G);
} };
function UF(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { reductionIndices: Q, keepDims: E } = I, i = g;
  let o = B.shape;
  const t = o.length, e = Kg(Q, o);
  let s = e;
  const a = GI(s, t);
  let r = i.data.get(B.dataId).values;
  if (a != null) {
    const d = new Array(t);
    for (let N = 0; N < d.length; N++)
      d[N] = o[a[N]];
    r = aD(r, o, B.dtype, a, d), s = KI(s.length, t), o = d;
  }
  VA(B, "max"), jI("max", s, t);
  const [h, w] = OI(o, s), G = Pd(r, cA(w), h, B.dtype), D = i.write(G, h, B.dtype);
  let l = h;
  return E && (l = YI(h, e)), { dataId: D, shape: l, dtype: B.dtype };
}
const OM = { kernelName: Ds, backendName: "cpu", kernelFunc: UF }, vM = { kernelName: cs, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A;
  VA(B, "maxPool");
  const { filterSize: Q, strides: E, pad: i, dimRoundingMode: o } = I;
  f(IC(E, 1), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${E} and dilations '1'`);
  const t = _C(B.shape, Q, E, 1, i, o);
  let e;
  if (t.filterWidth === 1 && t.filterHeight === 1 && Zg(t.inShape, t.outShape))
    e = pB({ inputs: { x: B }, backend: g });
  else {
    const s = g.data.get(B.dataId).values, a = zA(B.shape), r = hD(s, B.shape, B.dtype, a, t, "max");
    e = g.makeTensorInfo(t.outShape, B.dtype, r.values);
  }
  return e;
} }, PM = { kernelName: ws, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { filterSize: Q, strides: E, pad: i, dimRoundingMode: o, dataFormat: t } = I;
  VA(B, "maxPool3d");
  const e = jB(B.shape, Q, E, 1, i, o, t), s = KF(g.data.get(B.dataId).values, B.shape, B.dtype, zA(B.shape), e, "max");
  return g.makeTensorInfo(s.shape, "float32", s.values);
} }, zM = { kernelName: Zr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q } = A, { filterSize: E, strides: i, pad: o, dimRoundingMode: t } = I;
  VA([B, Q], "maxPool3DGrad");
  const e = jB(Q.shape, E, i, 1, o, t), s = function(m, x) {
    const T = Sg(x.outShape, "int32"), Z = x.strideDepth, $ = x.strideHeight, AA = x.strideWidth, P = x.dilationDepth, _ = x.dilationHeight, QA = x.dilationWidth, tA = x.effectiveFilterDepth, O = x.effectiveFilterHeight, rA = x.effectiveFilterWidth, eA = x.padInfo.front, DA = x.padInfo.top, GA = x.padInfo.left;
    for (let NA = 0; NA < x.batchSize; ++NA)
      for (let UA = 0; UA < x.inChannels; ++UA)
        for (let pA = 0; pA < x.outDepth; ++pA) {
          const XA = pA * Z - eA;
          let WA = XA;
          for (; WA < 0; )
            WA += P;
          const PA = Math.min(x.inDepth, tA + XA);
          for (let fA = 0; fA < x.outHeight; ++fA) {
            const gg = fA * $ - DA;
            let Bg = gg;
            for (; Bg < 0; )
              Bg += _;
            const lg = Math.min(x.inHeight, O + gg);
            for (let jA = 0; jA < x.outWidth; ++jA) {
              const eg = jA * AA - GA;
              let rg = eg;
              for (; rg < 0; )
                rg += QA;
              const Wg = Math.min(x.inWidth, rA + eg);
              let Yg = Number.NEGATIVE_INFINITY, Xg = -1;
              for (let hg = WA; hg < PA; hg += P) {
                const wI = hg - XA;
                for (let yI = Bg; yI < lg; yI += _) {
                  const FI = yI - gg;
                  for (let VI = rg; VI < Wg; VI += QA) {
                    const JI = VI - eg, fI = m.get(NA, hg, yI, VI, UA);
                    fI >= Yg && (Yg = fI, Xg = wI * O * rA + FI * O + JI);
                  }
                }
              }
              T.set(Xg, NA, pA, fA, jA, UA);
            }
          }
        }
    return T;
  }(g.bufferSync(Q), e), a = e.strideDepth, r = e.strideHeight, h = e.strideWidth, w = e.dilationDepth, G = e.dilationHeight, D = e.dilationWidth, l = e.effectiveFilterDepth, d = e.effectiveFilterHeight, N = e.effectiveFilterWidth, k = l - 1 - e.padInfo.front, p = N - 1 - e.padInfo.left, Y = d - 1 - e.padInfo.top, M = Sg(Q.shape, "float32"), L = g.bufferSync(B);
  for (let m = 0; m < e.batchSize; ++m)
    for (let x = 0; x < e.inChannels; ++x)
      for (let T = 0; T < e.inDepth; ++T)
        for (let Z = 0; Z < e.inHeight; ++Z)
          for (let $ = 0; $ < e.inWidth; ++$) {
            const AA = T - k, P = Z - Y, _ = $ - p;
            let QA = 0;
            for (let tA = 0; tA < l; tA += w) {
              const O = (AA + tA) / a;
              if (!(O < 0 || O >= e.outDepth || Math.floor(O) !== O))
                for (let rA = 0; rA < d; rA += G) {
                  const eA = (P + rA) / r;
                  if (!(eA < 0 || eA >= e.outHeight || Math.floor(eA) !== eA))
                    for (let DA = 0; DA < N; DA += D) {
                      const GA = (_ + DA) / h;
                      if (GA < 0 || GA >= e.outWidth || Math.floor(GA) !== GA)
                        continue;
                      const NA = l * d * N - 1 - s.get(m, O, eA, GA, x) === tA * d * N + rA * N + DA ? 1 : 0;
                      NA !== 0 && (QA += L.get(m, O, eA, GA, x) * NA);
                    }
                }
            }
            M.set(QA, m, T, Z, $, x);
          }
  return g.makeTensorInfo(M.shape, M.dtype, M.values);
} }, jM = { kernelName: Tr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q, output: E } = A, i = Q;
  VA([Q, E], "maxPoolGrad");
  const { filterSize: o, strides: t, pad: e, dimRoundingMode: s } = I, a = _C(i.shape, o, t, 1, e, s), r = g.data.get(i.dataId).values, h = Sg(a.outShape, i.dtype, kF(r, i.shape, i.dtype, a).values), w = a.strideHeight, G = a.strideWidth, D = a.dilationHeight, l = a.dilationWidth, d = a.effectiveFilterHeight, N = a.effectiveFilterWidth, k = N - 1 - a.padInfo.left, p = d - 1 - a.padInfo.top, Y = Sg(i.shape, "float32"), M = g.data.get(B.dataId).values, L = Sg(B.shape, "float32", M);
  for (let m = 0; m < a.batchSize; ++m)
    for (let x = 0; x < a.inChannels; ++x)
      for (let T = 0; T < a.inHeight; ++T)
        for (let Z = 0; Z < a.inWidth; ++Z) {
          const $ = T - p, AA = Z - k;
          let P = 0;
          for (let _ = 0; _ < d; _ += D) {
            const QA = ($ + _) / w;
            if (!(QA < 0 || QA >= a.outHeight || Math.floor(QA) !== QA))
              for (let tA = 0; tA < N; tA += l) {
                const O = (AA + tA) / G;
                if (O < 0 || O >= a.outWidth || Math.floor(O) !== O)
                  continue;
                const rA = d * N - 1 - h.get(m, QA, O, x) === _ * N + tA ? 1 : 0;
                rA !== 0 && (P += L.get(m, QA, O, x) * rA);
              }
          }
          Y.set(P, m, T, Z, x);
        }
  return g.makeTensorInfo(Y.shape, Y.dtype, Y.values);
} }, $M = { kernelName: Jl, backendName: "cpu", kernelFunc: ({ inputs: C, attrs: A, backend: g }) => {
  const { x: I } = C, { filterSize: B, strides: Q, pad: E, includeBatchInIndex: i } = A, o = g;
  VA(I, "MaxPoolWithArgmax");
  const t = o.data.get(I.dataId).values, e = _C(I.shape, B, Q, [1, 1], E), [s, a] = function(w, G, D, l, d) {
    const N = hD(w, 0, D, zA(G), d, "max"), k = kF(w, G, D, d, !0, l);
    return [N.values, k.values];
  }(t, I.shape, I.dtype, i, e), r = o.write(s, e.outShape, I.dtype), h = o.write(a, e.outShape, I.dtype);
  return [{ dataId: r, shape: e.outShape, dtype: I.dtype }, { dataId: h, shape: e.outShape, dtype: "int32" }];
} }, _M = { kernelName: ls, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I, i = Kg(Q, B.shape), o = cA(OI(B.shape, i)[1]), t = [], e = g.makeTensorInfo([], "float32", new Float32Array([o]));
  t.push(e);
  const s = GQ({ inputs: { x: B }, backend: g, attrs: { dtype: "float32" } });
  t.push(s);
  const a = DD({ inputs: { a: s, b: e }, backend: g });
  t.push(a);
  const r = Dt({ inputs: { x: a }, backend: g, attrs: { axis: Q, keepDims: E } });
  return t.forEach((h) => g.disposeIntermediateTensorInfo(h)), r;
} }, AU = { kernelName: Gs, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I;
  VA(B, "min");
  const i = Kg(Q, B.shape);
  let o = i;
  const t = GI(o, B.shape.length);
  let e = B;
  t != null && (e = cC({ inputs: { x: B }, backend: g, attrs: { perm: t } }), o = KI(o.length, B.shape.length)), jI("min", o, e.shape.length);
  const [s, a] = OI(e.shape, o), r = cA(a), h = gC(cA(s), e.dtype), w = g.data.get(e.dataId).values;
  for (let D = 0; D < h.length; ++D) {
    const l = D * r;
    let d = w[l];
    for (let N = 0; N < r; ++N) {
      const k = w[l + N];
      (Number.isNaN(k) || k < d) && (d = k);
    }
    h[D] = d;
  }
  t != null && g.disposeIntermediateTensorInfo(e);
  const G = g.makeTensorInfo(s, e.dtype, h);
  if (E) {
    const D = oI({ inputs: { x: G }, backend: g, attrs: { shape: YI(s, i) } });
    return g.disposeIntermediateTensorInfo(G), D;
  }
  return G;
} }, gU = { kernelName: ys, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { paddings: Q, mode: E } = I;
  VA(B, "mirrorPad");
  const i = Q.map((l, d) => l[0] + B.shape[d] + l[1]), o = Q.map((l) => l[0]), t = Q.map((l, d) => l[0] + B.shape[d]), e = E === "reflect" ? 0 : 1, s = g.data.get(B.dataId).values, a = B.shape.length, r = zA(B.shape), h = cA(i), w = i.length, G = zA(i), D = AC(B.dtype, h);
  for (let l = 0; l < h; l++) {
    let d = Qi(l, w, G);
    for (let k = 0; k < w; k++)
      d[k] < o[k] ? d[k] = 2 * o[k] - d[k] - e : d[k] >= t[k] && (d[k] = 2 * (t[k] - 1) - d[k] + e);
    d = d.map((k, p) => k - o[p]);
    const N = KB(d, a, r);
    D[l] = s[N];
  }
  return { dataId: g.write(D, i, B.dtype), shape: i, dtype: B.dtype };
} }, IU = SI((C, A) => {
  const g = C % A;
  return C < 0 && A < 0 || C >= 0 && A >= 0 ? g : (g + A) % A;
}), CU = qI(Lo, IU), BU = { kernelName: Lo, backendName: "cpu", kernelFunc: CU };
function YF(C) {
  const { inputs: A, backend: g, attrs: I } = C, { logits: B } = A, { dim: Q } = I, E = B.shape.length;
  let i = Q;
  if (i === -1 && (i = E - 1), i !== E - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${E} and dim was ${i}`);
  const o = Kg([i], B.shape), t = UF({ inputs: { x: B }, backend: g, attrs: { reductionIndices: o, keepDims: !1 } }), e = YI(t.shape, o), s = oI({ inputs: { x: t }, backend: g, attrs: { shape: e } }), a = rD({ inputs: { a: B, b: s }, backend: g }), r = md({ inputs: { x: a }, backend: g }), h = Dt({ inputs: { x: r }, backend: g, attrs: { axis: o, keepDims: !1 } }), w = oI({ inputs: { x: h }, backend: g, attrs: { shape: e } }), G = DD({ inputs: { a: r, b: w }, backend: g });
  return g.disposeIntermediateTensorInfo(t), g.disposeIntermediateTensorInfo(s), g.disposeIntermediateTensorInfo(a), g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), G;
}
const QU = { kernelName: Hs, backendName: "cpu", kernelFunc: YF }, EU = { kernelName: fl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { logits: B } = A, { numSamples: Q, seed: E, normalized: i } = I;
  VA(B, "multinomial");
  const o = i ? B : YF({ inputs: { logits: B }, backend: g, attrs: { dim: -1 } }), t = o.shape[0], e = o.shape[1], s = g.data.get(o.dataId).values, a = [t, Q], r = gC(cA(a), "int32");
  for (let h = 0; h < t; ++h) {
    const w = h * e, G = new Float32Array(e - 1);
    G[0] = s[w];
    for (let d = 1; d < G.length; ++d)
      G[d] = G[d - 1] + s[w + d];
    const D = dh.alea(E.toString()), l = h * Q;
    for (let d = 0; d < Q; ++d) {
      const N = D();
      r[l + d] = G.length;
      for (let k = 0; k < G.length; k++)
        if (N < G[k]) {
          r[l + d] = k;
          break;
        }
    }
  }
  return i || g.disposeIntermediateTensorInfo(o), g.makeTensorInfo(a, "int32", r);
} }, iU = Mh, oU = { kernelName: Xr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { boxes: B, scores: Q } = A, { maxOutputSize: E, iouThreshold: i, scoreThreshold: o } = I;
  VA(B, "NonMaxSuppression");
  const t = g.data.get(B.dataId).values, e = g.data.get(Q.dataId).values, { selectedIndices: s } = iU(t, e, E, i, o);
  return g.makeTensorInfo([s.length], "int32", new Int32Array(s));
} }, tU = Uh, eU = { kernelName: Or, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { boxes: B, scores: Q } = A, { maxOutputSize: E, iouThreshold: i, scoreThreshold: o, padToMaxOutputSize: t } = I;
  VA(B, "NonMaxSuppressionPadded");
  const e = g.data.get(B.dataId).values, s = g.data.get(Q.dataId).values, { selectedIndices: a, validOutputs: r } = tU(e, s, E, i, o, t);
  return [g.makeTensorInfo([a.length], "int32", new Int32Array(a)), g.makeTensorInfo([], "int32", new Int32Array([r]))];
} }, sU = Yh, aU = { kernelName: vr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { boxes: B, scores: Q } = A, { maxOutputSize: E, iouThreshold: i, scoreThreshold: o, softNmsSigma: t } = I;
  VA(B, "NonMaxSuppressionWithScore");
  const e = g.data.get(B.dataId).values, s = g.data.get(Q.dataId).values, a = E, r = i, h = o, w = t, { selectedIndices: G, selectedScores: D } = sU(e, s, a, r, h, w);
  return [g.makeTensorInfo([G.length], "int32", new Int32Array(G)), g.makeTensorInfo([D.length], "float32", new Float32Array(D))];
} }, nU = { kernelName: Ns, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { indices: B } = A, { dtype: Q, depth: E, onValue: i, offValue: o } = I;
  VA(B, "oneHot");
  const t = cA(B.shape), e = new Float32Array(t * E);
  e.fill(o);
  const s = g.data.get(B.dataId).values;
  for (let a = 0; a < t; ++a)
    s[a] >= 0 && s[a] < E && (e[a * E + s[a]] = i);
  return g.makeTensorInfo([...B.shape, E], Q, e);
} };
function fe(C) {
  const { inputs: A, backend: g } = C, { x: I } = A;
  if (I.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (I.dtype === "complex64") {
    const B = iE({ inputs: { input: I }, backend: g }), Q = fe({ inputs: { x: B }, backend: g }), E = Ii({ inputs: { input: I }, backend: g }), i = fe({ inputs: { x: E }, backend: g }), o = RC({ inputs: { real: Q, imag: i }, backend: g });
    return g.disposeIntermediateTensorInfo(B), g.disposeIntermediateTensorInfo(Q), g.disposeIntermediateTensorInfo(E), g.disposeIntermediateTensorInfo(i), o;
  }
  return cD({ backend: g, attrs: { shape: I.shape, value: 0, dtype: I.dtype } });
}
const rU = { kernelName: Vs, backendName: "cpu", kernelFunc: fe }, hU = { kernelName: Rs, backendName: "cpu", kernelFunc: function C(A) {
  const { inputs: g, backend: I } = A, { x: B } = g;
  if (B.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (B.dtype === "complex64") {
    const Q = iE({ inputs: { input: B }, backend: I }), E = C({ inputs: { x: Q }, backend: I }), i = Ii({ inputs: { input: B }, backend: I }), o = fe({ inputs: { x: i }, backend: I }), t = RC({ inputs: { real: E, imag: o }, backend: I });
    return I.disposeIntermediateTensorInfo(Q), I.disposeIntermediateTensorInfo(E), I.disposeIntermediateTensorInfo(i), I.disposeIntermediateTensorInfo(o), t;
  }
  return cD({ backend: I, attrs: { shape: B.shape, value: 1, dtype: B.dtype } });
} };
function JF(C) {
  const { inputs: A, backend: g, attrs: I } = C, { axis: B } = I;
  if (A.length === 1)
    return Je({ inputs: { input: A[0] }, backend: g, attrs: { dim: B } });
  const Q = A[0].shape, E = A[0].dtype;
  A.forEach((t) => {
    Dr(Q, t.shape, "All tensors passed to stack must have matching shapes"), f(E === t.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], o = Ci({ inputs: A.map((t) => {
    const e = Je({ inputs: { input: t }, backend: g, attrs: { dim: B } });
    return i.push(e), e;
  }), backend: g, attrs: { axis: B } });
  return i.forEach((t) => g.disposeIntermediateTensorInfo(t)), o;
}
const DU = { kernelName: us, backendName: "cpu", kernelFunc: JF }, fF = { kernelName: ks, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { paddings: Q, constantValue: E } = I;
  VA(B, "pad");
  const i = Q.map((D, l) => D[0] + B.shape[l] + D[1]), o = Q.map((D) => D[0]), t = g.data.get(B.dataId).values, e = cA(B.shape), s = B.shape.length, a = zA(B.shape), r = cA(i), h = i.length, w = zA(i), G = AC(B.dtype, r);
  E !== 0 && G.fill(E);
  for (let D = 0; D < e; D++)
    G[KB(Qi(D, s, a).map((l, d) => l + o[d]), h, w)] = t[D];
  return { dataId: g.write(G, i, B.dtype), shape: i, dtype: B.dtype };
} }, cU = SI((C, A) => Math.pow(C, A)), wU = qI(bo, cU), lU = { kernelName: bo, backendName: "cpu", kernelFunc: wU }, GU = { kernelName: Ll, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { paramsNestedSplits: B, paramsDenseValues: Q, indices: E } = A, i = B.map((G) => g.data.get(G.dataId).values), o = B.map((G) => G.shape), t = g.data.get(Q.dataId).values, e = g.data.get(E.dataId).values, [s, a, r] = gF(i, o, t, Q.shape, Q.dtype, e, E.shape), h = s.map((G) => g.makeTensorInfo([G.length], "int32", G)), w = g.makeTensorInfo(r, Q.dtype, a);
  return h.concat([w]);
} }, yU = { kernelName: ml, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { starts: I, limits: B, deltas: Q } = A, E = g.data.get(I.dataId).values, i = g.data.get(B.dataId).values, o = g.data.get(Q.dataId).values, [t, e] = IF(E, I.shape, I.dtype, i, B.shape, o, Q.shape);
  return [g.makeTensorInfo([t.length], "int32", t), g.makeTensorInfo([e.length], I.dtype, e)];
} }, dU = { kernelName: bl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { shape: B, values: Q, defaultValue: E, rowPartitionTensors: i } = A, { rowPartitionTypes: o } = I, t = g.data.get(B.dataId).values, e = g.data.get(Q.dataId).values, s = g.data.get(E.dataId).values, a = i.map((G) => g.data.get(G.dataId).values), r = i.map((G) => G.shape), [h, w] = CF(t, B.shape, e, Q.shape, Q.dtype, s, E.shape, a, r, o);
  return g.makeTensorInfo(h, Q.dtype, w);
} }, FU = { kernelName: Pr, backendName: "cpu", kernelFunc: function(C) {
  const { backend: A, attrs: g } = C, { start: I, stop: B, dtype: Q, step: E } = g, i = BF(I, B, E, Q);
  return A.makeTensorInfo([i.length], Q, i);
} }, RU = jg(Ho, (C) => 1 / C), NU = { kernelName: Ho, backendName: "cpu", kernelFunc: RU }, uU = { kernelName: Us, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B } = A, { alignCorners: Q, halfPixelCenters: E, size: i } = I;
  VA(B, "resizeBilinear");
  const o = zA(B.shape), [t, e] = i, [s, a, r, h] = B.shape, w = g.data.get(B.dataId).values, G = new Float32Array(cA([s, t, e, h])), D = [Q && t > 1 ? a - 1 : a, Q && e > 1 ? r - 1 : r], l = [Q && t > 1 ? t - 1 : t, Q && e > 1 ? e - 1 : e];
  let d = 0;
  const N = D[0] / l[0], k = D[1] / l[1];
  for (let p = 0; p < s; p++)
    for (let Y = 0; Y < t; Y++) {
      let M;
      M = E ? N * (Y + 0.5) - 0.5 : N * Y;
      const L = Math.max(0, Math.floor(M)), m = M - L, x = Math.min(a - 1, Math.ceil(M)), T = p * o[0] + L * o[1], Z = p * o[0] + x * o[1];
      for (let $ = 0; $ < e; $++) {
        let AA;
        AA = E ? k * ($ + 0.5) - 0.5 : k * $;
        const P = Math.max(0, Math.floor(AA)), _ = AA - P, QA = Math.min(r - 1, Math.ceil(AA)), tA = T + P * o[2], O = Z + P * o[2], rA = T + QA * o[2], eA = Z + QA * o[2];
        for (let DA = 0; DA < h; DA++) {
          const GA = w[tA + DA], NA = w[O + DA], UA = GA + (w[rA + DA] - GA) * _, pA = UA + (NA + (w[eA + DA] - NA) * _ - UA) * m;
          G[d++] = pA;
        }
      }
    }
  return g.makeTensorInfo([s, t, e, h], "float32", G);
} }, kU = { kernelName: $r, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B, dy: Q } = A, { alignCorners: E } = I;
  VA([Q, B], "resizeBilinearGrad");
  const i = zA(B.shape), [o, t, e, s] = B.shape, [, a, r] = Q.shape, h = new Float32Array(o * t * e * s), w = [E && a > 1 ? t - 1 : t, E && r > 1 ? e - 1 : e], G = [E && a > 1 ? a - 1 : a, E && r > 1 ? r - 1 : r], D = w[0] / G[0], l = w[1] / G[1], d = g.data.get(Q.dataId).values;
  let N = 0;
  for (let k = 0; k < o; k++) {
    const p = k * i[0];
    for (let Y = 0; Y < a; Y++) {
      const M = Y * D, L = Math.floor(M), m = Math.min(Math.ceil(M), t - 1), x = p + L * i[1], T = p + m * i[1], Z = M - L, $ = 1 - Z;
      for (let AA = 0; AA < r; AA++) {
        const P = AA * l, _ = Math.floor(P), QA = Math.min(Math.ceil(P), e - 1), tA = P - _, O = 1 - tA, rA = x + _ * i[2], eA = x + QA * i[2], DA = T + _ * i[2], GA = T + QA * i[2], NA = $ * O, UA = $ * tA, pA = Z * O, XA = Z * tA;
        for (let WA = 0; WA < s; WA++) {
          const PA = d[N++];
          h[rA + WA] += PA * NA, h[eA + WA] += PA * UA, h[DA + WA] += PA * pA, h[GA + WA] += PA * XA;
        }
      }
    }
  }
  return g.makeTensorInfo([o, e, t, s], "float32", h);
} }, KU = { kernelName: Ms, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B } = A, { alignCorners: Q, halfPixelCenters: E, size: i } = I;
  VA(B, "resizeNearestNeighbor");
  const o = zA(B.shape), [t, e] = i, [s, a, r, h] = B.shape, w = g.data.get(B.dataId).values, G = new Float32Array(s * t * e * h), D = [Q && t > 1 ? a - 1 : a, Q && e > 1 ? r - 1 : r], l = [Q && t > 1 ? t - 1 : t, Q && e > 1 ? e - 1 : e], d = D[0] / l[0], N = D[1] / l[1];
  let k = 0;
  for (let p = 0; p < s; p++) {
    const Y = p * o[0];
    for (let M = 0; M < t; M++) {
      const L = E ? d * (M + 0.5) : d * M;
      let m = Math.min(a - 1, Q ? Math.round(L) : Math.floor(L));
      E && (m = Math.max(0, m));
      const x = Y + m * o[1];
      for (let T = 0; T < e; T++) {
        const Z = E ? N * (T + 0.5) : N * T;
        let $ = Math.min(r - 1, Q ? Math.round(Z) : Math.floor(Z));
        E && ($ = Math.max(0, $));
        const AA = x + $ * o[2];
        for (let P = 0; P < h; P++) {
          const _ = w[AA + P];
          G[k++] = _;
        }
      }
    }
  }
  return g.makeTensorInfo([s, t, e, h], B.dtype, G);
} }, SU = { kernelName: jr, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B, dy: Q } = A, { alignCorners: E } = I;
  VA([Q, B], "resizeNearestNeighborGrad");
  const i = zA(B.shape), o = zA(Q.shape), [t, e, s, a] = B.shape, [, r, h] = Q.shape, w = new Float32Array(t * e * s * a), G = g.data.get(Q.dataId).values, D = [E && r > 1 ? e - 1 : e, E && h > 1 ? s - 1 : s], l = [E && r > 1 ? r - 1 : r, E && h > 1 ? h - 1 : h], d = D[0] / l[0], N = D[1] / l[1], k = 1 / d, p = 1 / N, Y = 2 * Math.ceil(k) + 2, M = 2 * Math.ceil(p) + 2;
  for (let L = 0; L < t; L++) {
    const m = L * i[0];
    for (let x = 0; x < e; x++) {
      const T = m + x * i[1], Z = Math.floor(x * k), $ = Math.floor(Z - Y / 2);
      for (let AA = 0; AA < s; AA++) {
        const P = T + AA * i[2], _ = Math.floor(AA * p), QA = Math.floor(_ - M / 2);
        for (let tA = 0; tA < a; tA++) {
          let O = 0;
          for (let rA = 0; rA < Y; rA++) {
            const eA = rA + $;
            if (eA < 0 || eA >= r)
              continue;
            const DA = m + eA * o[1], GA = eA * d;
            if (x === Math.min(e - 1, E ? Math.round(GA) : Math.floor(GA)))
              for (let NA = 0; NA < M; NA++) {
                const UA = NA + QA;
                if (UA < 0 || UA >= h)
                  continue;
                const pA = DA + UA * o[2], XA = UA * N;
                AA === Math.min(s - 1, E ? Math.round(XA) : Math.floor(XA)) && (O += G[pA + tA]);
              }
          }
          w[P + tA] = O;
        }
      }
    }
  }
  return g.makeTensorInfo(B.shape, B.dtype, w);
} }, pU = { kernelName: Ys, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { dims: Q } = I;
  VA(B, "reverse");
  const E = B.shape.length, i = Kg(Q, B.shape);
  if (E === 0)
    return pB({ inputs: { x: B }, backend: g });
  const o = new PI(B.shape, B.dtype), t = g.bufferSync(B);
  for (let e = 0; e < o.size; e++) {
    const s = o.indexToLoc(e), a = s.slice();
    i.forEach((r) => a[r] = B.shape[r] - 1 - a[r]), o.set(t.get(...a), ...s);
  }
  return g.makeTensorInfo(o.shape, o.dtype, o.values);
} }, MU = { kernelName: Bh, backendName: "cpu", kernelFunc: ({ inputs: C, attrs: A, backend: g }) => {
  const { image: I } = C, { radians: B, fillValue: Q, center: E } = A, i = g, o = AC(I.dtype, cA(I.shape)), [t, e, s, a] = I.shape, [r, h] = Th(E, e, s), w = Math.sin(B), G = Math.cos(B), D = i.data.get(I.dataId).values;
  for (let l = 0; l < t; l++) {
    const d = l * s * e * a;
    for (let N = 0; N < e; N++) {
      const k = N * (s * a);
      for (let p = 0; p < s; p++) {
        const Y = p * a;
        for (let M = 0; M < a; M++) {
          const L = [t, N, p, M], m = L[2], x = L[1];
          let T = (m - r) * G - (x - h) * w, Z = (m - r) * w + (x - h) * G;
          T = Math.round(T + r), Z = Math.round(Z + h);
          let $ = Q;
          typeof Q != "number" && ($ = M === 3 ? 255 : Q[M]), T >= 0 && T < s && Z >= 0 && Z < e && ($ = D[d + Z * (s * a) + T * a + M]), o[d + k + Y + M] = $;
        }
      }
    }
  }
  return { dataId: i.write(o, I.shape, I.dtype), shape: I.shape, dtype: I.dtype };
} }, UU = jg(Vo, (C) => {
  const A = Math.floor(C);
  return C - A < 0.5 ? Math.floor(C) : C - A > 0.5 ? Math.ceil(C) : A % 2 == 0 ? A : A + 1;
}), YU = { kernelName: Vo, backendName: "cpu", kernelFunc: UU }, JU = { kernelName: Hl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { indices: B, updates: Q } = A, { shape: E } = I, { sliceRank: i, numUpdates: o, sliceSize: t, strides: e, outputSize: s } = hE(0, B, E), a = TQ(g.bufferSync(B), g.bufferSync(Q), E, s, t, o, i, e, 0, !0);
  return g.makeTensorInfo(E, a.dtype, a.values);
} };
function fU(C, A) {
  let g = 0, I = C.length, B = 0;
  for (; g < I; )
    B = Math.floor((g + I) / 2), C[B] < A ? g = B + 1 : I = B;
  return I;
}
function LU(C, A) {
  let g = 0, I = C.length, B = 0;
  for (; g < I; )
    B = Math.floor((g + I) / 2), C[B] <= A ? g = B + 1 : I = B;
  return I;
}
const mU = { kernelName: ql, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { sortedSequence: B, values: Q } = A, { side: E } = I, i = function(o, t, e, s, a, r) {
    const h = NI("int32", e * a);
    for (let w = 0; w < e; ++w) {
      const G = o.slice(w * s, (w + 1) * s), D = w * a;
      for (let l = 0; l < a; ++l)
        h[D + l] = r === "left" ? fU(G, t[l + D]) : LU(G, t[l + D]);
    }
    return h;
  }(g.data.get(B.dataId).values, g.data.get(Q.dataId).values, B.shape[0], B.shape[1], Q.shape[1], E);
  return g.makeTensorInfo(Q.shape, "int32", i);
} }, bU = { kernelName: Js, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { condition: I, t: B, e: Q } = A;
  VA([I, B, Q], "select");
  const E = I.shape.length, i = g.data.get(I.dataId).values, o = g.data.get(B.dataId).values, t = g.data.get(Q.dataId).values, e = NC(B.dtype, Q.dtype), s = gC(cA(B.shape), e);
  let a = 0;
  const r = E === 0 || E > 1 || B.shape.length === 1 ? 1 : cA(B.shape.slice(1));
  for (let h = 0; h < i.length; h++)
    for (let w = 0; w < r; w++)
      i[h] === 1 ? s[a++] = o[h] : s[a++] = t[h];
  return g.makeTensorInfo(B.shape, e, s);
} }, HU = jg(To, (C) => C >= 0 ? 1.0507009873554805 * C : 1.7580993408473768 * (Math.exp(C) - 1)), xU = { kernelName: To, backendName: "cpu", kernelFunc: HU }, qU = jg(Oo, (C) => C < 0 ? -1 : C > 0 ? 1 : 0), VU = { kernelName: Oo, backendName: "cpu", kernelFunc: qU }, WU = jg(Zo, (C) => Math.sin(C)), TU = { kernelName: Zo, backendName: "cpu", kernelFunc: WU }, ZU = jg(Xo, (C) => Math.sinh(C)), XU = { kernelName: Xo, backendName: "cpu", kernelFunc: ZU }, pw = Math.log(11920928955078125e-23) + 2, OU = jg(Po, (C) => {
  const A = C > -pw, g = C < pw, I = Math.exp(C);
  let B;
  return B = g ? I : A ? C : Math.log(1 + I), B;
}), vU = { kernelName: Po, backendName: "cpu", kernelFunc: OU }, PU = { kernelName: ms, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { blockShape: Q, paddings: E } = I;
  VA([B], "spaceToBatchND");
  const i = cA(Q), o = [[0, 0]];
  o.push(...E);
  for (let G = 1 + Q.length; G < B.shape.length; ++G)
    o.push([0, 0]);
  const t = fF.kernelFunc({ inputs: { x: B }, backend: g, attrs: { paddings: o, constantValue: 0 } }), e = tt(t.shape, Q, i, !1), s = et(e.length, Q.length, !1), a = st(t.shape, Q, i, !1), r = oI({ inputs: { x: t }, backend: g, attrs: { shape: e } }), h = cC({ inputs: { x: r }, backend: g, attrs: { perm: s } }), w = oI({ inputs: { x: h }, backend: g, attrs: { shape: a } });
  return g.disposeIntermediateTensorInfo(t), g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(h), w;
} }, zU = { kernelName: Vl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { indices: I, values: B, denseShape: Q, defaultValue: E } = A;
  if (Q.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${Q.shape}`);
  if (I.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${I.shape}`);
  if (B.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${B.shape}`);
  if (E.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${E.shape}`);
  const i = g.data.get(I.dataId).values, o = g.data.get(B.dataId).values, t = g.data.get(Q.dataId).values, e = g.data.get(E.dataId).values[0], [s, a, r, h, w] = oF(i, I.shape, I.dtype, o, B.dtype, t, e);
  return [g.makeTensorInfo(a, I.dtype, s), g.makeTensorInfo([a[0]], B.dtype, r), g.makeTensorInfo([h.length], "bool", new Uint8Array(h.map((G) => Number(G)))), g.makeTensorInfo([w.length], I.dtype, new Int32Array(w))];
} }, jU = { kernelName: Wl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { inputIndices: I, inputShape: B, newShape: Q } = A;
  if (I.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${I.shape}`);
  if (B.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${B.shape}`);
  if (Q.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${Q.shape}`);
  const E = Array.from(g.data.get(B.dataId).values), i = g.data.get(I.dataId).values, o = Array.from(g.data.get(Q.dataId).values), [t, e, s] = tF(i, I.shape, I.dtype, E, o);
  return [g.makeTensorInfo(e, I.dtype, t), g.makeTensorInfo([s.length], Q.dtype, new Int32Array(s))];
} }, $U = { kernelName: Tl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { data: I, indices: B, segmentIds: Q } = A;
  if (I.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (B.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${B.shape}`);
  if (Q.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${Q.shape}`);
  if (B.shape[0] !== Q.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const E = g.data.get(I.dataId).values, i = g.data.get(B.dataId).values, o = g.data.get(Q.dataId).values, [t, e] = nD(E, I.shape, I.dtype, i, o, !0);
  return g.makeTensorInfo(e, I.dtype, t);
} }, _U = { kernelName: Zl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { data: I, indices: B, segmentIds: Q } = A;
  if (I.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (B.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${B.shape}`);
  if (Q.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${Q.shape}`);
  if (B.shape[0] !== Q.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const E = g.data.get(I.dataId).values, i = g.data.get(B.dataId).values, o = g.data.get(Q.dataId).values, [t, e] = nD(E, I.shape, I.dtype, i, o);
  return g.makeTensorInfo(e, I.dtype, t);
} }, AY = { kernelName: Xl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { sparseIndices: B, sparseValues: Q, defaultValue: E } = A, { outputShape: i } = I, { sliceRank: o, numUpdates: t, sliceSize: e, strides: s, outputSize: a } = hE(0, B, i), r = !1, h = g.bufferSync(B);
  let w;
  switch (Q.dtype) {
    case "bool":
      w = TQ(h, g.bufferSync(Q), i, a, e, t, o, s, !!g.data.get(E.dataId).values[0], r);
      break;
    case "float32":
      w = TQ(h, g.bufferSync(Q), i, a, e, t, o, s, g.data.get(E.dataId).values[0], r);
      break;
    case "int32":
      w = TQ(h, g.bufferSync(Q), i, a, e, t, o, s, g.data.get(E.dataId).values[0], r);
      break;
    case "string":
      w = TQ(h, g.bufferSync(Q), i, a, e, t, o, s, rQ(g.data.get(E.dataId).values[0]), r);
      break;
    default:
      throw new Error(`Unsupported type ${Q.dtype}`);
  }
  return g.makeTensorInfo(i, w.dtype, w.values);
} }, gY = { kernelName: bs, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { numOrSizeSplits: Q, axis: E } = I, i = Kg(E, B.shape)[0], o = AD(B, Q, i), t = new Array(B.shape.length).fill(0), e = B.shape.slice();
  return o.map((s) => {
    const a = [...e];
    a[i] = s;
    const r = oE({ inputs: { x: B }, backend: g, attrs: { begin: t, size: a } });
    return t[i] += s, r;
  });
} }, IY = { kernelName: _r, backendName: "cpu", kernelFunc: ({ inputs: C, backend: A }) => {
  const { x: g } = C, I = A;
  VA(g, "square");
  const B = I.data.get(g.dataId).values, Q = new Float32Array(B.length);
  for (let E = 0; E < B.length; ++E) {
    const i = B[E];
    Q[E] = i * i;
  }
  return { dataId: I.write(Q, g.shape, g.dtype), shape: g.shape, dtype: g.dtype };
} }, CY = jg(It, (C, A) => {
  const g = A;
  return isNaN(C) ? NaN : C > 0 ? 1 : g.alpha;
}), BY = { kernelName: It, backendName: "cpu", kernelFunc: CY }, QY = { kernelName: Ah, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { begin: Q, end: E, strides: i, beginMask: o, endMask: t, ellipsisMask: e, newAxisMask: s, shrinkAxisMask: a } = I;
  VA(B, "stridedSlice");
  const { finalShapeSparse: r, finalShape: h, isIdentity: w, sliceDim0: G, isSimpleSlice: D, begin: l, end: d, strides: N } = qh(B.shape, Q, E, i, o, t, e, s, a);
  let k;
  if (w)
    k = oI({ inputs: { x: B }, backend: g, attrs: { shape: h } });
  else if (G || D) {
    f(B.shape.length >= 1, () => `Input must have rank at least 1, got: ${B.shape.length}`);
    const p = bh(l, d, N), Y = oE({ inputs: { x: B }, backend: g, attrs: { begin: l, size: p } });
    k = oI({ inputs: { x: Y }, backend: g, attrs: { shape: h } }), g.disposeIntermediateTensorInfo(Y);
  } else {
    const p = aF(r, g.bufferSync(B), N, l);
    k = g.makeTensorInfo(h, p.dtype, p.values);
  }
  return k;
} }, EY = { kernelName: Ol, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { separator: B, nGramWidths: Q, leftPad: E, rightPad: i, padWidth: o, preserveShortSequences: t } = I, { data: e, dataSplits: s } = A, a = g.data.get(e.dataId).values, r = g.data.get(s.dataId).values, [h, w] = nF(a, r, B, Q, E, i, o, t);
  return [g.makeTensorInfo([h.length], "string", h), g.makeTensorInfo(s.shape, "int32", w)];
} }, iY = { kernelName: vl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { skipEmpty: B } = I, { input: Q, delimiter: E } = A;
  if (Q.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (Q.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${Q.shape}`);
  if (E.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${E.shape}`);
  const i = g.data.get(Q.dataId).values, o = g.data.get(E.dataId).values[0], [t, e, s] = rF(i, o, B), a = e.length;
  return [g.makeTensorInfo([a, 2], "int32", t), g.makeTensorInfo([a], "string", e), g.makeTensorInfo([2], "int32", new Int32Array(s))];
} }, oY = { kernelName: Pl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { numBuckets: B } = I, { input: Q } = A;
  if (Q.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (B <= 0)
    throw new Error("Number of buckets must be at least 1");
  const E = hF(g.data.get(Q.dataId).values, B);
  return g.makeTensorInfo(Q.shape, "int32", E);
} }, tY = jg(_o, (C) => Math.tan(C)), eY = { kernelName: _o, backendName: "cpu", kernelFunc: tY }, sY = jg(At, (C) => Math.tanh(C)), aY = { kernelName: xl, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { tensor: I, indices: B, updates: Q } = A, { sliceRank: E, numUpdates: i, sliceSize: o, strides: t, outputSize: e } = hE(0, B, I.shape), s = g.bufferSync(B), a = g.bufferSync(Q), r = g.bufferSync(I), h = TQ(s, a, I.shape, e, o, i, E, t, r, !1);
  return g.makeTensorInfo(I.shape, h.dtype, h.values);
} }, nY = { kernelName: gt, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { reps: Q } = I;
  VA(B, "tile");
  const E = cF(g.bufferSync(B), Q);
  return g.makeTensorInfo(E.shape, E.dtype, E.values);
} }, rY = { kernelName: gh, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { k: Q, sorted: E } = I;
  VA(B, "topk");
  const i = g.data.get(B.dataId).values, [o, t] = lF(i, B.shape, B.dtype, Q, E);
  return [g.makeTensorInfo(o.shape, o.dtype, o.values), g.makeTensorInfo(t.shape, t.dtype, t.values)];
} }, hY = { kernelName: Ih, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, attrs: g, backend: I } = C, { image: B, transforms: Q } = A, { interpolation: E, fillMode: i, fillValue: o, outputShape: t } = g, [e, s, a, r] = B.shape, [h, w] = t ?? [s, a], G = [e, h, w, r], D = zA(B.shape), l = D[0], d = D[1], N = D[2], k = zA(G), p = k[0], Y = k[1], M = k[2], L = AC(B.dtype, cA(G));
  L.fill(o);
  const m = I.data.get(B.dataId).values, x = I.data.get(Q.dataId).values;
  for (let T = 0; T < e; ++T) {
    const Z = Q.shape[0] === 1 ? x : x.subarray(8 * T, 8 * T + 8);
    for (let $ = 0; $ < h; ++$)
      for (let AA = 0; AA < w; ++AA)
        for (let P = 0; P < r; ++P) {
          let _;
          const QA = Z[6] * AA + Z[7] * $ + 1;
          if (QA === 0)
            continue;
          const tA = (Z[0] * AA + Z[1] * $ + Z[2]) / QA, O = (Z[3] * AA + Z[4] * $ + Z[5]) / QA, rA = Mw(tA, a, i), eA = Mw(O, s, i);
          switch (E) {
            case "nearest":
              _ = DY(m, s, a, l, d, N, T, eA, rA, P, o);
              break;
            case "bilinear":
              _ = cY(m, s, a, l, d, N, T, eA, rA, P, o);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${E}`);
          }
          L[T * p + $ * Y + AA * M + P] = _;
        }
    return I.makeTensorInfo(G, B.dtype, L);
  }
  return { dataId: I.write(L, G, B.dtype), shape: B.shape, dtype: B.dtype };
} };
function Mw(C, A, g) {
  switch (g) {
    case "reflect":
      return function(I, B) {
        let Q = I;
        if (Q < 0)
          if (B <= 1)
            Q = 0;
          else {
            const E = 2 * B;
            Q < E && (Q = E * Math.trunc(-Q / E) + Q), Q = Q < -B ? Q + E : -Q - 1;
          }
        else if (Q > B - 1)
          if (B <= 1)
            Q = 0;
          else {
            const E = 2 * B;
            Q -= E * Math.trunc(Q / E), Q >= B && (Q = E - Q - 1);
          }
        return XQ(0, Q, B - 1);
      }(C, A);
    case "wrap":
      return function(I, B) {
        let Q = I;
        if (Q < 0)
          if (B <= 1)
            Q = 0;
          else {
            const E = B - 1;
            Q += B * (Math.trunc(-Q / E) + 1);
          }
        else if (Q > B - 1)
          if (B <= 1)
            Q = 0;
          else {
            const E = B - 1;
            Q -= B * Math.trunc(Q / E);
          }
        return XQ(0, Q, B - 1);
      }(C, A);
    case "nearest":
      return function(I, B) {
        return XQ(0, I, B - 1);
      }(C, A);
    default:
      return function(I, B) {
        return I;
      }(C);
  }
}
function bi(C, A, g, I, B, Q, E, i, o, t, e) {
  return 0 <= i && i < A && 0 <= o && o < g ? C[E * I + i * B + o * Q + t] : e;
}
function DY(C, A, g, I, B, Q, E, i, o, t, e) {
  return bi(C, A, g, I, B, Q, E, Math.round(i), Math.round(o), t, e);
}
function cY(C, A, g, I, B, Q, E, i, o, t, e) {
  const s = Math.floor(i), a = Math.floor(o), r = s + 1, h = a + 1;
  return (r - i) * ((h - o) * bi(C, A, g, I, B, Q, E, s, a, t, e) + (o - a) * bi(C, A, g, I, B, Q, E, s, h, t, e)) + (i - s) * ((h - o) * bi(C, A, g, I, B, Q, E, r, a, t, e) + (o - a) * bi(C, A, g, I, B, Q, E, r, h, t, e));
}
const wY = { kernelName: Ch, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, attrs: g, backend: I } = C, { axis: B } = g, { x: Q } = A;
  VA(Q, "unique");
  const E = I.data.get(Q.dataId).values, { outputValues: i, outputShape: o, indices: t } = GF(E, B, Q.shape, Q.dtype);
  return [I.makeTensorInfo(o, Q.dtype, i), I.makeTensorInfo([t.length], "int32", t)];
} }, lY = { kernelName: xs, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { value: B } = A;
  let { axis: Q } = I;
  Q < 0 && (Q += B.shape.length);
  const E = B.shape.length, i = B.shape[Q], o = new Array(E - 1);
  let t = 0;
  for (let r = 0; r < E; r++)
    r !== Q && (o[t++] = B.shape[r]);
  const e = new Array(E).fill(0), s = B.shape.slice();
  s[Q] = 1;
  const a = new Array(i);
  for (let r = 0; r < a.length; r++) {
    e[Q] = r;
    const h = oE({ inputs: { x: B }, backend: g, attrs: { begin: e, size: s } });
    a[r] = oI({ inputs: { x: h }, backend: g, attrs: { shape: o } }), g.disposeIntermediateTensorInfo(h);
  }
  return a;
} }, GY = { kernelName: qs, backendName: "cpu", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, segmentIds: Q } = A, { numSegments: E } = I;
  VA(B, "unsortedSegmentSum");
  const i = [], o = [], t = B.shape.length - Q.shape.length;
  let e = Q;
  for (let a = 0; a < t; ++a) {
    const r = Je({ inputs: { input: e }, backend: g, attrs: { dim: a + 1 } });
    e = r, o.push(r);
  }
  for (let a = 0; a < E; ++a) {
    const r = yQ(a, "int32"), h = g.makeTensorInfo([], "int32", r), w = fd({ inputs: { a: h, b: e }, backend: g }), G = GQ({ inputs: { x: w }, backend: g, attrs: { dtype: "float32" } }), D = Qa({ inputs: { a: G, b: B }, backend: g }), l = Dt({ inputs: { x: D }, backend: g, attrs: { axis: 0, keepDims: !1 } });
    i.push(l), o.push(h), o.push(w), o.push(G), o.push(D), o.push(l);
  }
  const s = JF({ inputs: i, backend: g, attrs: { axis: 0 } });
  return o.forEach((a) => g.disposeIntermediateTensorInfo(a)), s;
} }, yY = [tp, $K, sp, np, BS, rp, hp, Dp, cp, wp, Gp, dp, Rp, kp, Sp, pp, Mp, Up, Yp, op, Jp, fp, Lp, QS, mp, IS, iS, Hp, _K, xp, Vp, Wp, Tp, Zp, Xp, Op, vp, zp, $p, _p, AM, gM, IM, CM, BM, QM, EM, iM, oM, tM, eM, sM, nM, gp, rM, oS, DM, tS, cM, sS, GM, yM, dM, nS, hS, FM, RM, NM, uM, cS, lS, AS, kM, qp, SM, MM, YM, Ip, yS, FS, JM, NS, LM, HM, qM, TM, ZM, XM, OM, kS, vM, PM, zM, jM, $M, _M, AU, SS, gU, BU, EU, MS, US, oU, eU, aU, JS, nU, hU, DU, fF, lU, Bp, LS, GU, yU, dU, FU, gS, or, NU, Qp, Ep, ip, uU, kU, KU, SU, pU, MU, YU, xS, JU, mU, bU, xU, VS, VU, TU, XU, WS, QU, vU, PU, zU, jU, $U, _U, AY, gY, XS, IY, vS, PS, BY, QY, EY, iY, oY, _S, aM, eY, { kernelName: At, backendName: "cpu", kernelFunc: sY }, aY, nY, rY, hY, fS, wY, lY, GY, rU];
for (const C of yY)
  KC(C);
const bQ = {}, Wt = { alpha: !1, antialias: !1, premultipliedAlpha: !1, preserveDrawingBuffer: !1, depth: !1, stencil: !1, failIfMajorPerformanceCaveat: !0 };
function eB(C, A) {
  if (!(C in bQ) || A != null) {
    const I = function(B, Q) {
      if (B !== 1 && B !== 2)
        throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
      const E = Q ?? function(i) {
        if (aA().getBool("IS_SAFARI") || typeof OffscreenCanvas > "u" || i !== 2) {
          if (typeof document < "u")
            return document.createElement("canvas");
          throw new Error("Cannot create a canvas in this context");
        }
        return new OffscreenCanvas(300, 150);
      }(B);
      return E.addEventListener("webglcontextlost", (i) => {
        i.preventDefault(), delete bQ[B];
      }, !1), aA().getBool("SOFTWARE_WEBGL_ENABLED") && (Wt.failIfMajorPerformanceCaveat = !1), B === 1 ? E.getContext("webgl", Wt) || E.getContext("experimental-webgl", Wt) : E.getContext("webgl2", Wt);
    }(C, A);
    if (I === null)
      return console.log("Could not get context for WebGL version", C), null;
    bQ[C] = I;
  }
  const g = bQ[C];
  return g == null || g.isContextLost() ? (delete bQ[C], eB(C)) : (g.disable(g.DEPTH_TEST), g.disable(g.STENCIL_TEST), g.disable(g.BLEND), g.disable(g.DITHER), g.disable(g.POLYGON_OFFSET_FILL), g.disable(g.SAMPLE_COVERAGE), g.enable(g.SCISSOR_TEST), g.enable(g.CULL_FACE), g.cullFace(g.BACK), bQ[C]);
}
var Io, YC, vI;
function Hi(C, A) {
  return [A, C];
}
function Tt(C) {
  const A = cA(C);
  return an(Math.ceil(A / 4));
}
function qE(C, A) {
  return [Math.max(1, Math.ceil(A / 2)), Math.max(1, Math.ceil(C / 2))];
}
function wD(C, A) {
  const g = C;
  let I, B, Q, E, i, o, t, e, s, a;
  return aA().getNumber("WEBGL_VERSION") === 2 ? (I = g.R32F, B = g.R16F, Q = g.RGBA16F, E = g.RGBA32F, i = g.RED, t = 4, e = 1, s = g.HALF_FLOAT, a = g.FLOAT, o = g.RGBA8) : (I = C.RGBA, B = C.RGBA, Q = C.RGBA, E = g.RGBA, i = C.RGBA, t = 4, e = 4, s = A != null ? A.HALF_FLOAT_OES : null, a = C.FLOAT, o = C.RGBA), { internalFormatFloat: I, internalFormatHalfFloat: B, internalFormatPackedHalfFloat: Q, internalFormatPackedFloat: E, textureFormatFloat: i, downloadTextureFormat: o, downloadUnpackNumChannels: t, defaultNumChannels: e, textureTypeHalfFloat: s, textureTypeFloat: a };
}
function JA(C, A) {
  const g = A();
  return aA().getBool("DEBUG") && function(I) {
    const B = I.getError();
    if (B !== I.NO_ERROR)
      throw new Error("WebGL Error: " + function(Q, E) {
        switch (E) {
          case Q.NO_ERROR:
            return "NO_ERROR";
          case Q.INVALID_ENUM:
            return "INVALID_ENUM";
          case Q.INVALID_VALUE:
            return "INVALID_VALUE";
          case Q.INVALID_OPERATION:
            return "INVALID_OPERATION";
          case Q.INVALID_FRAMEBUFFER_OPERATION:
            return "INVALID_FRAMEBUFFER_OPERATION";
          case Q.OUT_OF_MEMORY:
            return "OUT_OF_MEMORY";
          case Q.CONTEXT_LOST_WEBGL:
            return "CONTEXT_LOST_WEBGL";
          default:
            return `Unknown error code ${E}`;
        }
      }(I, B));
  }(C), g;
}
(function(C) {
  C[C.DENSE = 0] = "DENSE", C[C.SHARED_BATCH = 1] = "SHARED_BATCH";
})(Io || (Io = {})), function(C) {
  C[C.RENDER = 0] = "RENDER", C[C.UPLOAD = 1] = "UPLOAD", C[C.PIXELS = 2] = "PIXELS", C[C.DOWNLOAD = 3] = "DOWNLOAD";
}(YC || (YC = {})), function(C) {
  C[C.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", C[C.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", C[C.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", C[C.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", C[C.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
}(vI || (vI = {}));
function dY(C) {
  return !!(aA().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || C === 0 || 596e-10 < Math.abs(C) && Math.abs(C) < 65504);
}
function Zt(C, A) {
  return TB(C, () => C.getExtension(A), 'Extension "' + A + '" not supported on this browser.');
}
const FY = /ERROR: [0-9]+:([0-9]+):/g;
function LF(C, A) {
  const g = FY.exec(A);
  if (g == null)
    return console.log(`Couldn't parse line number in error: ${A}`), void console.log(C);
  const I = +g[1], B = C.split(`
`), Q = B.length.toString().length + 2, E = B.map((s, a) => LE((a + 1).toString(), Q) + s);
  let i = 0;
  for (let s = 0; s < E.length; s++)
    i = Math.max(E[s].length, i);
  const o = E.slice(0, I - 1), t = E.slice(I - 1, I), e = E.slice(I);
  console.log(o.join(`
`)), console.log(A.split(`
`)[0]), console.log(`%c ${LE(t[0], i)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(e.join(`
`));
}
function La(C, A) {
  if (JA(C, () => C.validateProgram(A)), C.getProgramParameter(A, C.VALIDATE_STATUS) === !1)
    throw console.log(C.getProgramInfoLog(A)), new Error("Shader program validation failed.");
}
function Uw(C, A, g, I, B, Q, E) {
  const i = C.getAttribLocation(A, g);
  return i !== -1 && (JA(C, () => C.bindBuffer(C.ARRAY_BUFFER, I)), JA(C, () => C.vertexAttribPointer(i, B, C.FLOAT, !1, Q, E)), JA(C, () => C.enableVertexAttribArray(i)), !0);
}
function RY(C, A, g) {
  (function(I, B) {
    const Q = I.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, E = B + I.TEXTURE0;
    if (E < I.TEXTURE0 || E > Q)
      throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${Q}]`}.`);
  })(C, g), JA(C, () => C.activeTexture(C.TEXTURE0 + g)), JA(C, () => C.bindTexture(C.TEXTURE_2D, A));
}
function ma(C, A, g) {
  JA(C, () => C.bindFramebuffer(C.FRAMEBUFFER, g)), JA(C, () => C.framebufferTexture2D(C.FRAMEBUFFER, C.COLOR_ATTACHMENT0, C.TEXTURE_2D, A, 0));
}
function Yw(C, A) {
  JA(C, () => C.bindFramebuffer(C.FRAMEBUFFER, A)), JA(C, () => C.framebufferTexture2D(C.FRAMEBUFFER, C.COLOR_ATTACHMENT0, C.TEXTURE_2D, null, 0));
}
function Xt(C) {
  const A = C.checkFramebufferStatus(C.FRAMEBUFFER);
  if (A !== C.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + function(g, I) {
      switch (I) {
        case g.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
          return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
        case g.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
          return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
        case g.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
          return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
        case g.FRAMEBUFFER_UNSUPPORTED:
          return "FRAMEBUFFER_UNSUPPORTED";
        default:
          return `unknown error ${I}`;
      }
    }(C, A));
}
function TB(C, A, g) {
  const I = JA(C, () => A());
  if (I == null)
    throw new Error(g);
  return I;
}
function VE(C, A = 2) {
  return cA(C.slice(0, C.length - A));
}
function WE(C) {
  if (C.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [C.length > 1 ? C[C.length - 2] : 1, C[C.length - 1]];
}
function Ot(C) {
  let A = [1, 1, 1];
  return C.length === 0 || C.length === 1 && C[0] === 1 || (A = [VE(C), ...WE(C)]), A;
}
function vt(C) {
  return C % 2 == 0;
}
function Le(C, A) {
  if (Zg(C = C.slice(-2), A = A.slice(-2)) || !C.length || !A.length || C[0] === 0 || C[1] === 0 || A[0] === 0 || A[1] === 0)
    return !0;
  if (C.length !== A.length) {
    const g = C[C.length - 1], I = A[A.length - 1];
    if (g === I || vt(g) && vt(I) && (C[0] === 1 || A[0] === 1))
      return !0;
  }
  return C[1] === A[1] && vt(C[0]) && vt(A[0]);
}
let ba, Ha;
function zC(C, A) {
  return C.getExtension(A) != null;
}
function Jw(C) {
  try {
    if (eB(C) != null)
      return !0;
  } catch (A) {
    return console.log("Error when getting WebGL context: ", A), !1;
  }
  return !1;
}
function NY(C) {
  if (C === 0)
    return !1;
  const A = eB(C);
  if (C !== 1) {
    if (zC(A, "EXT_color_buffer_float"))
      return er(A);
    const g = "EXT_color_buffer_half_float";
    if (zC(A, g)) {
      const I = A.getExtension(g);
      return function(B, Q) {
        const E = wD(B, Q), i = B.createTexture();
        B.bindTexture(B.TEXTURE_2D, i);
        const o = 1, t = 1;
        B.texImage2D(B.TEXTURE_2D, 0, E.internalFormatHalfFloat, o, t, 0, E.textureFormatFloat, E.textureTypeHalfFloat, null);
        const e = B.createFramebuffer();
        B.bindFramebuffer(B.FRAMEBUFFER, e), B.framebufferTexture2D(B.FRAMEBUFFER, B.COLOR_ATTACHMENT0, B.TEXTURE_2D, i, 0);
        const s = B.checkFramebufferStatus(B.FRAMEBUFFER) === B.FRAMEBUFFER_COMPLETE;
        return B.bindTexture(B.TEXTURE_2D, null), B.bindFramebuffer(B.FRAMEBUFFER, null), B.deleteTexture(i), B.deleteFramebuffer(e), s;
      }(A, I);
    }
    return !1;
  }
  return !zC(A, "OES_texture_float") || !zC(A, "WEBGL_color_buffer_float") ? !1 : er(A);
}
function er(C) {
  const A = wD(C), g = C.createTexture();
  C.bindTexture(C.TEXTURE_2D, g), C.texImage2D(C.TEXTURE_2D, 0, A.internalFormatFloat, 1, 1, 0, A.textureFormatFloat, A.textureTypeFloat, null);
  const I = C.createFramebuffer();
  C.bindFramebuffer(C.FRAMEBUFFER, I), C.framebufferTexture2D(C.FRAMEBUFFER, C.COLOR_ATTACHMENT0, C.TEXTURE_2D, g, 0);
  const B = C.checkFramebufferStatus(C.FRAMEBUFFER) === C.FRAMEBUFFER_COMPLETE;
  return C.bindTexture(C.TEXTURE_2D, null), C.bindFramebuffer(C.FRAMEBUFFER, null), C.deleteTexture(g), C.deleteFramebuffer(I), B;
}
function ct(C, A) {
  Array.isArray(C) || (C = [C]), C.forEach((g) => {
    g != null && f(g.dtype !== "complex64", () => `${A} does not support complex64 tensors in the WebGL backend.`);
  });
}
const vA = aA();
function iC() {
  let C, A, g, I, B, Q, E, i, o, t;
  return aA().getNumber("WEBGL_VERSION") === 2 ? (C = "#version 300 es", A = "in", g = "out", I = "in", B = "texture", Q = "outputColor", E = "out vec4 outputColor;", i = aA().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", o = "", t = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (C = "", A = "attribute", g = "varying", I = "varying", B = "texture2D", Q = "gl_FragColor", E = "", i = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, o = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, t = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: C, attribute: A, varyingVs: g, varyingFs: I, texture2D: B, output: Q, defineOutput: E, defineSpecialNaN: i, defineSpecialInf: o, defineRound: t };
}
function ZQ(C, A, g = "index") {
  const I = zA(A);
  return I.map((B, Q) => `${`int ${C[Q]} = ${g} / ${B}`}; ${Q === I.length - 1 ? `int ${C[Q + 1]} = ${g} - ${C[Q]} * ${B}` : `index -= ${C[Q]} * ${B}`};`).join("");
}
function me(C, A, g = "index") {
  const I = zA(A);
  return I.map((B, Q) => `${`int ${C[Q]} = ${g} / outShapeStrides[${Q}]`}; ${Q === I.length - 1 ? `int ${C[Q + 1]} = ${g} - ${C[Q]} * outShapeStrides[${Q}]` : `index -= ${C[Q]} * outShapeStrides[${Q}]`};`).join("");
}
function uY(C, A, g = "index") {
  const I = function(B, Q) {
    const E = B.length, i = B.map((t) => `${Q}[${t}]`), o = new Array(E - 1);
    o[E - 2] = i[E - 1];
    for (let t = E - 3; t >= 0; --t)
      o[t] = `(${o[t + 1]} * ${i[t + 1]})`;
    return o;
  }(C.map((B, Q) => Q), A);
  return I.map((B, Q) => `${`int ${C[Q]} = ${g} / ${I[Q]}`}; ${Q === I.length - 1 ? `int ${C[Q + 1]} = ${g} - ${C[Q]} * ${I[Q]}` : `index -= ${C[Q]} * ${I[Q]}`};`).join("");
}
function lD(C) {
  const A = zA(C).map((g) => g.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${A[0]} + coords.y * ${A[1]} + coords.z;
  }
`;
}
vA.registerFlag("HAS_WEBGL", () => vA.getNumber("WEBGL_VERSION") > 0), vA.registerFlag("WEBGL_VERSION", () => Jw(2) ? 2 : Jw(1) ? 1 : 0), vA.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1), vA.registerFlag("WEBGL_BUFFER_SUPPORTED", () => vA.get("WEBGL_VERSION") === 2), vA.registerFlag("WEBGL_CPU_FORWARD", () => !0), vA.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1), vA.registerFlag("WEBGL_PACK", () => vA.getBool("HAS_WEBGL")), vA.registerFlag("WEBGL_PACK_NORMALIZATION", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_PACK_CLIP", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_PACK_REDUCE", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_LAZILY_UNPACK", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_CONV_IM2COL", () => vA.getBool("WEBGL_PACK")), vA.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => function(C) {
  if (ba == null) {
    const A = eB(C);
    ba = A.getParameter(A.MAX_TEXTURE_SIZE);
  }
  return ba;
}(vA.getNumber("WEBGL_VERSION"))), vA.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => function(C) {
  if (Ha == null) {
    const A = eB(C);
    Ha = A.getParameter(A.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Ha);
}(vA.getNumber("WEBGL_VERSION"))), vA.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const C = vA.getNumber("WEBGL_VERSION");
  return C === 0 ? 0 : function(A) {
    if (A === 0)
      return 0;
    let g;
    const I = eB(A);
    return g = zC(I, "EXT_disjoint_timer_query_webgl2") && A === 2 ? 2 : zC(I, "EXT_disjoint_timer_query") ? 1 : 0, g;
  }(C);
}), vA.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => vA.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !Bc()), vA.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => function(C) {
  if (C === 0)
    return !1;
  const A = eB(C);
  if (C === 1) {
    if (!zC(A, "OES_texture_float"))
      return !1;
  } else if (!zC(A, "EXT_color_buffer_float"))
    return !1;
  return er(A);
}(vA.getNumber("WEBGL_VERSION"))), vA.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => !vA.getBool("WEBGL_FORCE_F16_TEXTURES") && vA.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")), vA.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => NY(vA.getNumber("WEBGL_VERSION"))), vA.registerFlag("WEBGL_FENCE_API_ENABLED", () => {
  return (C = vA.getNumber("WEBGL_VERSION")) === 2 && eB(C).fenceSync != null;
  var C;
}), vA.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => vA.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0), vA.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (C) => {
  if (C < 0 && C !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${C}.`);
}), vA.registerFlag("WEBGL_FLUSH_THRESHOLD", () => Bc() ? 1 : -1, (C) => {
  if (C < 0 && C !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${C}.`);
}), vA.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128), vA.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1), vA.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5), vA.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128), vA.registerFlag("WEBGL_EXP_CONV", () => !1), vA.registerFlag("SOFTWARE_WEBGL_ENABLED", () => vA.getBool("IS_TEST")), vA.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0), vA.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1), vA.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1), vA.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
const mF = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`, { getBroadcastDims: fw } = ek;
function kY(C, A, g) {
  const I = [];
  if (C.forEach((a) => {
    const r = cA(a.shapeInfo.logicalShape);
    if (a.shapeInfo.isUniform ? I.push(`uniform float ${a.name}${r > 1 ? `[${r}]` : ""};`) : (I.push(`uniform sampler2D ${a.name};`), I.push(`uniform int offset${a.name};`)), g.enableShapeUniforms) {
      const { uniformShape: h } = sr(g.packedInputs, a.shapeInfo.logicalShape, a.shapeInfo.texShape);
      switch (h.length) {
        case 1:
          I.push(`uniform int ${a.name}Shape;`);
          break;
        case 2:
          I.push(`uniform ivec2 ${a.name}Shape;`);
          break;
        case 3:
          I.push(`uniform ivec3 ${a.name}Shape;`);
          break;
        case 4:
          I.push(`uniform ivec4 ${a.name}Shape;`);
      }
      I.push(`uniform ivec2 ${a.name}TexShape;`);
    }
  }), g.enableShapeUniforms) {
    switch (A.logicalShape.length) {
      case 1:
        I.push("uniform int outShape;");
        break;
      case 2:
        I.push("uniform ivec2 outShape;"), I.push("uniform int outShapeStrides;");
        break;
      case 3:
        I.push("uniform ivec3 outShape;"), I.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        I.push("uniform ivec4 outShape;"), I.push("uniform ivec3 outShapeStrides;");
    }
    I.push("uniform ivec2 outTexShape;");
  }
  g.customUniforms && g.customUniforms.forEach((a) => {
    I.push(`uniform ${a.type} ${a.name}${a.arrayIndex ? `[${a.arrayIndex}]` : ""};`);
  });
  const B = I.join(`
`), Q = C.map((a) => function(r, h, w = !1, G) {
    let D = "";
    D += w ? bF(r, G) : ME(r, G);
    const l = r.shapeInfo.logicalShape, d = h.logicalShape;
    return l.length <= d.length && (D += w ? function(N, k) {
      const p = N.name, Y = p.charAt(0).toUpperCase() + p.slice(1), M = "get" + Y + "AtOutCoords", L = N.shapeInfo.logicalShape.length, m = k.logicalShape.length, x = fw(N.shapeInfo.logicalShape, k.logicalShape), T = AI(m), Z = m - L;
      let $;
      const AA = ["x", "y", "z", "w", "u", "v"];
      $ = L === 0 ? "" : m < 2 && x.length >= 1 ? "coords = 0;" : x.map((rA) => `coords.${AA[rA + Z]} = 0;`).join(`
`);
      let P = "";
      P = m < 2 && L > 0 ? "coords" : N.shapeInfo.logicalShape.map((rA, eA) => `coords.${AA[eA + Z]}`).join(", ");
      let _ = "return outputValue;";
      const QA = cA(N.shapeInfo.logicalShape) === 1, tA = cA(k.logicalShape), O = tA === 1;
      if (L !== 1 || QA || O) {
        if (QA && !O)
          _ = m === 1 ? `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : `
        return vec4(outputValue.x);
      `;
        else if (x.length) {
          const rA = L - 2, eA = L - 1;
          x.indexOf(rA) > -1 && x.indexOf(eA) > -1 ? _ = "return vec4(outputValue.x);" : x.indexOf(rA) > -1 ? _ = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : x.indexOf(eA) > -1 && (_ = "return vec4(outputValue.xx, outputValue.zz);");
        }
      } else
        _ = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
      return `
    vec4 ${M}() {
      ${T} coords = getOutputCoords();
      ${$}
      vec4 outputValue = get${Y}(${P});
      ${_}
    }
  `;
    }(r, h) : function(N, k) {
      const p = N.name, Y = p.charAt(0).toUpperCase() + p.slice(1), M = "get" + Y + "AtOutCoords", L = k.texShape, m = N.shapeInfo.texShape, x = N.shapeInfo.logicalShape.length, T = k.logicalShape.length;
      if (!N.shapeInfo.isUniform && x === T && N.shapeInfo.flatOffset == null && Zg(m, L))
        return `
      float ${M}() {
        return sampleTexture(${p}, resultUV);
      }
    `;
      const Z = AI(T), $ = fw(N.shapeInfo.logicalShape, k.logicalShape), AA = T - x;
      let P;
      const _ = ["x", "y", "z", "w", "u", "v"];
      P = x === 0 ? "" : T < 2 && $.length >= 1 ? "coords = 0;" : $.map((tA) => `coords.${_[tA + AA]} = 0;`).join(`
`);
      let QA = "";
      return QA = T < 2 && x > 0 ? "coords" : N.shapeInfo.logicalShape.map((tA, O) => `coords.${_[O + AA]}`).join(", "), `
    float ${M}() {
      ${Z} coords = getOutputCoords();
      ${P}
      return get${Y}(${QA});
    }
  `;
    }(r, h)), D;
  }(a, A, g.packedInputs, g.enableShapeUniforms)).join(`
`), E = A.texShape, i = iC(), o = function(a) {
    return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${a.texture2D}(textureSampler, uv).r;
    }
  `;
  }(i);
  let t, e, s = function(a) {
    return `${a.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${a.varyingFs} vec2 resultUV;
    ${a.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${a.defineSpecialNaN}
    ${a.defineSpecialInf}
    ${a.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${KY}
    ${SY}
    ${pY}
  `;
  }(i);
  return A.isPacked ? (t = function(a, r, h) {
    switch (a.length) {
      case 0:
        return Lw();
      case 1:
        return function(w, G, D) {
          const l = [Math.ceil(G[0] / 2), Math.ceil(G[1] / 2)];
          return l[0] === 1 ? D ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${l[1]}.0);
      }
    ` : l[1] === 1 ? D ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${l[0]}.0);
      }
    ` : D ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${l[0]}, ${l[1]}));
      return 2 * (resTexRC.x * ${l[1]} + resTexRC.y);
    }
  `;
        }(0, r, h);
      case 2:
        return function(w, G, D) {
          const l = [Math.ceil(G[0] / 2), Math.ceil(G[1] / 2)];
          if (Zg(w, G))
            return D ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${l[0]}, ${l[1]}));
      }
    `;
          const d = Math.ceil(w[1] / 2);
          return D ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${l[0]}, ${l[1]}));

      int index = resTexRC.x * ${l[1]} + resTexRC.y;
      int r = 2 * (index / ${d});
      int c = imod(index, ${d}) * 2;

      return ivec2(r, c);
    }
  `;
        }(a, r, h);
      case 3:
        return function(w, G, D) {
          if (D)
            return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
          const l = [Math.ceil(G[0] / 2), Math.ceil(G[1] / 2)], d = Math.ceil(w[2] / 2), N = d * Math.ceil(w[1] / 2);
          return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${l[0]}, ${l[1]}));
      int index = resTexRC.x * ${l[1]} + resTexRC.y;

      int b = index / ${N};
      index -= b * ${N};

      int r = 2 * (index / ${d});
      int c = imod(index, ${d}) * 2;

      return ivec3(b, r, c);
    }
  `;
        }(a, r, h);
      default:
        return function(w, G, D) {
          if (D)
            return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
          const l = [Math.ceil(G[0] / 2), Math.ceil(G[1] / 2)], d = Math.ceil(w[w.length - 1] / 2), N = d * Math.ceil(w[w.length - 2] / 2);
          let k = N, p = "", Y = "b, r, c";
          for (let M = 2; M < w.length - 1; M++)
            k *= w[w.length - M - 1], p = `
      int b${M} = index / ${k};
      index -= b${M} * ${k};
    ` + p, Y = `b${M}, ` + Y;
          return `
    ivec${w.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${l[0]}, ${l[1]}));
      int index = resTexRC.x * ${l[1]} + resTexRC.y;

      ${p}

      int b = index / ${N};
      index -= b * ${N};

      int r = 2 * (index / ${d});
      int c = imod(index, ${d}) * 2;

      return ivec${w.length}(${Y});
    }
  `;
        }(a, r, h);
    }
  }(A.logicalShape, E, g.enableShapeUniforms), e = function(a) {
    return `
    void setOutput(vec4 val) {
      ${a.output} = val;
    }
  `;
  }(i)) : (t = function(a, r, h) {
    switch (a.length) {
      case 0:
        return Lw();
      case 1:
        return function(w, G, D) {
          return G[0] === 1 ? D ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${G[1]}.0);
      }
    ` : G[1] === 1 ? D ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${G[0]}.0);
      }
    ` : D ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${G[0]}, ${G[1]}));
      return resTexRC.x * ${G[1]} + resTexRC.y;
    }
  `;
        }(0, r, h);
      case 2:
        return function(w, G, D) {
          return Zg(w, G) ? D ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${G[0]}, ${G[1]}));
      }
    ` : w[1] === 1 ? D ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${G[0]}, ${G[1]}));
        int index = resTexRC.x * ${G[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : w[0] === 1 ? D ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${G[0]}, ${G[1]}));
        int index = resTexRC.x * ${G[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : D ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${G[0]}, ${G[1]}));
      int index = resTexRC.x * ${G[1]} + resTexRC.y;
      int r = index / ${w[1]};
      int c = index - r * ${w[1]};
      return ivec2(r, c);
    }
  `;
        }(a, r, h);
      case 3:
        return function(w, G, D) {
          if (D)
            return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${me(["r", "c", "d"], w)}
    return ivec3(r, c, d);
  }
`;
          const l = ZQ(["r", "c", "d"], w);
          return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${G[0]}, ${G[1]}));
      int index = resTexRC.x * ${G[1]} + resTexRC.y;
      ${l}
      return ivec3(r, c, d);
    }
  `;
        }(a, r, h);
      case 4:
        return function(w, G, D) {
          if (D)
            return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${me(["r", "c", "d", "d2"], w)}
      return ivec4(r, c, d, d2);
    }
  `;
          const l = ZQ(["r", "c", "d", "d2"], w);
          return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${G[0]}, ${G[1]}));
      int index = resTexRC.x * ${G[1]} + resTexRC.y;
      ${l}
      return ivec4(r, c, d, d2);
    }
  `;
        }(a, r, h);
      case 5:
        return function(w, G) {
          const D = ZQ(["r", "c", "d", "d2", "d3"], w);
          return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${G[0]},
                             ${G[1]}));

      int index = resTexRC.x * ${G[1]} + resTexRC.y;

      ${D}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
        }(a, r);
      case 6:
        return function(w, G) {
          const D = ZQ(["r", "c", "d", "d2", "d3", "d4"], w);
          return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${G[0]}, ${G[1]}));
      int index = resTexRC.x * ${G[1]} + resTexRC.y;

      ${D}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
        }(a, r);
      default:
        throw new Error(`${a.length}-D output sampling is not yet supported`);
    }
  }(A.logicalShape, E, g.enableShapeUniforms), e = function(a) {
    return `
    void setOutput(float val) {
      ${a.output} = vec4(val, 0, 0, 0);
    }
  `;
  }(i)), g.packedInputs && (s += MY), [s, o, e, B, t, Q, g.userCode].join(`
`);
}
function ME(C, A = !1) {
  const g = C.shapeInfo.logicalShape;
  switch (g.length) {
    case 0:
      return function(I, B) {
        const Q = I.name, E = "get" + Q.charAt(0).toUpperCase() + Q.slice(1);
        if (I.shapeInfo.isUniform)
          return `float ${E}() {return ${Q};}`;
        const [i, o] = I.shapeInfo.texShape;
        if (i === 1 && o === 1)
          return `
      float ${E}() {
        return sampleTexture(${Q}, halfCR);
      }
    `;
        const t = fQ(Q);
        if (B)
          return `
    float ${E}() {
      vec2 uv = uvFromFlat(${Q}TexShape[0], ${Q}TexShape[1], ${t});
      return sampleTexture(${Q}, uv);
    }
  `;
        const [e, s] = I.shapeInfo.texShape;
        return `
    float ${E}() {
      vec2 uv = uvFromFlat(${e}, ${s}, ${t});
      return sampleTexture(${Q}, uv);
    }
  `;
      }(C, A);
    case 1:
      return function(I, B) {
        const Q = I.name, E = "get" + Q.charAt(0).toUpperCase() + Q.slice(1);
        if (I.shapeInfo.isUniform)
          return `
      float ${E}(int index) {
        ${NE(I)}
      }
    `;
        const i = I.shapeInfo.texShape, o = i[0], t = i[1];
        if (t === 1 && o === 1)
          return `
      float ${E}(int index) {
        return sampleTexture(${Q}, halfCR);
      }
    `;
        const e = fQ(Q);
        return t === 1 ? B ? `
      float ${E}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${e}) + 0.5) / float(${Q}TexShape[0]));
        return sampleTexture(${Q}, uv);
      }
    ` : `
      float ${E}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${e}) + 0.5) / ${o}.0);
        return sampleTexture(${Q}, uv);
      }
    ` : o === 1 ? B ? `
      float ${E}(int index) {
        vec2 uv = vec2((float(index + ${e}) + 0.5) / float(${Q}TexShape[1]), 0.5);
        return sampleTexture(${Q}, uv);
      }
    ` : `
      float ${E}(int index) {
        vec2 uv = vec2((float(index + ${e}) + 0.5) / ${t}.0, 0.5);
        return sampleTexture(${Q}, uv);
      }
    ` : B ? `
    float ${E}(int index) {
      vec2 uv = uvFromFlat(${Q}TexShape[0], ${Q}TexShape[1], index + ${e});
      return sampleTexture(${Q}, uv);
    }
  ` : `
    float ${E}(int index) {
      vec2 uv = uvFromFlat(${o}, ${t}, index + ${e});
      return sampleTexture(${Q}, uv);
    }
  `;
      }(C, A);
    case 2:
      return function(I, B) {
        const Q = I.shapeInfo.logicalShape, E = I.name, i = "get" + E.charAt(0).toUpperCase() + E.slice(1), o = I.shapeInfo.texShape;
        if (o != null && Zg(Q, o)) {
          if (B)
            return `
      float ${i}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${E}TexShape[1], ${E}TexShape[0]);
        return sampleTexture(${E}, uv);
      }
    `;
          const w = o[0];
          return `
    float ${i}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${w}.0);
      return sampleTexture(${E}, uv);
    }
  `;
        }
        const { newShape: t, keptDims: e } = QQ(Q), s = t;
        if (s.length < Q.length) {
          const w = ["row", "col"];
          return `
      ${ME(UE(I, s), B)}
      float ${i}(int row, int col) {
        return ${i}(${YE(w, e)});
      }
    `;
        }
        if (I.shapeInfo.isUniform)
          return `
      float ${i}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${Q[1]}, 1)));
        ${NE(I)}
      }
    `;
        const a = o[0], r = o[1], h = fQ(E);
        return r === 1 ? B ? `
      float ${i}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${E}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${E}TexShape[0]));
        return sampleTexture(${E}, uv);
      }
    ` : `
    float ${i}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${Q[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${a}.0);
      return sampleTexture(${E}, uv);
    }
  ` : a === 1 ? B ? `
      float ${i}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${E}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${E}TexShape[1]), 0.5);
        return sampleTexture(${E}, uv);
      }
    ` : `
    float ${i}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${Q[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${r}.0, 0.5);
      return sampleTexture(${E}, uv);
    }
  ` : B ? `
      float ${i}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${E}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${E}TexShape[0], ${E}TexShape[1], index);
        return sampleTexture(${E}, uv);
      }
    ` : `
  float ${i}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${Q[1]} + col + ${h};
    vec2 uv = uvFromFlat(${a}, ${r}, index);
    return sampleTexture(${E}, uv);
  }
`;
      }(C, A);
    case 3:
      return function(I, B) {
        const Q = I.shapeInfo.logicalShape, E = I.name, i = "get" + E.charAt(0).toUpperCase() + E.slice(1), o = Q[1] * Q[2], t = Q[2], { newShape: e, keptDims: s } = QQ(Q), a = e;
        if (a.length < Q.length) {
          const l = ["row", "col", "depth"];
          return `
        ${ME(UE(I, a), B)}
        float ${i}(int row, int col, int depth) {
          return ${i}(${YE(l, s)});
        }
      `;
        }
        if (I.shapeInfo.isUniform)
          return `
      float ${i}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${o}, ${t}, 1)));
        ${NE(I)}
      }
    `;
        const r = I.shapeInfo.texShape, h = r[0], w = r[1], G = I.shapeInfo.flatOffset;
        if (w === o && G == null)
          return B ? `
      float ${i}(int row, int col, int depth) {
        int stride1 = ${E}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${E}TexShape[1], ${E}TexShape[0]);
        return sampleTexture(${E}, uv);
      }
    ` : `
        float ${i}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${t}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${w}.0, ${h}.0);
          return sampleTexture(${E}, uv);
        }
      `;
        if (w === t && G == null)
          return B ? `
      float ${i}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${E}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${E}TexShape[1], ${E}TexShape[0]);
        return sampleTexture(${E}, uv);
      }
    ` : `
    float ${i}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${Q[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${w}.0, ${h}.0);
      return sampleTexture(${E}, uv);
    }
  `;
        const D = fQ(E);
        return B ? `
    float ${i}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${E}Shape[1] * ${E}Shape[2];
      int stride1 = ${E}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${D};
      vec2 uv = uvFromFlat(${E}TexShape[0], ${E}TexShape[1], index);
      return sampleTexture(${E}, uv);
    }
    ` : `
      float ${i}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o} + col * ${t} + depth + ${D};
        vec2 uv = uvFromFlat(${h}, ${w}, index);
        return sampleTexture(${E}, uv);
      }
  `;
      }(C, A);
    case 4:
      return function(I, B) {
        const Q = I.shapeInfo.logicalShape, E = I.name, i = "get" + E.charAt(0).toUpperCase() + E.slice(1), o = Q[3], t = Q[2] * o, e = Q[1] * t, { newShape: s, keptDims: a } = QQ(Q);
        if (s.length < Q.length) {
          const k = ["row", "col", "depth", "depth2"];
          return `
      ${ME(UE(I, s), B)}
      float ${i}(int row, int col, int depth, int depth2) {
        return ${i}(${YE(k, a)});
      }
    `;
        }
        if (I.shapeInfo.isUniform)
          return `
      float ${i}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${e}, ${t}, ${o}, 1)));
        ${NE(I)}
      }
    `;
        const r = I.shapeInfo.flatOffset, h = I.shapeInfo.texShape, w = h[0], G = h[1], D = `int stride2 = ${E}Shape[3];`, l = `int stride1 = ${E}Shape[2] * stride2;`, d = `int stride0 = ${E}Shape[1] * stride1;`;
        if (G === e && r == null)
          return B ? `
      float ${i}(int row, int col, int depth, int depth2) {
        ${D}
        ${l}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${E}TexShape[1], ${E}TexShape[0]);
        return sampleTexture(${E}, uv);
      }
    ` : `
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${t}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${G}.0, ${w}.0);
        return sampleTexture(${E}, uv);
      }
    `;
        if (G === o && r == null)
          return B ? `
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${E}Shape[1] * ${E}Shape[2], ${E}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${E}TexShape[1], ${E}TexShape[0]);
        return sampleTexture(${E}, uv);
      }
    ` : `
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${Q[1] * Q[2]}, ${Q[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${G}.0, ${w}.0);
        return sampleTexture(${E}, uv);
      }
    `;
        const N = fQ(E);
        return B ? `
    float ${i}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${D}
      ${l}
      ${d}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${E}TexShape[0], ${E}TexShape[1], index + ${N});
      return sampleTexture(${E}, uv);
    }
  ` : `
    float ${i}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${e} + col * ${t} +
          depth * ${o} + depth2;
      vec2 uv = uvFromFlat(${w}, ${G}, index + ${N});
      return sampleTexture(${E}, uv);
    }
  `;
      }(C, A);
    case 5:
      return function(I) {
        const B = I.shapeInfo.logicalShape, Q = I.name, E = "get" + Q.charAt(0).toUpperCase() + Q.slice(1), i = B[4], o = B[3] * i, t = B[2] * o, e = B[1] * t, { newShape: s, keptDims: a } = QQ(B);
        if (s.length < B.length) {
          const l = ["row", "col", "depth", "depth2", "depth3"];
          return `
      ${ME(UE(I, s))}
      float ${E}(int row, int col, int depth, int depth2, int depth3) {
        return ${E}(${YE(l, a)});
      }
    `;
        }
        if (I.shapeInfo.isUniform)
          return `
      float ${E}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${e}, ${t}, ${o}, ${i})) +
          depth3;
        ${NE(I)}
      }
    `;
        const r = I.shapeInfo.flatOffset, h = I.shapeInfo.texShape, w = h[0], G = h[1];
        if (G === e && r == null)
          return `
      float ${E}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${t}, ${o}, ${i}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${G}.0, ${w}.0);
        return sampleTexture(${Q}, uv);
      }
    `;
        if (G === i && r == null)
          return `
      float ${E}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${B[1] * B[2] * B[3]},
               ${B[2] * B[3]}, ${B[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${G}.0, ${w}.0);
        return sampleTexture(${Q}, uv);
      }
    `;
        const D = fQ(Q);
        return `
    float ${E}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${e} + col * ${t} + depth * ${o} +
          depth2 * ${i} + depth3 + ${D};
      vec2 uv = uvFromFlat(${w}, ${G}, index);
      return sampleTexture(${Q}, uv);
    }
  `;
      }(C);
    case 6:
      return function(I) {
        const B = I.shapeInfo.logicalShape, Q = I.name, E = "get" + Q.charAt(0).toUpperCase() + Q.slice(1), { newShape: i, keptDims: o } = QQ(B);
        if (i.length < B.length) {
          const d = ["row", "col", "depth", "depth2", "depth3", "depth4"];
          return `
      ${ME(UE(I, i))}
      float ${E}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${E}(${YE(d, o)});
      }
    `;
        }
        const t = B[5], e = B[4] * t, s = B[3] * e, a = B[2] * s, r = B[1] * a;
        if (I.shapeInfo.isUniform)
          return `
      float ${E}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${r}, ${a}, ${s}, ${e})) +
          dot(
            vec2(depth3, depth4),
            vec2(${t}, 1)));
        ${NE(I)}
      }
    `;
        const h = I.shapeInfo.flatOffset, w = I.shapeInfo.texShape, G = w[0], D = w[1];
        if (D === r && h == null)
          return `
      float ${E}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${a}, ${s}, ${e}, ${t})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${D}.0, ${G}.0);
        return sampleTexture(${Q}, uv);
      }
    `;
        if (D === t && h == null)
          return `
      float ${E}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${B[1] * B[2] * B[3] * B[4]},
               ${B[2] * B[3] * B[4]},
               ${B[3] * B[4]},
               ${B[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${D}.0, ${G}.0);
        return sampleTexture(${Q}, uv);
      }
    `;
        const l = fQ(Q);
        return `
    float ${E}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${r} + col * ${a} + depth * ${s} +
          depth2 * ${e} + depth3 * ${t} + depth4 + ${l};
      vec2 uv = uvFromFlat(${G}, ${D}, index);
      return sampleTexture(${Q}, uv);
    }
  `;
      }(C);
    default:
      throw new Error(`${g.length}-D input sampling is not yet supported`);
  }
}
function bF(C, A) {
  switch (C.shapeInfo.logicalShape.length) {
    case 0:
      return function(g) {
        const I = g.name, B = "get" + I.charAt(0).toUpperCase() + I.slice(1), Q = iC();
        return `
    vec4 ${B}() {
      return ${Q.texture2D}(${I}, halfCR);
    }
  `;
      }(C);
    case 1:
      return function(g, I) {
        const B = g.name, Q = "get" + B.charAt(0).toUpperCase() + B.slice(1), E = g.shapeInfo.texShape, i = iC();
        if (I)
          return `
    vec4 ${Q}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${B}TexShape[0]) / 2.0), ceil(float(${B}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${i.texture2D}(${B}, uv);
    }
  `;
        const o = [Math.ceil(E[0] / 2), Math.ceil(E[1] / 2)];
        return `
    vec4 ${Q}(int index) {
      vec2 uv = packedUVfrom1D(
        ${o[0]}, ${o[1]}, index);
      return ${i.texture2D}(${B}, uv);
    }
  `;
      }(C, A);
    case 2:
      return function(g, I) {
        const B = g.shapeInfo.logicalShape, Q = g.name, E = "get" + Q.charAt(0).toUpperCase() + Q.slice(1), i = g.shapeInfo.texShape, o = i[0], t = i[1], e = iC();
        if (i != null && Zg(B, i))
          return I ? `
      vec4 ${E}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${Q}TexShape[1], ${Q}TexShape[0]);

        return ${e.texture2D}(${Q}, uv);
      }
    ` : `
      vec4 ${E}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${o}.0);

        return ${e.texture2D}(${Q}, uv);
      }
    `;
        if (I)
          return `
    vec4 ${E}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${Q}TexShape[0]) / 2.0), ceil(float(${Q}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${Q}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${e.texture2D}(${Q}, uv);
    }
  `;
        const s = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)], a = Math.ceil(B[1] / 2);
        return `
    vec4 ${E}(int row, int col) {
      vec2 uv = packedUVfrom2D(${a}, ${s[0]}, ${s[1]}, row, col);
      return ${e.texture2D}(${Q}, uv);
    }
  `;
      }(C, A);
    case 3:
      return function(g, I) {
        const B = g.shapeInfo.logicalShape, Q = g.name, E = "get" + Q.charAt(0).toUpperCase() + Q.slice(1), i = g.shapeInfo.texShape, o = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)];
        if (B[0] === 1) {
          const h = [1, 2], w = ["b", "row", "col"];
          return `
        ${bF(UE(g, B.slice(1)), I)}
        vec4 ${E}(int b, int row, int col) {
          return ${E}(${YE(w, h)});
        }
      `;
        }
        const t = iC();
        if (I)
          return `
    vec4 ${E}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${Q}TexShape[0]) / 2.0), ceil(float(${Q}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${Q}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${Q}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${t.texture2D}(${Q}, uv);
    }
  `;
        const e = o[0], s = o[1], a = Math.ceil(B[2] / 2), r = a * Math.ceil(B[1] / 2);
        return `
    vec4 ${E}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${e}, ${s}, ${r}, ${a}, b, row, col);
      return ${t.texture2D}(${Q}, uv);
    }
  `;
      }(C, A);
    default:
      return function(g, I) {
        const B = g.name, Q = "get" + B.charAt(0).toUpperCase() + B.slice(1), E = iC();
        if (I)
          return `
    vec4 ${Q}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${B}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${B}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${B}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${B}TexShape[0]) / 2.0), ceil(float(${B}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${E.texture2D}(${B}, uv);
    }
  `;
        const i = g.shapeInfo.logicalShape, o = i.length, t = g.shapeInfo.texShape, e = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], s = e[0], a = e[1], r = Math.ceil(i[o - 1] / 2);
        let h = r * Math.ceil(i[o - 2] / 2), w = "int b, int row, int col", G = `b * ${h} + (row / 2) * ${r} + (col / 2)`;
        for (let D = 2; D < o - 1; D++)
          w = `int b${D}, ` + w, h *= i[o - D - 1], G = `b${D} * ${h} + ` + G;
        return `
    vec4 ${Q}(${w}) {
      int index = ${G};
      int texR = index / ${a};
      int texC = index - texR * ${a};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}, ${s});
      return ${E.texture2D}(${B}, uv);
    }
  `;
      }(C, A);
  }
}
const KY = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, SY = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, pY = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, MY = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function Lw() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function fQ(C) {
  return `offset${C}`;
}
function NE(C) {
  const A = C.name, g = cA(C.shapeInfo.logicalShape);
  return g < 2 ? `return ${A};` : `
    for (int i = 0; i < ${g}; i++) {
      if (i == index) {
        return ${A}[i];
      }
    }
  `;
}
function AI(C) {
  if (C <= 1)
    return "int";
  if (C === 2)
    return "ivec2";
  if (C === 3)
    return "ivec3";
  if (C === 4)
    return "ivec4";
  if (C === 5)
    return "ivec5";
  if (C === 6)
    return "ivec6";
  throw Error(`GPU for rank ${C} is not yet supported`);
}
function sr(C, A, g) {
  const { newShape: I, keptDims: B } = QQ(A), Q = A.length, E = C && Q === 3 && A[0] === 1, i = E ? A.slice(1) : I, o = !C && Q > 1 && !Zg(A, g) && I.length < Q || E;
  return { useSqueezeShape: o, uniformShape: o ? i : A, keptDims: B };
}
function UE(C, A) {
  const g = JSON.parse(JSON.stringify(C));
  return g.shapeInfo.logicalShape = A, g;
}
function YE(C, A) {
  return A.map((g) => C[g]).join(", ");
}
function UY(C, A, g, I) {
  const B = g.map((e, s) => {
    const a = { logicalShape: e.shape, texShape: e.isUniform ? null : e.texData.texShape, isUniform: e.isUniform, isPacked: !e.isUniform && e.texData.isPacked, flatOffset: null };
    return e.texData != null && e.texData.slice != null && e.texData.slice.flatOffset > 0 && (a.flatOffset = e.texData.slice.flatOffset), { name: A.variableNames[s], shapeInfo: a };
  }), Q = B.map((e) => e.shapeInfo), E = { logicalShape: I.shape, texShape: I.texData.texShape, isUniform: !1, isPacked: I.texData.isPacked, flatOffset: null }, i = kY(B, E, A), o = function(e, s) {
    const a = TB(e, () => e.createShader(e.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
    if (JA(e, () => e.shaderSource(a, s)), JA(e, () => e.compileShader(a)), aA().get("ENGINE_COMPILE_ONLY"))
      return a;
    if (e.getShaderParameter(a, e.COMPILE_STATUS) === !1)
      throw LF(s, e.getShaderInfoLog(a)), new Error("Failed to compile fragment shader.");
    return a;
  }(C.gl, i), t = C.createProgram(o);
  return aA().get("ENGINE_COMPILE_ONLY") ? { program: A, fragmentShader: o, source: i, webGLProgram: t, inShapeInfos: Q, outShapeInfo: E, variablesLocations: null, customUniformLocations: null, infLoc: null, nanLoc: null, outShapeLocation: null, outShapeStridesLocation: null, outTexShapeLocation: null } : (C.buildVao(t), Object.assign({ program: A, fragmentShader: o, source: i, webGLProgram: t, inShapeInfos: Q, outShapeInfo: E }, HF(C, A, t)));
}
function HF(C, A, g) {
  const I = [], B = [];
  let Q, E, i, o = null, t = null;
  t = C.getUniformLocation(g, "NAN", !1), aA().getNumber("WEBGL_VERSION") === 1 && (o = C.getUniformLocation(g, "INFINITY", !1));
  const e = !1;
  for (const s of A.variableNames) {
    const a = { name: s, uniform: C.getUniformLocation(g, s, e), offset: C.getUniformLocation(g, `offset${s}`, e) };
    A.enableShapeUniforms && (a.shape = C.getUniformLocation(g, `${s}Shape`, e), a.texShape = C.getUniformLocation(g, `${s}TexShape`, e)), I.push(a);
  }
  if (A.enableShapeUniforms && (Q = C.getUniformLocation(g, "outShape", e), i = C.getUniformLocation(g, "outShapeStrides", e), E = C.getUniformLocation(g, "outTexShape", e)), A.customUniforms)
    for (const s of A.customUniforms)
      B.push(C.getUniformLocation(g, s.name, e));
  return { variablesLocations: I, customUniformLocations: B, infLoc: o, nanLoc: t, outShapeLocation: Q, outShapeStridesLocation: i, outTexShapeLocation: E };
}
function mw(C, A) {
  if (C.length !== A.length)
    throw Error(`Binary was compiled with ${C.length} inputs, but was executed with ${A.length} inputs`);
  C.forEach((g, I) => {
    const B = g.logicalShape, Q = A[I], E = Q.shape;
    if (!Zg(B, E))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${B} and ${E} must match`);
    if (g.isUniform && Q.isUniform)
      return;
    const i = g.texShape, o = Q.isUniform ? null : Q.texData.texShape;
    if (!Zg(i, o))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`);
  });
}
function CC(C) {
  return aA().getBool("WEBGL_USE_SHAPES_UNIFORMS") && C <= 4;
}
class YY {
  constructor(A) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = Io.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const g = iC();
    this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? me(["r", "c", "d"], A) : ZQ(["r", "c", "d"], A)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${g.output} = result;
      }
    `;
  }
}
class JY {
  constructor(A) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = Io.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const g = iC();
    this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? me(["r", "c", "d"], A) : ZQ(["r", "c", "d"], A)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${g.output} = result;
      }
    `;
  }
}
class fY {
  constructor(A) {
    this.variableNames = ["A"], this.outTexUsage = YC.DOWNLOAD;
    const g = iC();
    this.outputShape = A, this.userCode = `
      ${mF}

      void main() {
        float x = getAAtOutCoords();
        ${g.output} = encode_float(x);
      }
    `;
  }
}
class LY {
  constructor(A) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = YC.DOWNLOAD;
    const g = iC();
    this.outputShape = A, this.userCode = `
      ${mF}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${g.output} = encode_float(x);
      }
    `;
  }
}
const mY = { R: 0, G: 1, B: 2, A: 3 };
class bw {
  constructor(A, g = !1, I = "RGBA") {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const B = iC();
    this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length);
    let Q = "result";
    g && (Q = "floor(result * 255. + 0.5)");
    let E = "";
    for (let i = 0; i < I.length; i++) {
      const o = I[i];
      E += `
          if(offset == ${i}) {
            result = values[${mY[o]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
` : lD(A)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${I.length});

        flatIndex = idiv(flatIndex, ${I.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${B.texture2D}(A, uv);
          ${E}
        }
        ${B.output} = vec4(${Q}, 0., 0., 0.);
      }
    `;
  }
}
class bY {
  constructor(A, g = !1) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const I = iC();
    this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length);
    let B = "", Q = "result";
    g && (Q = "floor(result * 255. + 0.5)");
    for (let E = 0; E <= 1; E++)
      for (let i = 0; i <= 1; i++) {
        const o = 2 * E + i;
        B += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${A[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${E} < ${this.enableShapeUniforms ? "outShape[1]" : `${A[1]}`}) {
            localCoords[1] += ${E};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${I.texture2D}(A, uv);

            if (offset == 0) {
              result[${o}] = values[0];
            } else if (offset == 1) {
              result[${o}] = values[1];
            } else if (offset == 2) {
              result[${o}] = values[2];
            } else {
              result[${o}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
` : lD(A)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${B}

          ${I.output} = ${Q};
        }
    `;
  }
}
function HY(C) {
  const A = iC();
  return function(g, I) {
    const B = TB(g, () => g.createShader(g.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
    if (JA(g, () => g.shaderSource(B, I)), JA(g, () => g.compileShader(B)), g.getShaderParameter(B, g.COMPILE_STATUS) === !1)
      throw console.log(g.getShaderInfoLog(B)), new Error("Failed to compile vertex shader.");
    return B;
  }(C, `${A.version}
    precision highp float;
    ${A.attribute} vec3 clipSpacePos;
    ${A.attribute} vec2 uv;
    ${A.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`);
}
function xY(C) {
  return function(A, g) {
    const I = TB(A, () => A.createBuffer(), "Unable to create WebGLBuffer");
    return JA(A, () => A.bindBuffer(A.ARRAY_BUFFER, I)), JA(A, () => A.bufferData(A.ARRAY_BUFFER, g, A.STATIC_DRAW)), I;
  }(C, new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]));
}
function qY(C) {
  return function(A, g) {
    const I = TB(A, () => A.createBuffer(), "Unable to create WebGLBuffer");
    return JA(A, () => A.bindBuffer(A.ELEMENT_ARRAY_BUFFER, I)), JA(A, () => A.bufferData(A.ELEMENT_ARRAY_BUFFER, g, A.STATIC_DRAW)), I;
  }(C, new Uint16Array([0, 1, 2, 2, 1, 3]));
}
function Ui(C, A, g, I, B, Q) {
  (function(o, t) {
    const e = aA().getNumber("WEBGL_MAX_TEXTURE_SIZE");
    if (o <= 0 || t <= 0)
      throw new Error(`Requested texture size [${o}x${t}] is invalid.`);
    if (o > e || t > e)
      throw new Error(`Requested texture size [${o}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`);
  })(A, g);
  const E = function(o) {
    return TB(o, () => o.createTexture(), "Unable to create WebGLTexture.");
  }(C), i = C.TEXTURE_2D;
  return JA(C, () => C.bindTexture(i, E)), JA(C, () => C.texParameteri(i, C.TEXTURE_WRAP_S, C.CLAMP_TO_EDGE)), JA(C, () => C.texParameteri(i, C.TEXTURE_WRAP_T, C.CLAMP_TO_EDGE)), JA(C, () => C.texParameteri(i, C.TEXTURE_MIN_FILTER, C.NEAREST)), JA(C, () => C.texParameteri(i, C.TEXTURE_MAG_FILTER, C.NEAREST)), aA().getNumber("WEBGL_VERSION") === 1 ? JA(C, () => C.texImage2D(i, 0, I, A, g, 0, B, Q, null)) : JA(C, () => C.texStorage2D(i, 1, I, A, g)), JA(C, () => C.bindTexture(C.TEXTURE_2D, null)), { texture: E, texShape: [g, A] };
}
function xF(C) {
  return C.internalFormatFloat;
}
function qF(C) {
  return C.internalFormatHalfFloat;
}
function VF(C) {
  return C.downloadTextureFormat;
}
function WF(C) {
  return C.internalFormatPackedFloat;
}
function TF(C) {
  return C.internalFormatPackedHalfFloat;
}
function VY(C, A, g, I, B, Q, E, i) {
  const o = C, t = new Float32Array(function(e, s) {
    const [a, r] = qE(e, s);
    return a * r * 4;
  }(Q, E));
  return o.bindBuffer(o.PIXEL_PACK_BUFFER, A), o.getBufferSubData(o.PIXEL_PACK_BUFFER, 0, t), o.bindBuffer(o.PIXEL_PACK_BUFFER, null), t;
}
class xa {
  constructor(A) {
    this.outputTexture = null, this.program = null, this.disposed = !1, this.itemsToPoll = [];
    const g = aA().getNumber("WEBGL_VERSION");
    if (A != null ? (this.gl = A, function(Q, E) {
      bQ[Q] = E;
    }(g, A)) : this.gl = eB(g), A = this.gl, aA().getNumber("WEBGL_VERSION") === 2) {
      const Q = A;
      this.createVertexArray = () => JA(Q, () => Q.createVertexArray()), this.bindVertexArray = (E) => JA(Q, () => Q.bindVertexArray(E)), this.deleteVertexArray = (E) => JA(Q, () => Q.deleteVertexArray(E)), this.getVertexArray = () => JA(Q, () => Q.getParameter(Q.VERTEX_ARRAY_BINDING));
    } else if (A != null) {
      const Q = A.getExtension("OES_vertex_array_object");
      if (Q == null)
        throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
      this.createVertexArray = () => JA(A, () => Q.createVertexArrayOES()), this.bindVertexArray = (E) => JA(A, () => Q.bindVertexArrayOES(E)), this.deleteVertexArray = (E) => JA(A, () => Q.deleteVertexArrayOES(E)), this.getVertexArray = () => JA(A, () => A.getParameter(Q.VERTEX_ARRAY_BINDING_OES));
    }
    let I = "WEBGL_color_buffer_float";
    const B = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), aA().getNumber("WEBGL_VERSION") === 1) {
      const Q = "OES_texture_float", E = "OES_texture_half_float";
      if (this.textureFloatExtension = Zt(this.gl, Q), zC(this.gl, E))
        this.textureHalfFloatExtension = Zt(this.gl, E);
      else if (aA().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(I), zC(this.gl, B))
        this.colorBufferHalfFloatExtension = Zt(this.gl, B);
      else if (aA().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (I = "EXT_color_buffer_float", zC(this.gl, I))
      this.colorBufferFloatExtension = this.gl.getExtension(I);
    else {
      if (!zC(this.gl, B))
        throw new Error("GL context does not support color renderable floats");
      this.colorBufferHalfFloatExtension = this.gl.getExtension(B);
    }
    this.vertexBuffer = xY(this.gl), this.indexBuffer = qY(this.gl), this.framebuffer = function(Q) {
      return TB(Q, () => Q.createFramebuffer(), "Unable to create WebGLFramebuffer.");
    }(this.gl), this.textureConfig = wD(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return aA().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const A = this.gl;
    JA(A, () => A.finish()), JA(A, () => A.bindFramebuffer(A.FRAMEBUFFER, null)), JA(A, () => A.deleteFramebuffer(this.framebuffer)), JA(A, () => A.bindBuffer(A.ARRAY_BUFFER, null)), JA(A, () => A.bindBuffer(A.ELEMENT_ARRAY_BUFFER, null)), JA(A, () => A.deleteBuffer(this.indexBuffer)), this.disposed = !0;
  }
  createFloat32MatrixTexture(A, g) {
    return this.throwIfDisposed(), function(I, B, Q, E) {
      const [i, o] = Hi(B, Q);
      return Ui(I, i, o, xF(E), E.textureFormatFloat, I.FLOAT);
    }(this.gl, A, g, this.textureConfig);
  }
  createFloat16MatrixTexture(A, g) {
    return this.throwIfDisposed(), function(I, B, Q, E) {
      const [i, o] = Hi(B, Q);
      return Ui(I, i, o, qF(E), E.textureFormatFloat, E.textureTypeHalfFloat);
    }(this.gl, A, g, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(A, g) {
    return this.throwIfDisposed(), function(I, B, Q, E) {
      const [i, o] = Hi(B, Q);
      return Ui(I, i, o, VF(E), I.RGBA, I.UNSIGNED_BYTE);
    }(this.gl, A, g, this.textureConfig);
  }
  uploadPixelDataToTexture(A, g) {
    this.throwIfDisposed(), function(I, B, Q) {
      JA(I, () => I.bindTexture(I.TEXTURE_2D, B)), Q.data instanceof Uint8Array ? aA().getNumber("WEBGL_VERSION") === 2 ? JA(I, () => I.texSubImage2D(I.TEXTURE_2D, 0, 0, 0, Q.width, Q.height, I.RGBA, I.UNSIGNED_BYTE, Q.data)) : JA(I, () => I.texImage2D(I.TEXTURE_2D, 0, I.RGBA, Q.width, Q.height, 0, I.RGBA, I.UNSIGNED_BYTE, Q.data)) : aA().getNumber("WEBGL_VERSION") === 2 ? JA(I, () => I.texSubImage2D(I.TEXTURE_2D, 0, 0, 0, I.RGBA, I.UNSIGNED_BYTE, Q)) : JA(I, () => I.texImage2D(I.TEXTURE_2D, 0, I.RGBA, I.RGBA, I.UNSIGNED_BYTE, Q)), JA(I, () => I.bindTexture(I.TEXTURE_2D, null));
    }(this.gl, A, g);
  }
  uploadDenseMatrixToTexture(A, g, I, B) {
    this.throwIfDisposed(), function(Q, E, i, o, t, e) {
      let s, a, r;
      JA(Q, () => Q.bindTexture(Q.TEXTURE_2D, E)), t instanceof Uint8Array ? (s = new Uint8Array(i * o * 4), a = Q.UNSIGNED_BYTE, r = Q.RGBA) : (s = new Float32Array(i * o * 4), a = Q.FLOAT, r = e.internalFormatPackedFloat), s.set(t), aA().getNumber("WEBGL_VERSION") === 2 ? JA(Q, () => Q.texSubImage2D(Q.TEXTURE_2D, 0, 0, 0, i, o, Q.RGBA, a, s)) : JA(Q, () => Q.texImage2D(Q.TEXTURE_2D, 0, r, i, o, 0, Q.RGBA, a, s)), JA(Q, () => Q.bindTexture(Q.TEXTURE_2D, null));
    }(this.gl, A, g, I, B, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(A, g) {
    return this.throwIfDisposed(), function(I, B, Q, E) {
      const [i, o] = qE(B, Q);
      return Ui(I, i, o, TF(E), I.RGBA, E.textureTypeHalfFloat);
    }(this.gl, A, g, this.textureConfig);
  }
  createPackedMatrixTexture(A, g) {
    return this.throwIfDisposed(), function(I, B, Q, E) {
      const [i, o] = qE(B, Q);
      return Ui(I, i, o, WF(E), I.RGBA, I.FLOAT);
    }(this.gl, A, g, this.textureConfig);
  }
  deleteMatrixTexture(A) {
    this.throwIfDisposed(), this.outputTexture === A && (Yw(this.gl, this.framebuffer), this.outputTexture = null), JA(this.gl, () => this.gl.deleteTexture(A));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(A, g, I) {
    return this.downloadMatrixDriver(A, () => function(B, Q, E, i) {
      const [o, t] = Hi(Q, E), e = new Uint8Array(Q * E * 4);
      return JA(B, () => B.readPixels(0, 0, o, t, i.downloadTextureFormat, B.UNSIGNED_BYTE, e)), new Float32Array(e.buffer);
    }(this.gl, g, I, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(A, g, I, B, Q, E) {
    return VY(this.gl, A, 0, 0, 0, Q, E, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(A, g) {
    return function(I, B, Q) {
      const E = I, i = new Float32Array(Q);
      return E.bindBuffer(E.PIXEL_PACK_BUFFER, B), E.getBufferSubData(E.PIXEL_PACK_BUFFER, 0, i), E.bindBuffer(E.PIXEL_PACK_BUFFER, null), i;
    }(this.gl, A, g);
  }
  createBufferFromTexture(A, g, I) {
    this.bindTextureToFrameBuffer(A);
    const B = function(Q, E, i, o) {
      const t = Q.createBuffer();
      JA(Q, () => Q.bindBuffer(Q.PIXEL_PACK_BUFFER, t));
      const e = 16 * E * i;
      return JA(Q, () => Q.bufferData(Q.PIXEL_PACK_BUFFER, e, Q.STREAM_READ)), JA(Q, () => Q.readPixels(0, 0, i, E, Q.RGBA, Q.FLOAT, 0)), JA(Q, () => Q.bindBuffer(Q.PIXEL_PACK_BUFFER, null)), t;
    }(this.gl, g, I, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), B;
  }
  createAndWaitForFence() {
    const A = this.createFence(this.gl);
    return this.pollFence(A);
  }
  createFence(A) {
    let g, I;
    if (aA().getBool("WEBGL_FENCE_API_ENABLED")) {
      const B = A, Q = B.fenceSync(B.SYNC_GPU_COMMANDS_COMPLETE, 0);
      A.flush(), I = () => {
        const E = B.clientWaitSync(Q, 0, 0);
        return E === B.ALREADY_SIGNALED || E === B.CONDITION_SATISFIED;
      }, g = Q;
    } else
      aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (g = this.beginQuery(), this.endQuery(), I = () => this.isQueryAvailable(g, aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : I = () => !0;
    return { query: g, isFencePassed: I };
  }
  downloadMatrixFromPackedTexture(A, g, I) {
    return this.downloadMatrixDriver(A, () => function(B, Q, E) {
      const i = new Float32Array(Q * E * 4);
      return JA(B, () => B.readPixels(0, 0, E, Q, B.RGBA, B.FLOAT, i)), i;
    }(this.gl, g, I));
  }
  createProgram(A) {
    this.throwIfDisposed();
    const g = this.gl;
    this.vertexShader == null && (this.vertexShader = HY(g));
    const I = function(Q) {
      return TB(Q, () => Q.createProgram(), "Unable to create WebGLProgram.");
    }(g);
    JA(g, () => g.attachShader(I, this.vertexShader)), JA(g, () => g.attachShader(I, A)), function(Q, E) {
      if (JA(Q, () => Q.linkProgram(E)), !aA().get("ENGINE_COMPILE_ONLY") && Q.getProgramParameter(E, Q.LINK_STATUS) === !1)
        throw console.log(Q.getProgramInfoLog(E)), new Error("Failed to link vertex and fragment shaders.");
    }(g, I);
    const B = Object.assign(I, { vao: this.createVertexArray() });
    return this.debug && La(g, B), B;
  }
  buildVao(A) {
    this.setProgram(A), this.bindVertexArray(A.vao);
    const g = this.gl;
    JA(g, () => g.bindBuffer(g.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), function(I, B, Q) {
      JA(I, () => I.bindBuffer(I.ARRAY_BUFFER, Q)), Uw(I, B, "clipSpacePos", Q, 3, 20, 0) && Uw(I, B, "uv", Q, 2, 20, 12);
    }(g, A, this.vertexBuffer);
  }
  deleteProgram(A) {
    this.throwIfDisposed(), A === this.program && (this.program = null), A != null && (JA(this.gl, () => this.gl.deleteProgram(A)), this.deleteVertexArray(A.vao));
  }
  setProgram(A) {
    this.throwIfDisposed(), this.program = A, this.program != null && this.debug && La(this.gl, this.program), JA(this.gl, () => this.gl.useProgram(A));
  }
  getUniformLocation(A, g, I = !0) {
    return this.throwIfDisposed(), I ? function(B, Q, E) {
      return TB(B, () => B.getUniformLocation(Q, E), 'uniform "' + E + '" not present in program.');
    }(this.gl, A, g) : function(B, Q, E) {
      return B.getUniformLocation(Q, E);
    }(this.gl, A, g);
  }
  getAttributeLocation(A, g) {
    return this.throwIfDisposed(), JA(this.gl, () => this.gl.getAttribLocation(A, g));
  }
  getUniformLocationNoThrow(A, g) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(A, g);
  }
  setInputMatrixTexture(A, g, I) {
    this.throwIfDisposed(), this.throwIfNoProgram(), function(B, Q, E, i) {
      JA(B, () => RY(B, Q, i)), JA(B, () => B.uniform1i(E, i));
    }(this.gl, A, g, I);
  }
  setOutputMatrixTexture(A, g, I) {
    this.setOutputMatrixTextureDriver(A, I, g);
  }
  setOutputPackedMatrixTexture(A, g, I) {
    this.throwIfDisposed();
    const [B, Q] = qE(g, I);
    this.setOutputMatrixTextureDriver(A, B, Q);
  }
  setOutputMatrixWriteRegion(A, g, I, B) {
    this.setOutputMatrixWriteRegionDriver(I, A, B, g);
  }
  setOutputPackedMatrixWriteRegion(A, g, I, B) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && La(this.gl, this.program), Xt(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const A = this.gl;
    if (this.debug) {
      const g = this.getVertexArray();
      console.assert(g === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
    }
    JA(A, () => A.drawElements(A.TRIANGLES, 6, A.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), JA(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Zt(this.gl, aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const I = this.gl, B = this.getQueryTimerExtensionWebGL2(), Q = I.createQuery();
      return I.beginQuery(B.TIME_ELAPSED_EXT, Q), Q;
    }
    const A = this.getQueryTimerExtensionWebGL1(), g = A.createQueryEXT();
    return A.beginQueryEXT(A.TIME_ELAPSED_EXT, g), g;
  }
  endQuery() {
    if (aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const g = this.gl, I = this.getQueryTimerExtensionWebGL2();
      return void g.endQuery(I.TIME_ELAPSED_EXT);
    }
    const A = this.getQueryTimerExtensionWebGL1();
    A.endQueryEXT(A.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(A) {
    return await TD(() => this.disposed || this.isQueryAvailable(A, aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(A, aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(A, g) {
    if (g === 0)
      return null;
    if (g === 2) {
      const I = this.gl;
      return I.getQueryParameter(A, I.QUERY_RESULT) / 1e6;
    }
    {
      const I = this.getQueryTimerExtensionWebGL1();
      return I.getQueryObjectEXT(A, I.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(A, g) {
    if (g === 0)
      return !0;
    if (g === 2) {
      const I = this.gl, B = this.getQueryTimerExtensionWebGL2(), Q = I.getQueryParameter(A, I.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(B.GPU_DISJOINT_EXT)), Q && !this.disjoint;
    }
    {
      const I = this.getQueryTimerExtensionWebGL1(), B = I.getQueryObjectEXT(A, I.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(I.GPU_DISJOINT_EXT)), B && !this.disjoint;
    }
  }
  pollFence(A) {
    return new Promise((g) => {
      this.addItemToPoll(() => A.isFencePassed(), () => g());
    });
  }
  pollItems() {
    const A = function(g) {
      let I = 0;
      for (; I < g.length && g[I](); ++I)
        ;
      return I - 1;
    }(this.itemsToPoll.map((g) => g.isDoneFn));
    for (let g = 0; g <= A; ++g) {
      const { resolveFn: I } = this.itemsToPoll[g];
      I();
    }
    this.itemsToPoll = this.itemsToPoll.slice(A + 1);
  }
  addItemToPoll(A, g) {
    if (this.itemsToPoll.push({ isDoneFn: A, resolveFn: g }), this.itemsToPoll.length > 1)
      return;
    let I;
    "setTimeoutCustom" in aA().platform && (I = aA().platform.setTimeoutCustom.bind(aA().platform)), TD(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, I);
  }
  bindTextureToFrameBuffer(A) {
    this.throwIfDisposed(), ma(this.gl, A, this.framebuffer), this.debug && Xt(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (ma(this.gl, this.outputTexture, this.framebuffer), this.debug && Xt(this.gl)) : Yw(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(A, g) {
    this.bindTextureToFrameBuffer(A);
    const I = g();
    return this.unbindTextureToFrameBuffer(), I;
  }
  setOutputMatrixTextureDriver(A, g, I) {
    this.throwIfDisposed();
    const B = this.gl;
    ma(B, A, this.framebuffer), this.debug && Xt(B), this.outputTexture = A, JA(B, () => B.viewport(0, 0, g, I)), JA(B, () => B.scissor(0, 0, g, I));
  }
  setOutputMatrixWriteRegionDriver(A, g, I, B) {
    this.throwIfDisposed(), JA(this.gl, () => this.gl.scissor(A, g, I, B));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
}
const { addImpl: WY, bincountImpl: ZF, bincountReduceImpl: TY, bitwiseAndImpl: ZY, castImpl: XY, ceilImpl: OY, concatImpl: vY, equalImpl: PY, expImpl: zY, expm1Impl: jY, floorImpl: $Y, gatherNdImpl: _Y, gatherV2Impl: AJ, greaterImpl: gJ, greaterEqualImpl: IJ, lessImpl: CJ, lessEqualImpl: BJ, linSpaceImpl: QJ, logImpl: EJ, maxImpl: iJ, maximumImpl: oJ, minimumImpl: tJ, multiplyImpl: eJ, negImpl: sJ, notEqualImpl: aJ, prodImpl: nJ, raggedGatherImpl: rJ, raggedRangeImpl: hJ, raggedTensorToTensorImpl: DJ, rangeImpl: cJ, rsqrtImpl: wJ, scatterImpl: lJ, sigmoidImpl: GJ, simpleAbsImpl: XF, sliceImpl: yJ, sparseFillEmptyRowsImpl: dJ, sparseReshapeImpl: FJ, sparseSegmentReductionImpl: OF, sqrtImpl: RJ, staticRegexReplaceImpl: NJ, stridedSliceImpl: uJ, stringNGramsImpl: kJ, stringSplitImpl: KJ, stringToHashBucketFastImpl: SJ, subImpl: pJ, tileImpl: MJ, topKImpl: UJ, transposeImpl: GD, uniqueImpl: YJ } = Ap;
function vF(C, A) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, A).map((g) => `${C}.${g}`);
}
function oC(C, A) {
  return A === 1 ? [C] : vF(C, A);
}
class JJ {
  constructor(A) {
    if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = A, this.rank = A.length, this.enableShapeUniforms = CC(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const g = oC("rc", this.rank), I = AI(this.rank), B = this.getOutOfBoundsCondition(g), Q = this.getSetup(g), E = this.getOutput(g);
      this.userCode = `
        void main() {
          ${I} rc = getOutputCoords();

          if(${B}) {
            setOutput(vec4(0));
          } else {
            ${Q}

            setOutput(vec4(${E}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(A) {
    const g = [];
    for (let I = 0; I <= 1; I++)
      for (let B = 0; B <= 1; B++) {
        let Q = `${I === 0 ? "r" : "rp1"}, ${B === 0 ? "c" : "cp1"}`;
        for (let E = 2; E < this.rank; E++)
          Q = `${A[A.length - 1 - E]},` + Q;
        g.push(Q);
      }
    return g;
  }
  getOutOfBoundsCondition(A) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let g = "";
    for (let I = this.rank - 2; I < this.rank; I++)
      g += `${A[I]} >= ${this.enableShapeUniforms ? `outShape[${I}]` : this.outputShape[I]}`, I < this.rank - 1 && (g += "||");
    return g;
  }
  getSetup(A) {
    if (this.rank === 1)
      return "";
    const g = A.slice(-2), I = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], B = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${g[0]};
      int c = ${g[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${I};
      bool rEdge = rp1 >= ${B};
    `;
  }
  getOutput(A) {
    const g = this.getSourceCoordsArr(A);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${g[0]}),
            cEdge ? 0. : getA(${g[1]}),
            rEdge ? 0. : getA(${g[2]}),
            rEdge || cEdge ? 0. : getA(${g[3]})`;
  }
}
class PF {
  constructor(A, g) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length);
    let I = "";
    for (let E = 0; E < 4; E++) {
      let i = "thisRC = rc;";
      E % 2 == 1 && (i += "thisRC.z += 1;"), E > 1 && (i += "thisRC.y += 1;"), I += `
        ${i}
        ${E > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${E}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${E > 0 ? "}" : ""}
      `;
    }
    var B, Q;
    this.userCode = `
      ${B = g, Q = this.enableShapeUniforms, `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${Q ? uY(["r", "c", "d"], "inputShape") : ZQ(["r", "c", "d"], B)}
      return ivec3(r, c, d);
    }
  `}
      ${this.enableShapeUniforms ? `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
` : lD(A)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : A[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : A[2]};

        ${I}

        setOutput(result);
      }
    `;
  }
}
class fJ {
  constructor(A) {
    this.gpgpu = A, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.usedTextures = {}, this.logEnabled = !1;
  }
  acquireTexture(A, g, I) {
    const B = xw(g, I), Q = qw(A, B, I);
    Q in this.freeTextures || (this.freeTextures[Q] = []), Q in this.usedTextures || (this.usedTextures[Q] = []);
    const E = Hw(A, B, this.gpgpu.gl, this.gpgpu.textureConfig, I);
    if (this.freeTextures[Q].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= E, this.log();
      const o = this.freeTextures[Q].pop();
      return this.usedTextures[Q].push(o), o;
    }
    let i;
    return B === vI.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(A[0], A[1]) : B === vI.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(A[0], A[1]) : B === vI.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(A[0], A[1]) : B === vI.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(A[0], A[1]) : B === vI.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(A[0], A[1])), this.usedTextures[Q].push(i), this.numUsedTextures++, this._numBytesAllocated += E, this.log(), i;
  }
  releaseTexture(A, g, I, B) {
    if (this.freeTextures == null)
      return;
    const Q = xw(I, B), E = qw(g, Q, B);
    E in this.freeTextures || (this.freeTextures[E] = []);
    const i = Hw(g, Q, this.gpgpu.gl, this.gpgpu.textureConfig, B), o = aA().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    o !== -1 && this._numBytesAllocated > o ? (this.gpgpu.deleteMatrixTexture(A.texture), this._numBytesAllocated -= i) : (this.freeTextures[E].push(A), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    const t = this.usedTextures[E], e = t && t.indexOf(A);
    if (e == null || e < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    t[e] = t[t.length - 1], t.pop(), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    const A = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${A})`);
    const g = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * g)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const A in this.freeTextures)
        this.freeTextures[A].forEach((g) => {
          this.gpgpu.deleteMatrixTexture(g.texture);
        });
      for (const A in this.usedTextures)
        this.usedTextures[A].forEach((g) => {
          this.gpgpu.deleteMatrixTexture(g.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
}
function Hw(C, A, g, I, B) {
  const Q = function(o, t) {
    switch (o) {
      case vI.PACKED_2X2_FLOAT32:
        return WF(t);
      case vI.PACKED_2X2_FLOAT16:
        return TF(t);
      case vI.UNPACKED_FLOAT32:
        return xF(t);
      case vI.UNPACKED_FLOAT16:
        return qF(t);
      case vI.PACKED_4X1_UNSIGNED_BYTE:
        return VF(t);
      default:
        throw new Error(`Unknown physical texture type ${o}`);
    }
  }(A, I);
  let E;
  if (B) {
    const [o, t] = qE(C[0], C[1]);
    E = o * t;
  } else {
    const [o, t] = Hi(C[0], C[1]);
    E = o * t;
  }
  const i = function(o, t) {
    const e = o;
    if (t === e.R32F)
      return 4;
    if (t === e.R16F)
      return 2;
    if (t === e.RGBA32F || t === o.RGBA)
      return 16;
    if (t === e.RGBA16F)
      return 8;
    if (t === e.RGBA8)
      return 4;
    throw new Error(`Unknown internal format ${t}`);
  }(g, Q);
  return E * i;
}
function xw(C, A) {
  if (C === YC.UPLOAD)
    return vI.PACKED_2X2_FLOAT32;
  if (C === YC.RENDER || C == null)
    return function(g) {
      return aA().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? g ? vI.PACKED_2X2_FLOAT32 : vI.UNPACKED_FLOAT32 : g ? vI.PACKED_2X2_FLOAT16 : vI.UNPACKED_FLOAT16;
    }(A);
  if (C === YC.DOWNLOAD || C === YC.PIXELS)
    return vI.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${C}`);
}
function qw(C, A, g) {
  return `${C[0]}_${C[1]}_${A}_${g}`;
}
class kB {
  constructor(A, g) {
    this.variableNames = ["A"], this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${g}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const gB = "if (isnan(x)) return x;", LJ = "return x;", Vw = "return abs(x);", mJ = "return (x >= 0.0) ? x : (exp(x) - 1.0);", bJ = gB + `
  return (x < 0.0) ? 0.0 : x;
`, HJ = gB + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, BQ = "return x;", xJ = "return 1.0 / (1.0 + exp(-1.0 * x));", qJ = "return x;", VJ = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, WJ = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, TJ = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, ZJ = "return 1.0 / (1.0 + exp(-1.0 * x));";
class tQ {
  constructor(A, g) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${g}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
class XJ {
  constructor(A) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length);
    const g = A.length, I = oC("rc", g), B = AI(g), Q = function(o, t) {
      if (o === 1)
        return "rc";
      let e = "";
      for (let s = 0; s < o; s++)
        e += t[s], s < o - 1 && (e += ",");
      return e;
    }(g, I), E = I.slice(-2), i = g <= 1 ? "rc" : `vec2(${E.join(",")})`;
    this.userCode = `
      void main() {
        ${B} rc = getOutputCoords();
        vec4 packedInput = getA(${Q});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
}
const OJ = _G, qa = {}, vJ = aA().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");
class be extends rr {
  nextDataId() {
    return be.nextDataId++;
  }
  constructor(A) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !aA().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let g;
    if (A != null) {
      if (A instanceof xa)
        g = A;
      else {
        const B = eB(aA().getNumber("WEBGL_VERSION"), A);
        g = new xa(B);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = !1;
    } else {
      const B = eB(aA().getNumber("WEBGL_VERSION"));
      g = new xa(B), this.binaryCache = ((I = aA().getNumber("WEBGL_VERSION")) in qa || (qa[I] = {}), qa[I]), this.gpgpuCreatedLocally = !0;
    }
    var I;
    this.gpgpu = g, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new fJ(this.gpgpu), this.numMBBeforeWarning = aA().global.screen == null ? 1024 : aA().global.screen.height * aA().global.screen.width * window.devicePixelRatio * 600 / 1024 / 1024, this.texData = new dl(this, EI());
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  writeTexture(A, g, I, B, Q, E) {
    const i = this.makeTensorInfo(g, I), o = this.texData.get(i.dataId);
    o.isPacked = !1, o.texture = { texture: A, texShape: [B, Q] }, o.texShape = [B, Q];
    const t = Ot(g), e = new bw(t, !1, E), s = this.runWebGLProgram(e, [i], I, [[B, Q]]);
    return s.shape = g, o.texture = null, this.disposeIntermediateTensorInfo(i), s.dataId;
  }
  write(A, g, I) {
    if ((aA().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || aA().getBool("DEBUG")) && this.checkNumericalProblems(A), I === "complex64" && A != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const B = { id: this.nextDataId() };
    return this.texData.set(B, { shape: g, dtype: I, values: A, usage: YC.UPLOAD, refCount: 1 }), B;
  }
  refCount(A) {
    return this.texData.has(A) ? this.texData.get(A).refCount : 0;
  }
  incRef(A) {
    this.texData.get(A).refCount++;
  }
  decRef(A) {
    this.texData.has(A) && this.texData.get(A).refCount--;
  }
  move(A, g, I, B, Q) {
    if (aA().getBool("DEBUG") && this.checkNumericalProblems(g), B === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(A, { shape: I, dtype: B, values: g, usage: YC.UPLOAD, refCount: Q });
  }
  disposeIntermediateTensorInfo(A) {
    this.disposeData(A.dataId);
  }
  readSync(A) {
    const g = this.texData.get(A), { values: I, dtype: B, complexTensorInfos: Q, slice: E, shape: i, isPacked: o } = g;
    if (E != null) {
      let a;
      a = o ? new tQ(i, BQ) : new kB(i, BQ);
      const r = this.runWebGLProgram(a, [{ dataId: A, shape: i, dtype: B }], B), h = this.readSync(r.dataId);
      return this.disposeIntermediateTensorInfo(r), h;
    }
    if (I != null)
      return this.convertAndCacheOnCPU(A);
    if (B === "string")
      return I;
    const t = this.activeTimers != null;
    let e, s;
    return t && (e = nC()), B === "complex64" ? s = OB(this.readSync(Q.real.dataId), this.readSync(Q.imag.dataId)) : s = this.getValuesFromTexture(A), t && (this.downloadWaitMs += nC() - e), this.convertAndCacheOnCPU(A, s);
  }
  async read(A) {
    if (this.pendingRead.has(A)) {
      const h = this.pendingRead.get(A);
      return new Promise((w) => h.push(w));
    }
    const g = this.texData.get(A), { values: I, shape: B, slice: Q, dtype: E, complexTensorInfos: i, isPacked: o } = g;
    if (Q != null) {
      let h;
      h = o ? new tQ(B, BQ) : new kB(B, BQ);
      const w = this.runWebGLProgram(h, [{ dataId: A, shape: B, dtype: E }], E), G = this.read(w.dataId);
      return this.disposeIntermediateTensorInfo(w), G;
    }
    if (I != null)
      return this.convertAndCacheOnCPU(A);
    if (aA().getBool("DEBUG") && !aA().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && aA().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let t, e, s = null;
    if (E !== "complex64" && aA().get("WEBGL_BUFFER_SUPPORTED")) {
      t = this.decode(A);
      const h = this.texData.get(t.dataId);
      s = this.gpgpu.createBufferFromTexture(h.texture.texture, ...Tt(B));
    }
    if (this.pendingRead.set(A, []), E !== "complex64" && await this.gpgpu.createAndWaitForFence(), E === "complex64") {
      const h = await Promise.all([this.read(i.real.dataId), this.read(i.imag.dataId)]);
      e = OB(h[0], h[1]);
    } else if (s == null)
      e = this.getValuesFromTexture(A);
    else {
      const h = cA(B);
      e = this.gpgpu.downloadFloat32MatrixFromBuffer(s, h);
    }
    if (t != null && this.disposeIntermediateTensorInfo(t), s != null) {
      const h = this.gpgpu.gl;
      JA(h, () => h.deleteBuffer(s));
    }
    const a = this.convertAndCacheOnCPU(A, e), r = this.pendingRead.get(A);
    return this.pendingRead.delete(A), r.forEach((h) => h(a)), this.pendingDisposal.has(A) && (this.pendingDisposal.delete(A), this.disposeData(A) && EI().removeDataId(A, this), this.pendingDeletes--), a;
  }
  readToGPU(A, g = {}) {
    const I = this.texData.get(A), { values: B, shape: Q, slice: E, dtype: i, isPacked: o, texture: t } = I;
    if (i === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (E != null) {
      let r;
      r = o ? new tQ(Q, BQ) : new kB(Q, BQ);
      const h = this.runWebGLProgram(r, [{ dataId: A, shape: Q, dtype: i }], i), w = this.readToGPU(h, g);
      return this.disposeIntermediateTensorInfo(h), w;
    }
    if (t == null)
      throw B != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const e = this.decode(A, g.customTexShape), s = EI().makeTensorFromTensorInfo(e), a = this.texData.get(e.dataId);
    return Object.assign({ tensorRef: s }, a.texture);
  }
  bufferSync(A) {
    const g = this.readSync(A.dataId);
    if (A.dtype === "string")
      try {
        const I = g.map((B) => rQ(B));
        return Sg(A.shape, A.dtype, I);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Sg(A.shape, A.dtype, g);
  }
  checkNumericalProblems(A) {
    if (A != null)
      for (let g = 0; g < A.length; g++) {
        const I = A[g];
        if (!dY(I))
          throw aA().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${I} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${I} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(A) {
    const { shape: g, dtype: I, isPacked: B } = this.texData.get(A), Q = cA(g);
    if (aA().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const a = this.decode(A), r = this.texData.get(a.dataId), h = this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture, ...Tt(g)).subarray(0, Q);
      return this.disposeIntermediateTensorInfo(a), h;
    }
    const E = aA().getBool("WEBGL_PACK") && B === !0, i = E ? Ot(g) : g, o = E ? new LY(i) : new fY(i), t = this.runWebGLProgram(o, [{ shape: i, dtype: I, dataId: A }], "float32"), e = this.texData.get(t.dataId), s = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(e.texture.texture, e.texShape[0], e.texShape[1]).subarray(0, Q);
    return this.disposeIntermediateTensorInfo(t), s;
  }
  timerAvailable() {
    return aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(A) {
    const g = this.activeTimers, I = [];
    let B = !1;
    this.programTimersStack == null ? (this.programTimersStack = I, B = !0) : this.activeTimers.push(I), this.activeTimers = I, A();
    const Q = _Q(this.activeTimers.map((o) => o.query)).filter((o) => o != null), E = _Q(this.activeTimers.map((o) => o.name)).filter((o) => o != null);
    this.activeTimers = g, B && (this.programTimersStack = null);
    const i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null };
    return (async () => {
      if (aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const o = await Promise.all(Q);
        i.kernelMs = function(t) {
          let e = 0;
          for (let s = 0; s < t.length; s++)
            e += t[s];
          return e;
        }(o), i.getExtraProfileInfo = () => o.map((t, e) => ({ name: E[e], ms: t })).map((t) => `${t.name}: ${t.ms}`).join(", ");
      } else
        i.kernelMs = { error: "WebGL query timers are not supported in this environment." };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
    })();
  }
  memory() {
    return { unreliable: !1, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree };
  }
  startTimer() {
    return aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: nC(), endMs: null };
  }
  endTimer(A) {
    return aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), A) : (A.endMs = nC(), A);
  }
  async getQueryTime(A) {
    if (aA().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(A);
    const g = A;
    return g.endMs - g.startMs;
  }
  disposeData(A, g = !1) {
    if (this.pendingDisposal.has(A))
      return !1;
    if (!this.texData.has(A))
      return !0;
    if (g ? this.texData.get(A).refCount = 0 : this.texData.get(A).refCount--, !g && this.texData.get(A).refCount > 0)
      return !1;
    if (this.pendingRead.has(A))
      return this.pendingDisposal.add(A), this.pendingDeletes++, !1;
    this.releaseGPUData(A);
    const { complexTensorInfos: I } = this.texData.get(A);
    return I != null && (this.disposeData(I.real.dataId, g), this.disposeData(I.imag.dataId, g)), this.texData.delete(A), !0;
  }
  releaseGPUData(A) {
    const { texture: g, dtype: I, texShape: B, usage: Q, isPacked: E, slice: i } = this.texData.get(A), o = i && i.origDataId || A, t = this.dataRefCount.get(o);
    t > 1 ? this.dataRefCount.set(o, t - 1) : (this.dataRefCount.delete(o), g != null && (this.numBytesInGPU -= this.computeBytes(B, I), this.textureManager.releaseTexture(g, B, Q, E)));
    const e = this.texData.get(A);
    e.texture = null, e.texShape = null, e.isPacked = !1, e.slice = null;
  }
  getTexture(A) {
    return this.uploadToGPU(A), this.texData.get(A).texture.texture;
  }
  getDataInfo(A) {
    return this.texData.get(A);
  }
  shouldExecuteOnCPU(A, g = vJ) {
    return aA().getBool("WEBGL_CPU_FORWARD") && A.every((I) => this.texData.get(I.dataId).texture == null && cA(I.shape) < g);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(A) {
    SC("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const g = A.dataSync();
    return OJ(A.shape, g);
  }
  packedUnaryOp(A, g, I) {
    const B = new tQ(A.shape, g), Q = this.compileAndRun(B, [A], I);
    return EI().makeTensorFromTensorInfo(Q);
  }
  abs(A) {
    if (this.shouldExecuteOnCPU([A]) && A.dtype !== "complex64") {
      const B = XF(this.texData.get(A.dataId).values);
      return this.makeOutput(A.shape, A.dtype, B);
    }
    if (aA().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(A, Vw, A.dtype);
    const g = new kB(A.shape, Vw), I = this.compileAndRun(g, [A]);
    return EI().makeTensorFromTensorInfo(I);
  }
  makeTensorInfo(A, g, I) {
    let B;
    if (g === "string" && I != null && I.length > 0 && Eo(I[0])) {
      const Q = I.map((E) => eQ(E));
      B = this.write(Q, A, g);
    } else
      B = this.write(I, A, g);
    return this.texData.get(B).usage = null, { dataId: B, shape: A, dtype: g };
  }
  makeOutput(A, g, I) {
    return EI().makeTensorFromTensorInfo(this.makeTensorInfo(A, g, I), this);
  }
  unpackTensor(A) {
    const g = new XJ(A.shape);
    return this.runWebGLProgram(g, [A], A.dtype);
  }
  packTensor(A) {
    const g = new JJ(A.shape);
    return this.runWebGLProgram(g, [A], A.dtype, null, !0);
  }
  packedReshape(A, g) {
    const I = [VE(A.shape), ...WE(A.shape)], B = { dtype: A.dtype, shape: I, dataId: A.dataId }, Q = [VE(g), ...WE(g)], E = new PF(Q, I), i = [I], o = this.runWebGLProgram(E, [B], A.dtype, i, !0);
    return { dataId: o.dataId, shape: g, dtype: o.dtype };
  }
  decode(A, g) {
    const I = this.texData.get(A), { isPacked: B, shape: Q, dtype: E } = I;
    g != null && f(cA(Q) <= g[0] * g[1] * 4, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    const i = Ot(Q);
    let o;
    o = B ? new JY(i) : new YY(i);
    const t = [g ?? Tt(i)];
    return { dtype: E, shape: Q, dataId: this.runWebGLProgram(o, [{ shape: i, dtype: E, dataId: A }], E, t, !0, g).dataId };
  }
  runWebGLProgram(A, g, I, B, Q = !1, E) {
    const i = this.makeTensorInfo(A.outputShape, I), o = this.texData.get(i.dataId);
    if (A.packedOutput && (o.isPacked = !0), A.outPackingScheme === Io.DENSE) {
      const D = E ?? Tt(A.outputShape);
      o.texShape = D.map((l) => 2 * l);
    }
    if (A.outTexUsage != null && (o.usage = A.outTexUsage), cA(i.shape) === 0)
      return o.values = AC(i.dtype, 0), i;
    const t = [], e = g.map((D) => {
      if (D.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let l = this.texData.get(D.dataId);
      if (l.texture == null) {
        if (!A.packedInputs && cA(D.shape) <= aA().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return { shape: D.shape, texData: null, isUniform: !0, uniformValues: l.values };
        A.packedInputs && (l.isPacked = !0, l.shape = D.shape);
      }
      if (this.uploadToGPU(D.dataId), !!l.isPacked != !!A.packedInputs)
        D = l.isPacked ? this.unpackTensor(D) : this.packTensor(D), t.push(D), l = this.texData.get(D.dataId);
      else if (l.isPacked && !Le(l.shape, D.shape)) {
        const d = D, N = D.shape;
        D.shape = l.shape, D = this.packedReshape(D, N), t.push(D), l = this.texData.get(D.dataId), d.shape = N;
      }
      return { shape: D.shape, texData: l, isUniform: !1 };
    });
    this.uploadToGPU(i.dataId);
    const s = { shape: i.shape, texData: o, isUniform: !1 }, a = function(D, l, d) {
      let N = "";
      l.concat(d).forEach((Y) => {
        const M = Y.texData != null && Y.texData.slice != null && Y.texData.slice.flatOffset > 0;
        if (D.enableShapeUniforms && !Y.isUniform) {
          const L = Y.texData.texShape, { useSqueezeShape: m, uniformShape: x, keptDims: T } = sr(D.packedInputs, Y.shape, L);
          let Z = "", $ = "", AA = "";
          if (x.length === 1 && D.packedInputs) {
            const eA = [Math.ceil(L[0] / 2), Math.ceil(L[1] / 2)];
            Z = `${eA[0] > 1}_${eA[1] > 1}`;
          } else if (x.length !== 2 || D.packedInputs) {
            if (x.length > 2 && !D.packedInputs) {
              const eA = zA(x);
              AA = `${eA[0] === L[1]}_${eA[eA.length - 1] === L[1]}`;
            }
          } else
            $ = `${x[0] > 1}_${x[1] > 1}`;
          const P = Y.shape.length, _ = x.length === 2 && Zg(Y.shape, L), QA = cA(Y.shape) === 1, tA = zE(Y.shape, d.shape), O = !D.packedInputs && P === d.shape.length && Zg(L, d.texData.texShape), rA = D.packedInputs || x.length > 2 ? "" : `${L[0] > 1}_${L[1] > 1}`;
          N += `${P}_${O}_${m ? T : ""}_${x.length}_${QA}_${tA}_${_}_${Z}_${$}_${AA}_${rA}_${M}`;
        } else {
          const L = Y.isUniform ? "uniform" : Y.texData.texShape;
          N += `${Y.shape}_${L}_${M}`;
        }
      });
      const k = D.userCode;
      let p = D.constructor.name;
      return p += "_" + N + "_" + k + `${aA().getNumber("WEBGL_VERSION")}`, p;
    }(A, e, s), r = this.getAndSaveBinary(a, () => UY(this.gpgpu, A, e, s)), h = this.activeTimers != null;
    let w;
    h && (w = this.startTimer()), aA().get("ENGINE_COMPILE_ONLY") || function(D, l, d, N, k) {
      l.program.enableShapeUniforms || (mw(l.inShapeInfos, d), mw([l.outShapeInfo], [N]));
      const p = N.texData.texture, Y = N.texData.texShape;
      N.texData.isPacked ? D.setOutputPackedMatrixTexture(p.texture, Y[0], Y[1]) : D.setOutputMatrixTexture(p.texture, Y[0], Y[1]), D.setProgram(l.webGLProgram), D.bindVertexArray(l.webGLProgram.vao), aA().getNumber("WEBGL_VERSION") === 1 && l.infLoc !== null && D.gl.uniform1f(l.infLoc, 1 / 0), l.nanLoc !== null && D.gl.uniform1f(l.nanLoc, NaN);
      for (let L = 0; L < d.length; ++L) {
        const m = d[L], { uniform: x, offset: T, shape: Z, texShape: $ } = l.variablesLocations[L];
        if (Z) {
          const { uniformShape: AA } = sr(l.program.packedInputs, m.shape, m.texData.texShape);
          switch (AA.length) {
            case 1:
              D.gl.uniform1iv(Z, new Int32Array(AA));
              break;
            case 2:
              D.gl.uniform2iv(Z, new Int32Array(AA));
              break;
            case 3:
              D.gl.uniform3iv(Z, new Int32Array(AA));
              break;
            case 4:
              D.gl.uniform4iv(Z, new Int32Array(AA));
          }
        }
        if ($ && D.gl.uniform2i($, m.texData.texShape[0], m.texData.texShape[1]), x != null)
          if (m.isUniform)
            if (cA(m.shape) < 2)
              D.gl.uniform1f(x, m.uniformValues[0]);
            else {
              let AA = m.uniformValues;
              AA instanceof Float32Array || (AA = new Float32Array(AA)), D.gl.uniform1fv(x, AA);
            }
          else
            m.texData.slice != null && T != null && D.gl.uniform1i(T, m.texData.slice.flatOffset), D.setInputMatrixTexture(m.texData.texture.texture, x, L);
      }
      const M = l.outShapeLocation;
      if (M)
        switch (N.shape.length) {
          case 1:
            D.gl.uniform1iv(M, new Int32Array(N.shape));
            break;
          case 2:
            D.gl.uniform2iv(M, new Int32Array(N.shape));
            break;
          case 3:
            D.gl.uniform3iv(M, new Int32Array(N.shape));
            break;
          case 4:
            D.gl.uniform4iv(M, new Int32Array(N.shape));
        }
      if (l.outShapeStridesLocation) {
        const L = zA(N.shape);
        switch (N.shape.length) {
          case 2:
            D.gl.uniform1iv(l.outShapeStridesLocation, new Int32Array(L));
            break;
          case 3:
            D.gl.uniform2iv(l.outShapeStridesLocation, new Int32Array(L));
            break;
          case 4:
            D.gl.uniform3iv(l.outShapeStridesLocation, new Int32Array(L));
        }
      }
      if (l.outTexShapeLocation && D.gl.uniform2i(l.outTexShapeLocation, N.texData.texShape[0], N.texData.texShape[1]), l.program.customUniforms && k)
        for (let L = 0; L < l.program.customUniforms.length; ++L) {
          const m = l.program.customUniforms[L], x = l.customUniformLocations[L], T = k[L];
          if (m.type === "float")
            D.gl.uniform1fv(x, T);
          else if (m.type === "vec2")
            D.gl.uniform2fv(x, T);
          else if (m.type === "vec3")
            D.gl.uniform3fv(x, T);
          else if (m.type === "vec4")
            D.gl.uniform4fv(x, T);
          else if (m.type === "int")
            D.gl.uniform1iv(x, T);
          else if (m.type === "ivec2")
            D.gl.uniform2iv(x, T);
          else if (m.type === "ivec3")
            D.gl.uniform3iv(x, T);
          else {
            if (m.type !== "ivec4")
              throw Error(`uniform type ${m.type} is not supported yet.`);
            D.gl.uniform4iv(x, T);
          }
        }
      D.executeProgram();
    }(this.gpgpu, r, e, s, B), t.forEach((D) => this.disposeIntermediateTensorInfo(D)), h && (w = this.endTimer(w), this.activeTimers.push({ name: A.constructor.name, query: this.getQueryTime(w) }));
    const G = aA().get("WEBGL_FLUSH_THRESHOLD");
    if (G > 0) {
      const D = nC();
      D - this.lastGlFlushTime > G && (this.gpgpu.gl.flush(), this.lastGlFlushTime = D);
    }
    if (!aA().getBool("WEBGL_LAZILY_UNPACK") && o.isPacked && Q === !1) {
      const D = this.unpackTensor(i);
      return this.disposeIntermediateTensorInfo(i), D;
    }
    return i;
  }
  compileAndRun(A, g, I, B, Q = !1) {
    return I = I || g[0].dtype, this.runWebGLProgram(A, g, I, B, Q);
  }
  getAndSaveBinary(A, g) {
    return A in this.binaryCache || (this.binaryCache[A] = g()), this.binaryCache[A];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (aA().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((A) => {
      this.gpgpu.deleteProgram(this.binaryCache[A].webGLProgram), delete this.binaryCache[A];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = IA(() => {
      if (!aA().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const A = aA().getBool("DEBUG");
        aA().set("DEBUG", !1);
        const g = this.abs(Pg(1e-8)).dataSync()[0];
        if (aA().set("DEBUG", A), g > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? 1e-7 : 1e-4;
  }
  uploadToGPU(A) {
    const g = this.texData.get(A), { shape: I, dtype: B, values: Q, texture: E, usage: i, isPacked: o } = g;
    if (E != null)
      return;
    const t = this.activeTimers != null;
    let e;
    t && (e = nC());
    let s = g.texShape;
    if (s == null && (s = function(a, r = !1) {
      let h = aA().getNumber("WEBGL_MAX_TEXTURE_SIZE"), w = aA().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
      w === 1 / 0 && aA().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (w = h / 2), r && (h *= 2, w *= 2, (a = a.map((d, N) => N >= a.length - 2 ? hr(a[N]) : a[N])).length === 1 && (a = [2, a[0]])), a.length !== 2 && (a = QQ(a).newShape);
      let G = cA(a), D = null;
      a.length <= 1 && G <= h ? D = [1, G] : a.length === 2 && a[0] <= h && a[1] <= h ? D = a : a.length === 3 && a[0] * a[1] <= h && a[2] <= h ? D = [a[0] * a[1], a[2]] : a.length === 3 && a[0] <= h && a[1] * a[2] <= h ? D = [a[0], a[1] * a[2]] : a.length === 4 && a[0] * a[1] * a[2] <= h && a[3] <= h ? D = [a[0] * a[1] * a[2], a[3]] : a.length === 4 && a[0] <= h && a[1] * a[2] * a[3] <= h && (D = [a[0], a[1] * a[2] * a[3]]);
      const l = D != null && Math.max(...D) > w && Math.min(...D) <= (r ? 2 : 1) && Math.min(...D) > 0;
      if (D == null || l)
        if (r) {
          const d = VE(a);
          let N = 2, k = 2;
          a.length && ([N, k] = WE(a)), G = d * (N / 2) * (k / 2), D = an(G).map((p) => 2 * p);
        } else
          D = an(G);
      return D;
    }(I, o), g.texShape = s), Q != null) {
      const a = Ot(I);
      let r, h = s[1], w = s[0];
      const G = Q instanceof Uint8Array || Q instanceof Uint8ClampedArray;
      !o && G || ([h, w] = qE(s[0], s[1])), r = o ? new bY(a, G) : new bw(a, G);
      const D = G ? [w, h] : s, l = this.makeTensorInfo(D, B), d = this.texData.get(l.dataId);
      d.usage = G ? YC.PIXELS : YC.UPLOAD, d.texShape = D, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(l.dataId), h, w, Q);
      const N = [[w, h]], k = !0, p = this.runWebGLProgram(r, [l], B, N, k), Y = this.texData.get(p.dataId);
      g.texShape = Y.texShape, g.isPacked = Y.isPacked, g.usage = Y.usage, aA().get("ENGINE_COMPILE_ONLY") ? this.disposeData(p.dataId) : (g.texture = Y.texture, g.values = null, this.texData.delete(p.dataId)), this.disposeIntermediateTensorInfo(l), t && (this.uploadWaitMs += nC() - e);
    } else {
      const a = this.acquireTexture(s, i, B, o);
      g.texture = a;
    }
  }
  convertAndCacheOnCPU(A, g) {
    const I = this.texData.get(A), { dtype: B } = I;
    return g != null && (I.values = function(Q, E) {
      if (E === "float32" || E === "complex64")
        return Q;
      if (E === "int32" || E === "bool") {
        const i = E === "int32" ? new Int32Array(Q.length) : new Uint8Array(Q.length);
        for (let o = 0; o < i.length; ++o)
          i[o] = Math.round(Q[o]);
        return i;
      }
      throw new Error(`Unknown dtype ${E}`);
    }(g, B)), I.values;
  }
  acquireTexture(A, g, I, B) {
    if (this.numBytesInGPU += this.computeBytes(A, I), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024) {
      const Q = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${Q} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(A, g, B);
  }
  computeBytes(A, g) {
    return A[0] * A[1] * ie(g);
  }
  checkCompileCompletion() {
    for (const [, A] of Object.entries(this.binaryCache))
      this.checkCompletion_(A);
  }
  async checkCompileCompletionAsync() {
    const A = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, g] of Object.entries(this.binaryCache))
        A.push(this.checkCompletionAsync_(g));
      return Promise.all(A);
    }
    for (const [, g] of Object.entries(this.binaryCache)) {
      const I = new Promise((B) => {
        try {
          this.checkCompletion_(g), B(!0);
        } catch (Q) {
          throw Q;
        }
      });
      A.push(I);
    }
    return Promise.all(A);
  }
  async checkCompletionAsync_(A) {
    return this.gpgpu.gl.getProgramParameter(A.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(A) : (await zs(), this.checkCompletionAsync_(A));
  }
  checkCompletion_(A) {
    if (this.gpgpu.gl.getProgramParameter(A.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(A.webGLProgram)), this.gpgpu.gl.getShaderParameter(A.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (LF(A.source, this.gpgpu.gl.getShaderInfoLog(A.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return !0;
  }
  getUniformLocations() {
    for (const A of Object.values(this.binaryCache)) {
      this.gpgpu.buildVao(A.webGLProgram);
      const { variablesLocations: g, customUniformLocations: I, infLoc: B, nanLoc: Q, outShapeLocation: E, outShapeStridesLocation: i, outTexShapeLocation: o } = HF(this.gpgpu, A.program, A.webGLProgram);
      A.variablesLocations = g, A.customUniformLocations = I, A.infLoc = B, A.nanLoc = Q, A.outShapeLocation = E, A.outShapeStridesLocation = i, A.outTexShapeLocation = o;
    }
  }
  createTensorFromGPUData(A, g, I) {
    A.channels = A.channels || "RGBA";
    const { texture: B, height: Q, width: E, channels: i } = A, o = EI().backend;
    if (!o.gpgpu.gl.isTexture(B))
      throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
    const t = o.writeTexture(B, g, I, Q, E, i);
    return EI().makeTensorFromDataId(t, g, I, o);
  }
}
be.nextDataId = 0, sG() && lG("webgl", () => new be(), 2);
const yD = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class tE {
  constructor(A, g, I) {
    this.variableNames = ["A", "B"], this.outputShape = wg(g, I), this.enableShapeUniforms = CC(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${A}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}
const cE = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class ai {
  constructor(A, g, I, B = !1) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = wg(g, I);
    const Q = this.outputShape.length;
    this.enableShapeUniforms = CC(Q);
    let E = "";
    if (B)
      if (Q === 0 || cA(this.outputShape) === 1)
        E = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (E = `
          ${AI(Q)} coords = getOutputCoords();
        `, Q === 1)
        this.enableShapeUniforms ? E += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : E += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const i = oC("coords", Q);
        this.enableShapeUniforms ? E += `
            bool nextRowOutOfBounds =
              (${i[Q - 2]} + 1) >= outShape[${Q} - 2];
            bool nextColOutOfBounds =
              (${i[Q - 1]} + 1) >= outShape[${Q} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : E += `
            bool nextRowOutOfBounds =
              (${i[Q - 2]} + 1) >= ${this.outputShape[Q - 2]};
            bool nextColOutOfBounds =
              (${i[Q - 1]} + 1) >= ${this.outputShape[Q - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${A}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${E}

        setOutput(result);
      }
    `;
  }
}
function kC(C) {
  const { inputs: A, backend: g } = C, { x: I } = A;
  return g.incRef(I.dataId), { dataId: I.dataId, shape: I.shape, dtype: I.dtype };
}
const PJ = { kernelName: Ko, backendName: "webgl", kernelFunc: kC };
function uQ(C) {
  const { inputs: A, backend: g } = C, { real: I, imag: B } = A, Q = g.makeTensorInfo(I.shape, "complex64"), E = g.texData.get(Q.dataId), i = kC({ inputs: { x: I }, backend: g }), o = kC({ inputs: { x: B }, backend: g });
  return E.complexTensorInfos = { real: i, imag: o }, Q;
}
const zJ = { kernelName: kr, backendName: "webgl", kernelFunc: uQ }, zF = "return (a < 0.) ? b * a : a;", jF = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`, jJ = { kernelName: ts, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { alpha: Q } = I, E = g.makeTensorInfo([], "float32", yQ(Q, "float32")), i = aA().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new ai(jF, B.shape, E.shape) : new tE(zF, B.shape, E.shape), o = g.runWebGLProgram(i, [B, E], "float32");
  return g.disposeIntermediateTensorInfo(E), o;
} }, $F = "return (a < 0.) ? b * a : a;", _F = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`, $J = { kernelName: Ks, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { x: I, alpha: B } = A, Q = aA().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new ai(_F, I.shape, B.shape) : new tE($F, I.shape, B.shape);
  return g.runWebGLProgram(Q, [I, B], "float32");
} }, ni = "if (isnan(x)) return x;";
function bg({ opSnippet: C, packedOpSnippet: A, cpuKernelImpl: g, dtype: I }) {
  return ({ inputs: B, backend: Q }) => {
    const { x: E } = B, i = Q, o = I || E.dtype;
    if (i.shouldExecuteOnCPU([E]) && g != null) {
      const e = i.texData.get(E.dataId), s = g(e.values, o);
      return i.makeTensorInfo(E.shape, o, s);
    }
    let t;
    return t = aA().getBool("WEBGL_PACK_UNARY_OPERATIONS") && A != null ? new tQ(E.shape, A) : new kB(E.shape, C), i.runWebGLProgram(t, [E], o);
  };
}
function $I({ opSnippet: C, packedOpSnippet: A, checkOutOfBounds: g = !1, supportsComplex: I = !1, cpuKernelImpl: B, dtype: Q }) {
  return ({ inputs: E, backend: i }) => {
    const { a: o, b: t } = E, e = i;
    if (I && o.dtype === "complex64") {
      const r = e.texData.get(o.dataId), h = e.texData.get(t.dataId), [w, G] = [[r.complexTensorInfos.real, h.complexTensorInfos.real], [r.complexTensorInfos.imag, h.complexTensorInfos.imag]].map((l) => {
        const [d, N] = l, k = { dataId: d.dataId, dtype: d.dtype, shape: o.shape }, p = { dataId: N.dataId, dtype: N.dtype, shape: t.shape }, Y = new tE(C, o.shape, t.shape);
        return e.runWebGLProgram(Y, [k, p], NC(d.dtype, N.dtype));
      }), D = uQ({ inputs: { real: w, imag: G }, backend: e });
      return e.disposeIntermediateTensorInfo(w), e.disposeIntermediateTensorInfo(G), D;
    }
    const s = Q || NC(o.dtype, t.dtype);
    if ((o.dtype === "string" || t.dtype === "string" || e.shouldExecuteOnCPU([o, t])) && B != null) {
      const r = e.texData.get(o.dataId).values, h = e.texData.get(t.dataId).values, w = o.dtype === "string" ? vB(r) : r, G = o.dtype === "string" ? vB(h) : h, [D, l] = B(o.shape, t.shape, w, G, s), d = e.makeTensorInfo(l, s);
      return e.texData.get(d.dataId).values = D, d;
    }
    let a;
    return a = aA().getBool("WEBGL_PACK_BINARY_OPERATIONS") && A != null ? new ai(A, o.shape, t.shape, g) : new tE(C, o.shape, t.shape), e.runWebGLProgram(a, [o, t], s);
  };
}
function Co(C, A = !1) {
  if (C === "linear")
    return A ? qJ : LJ;
  if (C === "relu")
    return A ? WJ : bJ;
  if (C === "elu")
    return A ? VJ : mJ;
  if (C === "relu6")
    return A ? TJ : HJ;
  if (C === "prelu")
    return A ? _F : $F;
  if (C === "leakyrelu")
    return A ? jF : zF;
  if (C === "sigmoid")
    return A ? ZJ : xJ;
  throw new Error(`Activation ${C} has not been implemented for the WebGL backend.`);
}
class AR {
  constructor(A, g, I, B = !1, Q = !1, E = !1, i = null, o = !1, t = !1) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = I, this.enableShapeUniforms = CC(this.outputShape.length);
    const e = B ? A[1] : A[2], s = Math.ceil(e / 2), a = B ? "i * 2, rc.y" : "rc.y, i * 2", r = Q ? "rc.z, i * 2" : "i * 2, rc.z", h = B ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], w = Q ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let G = "", D = "";
    i && (G = o ? `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : t ? `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : `vec4 activation(vec4 x) {
          ${i}
        }`, D = "result = activation(result);");
    const l = E ? "result += getBiasAtOutCoords();" : "";
    E && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), t && this.variableNames.push("leakyreluAlpha");
    let d = "rc.x", N = "rc.x";
    A[0] < g[0] ? d = `imod(rc.x, ${A[0]})` : g[0] < A[0] && (N = `imod(rc.x, ${g[0]})`), this.userCode = `
      ${G}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${s}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${d};
        int batchB = ${N};
        for (int i = 0; i < ${s}; i++) {
          vec4 a = getMatrixA(batchA, ${a});
          vec4 b = getMatrixB(batchB, ${r});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${w[0]});
          result += (${h[1]} * ${w[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${l}

        ${D}

        setOutput(result);
      }
    `;
  }
}
const Ww = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" };
class Tw {
  constructor(A, g, I) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = wg(g, I), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${A}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}
const Zw = "return a * b;";
function dD(C) {
  const { inputs: A, backend: g } = C, { a: I, b: B } = A, Q = NC(I.dtype, B.dtype);
  if (I.dtype === "complex64") {
    const i = g.texData.get(I.dataId), o = g.texData.get(B.dataId), t = new Tw(Ww.REAL, I.shape, B.shape), e = new Tw(Ww.IMAG, I.shape, B.shape), s = [{ dataId: i.complexTensorInfos.real.dataId, dtype: i.complexTensorInfos.real.dtype, shape: I.shape }, { dataId: i.complexTensorInfos.imag.dataId, dtype: i.complexTensorInfos.imag.dtype, shape: I.shape }, { dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: B.shape }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: B.shape }], a = g.runWebGLProgram(t, s, "float32"), r = g.runWebGLProgram(e, s, "float32"), h = uQ({ inputs: { real: a, imag: r }, backend: g });
    return g.disposeIntermediateTensorInfo(a), g.disposeIntermediateTensorInfo(r), h;
  }
  if (g.shouldExecuteOnCPU([I, B])) {
    const i = g.texData.get(I.dataId), o = g.texData.get(B.dataId), [t, e] = eJ(I.shape, B.shape, i.values, o.values, Q), s = g.makeTensorInfo(e, Q);
    return g.texData.get(s.dataId).values = t, s;
  }
  let E;
  return E = aA().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new ai(Zw, I.shape, B.shape) : new tE(Zw, I.shape, B.shape), g.runWebGLProgram(E, [I, B], Q);
}
const _J = { kernelName: mo, backendName: "webgl", kernelFunc: dD };
function MA(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { shape: Q } = I, E = g, i = cA(B.shape), o = Fl(Q, i), t = cA(o);
  f(i === t, () => `The new shape (${o}) has ${t} elements and the old shape (${B.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);
  const e = E.texData.get(B.dataId);
  return !e.isPacked || Le(B.shape, o) || e.texture !== null && Le(e.shape, o) ? (E.incRef(B.dataId), { dataId: B.dataId, shape: o, dtype: B.dtype }) : function(s, a, r) {
    const h = [VE(s.shape), ...WE(s.shape)], w = { dtype: s.dtype, shape: h, dataId: s.dataId }, G = [VE(a), ...WE(a)], D = new PF(G, h), l = [h], d = r.runWebGLProgram(D, [w], s.dtype, l, !0);
    return { dataId: d.dataId, shape: a, dtype: d.dtype };
  }(B, o, E);
}
const A2 = { kernelName: ps, backendName: "webgl", kernelFunc: MA };
class Xw {
  constructor(A, g) {
    this.variableNames = ["x"];
    const { windowSize: I, batchSize: B, inSize: Q, outSize: E } = A;
    this.outputShape = [B, E];
    const i = 4 * Math.floor(I / 4), o = I % 4;
    let t = "sumValue += dot(values, ones);";
    if (g != null) {
      const s = 1 / g;
      t = `sumValue += dot(values * ${XE(s) ? s.toPrecision(2) : s}, ones);`;
    }
    let e = "";
    Q % I > 0 && (e = `
        if (inIdx < 0 || inIdx >= ${Q}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${e}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${I};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${t}
        }

        int inIdx = inOffset + ${i};
        if (${o === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${t}
        } else if (${o === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${t}
        } else if (${o === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${t}
        }
        setOutput(sumValue);
      }
    `;
  }
}
class g2 {
  constructor(A, g) {
    this.variableNames = ["x"];
    const { windowSize: I, batchSize: B, inSize: Q, outSize: E } = A;
    this.outputShape = [B, E];
    let i = "0.0", o = "";
    g === "prod" ? i = "1.0" : g === "min" ? (i = "1.0 / 1e-20", o = "min") : g === "max" && (i = "-1.0 / 1e-20", o = "max");
    let t = `${g}(${g}(${g}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    g === "sum" ? t = "sumValue" : g === "prod" ? t = "prodValue" : g === "all" ? t = "allValue" : g === "any" && (t = "anyValue");
    const e = 4 * Math.floor(I / 4), s = I % 4;
    let a = `
      if (${g === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${g === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${g === "min"} || ${g === "max"}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, r = "vec4";
    g === "all" ? (i = "1.0", a = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, r = "bvec4") : g === "any" && (i = "0.0", a = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, r = "bvec4");
    let h = "";
    Q % I > 0 && (h = `
        if (inIdx < 0 || inIdx >= ${Q}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${I};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${e}; i += 4) {
          int inIdx = inOffset + i;
          ${r} values = ${r}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${a}
        }

        int inIdx = inOffset + ${e};
        if (${s === 1}) {
          ${r} values = ${r}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${a}
        } else if (${s === 2}) {
          ${r} values = ${r}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${a}
        } else if (${s === 3}) {
          ${r} values = ${r}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${a}
        }
        setOutput(${t});
      }
    `;
  }
}
function wE(C, A, g, I) {
  const B = function(E) {
    const i = [];
    for (; i.length === 0 || i[i.length - 1].outSize !== 1; ) {
      const o = i.length ? i[i.length - 1].outSize : E[1], t = js(o);
      i.push({ inSize: o, windowSize: t, outSize: Math.ceil(o / t) });
    }
    return i;
  }(C.shape);
  let Q = C;
  for (let E = 0; E < B.length; E++) {
    const { inSize: i, windowSize: o, outSize: t } = B[E];
    let e, s;
    e = g === "mean" ? E === 0 ? new Xw({ windowSize: o, inSize: i, batchSize: C.shape[0], outSize: t }, i) : new Xw({ windowSize: o, inSize: i, batchSize: C.shape[0], outSize: t }) : new g2({ windowSize: o, inSize: i, batchSize: C.shape[0], outSize: t }, g), s = Q, Q = I.runWebGLProgram(e, [Q], A), s.dataId !== C.dataId && I.disposeIntermediateTensorInfo(s);
  }
  return Q;
}
class I2 {
  constructor(A, g) {
    this.variableNames = ["A"];
    const I = new Array(A.length);
    for (let E = 0; E < I.length; E++)
      I[E] = A[g[E]];
    this.outputShape = I, this.rank = I.length;
    const B = AI(this.rank), Q = function(E) {
      const i = E.length;
      if (i > 6)
        throw Error(`Transpose for rank ${i} is not yet supported`);
      const o = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], t = new Array(i);
      for (let e = 0; e < E.length; e++)
        t[E[e]] = o[e];
      return t.join();
    }(g);
    this.userCode = `
    void main() {
      ${B} resRC = getOutputCoords();
      setOutput(getA(${Q}));
    }
    `;
  }
}
class C2 {
  constructor(A, g) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0;
    const I = new Array(A.length);
    for (let e = 0; e < I.length; e++)
      I[e] = A[g[e]];
    if (this.outputShape = I, this.rank = I.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const B = AI(this.rank), Q = vF("rc", this.rank), E = new Array(this.rank);
    for (let e = 0; e < g.length; e++)
      E[g[e]] = Q[e];
    const i = `vec2(${E.slice(-2).join()})`, o = `++${Q[this.rank - 1]} < ${I[this.rank - 1]}`, t = `getChannel(getA(${E.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${B} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${t};
      if(${o}) {
        result[1] = ${t};
      }
      --${Q[this.rank - 1]};
      if(++${Q[this.rank - 2]} < ${I[this.rank - 2]}) {
        result[2] = ${t};
        if(${o}) {
          result[3] = ${t};
        }
      }
      setOutput(result);
    }
    `;
  }
}
function Ea(C, A, g) {
  const I = aA().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new C2(C.shape, A) : new I2(C.shape, A);
  return g.runWebGLProgram(I, [C], C.dtype);
}
function ia(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I;
  return function(i, o, t, e) {
    const s = o, a = i.shape.length, r = Kg(s, i.shape);
    let h = r;
    const w = GI(h, a), G = w != null;
    let D = i;
    G && (D = Ea(i, w, e), h = KI(h.length, a)), jI("sum", h, a);
    const [l, d] = OI(D.shape, h);
    let N = l;
    t && (N = YI(l, r));
    const k = cA(d), p = MA({ inputs: { x: D }, attrs: { shape: [cA(i.shape) / k, k] }, backend: e }), Y = wE(p, Eh(i.dtype), "sum", e), M = MA({ inputs: { x: Y }, attrs: { shape: N }, backend: e });
    return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(Y), G && e.disposeIntermediateTensorInfo(D), M;
  }(B, Q, E, g);
}
const B2 = { kernelName: Ls, backendName: "webgl", kernelFunc: ia };
function sC(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { perm: Q } = I, E = g, i = B.shape.length, o = new Array(i);
  for (let e = 0; e < o.length; e++)
    o[e] = B.shape[Q[e]];
  let t;
  if (E.shouldExecuteOnCPU([B])) {
    const e = E.texData.get(B.dataId).values, s = GD(e, B.shape, B.dtype, Q, o);
    t = E.makeTensorInfo(o, B.dtype), E.texData.get(t.dataId).values = s;
  } else
    t = Ea(B, Q, E);
  return t;
}
const Q2 = { kernelName: mE, backendName: "webgl", kernelFunc: sC }, gR = 1e3;
function He({ a: C, b: A, transposeA: g, transposeB: I, backend: B, bias: Q = null, preluActivationWeights: E = null, leakyreluAlpha: i = 0, activation: o = null }) {
  const t = C.shape.length, e = A.shape.length, s = g ? C.shape[t - 2] : C.shape[t - 1], a = I ? A.shape[e - 1] : A.shape[e - 2], r = g ? C.shape[t - 1] : C.shape[t - 2], h = I ? A.shape[e - 2] : A.shape[e - 1], w = C.shape.slice(0, -2), G = A.shape.slice(0, -2), D = cA(w), l = cA(G), d = wg(C.shape.slice(0, -2), A.shape.slice(0, -2)).concat([r, h]);
  f(s === a, () => `Error in matMul: inner shapes (${s}) and (${a}) of Tensors with shapes ${C.shape} and ${A.shape} and transposeA=${g} and transposeB=${I} must match.`);
  const N = g ? [D, s, r] : [D, r, s], k = I ? [l, h, a] : [l, a, h], p = MA({ inputs: { x: C }, backend: B, attrs: { shape: N } }), Y = MA({ inputs: { x: A }, backend: B, attrs: { shape: k } }), M = [p, Y], L = Math.max(D, l), m = g ? p.shape[1] : p.shape[2], x = Q != null, T = E != null, Z = o === "leakyrelu", $ = o != null ? Co(o, !0) : null;
  let AA;
  if ((r === 1 || h === 1) && m > gR && (x || T || Z || $ != null) === !1) {
    let _ = p, QA = Y;
    g && (_ = sC({ inputs: { x: p }, backend: B, attrs: { perm: [0, 2, 1] } }), M.push(_)), I && (QA = sC({ inputs: { x: Y }, backend: B, attrs: { perm: [0, 2, 1] } }), M.push(QA));
    const tA = h === 1;
    let O = _;
    h !== 1 && (O = MA({ inputs: { x: _ }, backend: B, attrs: { shape: [L, m, 1] } }), M.push(O));
    const rA = h === 1 ? 2 : 1;
    let eA = QA;
    tA && (eA = MA({ inputs: { x: QA }, backend: B, attrs: { shape: [L, 1, m] } }), M.push(eA));
    const DA = dD({ inputs: { a: O, b: eA }, backend: B });
    AA = ia({ inputs: { x: DA }, backend: B, attrs: { axis: rA, keepDims: !0 } }), M.push(DA);
  } else {
    const _ = NC(C.dtype, A.dtype), QA = new AR(N, k, [L, r, h], g, I, x, $, T, Z), tA = [p, Y];
    if (Q != null && tA.push(Q), T && tA.push(E), Z) {
      const O = B.makeTensorInfo([], "float32", yQ(i, "float32"));
      tA.push(O), M.push(O);
    }
    AA = B.runWebGLProgram(QA, tA, _);
  }
  const P = MA({ inputs: { x: AA }, backend: B, attrs: { shape: d } });
  M.push(AA);
  for (const _ of M)
    B.disposeIntermediateTensorInfo(_);
  return P;
}
const E2 = { kernelName: oe, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { a: B, b: Q, bias: E, preluActivationWeights: i } = A, { transposeA: o, transposeB: t, activation: e, leakyreluAlpha: s } = I;
  return He({ a: B, b: Q, transposeA: o, transposeB: t, backend: g, bias: E, preluActivationWeights: i, leakyreluAlpha: s, activation: e });
} }, Ow = "return abs(x);", i2 = { kernelName: We, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { x: I } = A;
  if (g.shouldExecuteOnCPU([I]) && I.dtype !== "complex64") {
    const Q = g.texData.get(I.dataId), E = XF(Q.values);
    return g.makeTensorInfo(I.shape, I.dtype, E);
  }
  let B;
  return B = aA().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? new tQ(I.shape, Ow) : new kB(I.shape, Ow), g.runWebGLProgram(B, [I], I.dtype);
} }, o2 = bg({ opSnippet: gB + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
` }), t2 = { kernelName: io, backendName: "webgl", kernelFunc: o2 }, e2 = bg({ opSnippet: gB + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));` }), s2 = { kernelName: oo, backendName: "webgl", kernelFunc: e2 }, vw = "return a + b;", a2 = $I({ opSnippet: vw, packedOpSnippet: vw, supportsComplex: !0, cpuKernelImpl: WY }), n2 = { kernelName: Ei, backendName: "webgl", kernelFunc: a2 };
class r2 {
  constructor(A, g) {
    this.outputShape = [], this.outputShape = A, this.variableNames = g.map((Q, E) => `T${E}`);
    const I = [];
    this.variableNames.forEach((Q) => {
      I.push(`float v${Q} = get${Q}AtOutCoords();`);
    });
    const B = this.variableNames.map((Q) => `v${Q}`).join(" + ");
    this.userCode = `
      void main() {
        ${I.join(`
        `)}

        float result = ${B};
        setOutput(result);
      }
    `;
  }
}
class h2 {
  constructor(A, g) {
    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = A, this.variableNames = g.map((Q, E) => `T${E}`);
    const I = [];
    this.variableNames.forEach((Q) => {
      I.push(`vec4 v${Q} = get${Q}AtOutCoords();`);
    });
    const B = this.variableNames.map((Q) => `v${Q}`).join(" + ");
    this.userCode = `
      void main() {
        ${I.join(`
        `)}

        vec4 result = ${B};
        setOutput(result);
      }
    `;
  }
}
const D2 = { kernelName: yr, backendName: "webgl", kernelFunc: function C(A) {
  const { inputs: g, backend: I } = A, B = g;
  if (B.length === 1)
    return kC({ inputs: { x: B[0] }, backend: I });
  if (B.length > aA().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const o = Math.floor(B.length / 2), t = C({ inputs: B.slice(0, o), backend: I }), e = C({ inputs: B.slice(o), backend: I });
    return C({ inputs: [t, e], backend: I });
  }
  const Q = B.map((o) => o.dtype).reduce((o, t) => NC(o, t)), E = B.map((o) => o.shape), i = aA().getBool("WEBGL_PACK") ? new h2(B[0].shape, E) : new r2(B[0].shape, E);
  return I.runWebGLProgram(i, B, Q);
} }, c2 = { kernelName: dr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I, i = B.shape.length, o = Kg(Q, B.shape);
  let t = o;
  const e = GI(t, i);
  let s = B;
  e != null && (s = sC({ inputs: { x: B }, backend: g, attrs: { perm: e } }), t = KI(t.length, i)), jI("all", t, i);
  const [a, r] = OI(s.shape, t), h = MA({ inputs: { x: s }, backend: g, attrs: { shape: [-1, cA(r)] } }), w = wE(h, h.dtype, "all", g);
  let G;
  return E ? G = MA({ inputs: { x: w }, backend: g, attrs: { shape: YI(a, o) } }) : G = MA({ inputs: { x: w }, backend: g, attrs: { shape: a } }), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), e != null && g.disposeIntermediateTensorInfo(s), G;
} }, w2 = { kernelName: Fr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I, i = B.shape.length, o = Kg(Q, B.shape);
  let t = o;
  const e = GI(t, i);
  let s = B;
  e != null && (s = sC({ inputs: { x: B }, backend: g, attrs: { perm: e } }), t = KI(t.length, i)), jI("any", t, i);
  const [a, r] = OI(s.shape, t), h = MA({ inputs: { x: s }, backend: g, attrs: { shape: [-1, cA(r)] } }), w = wE(h, h.dtype, "any", g);
  let G;
  return E ? G = MA({ inputs: { x: w }, backend: g, attrs: { shape: YI(a, o) } }) : G = MA({ inputs: { x: w }, backend: g, attrs: { shape: a } }), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), e != null && g.disposeIntermediateTensorInfo(s), G;
} };
class l2 {
  constructor(A, g, I) {
    this.variableNames = ["A"];
    const { windowSize: B, batchSize: Q, outSize: E } = A;
    I || this.variableNames.push("bestIndicesA"), this.outputShape = [Q, E];
    const i = g === "max" ? ">" : "<", o = I ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${B};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${B}; i++) {
          int inIdx = ${o};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}
class G2 {
  constructor(A, g, I, B) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, f(A.length > 2, () => `Packed arg${I.charAt(0).toUpperCase() + I.slice(1)} supports only inputs with rank above 2.`);
    const Q = A[A.length - 1], E = Math.ceil(Q / g);
    this.outputShape = A.slice(0, -1), E > 1 && this.outputShape.push(E), B || this.variableNames.push("bestIndicesA");
    const i = this.outputShape, o = i.length, t = AI(o), e = oC("coords", o);
    let s, a;
    if (E === 1) {
      a = o + 1;
      const M = AI(a);
      s = `
        ${M} sourceLocR = ${M}(${e.join()}, 0);
        ++${e[o - 1]};
        ${M} sourceLocG = ${M}(${e.join()}, 0);
        ++${e[o - 2]};
        ${M} sourceLocA = ${M}(${e.join()}, 0);
        --${e[o - 1]};
        ${M} sourceLocB = ${M}(${e.join()}, 0);
        --${e[o - 2]};`;
    } else
      a = o, s = `
        ${t} sourceLocR = coords;
        ++${e[o - 1]};
        ${t} sourceLocG = coords;
        ++${e[o - 2]};
        ${t} sourceLocA = coords;
        --${e[o - 1]};
        ${t} sourceLocB = coords;
        --${e[o - 2]};`;
    const r = ["x", "y", "z", "w", "u", "v"].slice(0, a), h = "." + r[a - 1], w = r.map((M) => "int " + M), G = oC("sourceLocR", a - 1).concat("inIdx.r"), D = oC("sourceLocG", a - 1).concat("inIdx.g"), l = oC("sourceLocB", a - 1).concat("inIdx.b"), d = oC("sourceLocA", a - 1).concat("inIdx.a"), N = I === "max" ? "greaterThan" : "lessThan", k = B ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${G.join()}),
                             getBestIndicesAChannel(${D.join()}),
                             getBestIndicesAChannel(${l.join()}),
                             getBestIndicesAChannel(${d.join()})));`, p = `vec4(
            getAChannel(${G.join()}),
            hasNextCol ? getAChannel(${D.join()}) : 0.,
            hasNextRow ? getAChannel(${l.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${d.join()}) : 0.)`, Y = B ? "" : `
      float getBestIndicesAChannel(${w.join()}) {
        return getChannel(getBestIndicesA(${r.join()}),
                                          vec2(${r.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${w.join()}) {
        return getChannel(getA(${r.join()}),
                               vec2(${r.slice(-2).join()}));
      }
      ${Y}
      void main() {
        ${t} coords = getOutputCoords();
        bool hasNextCol = ${e[o - 1]} < ${i[o - 1] - 1};
        bool hasNextRow = ${e[o - 2]} < ${i[o - 2] - 1};
        ${s}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${g};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${p};

        for (int i = 0; i < ${g}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${p};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${N}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
function IR(C, A, g, I = null) {
  let B = A.shape[0], Q = A.shape[1];
  I != null && (B = I.shape[0], Q = I.shape[1]);
  const E = js(Q), i = { windowSize: E, inSize: Q, batchSize: B, outSize: Math.ceil(Q / E) }, o = new l2(i, g, I == null), t = [A];
  I != null && t.push(I);
  const e = C.runWebGLProgram(o, t, "int32");
  if (e.shape[1] === 1)
    return e;
  const s = IR(C, A, g, e);
  return C.disposeIntermediateTensorInfo(e), s;
}
function CR(C, A, g, I = null) {
  const B = I != null ? I.shape : A.shape, Q = js(B[B.length - 1]), E = new G2(B, Q, g, I == null), i = I == null ? [A] : [A, I], o = C.runWebGLProgram(E, i, "int32");
  if (o.shape.length === A.shape.length) {
    const t = CR(C, A, g, o);
    return C.disposeIntermediateTensorInfo(o), t;
  }
  return o;
}
function BR(C, A, g, I) {
  const B = [g];
  if (jI("arg" + I.charAt(0).toUpperCase() + I.slice(1), B, A.shape.length), !aA().getBool("WEBGL_PACK_REDUCE") || A.shape.length <= 2) {
    const Q = [], E = C.texData.get(A.dataId);
    let i = A;
    E !== null && E.isPacked && (i = C.unpackTensor(A), Q.push(i));
    const [o, t] = OI(i.shape, B), e = cA(t), s = MA({ inputs: { x: i }, backend: C, attrs: { shape: [-1, e] } });
    Q.push(s);
    const a = IR(C, s, I);
    Q.push(a);
    const r = MA({ inputs: { x: a }, backend: C, attrs: { shape: o } });
    return Q.forEach((h) => C.disposeIntermediateTensorInfo(h)), r;
  }
  return CR(C, A, I);
}
const y2 = { kernelName: Te, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q } = I;
  let E = Kg(Q, B.shape);
  const i = GI(E, B.shape.length);
  let o = B;
  const t = [];
  i != null && (o = sC({ inputs: { x: B }, backend: g, attrs: { perm: i } }), t.push(o), E = KI(E.length, o.shape.length)), jI("argMax", [E[0]], o.shape.length);
  const e = BR(g, o, E[0], "max");
  return t.forEach((s) => g.disposeIntermediateTensorInfo(s)), e;
} }, d2 = { kernelName: Ze, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q } = I;
  let E = Kg(Q, B.shape);
  const i = GI(E, B.shape.length);
  let o = B;
  const t = [];
  i != null && (o = sC({ inputs: { x: B }, backend: g, attrs: { perm: i } }), t.push(o), E = KI(E.length, o.shape.length)), jI("argMin", [E[0]], o.shape.length);
  const e = BR(g, o, E[0], "min");
  return t.forEach((s) => g.disposeIntermediateTensorInfo(s)), e;
} }, F2 = bg({ opSnippet: gB + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
` }), R2 = { kernelName: to, backendName: "webgl", kernelFunc: F2 }, N2 = bg({ opSnippet: gB + "return log(x + sqrt(x * x + 1.0));" }), u2 = { kernelName: eo, backendName: "webgl", kernelFunc: N2 }, k2 = bg({ opSnippet: gB + `
  return atan(x);
` }), K2 = { kernelName: so, backendName: "webgl", kernelFunc: k2 }, S2 = $I({ opSnippet: yD + `
  return atan(a, b);
`, packedOpSnippet: `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + cE + `
  return result;
` }), p2 = { kernelName: no, backendName: "webgl", kernelFunc: S2 }, M2 = bg({ opSnippet: gB + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;` }), U2 = { kernelName: ao, backendName: "webgl", kernelFunc: M2 };
class Bo {
  constructor(A, g, I, B = !1, Q = !1) {
    if (this.variableNames = ["x"], g === "avg" && I)
      throw new Error("Cannot compute positions for average pool.");
    const E = A.filterWidth, i = A.strideHeight, o = A.strideWidth, t = A.dilationHeight, e = A.dilationWidth, s = A.effectiveFilterHeight, a = A.effectiveFilterWidth, r = A.padInfo.top, h = A.padInfo.left;
    this.outputShape = A.outShape;
    const w = g === "avg", G = `((batch  * ${A.inHeight} + xR) * ${A.inWidth} + xC) * ${A.inChannels} + d`, D = `(xR * ${A.inWidth} + xC) * ${A.inChannels} + d`;
    let l = "0.0";
    if (w || (l = "-1.0 / 1e-20"), I) {
      const Y = ">=";
      return void (this.userCode = `
        const ivec2 strides = ivec2(${i}, ${o});
        const ivec2 pads = ivec2(${r}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${s};
              wR += ${t}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${A.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${a};
                wC += ${e}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${A.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${Y} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${B ? Q ? G : D : `wR * ${a} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `);
    }
    let d = `${g}(${g}(${g}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    g === "avg" && (d = "avgValue / max(count, 1.0)");
    const N = 4 * Math.floor(E / 4), k = E % 4, p = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${o});
      const ivec2 pads = ivec2(${r}, ${h});
      const float initializationValue = ${l};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${A.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${l});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${s};
            wR += ${t}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${A.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${N}; wC += 4) {
            int xC = xCCorner + wC * ${e};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${e}, d),
              getValue(batch, xR, xC + 2 * ${e}, d),
              getValue(batch, xR, xC + 3 * ${e}, d)
            );

            ${p}
          }

          int xC = xCCorner + ${N};
          if (${k === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${p}
          } else if (${k === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${e}, d),
              initializationValue,
              initializationValue
            );

            ${p}
          } else if (${k === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${e}, d),
              getValue(batch, xR, xC + 2 * ${e}, d),
              initializationValue
            );

            ${p}
          }
        }
        setOutput(${d});
      }
    `;
  }
}
class FD {
  constructor(A, g, I, B = !1, Q = !1) {
    if (this.variableNames = ["x"], g === "avg" && I)
      throw new Error("Cannot compute positions for average pool.");
    const E = A.filterWidth, i = A.strideDepth, o = A.strideHeight, t = A.strideWidth, e = A.dilationDepth, s = A.dilationHeight, a = A.dilationWidth, r = A.effectiveFilterDepth, h = A.effectiveFilterHeight, w = A.effectiveFilterWidth, G = A.padInfo.front, D = A.padInfo.top, l = A.padInfo.left;
    this.outputShape = A.outShape;
    const d = g === "avg";
    let N = "0.0";
    if (d || (N = "-1.0 / 1e-20"), I) {
      const L = ">=";
      return void (this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${o}, ${t});
        const ivec3 pads = ivec3(${G}, ${D}, ${l});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${r};
              wD += ${e}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${A.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${s}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${A.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${w};
                  wC += ${a}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${A.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${L} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${B ? Q ? `(((batch * ${A.inDepth} + xD) * ${A.inHeight} + xR) * ${A.inWidth} + xC) * ${A.inChannels} + ch` : `((xD * ${A.inHeight} + xR) * ${A.inWidth} + xC) * ${A.inChannels} + ch` : `wD * ${h} * ${w} +
                      wR * ${w} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `);
    }
    let k = `${g}(${g}(${g}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    g === "avg" && (k = "avgValue / max(count, 1.0)");
    const p = 4 * Math.floor(E / 4), Y = E % 4, M = `
      if (${d}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${o}, ${t});
      const ivec3 pads = ivec3(${G}, ${D}, ${l});
      const float initializationValue = ${N};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${A.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${N});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${r};
            wD += ${e}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${A.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${s}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${A.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC += 4) {
              int xC = xCCorner + wC * ${a};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${a}, ch),
                getValue(batch, xD, xR, xC + 2 * ${a}, ch),
                getValue(batch, xD, xR, xC + 3 * ${a}, ch)
              );

              ${M}
            }

            int xC = xCCorner + ${p};
            if (${Y === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${M}
            } else if (${Y === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${a}, ch),
                initializationValue,
                initializationValue
              );

              ${M}
            } else if (${Y === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${a}, ch),
                getValue(batch, xD, xR, xC + 2 * ${a}, ch),
                initializationValue
              );

              ${M}
            }
          }
        }
        setOutput(${k});
      }
    `;
  }
}
const Y2 = { kernelName: Xe, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A;
  ct(B, "avgPool");
  const { filterSize: Q, strides: E, pad: i, dimRoundingMode: o } = I;
  f(IC(E, 1), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${E} and dilations '1'`);
  const t = _C(B.shape, Q, E, 1, i, o);
  if (t.filterWidth === 1 && t.filterHeight === 1 && Zg(t.inShape, t.outShape))
    return kC({ inputs: { x: B }, backend: g });
  const e = new Bo(t, "avg", !1);
  return g.runWebGLProgram(e, [B], "float32");
} }, J2 = { kernelName: Oe, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { filterSize: Q, strides: E, pad: i, dimRoundingMode: o, dataFormat: t } = I, e = jB(B.shape, Q, E, [1, 1, 1], i, o, t), s = new FD(e, "avg", !1);
  return g.runWebGLProgram(s, [B], "float32");
} };
class f2 {
  constructor(A) {
    this.variableNames = ["dy"], this.outputShape = A.inShape;
    const g = A.filterHeight, I = A.filterWidth, B = A.strideHeight, Q = A.strideWidth, E = A.dilationHeight, i = A.dilationWidth, o = A.effectiveFilterHeight, t = A.effectiveFilterWidth, e = o - 1 - A.padInfo.top, s = t - 1 - A.padInfo.left, a = 1 / (g * I);
    this.userCode = `
      const ivec2 pads = ivec2(${e}, ${s});
      const float avgMultiplier = float(${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${E}) {
          float dyR = float(dyRCorner + wR) / ${B}.0;

          if (dyR < 0.0 || dyR >= ${A.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${t};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${Q}.0;

            if (dyC < 0.0 || dyC >= ${A.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class L2 {
  constructor(A) {
    this.variableNames = ["dy"], this.outputShape = A.inShape;
    const g = A.filterDepth, I = A.filterHeight, B = A.filterWidth, Q = A.strideDepth, E = A.strideHeight, i = A.strideWidth, o = A.dilationDepth, t = A.dilationHeight, e = A.dilationWidth, s = A.effectiveFilterDepth, a = A.effectiveFilterHeight, r = A.effectiveFilterWidth, h = s - 1 - A.padInfo.front, w = a - 1 - A.padInfo.top, G = r - 1 - A.padInfo.left, D = 1 / (g * I * B);
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${w}, ${G});
      const float avgMultiplier = float(${D});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${s};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${Q}.0;

          if (dyD < 0.0 || dyD >= ${A.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${a};
              wR += ${t}) {
            float dyR = float(dyRCorner + wR) / ${E}.0;

            if (dyR < 0.0 || dyR >= ${A.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${r};
                wC += ${e}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${A.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
const m2 = { kernelName: Nr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q } = A, E = Q, { filterSize: i, strides: o, pad: t, dimRoundingMode: e } = I, s = jB(E.shape, i, o, [1, 1, 1], t, e), a = new L2(s);
  return g.runWebGLProgram(a, [B], E.dtype);
} }, b2 = { kernelName: Rr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q } = A, E = Q;
  ct([B, Q], "avgPoolGrad");
  const { filterSize: i, strides: o, pad: t } = I, e = _C(E.shape, i, o, 1, t), s = new f2(e);
  return g.runWebGLProgram(s, [B], E.dtype);
} }, H2 = { kernelName: ve, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { a: B, b: Q } = A, { transposeA: E, transposeB: i } = I;
  return He({ a: B, b: Q, transposeA: E, transposeB: i, backend: g });
} };
class x2 {
  constructor(A, g, I, B, Q, E) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], wg(A, g), wg(A, I);
    let i = "0.0";
    B != null && (wg(A, B), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let o = "1.0";
    Q != null && (wg(A, Q), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = A, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${E}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}
class q2 {
  constructor(A, g, I, B, Q, E) {
    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], wg(A, g), wg(A, I);
    let i = "vec4(0.0)";
    B != null && (wg(A, B), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let o = "vec4(1.0)";
    Q != null && (wg(A, Q), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = A, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${E}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
const V2 = { kernelName: Es, backendName: "webgl", kernelFunc: ({ inputs: C, backend: A, attrs: g }) => {
  const { x: I, mean: B, variance: Q, offset: E, scale: i } = C;
  f(B.shape.length === Q.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), f(E == null || B.shape.length === E.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), f(i == null || B.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: o } = g;
  o == null && (o = 1e-3);
  const t = [I, B, Q];
  let e = null;
  E != null && (e = E.shape, t.push(E));
  let s = null;
  i != null && (s = i.shape, t.push(i));
  const a = aA().getBool("WEBGL_PACK_NORMALIZATION") ? new q2(I.shape, B.shape, Q.shape, e, s, o) : new x2(I.shape, B.shape, Q.shape, e, s, o);
  return A.runWebGLProgram(a, t, t[0].dtype);
} };
class W2 {
  constructor(A) {
    this.variableNames = ["source"], this.outputShape = A, this.rank = A.length;
    const g = AI(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const I = function(Q) {
      if (Q === 1)
        return "sourceLoc";
      if (Q <= 6)
        return Va.slice(0, Q).map((E) => "sourceLoc." + E).join(",");
      throw Error(`Slicing for rank ${Q} is not yet supported`);
    }(this.rank);
    let B;
    B = `
        ${g} sourceLoc;
        ${g} coords = getOutputCoords();
        ${A.map((Q, E) => `sourceLoc.${Va[E]} = start[${E}] + coords.${Va[E]};`).join(`
`)}
      `, this.userCode = `
      void main() {
        ${B}
        setOutput(getSource(${I}));
      }
    `;
  }
}
const Va = ["x", "y", "z", "w", "u", "v"];
class T2 {
  constructor(A) {
    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = A, this.rank = A.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const g = AI(this.rank), I = oC("coords", this.rank), B = oC("sourceLoc", this.rank), Q = this.rank === 1 ? "sourceLoc" : `vec2(${B.slice(-2).join()})`, E = `getChannel(getSource(${B.join()}), ${Q})`, i = `
      result.x = ${E};
      if (++${I[this.rank - 1]} < ${A[this.rank - 1]}) {
        ++${B[this.rank - 1]};
        result.y = ${E};
        --${B[this.rank - 1]};
      }
    `, o = this.rank === 1 ? "" : `
      --${I[this.rank - 1]};
      if (++${I[this.rank - 2]} < ${A[this.rank - 2]}) {
        ++${B[this.rank - 2]};
        result.z = ${E};
        if (++${I[this.rank - 1]} < ${A[this.rank - 1]}) {
          ++${B[this.rank - 1]};
          result.w = ${E};
        }
      }
    `, t = this.rank <= 4 ? `sourceLoc = coords +
            ${g}(${A.map((e, s) => `start[${s}]`).join()});` : A.map((e, s) => `${B[s]} = ${I[s]} + start[${s}];`).join(`
`);
    this.userCode = `
      void main() {
        ${g} coords = getOutputCoords();
        ${g} sourceLoc;
        ${t}
        vec4 result = vec4(0.);
        ${i}
        ${o}
        setOutput(result);
      }
    `;
  }
}
function ri(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { begin: Q, size: E } = I, [i, o] = Ps(B, Q, E);
  if (mh(B, i, o), cA(o) === 0)
    return g.makeTensorInfo(o, B.dtype, []);
  if (g.shouldExecuteOnCPU([B]) || B.dtype === "string") {
    const s = g.texData.get(B.dataId), a = yJ(s.values, i, o, B.shape, B.dtype);
    return g.makeTensorInfo(o, B.dtype, a);
  }
  const { isPacked: t } = g.texData.get(B.dataId), e = Hh(B.shape, i, o);
  if (t || !e) {
    const s = aA().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new T2(o) : new W2(o), a = [i];
    return g.runWebGLProgram(s, [B], B.dtype, a);
  }
  return g.uploadToGPU(B.dataId), function(s, a, r, h) {
    const w = h.texData.get(s.dataId), G = h.makeTensorInfo(r, s.dtype), D = h.texData.get(G.dataId);
    Object.assign(D, w), D.refCount = 1, D.shape = r, D.dtype = s.dtype;
    let l = xh(a, zA(s.shape));
    w.slice && (l += w.slice.flatOffset), D.slice = { flatOffset: l, origDataId: w.slice && w.slice.origDataId || s.dataId };
    const d = h.dataRefCount.get(D.slice.origDataId) || 1;
    return h.dataRefCount.set(D.slice.origDataId, d + 1), G;
  }(B, i, o, g);
}
const Z2 = { kernelName: fs, backendName: "webgl", kernelFunc: ri }, X2 = { kernelName: Pe, backendName: "webgl", kernelFunc: (C) => {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { blockShape: Q, crops: E } = I;
  f(B.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const i = Q.reduce((l, d) => l * d), o = tt(B.shape, Q, i), t = et(o.length, Q.length), e = st(B.shape, Q, i), s = Zh(E, Q.length), a = Xh(e, E, Q.length), r = [], h = MA({ inputs: { x: B }, backend: g, attrs: { shape: o } }), w = sC({ inputs: { x: h }, backend: g, attrs: { perm: t } }), G = MA({ inputs: { x: w }, backend: g, attrs: { shape: e } }), D = ri({ inputs: { x: G }, backend: g, attrs: { begin: s, size: a } });
  return r.push(h), r.push(w), r.push(G), r.forEach((l) => g.disposeIntermediateTensorInfo(l)), D;
} }, O2 = { kernelName: ur, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, weights: Q } = A, { size: E } = I, i = g.readSync(B.dataId), o = g.readSync(Q.dataId), t = ZF(i, o, Q.dtype, Q.shape, E);
  return g.makeTensorInfo([E], Q.dtype, t);
} }, v2 = { kernelName: Dn, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { a: I, b: B } = A, Q = aA().getBool("WEBGL_PACK_BINARY_OPERATIONS"), E = aA().getNumber("WEBGL_VERSION");
  if (g.shouldExecuteOnCPU([I, B]) || E === 1) {
    const o = g.texData.get(I.dataId).values, t = g.texData.get(B.dataId).values, [e, s] = ZY(I.shape, B.shape, o, t, I.dtype), a = g.makeTensorInfo(s, I.dtype);
    return g.texData.get(a.dataId).values = e, a;
  }
  let i;
  return i = Q ? new ai(`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`, I.shape, B.shape, !1) : new tE(`
  return float(int(a.r) & int(b.r));
`, I.shape, B.shape), g.runWebGLProgram(i, [I, B], I.dtype);
} }, P2 = { kernelName: Sl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { s0: I, s1: B } = A, Q = g.readSync(I.dataId), E = g.readSync(B.dataId), i = wg(Array.from(Q), Array.from(E));
  return g.makeTensorInfo([i.length], "int32", Int32Array.from(i));
} }, QR = $I({ opSnippet: "return float(a != b);", cpuKernelImpl: aJ, dtype: "bool" }), z2 = { kernelName: Fs, backendName: "webgl", kernelFunc: QR };
function wt(C) {
  const { inputs: A, backend: g } = C, { input: I } = A;
  return kC({ inputs: { x: g.texData.get(I.dataId).complexTensorInfos.real }, backend: g });
}
const j2 = { kernelName: zr, backendName: "webgl", kernelFunc: wt }, $2 = "return float(int(x));", _2 = { kernelName: ro, backendName: "webgl", kernelFunc: function C(A) {
  const { inputs: g, backend: I, attrs: B } = A, { x: Q } = g, { dtype: E } = B;
  if (E === "complex64") {
    if (Q.dtype === "complex64")
      return kC({ inputs: { x: Q }, backend: I });
    const i = ZI(Q.shape), o = C({ inputs: { x: Q }, backend: I, attrs: { dtype: "float32" } }), t = uQ({ inputs: { real: o, imag: i }, backend: I });
    return i.dispose(), I.disposeIntermediateTensorInfo(o), t;
  }
  if (Q.dtype === "complex64") {
    const i = wt({ inputs: { input: Q }, backend: I }), o = C({ inputs: { x: i }, backend: I, attrs: { dtype: E } });
    return I.disposeIntermediateTensorInfo(i), o;
  }
  if (!Rl(Q.dtype, E)) {
    const i = kC({ inputs: { x: Q }, backend: I });
    return { dataId: i.dataId, shape: i.shape, dtype: E };
  }
  if (I.shouldExecuteOnCPU([Q])) {
    const i = I.texData.get(Q.dataId).values, [o, t, e] = XY(i, Q.shape, Q.dtype, E);
    return I.makeTensorInfo(o, t, e);
  }
  if (E === "int32")
    return function(i, o) {
      const t = new kB(i.shape, $2), e = o.runWebGLProgram(t, [i], "int32");
      return { dataId: e.dataId, shape: e.shape, dtype: e.dtype };
    }(Q, I);
  if (E === "bool") {
    const i = I.makeTensorInfo([], "bool", AC("bool", 1)), o = QR({ inputs: { a: Q, b: i }, backend: I });
    return I.disposeIntermediateTensorInfo(i), o;
  }
  throw new Error(`Error in Cast: failed to cast ${Q.dtype} to ${E}`);
} }, Pw = "return ceil(x);", Af = bg({ opSnippet: Pw, packedOpSnippet: Pw, cpuKernelImpl: OY }), gf = { kernelName: ho, backendName: "webgl", kernelFunc: Af };
class If {
  constructor(A) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = A, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}
class Cf {
  constructor(A) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = A, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
const Bf = { kernelName: Do, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { clipValueMin: Q, clipValueMax: E } = I;
  let i;
  i = aA().getBool("WEBGL_PACK_CLIP") ? new Cf(B.shape) : new If(B.shape);
  const o = [[Q], [E]];
  return g.runWebGLProgram(i, [B], B.dtype, o);
} };
class Qf {
  constructor(A) {
    this.variableNames = ["real", "imag"], this.outputShape = A, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}
function zw(C, A) {
  return { dataId: A.dataId, dtype: A.dtype, shape: C.shape };
}
const Ef = { kernelName: ze, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { x: I } = A, B = g.texData.get(I.dataId), Q = new Qf(I.shape), E = [zw(I, B.complexTensorInfos.real), zw(I, B.complexTensorInfos.imag)];
  return g.runWebGLProgram(Q, E, E[0].dtype);
} };
class of {
  constructor(A) {
    this.outputShape = [], this.outputShape = SB(A, 1), this.variableNames = A.map((E, i) => `T${i}`);
    const g = new Array(A.length - 1);
    g[0] = A[0][1];
    for (let E = 1; E < g.length; E++)
      g[E] = g[E - 1] + A[E][1];
    const I = [`if (yC < ${g[0]}) setOutput(getT0(yR, yC));`];
    for (let E = 1; E < g.length; E++) {
      const i = g[E - 1];
      I.push(`else if (yC < ${g[E]}) setOutput(getT${E}(yR, yC-${i}));`);
    }
    const B = g.length, Q = g[g.length - 1];
    I.push(`else setOutput(getT${B}(yR, yC-${Q}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${I.join(`
        `)}
      }
    `;
  }
}
class tf {
  constructor(A, g) {
    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = SB(A, g);
    const I = this.outputShape, B = I.length, Q = AI(B), E = oC("coords", B), i = ["x", "y", "z", "w", "u", "v"].slice(0, B);
    this.variableNames = A.map((w, G) => `T${G}`);
    const o = new Array(A.length - 1);
    o[0] = A[0][g];
    for (let w = 1; w < o.length; w++)
      o[w] = o[w - 1] + A[w][g];
    const t = i[g], e = i.slice(-2), s = i.join();
    let a = `if (${t} < ${o[0]}) {
        return getChannel(
            getT0(${s}), vec2(${e.join()}));
        }`;
    for (let w = 1; w < o.length; w++) {
      const G = o[w - 1];
      a += `
        if (${t} < ${o[w]}  && ${t} >= ${o[w - 1]}) {
          return getChannel(
            getT${w}(${Pt(i, t, G)}),
            vec2(${Pt(e, t, G)}));
        }`;
    }
    const r = o.length, h = o[o.length - 1];
    a += `
        return getChannel(
          getT${r}(${Pt(i, t, h)}),
          vec2(${Pt(e, t, h)}));`, this.userCode = `
      float getValue(${i.map((w) => "int " + w)}) {
        ${a}
      }

      void main() {
        ${Q} coords = getOutputCoords();
        vec4 result = vec4(getValue(${E}), 0., 0., 0.);

        ${E[B - 1]} = ${E[B - 1]} + 1;
        if (${E[B - 1]} < ${I[B - 1]}) {
          result.g = getValue(${E});
        }

        ${E[B - 2]} = ${E[B - 2]} + 1;
        if (${E[B - 2]} < ${I[B - 2]}) {
          result.a = getValue(${E});
        }

        ${E[B - 1]} = ${E[B - 1]} - 1;
        if (${E[B - 2]} < ${I[B - 2]} &&
            ${E[B - 1]} < ${I[B - 1]}) {
          result.b = getValue(${E});
        }
        setOutput(result);
      }
    `;
  }
}
function Pt(C, A, g) {
  const I = C.indexOf(A);
  return C.map((B, Q) => Q === I ? `${B} - ${g}` : B).join();
}
function oa(C) {
  const { inputs: A, backend: g } = C, { input: I } = A;
  return kC({ inputs: { x: g.texData.get(I.dataId).complexTensorInfos.imag }, backend: g });
}
const ef = { kernelName: Vr, backendName: "webgl", kernelFunc: oa };
function xi(C, A, g) {
  const I = C[0].dtype;
  if (I === "complex64") {
    const r = C.map((l) => wt({ inputs: { input: l }, backend: g })), h = C.map((l) => oa({ inputs: { input: l }, backend: g })), w = xi(r, A, g), G = xi(h, A, g), D = uQ({ inputs: { real: w, imag: G }, backend: g });
    return r.forEach((l) => g.disposeIntermediateTensorInfo(l)), h.forEach((l) => g.disposeIntermediateTensorInfo(l)), g.disposeIntermediateTensorInfo(w), g.disposeIntermediateTensorInfo(G), D;
  }
  let B = g.shouldExecuteOnCPU(C);
  if (I === "string" && (B = !0), B) {
    const r = C.map((N) => {
      const k = cA(N.shape.slice(A));
      return MA({ inputs: { x: N }, backend: g, attrs: { shape: [-1, k] } });
    }), h = r.map((N) => ({ vals: g.readSync(N.dataId), shape: N.shape })), w = SB(r.map((N) => N.shape), 1), G = r[0].shape[0] === 1, D = vY(h, w, I, G), l = SB(C.map((N) => N.shape), A), d = g.makeTensorInfo(l, I, D);
    return r.forEach((N) => g.disposeIntermediateTensorInfo(N)), d;
  }
  const Q = C.filter((r) => cA(r.shape) > 0), E = aA().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && Q[0].shape.length > 1;
  if (Q.length === 1) {
    const r = E ? new kB(C[0].shape, BQ) : new tQ(C[0].shape, BQ);
    return g.runWebGLProgram(r, C, I);
  }
  const i = aA().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (Q.length > i) {
    const r = [];
    for (let w = 0; w < Q.length; w += i) {
      const G = Q.slice(w, w + i);
      r.push(xi(G, A, g));
    }
    const h = xi(r, A, g);
    for (const w of r)
      g.disposeIntermediateTensorInfo(w);
    return h;
  }
  if (E) {
    const r = new tf(Q.map((h) => h.shape), A);
    return g.runWebGLProgram(r, Q, I);
  }
  const { tensors2D: o, outShape: t } = function(r, h, w) {
    const G = SB(r.map((l) => l.shape), h);
    return { tensors2D: r.map((l) => MA({ inputs: { x: l }, attrs: { shape: [-1, cA(l.shape.slice(h))] }, backend: w })), outShape: G };
  }(Q, A, g), e = new of(o.map((r) => r.shape)), s = g.runWebGLProgram(e, o, I);
  o.forEach((r) => g.disposeIntermediateTensorInfo(r));
  const a = MA({ inputs: { x: s }, attrs: { shape: t }, backend: g });
  return g.disposeIntermediateTensorInfo(s), a;
}
function ER(C) {
  const { inputs: A, backend: g, attrs: I } = C, { axis: B } = I, Q = Kg(B, A[0].shape)[0];
  Vh(A.map((o) => o.shape), Q);
  const E = SB(A.map((o) => o.shape), Q);
  if (cA(E) === 0)
    return g.makeTensorInfo(E, A[0].dtype, []);
  const i = A.filter((o) => cA(o.shape) > 0);
  return i.length === 1 ? kC({ inputs: { x: i[0] }, backend: g }) : xi(i, Q, g);
}
const sf = { kernelName: je, backendName: "webgl", kernelFunc: ER };
class iR {
  constructor(A, g = !1, I = null, B = !1, Q = !1) {
    this.variableNames = ["x", "W"], this.outputShape = A.outShape;
    const E = A.padInfo.top, i = A.padInfo.left, o = A.strideHeight, t = A.strideWidth, e = A.dilationHeight, s = A.dilationWidth, a = A.filterHeight, r = A.filterWidth, h = 4 * Math.floor(A.inChannels / 4), w = A.inChannels % 4, G = A.dataFormat === "channelsLast", D = G ? 1 : 2, l = G ? 2 : 3, d = G ? 3 : 1;
    let N = "", k = "";
    I && (N = B ? `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${I}
        }` : Q ? `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${I}
        }` : `
          float activation(float x) {
            ${I}
          }
        `, k = "result = activation(result);");
    const p = g ? "result += getBiasAtOutCoords();" : "";
    g && this.variableNames.push("bias"), B && this.variableNames.push("preluActivationWeights"), Q && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${N}

      const ivec2 strides = ivec2(${o}, ${t});
      const ivec2 pads = ivec2(${E}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${d}];

        ivec2 xRCCorner =
            ivec2(coords[${D}], coords[${l}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * ${e};

          if (xR < 0 || xR >= ${A.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${r}; wC++) {
            int xC = xCCorner + wC * ${s};

            if (xC < 0 || xC >= ${A.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${G}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${w === 1}) {

              if (${G}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${w === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${G}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${w === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${G}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${p}
        ${k}
        setOutput(result);
      }
    `;
  }
}
class af {
  constructor(A) {
    this.variableNames = ["x", "W"], this.outputShape = A.outShape;
    const g = A.padInfo.front, I = A.padInfo.top, B = A.padInfo.left, Q = A.strideDepth, E = A.strideHeight, i = A.strideWidth, o = A.dilationDepth, t = A.dilationHeight, e = A.dilationWidth, s = A.filterDepth, a = A.filterHeight, r = A.filterWidth, h = 4 * Math.floor(A.inChannels / 4), w = A.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${Q}, ${E}, ${i});
      const ivec3 pads = ivec3(${g}, ${I}, ${B});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${s}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${A.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${a}; wR++) {
            int xR = xRCorner + wR * ${t};

            if (xR < 0 || xR >= ${A.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${r}; wC++) {
              int xC = xCCorner + wC * ${e};

              if (xC < 0 || xC >= ${A.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${w === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${w === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${w === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class oR {
  constructor(A, g = !1, I = null, B = !1, Q = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = A.outShape, this.enableShapeUniforms = CC(this.outputShape.length);
    const E = A.padInfo.left, i = A.strideWidth, o = A.dilationWidth, t = A.filterHeight, e = A.filterWidth, s = e;
    let a = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let G = 0; G < e; G++)
      a += `
           vec4 xTexelC${2 * G};
           int xTexelC${2 * G}Ready;
           vec4 xTexelC${2 * G + 1};
           int xTexelC${2 * G + 1}Ready;
           vec4 xC${G};`;
    a += `
     for (int r = 0; r < ${t}; r++) {
      for (int d1 = 0; d1 < ${A.inChannels}; d1 += 2) {
       `;
    for (let G = 0; G < e; G++)
      a += `
           xTexelC${2 * G} = vec4(0.0);
           xTexelC${2 * G}Ready = 0;
           xTexelC${2 * G + 1} = vec4(0.0);
           xTexelC${2 * G + 1}Ready = 0;
           xC${G} = vec4(0.0);`;
    a += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let G = 0; G < (s + 1) / 2; G++) {
      const D = 2 * G;
      if (a += `
           xC = xCCorner + ${D * o};
           `, i === 1) {
        if (D < e && (E % 2 == 1 ? (a += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${D}Ready == 0) {
                   xTexelC${D} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${D}.zw = vec2(0.0);
                   }
                   xTexelC${D}Ready = 1;
                 }
               `, a += o === 1 && D > 0 ? `
                 xC${D} = vec4(xTexelC${D - 2}.zw, xTexelC${D}.xy);
                 ` : `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${D} = vec4(previous.zw, xTexelC${D}.xy);
                   } else {
                     xC${D} = vec4(0.0, 0.0, xTexelC${D}.xy);
                   }
                   `) : a += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${D}Ready == 0) {
                   xTexelC${D} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${D}.zw = vec2(0.0);
                   }
                   xTexelC${D}Ready = 1;
                 }

                 xC${D} = xTexelC${D};
                 `, D + 1 < e)) {
          const l = E % 2 == 0 ? hr(o) : o;
          o % 2 == 0 && E % 2 == 1 || o % 2 != 0 && E % 2 != 1 ? (a += `
                   xCOffset = xC + imod(pads[1], 2) + ${l};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${D + 1}Ready == 0) {
                     xTexelC${D + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${D + 1}.zw = vec2(0.0);
                     }
                     xTexelC${D + 1}Ready = 1;
                   }
                   `, a += o > 1 ? `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${D + 1} = vec4(previous.zw, xTexelC${D + 1}.xy);
                     } else {
                      xC${D + 1} = vec4(0.0, 0.0, xTexelC${D + 1}.xy);
                     }
                     ` : `
                     xC${D + 1} = vec4(xTexelC${D}.zw, xTexelC${D + 1}.xy);
                     `) : a += l === 1 ? `
                     xC${D + 1} = xTexelC${D};
                     ` : `
                     xCOffset = xC + ${l};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${D + 1}Ready == 0) {
                       xTexelC${D + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${D + 1}.zw = vec2(0.0);
                       }
                       xTexelC${D + 1}Ready = 1;
                     }

                     xC${D + 1} = xTexelC${D + 1};
                     `;
        }
      } else
        D < e && (E % 2 == 1 ? (a += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${D}Ready == 0) {
                   xTexelC${D} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${D}.zw = vec2(0.0);
                   }
                   xTexelC${D}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${D + 1}Ready == 0) {
                   xTexelC${D + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${D + 1}.zw = vec2(0.0);
                   }
                   xTexelC${D + 1}Ready = 1;
                 }

                 xC${D} = vec4(xTexelC${D}.zw, xTexelC${D + 1}.zw);
               `, D + 1 < e && (a += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${D + 1} = vec4(xTexelC${D + 1}.xy, final.xy);
                 `)) : (a += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${D}Ready == 0) {
                   xTexelC${D} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${D}.zw = vec2(0.0);
                   }
                   xTexelC${D}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${D + 1}Ready == 0) {
                   xTexelC${D + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${D + 1}.zw = vec2(0.);
                   }
                   xTexelC${D + 1}Ready = 1;
                 }

                 xC${D} = vec4(
                   xTexelC${D}.xy, xTexelC${D + 1}.xy);
               `, D + 1 < e && (a += `
                   xC${D + 1} = vec4(xTexelC${D}.zw, xTexelC${D + 1}.zw);
                 `)));
      D < e && (a += `
             wTexel = getW(r, ${D}, d1, d2);
             dotProd += xC${D}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${A.inChannels}) {
               dotProd += xC${D}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, D + 1 < e && (a += `
               wTexel = getW(r, ${D + 1}, d1, d2);
               dotProd += xC${D + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${A.inChannels}) {
                 dotProd += xC${D + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    a += `
     }
   `, a += `
     }
   `, a += `
     }
   `;
    let r = "", h = "";
    I && (r = B ? `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${I}
         }` : Q ? `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${I}
         }` : `vec4 activation(vec4 x) {
           ${I}
         }`, h = "result = activation(result);");
    const w = g ? "result += getBiasAtOutCoords();" : "";
    g && this.variableNames.push("bias"), B && this.variableNames.push("preluActivationWeights"), Q && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${r}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${a}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${w}
         ${h}
         setOutput(result);
       }
     `;
  }
}
class nf {
  constructor(A, g) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec4" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = A, this.enableShapeUniforms = CC(this.outputShape.length);
    const { dataFormat: I } = g, B = iC(), Q = I === "channelsLast", E = Q ? 1 : 2, i = Q ? 2 : 3, o = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${A[2]} && pos < ${A[1]}) {`;
    let t = "";
    for (let e = 0; e <= 1; e++)
      for (let s = 0; s <= 1; s++)
        t += `
          blockIndex = rc.z + ${s};
          pos = rc.y + ${e};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${E}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${Q}) {
                  innerDims = vec2(d1, ch);
                  result[${2 * e + s}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${2 * e + s}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${t}

        ${B.output} = result;
      }
    `;
  }
}
function xe(C, A) {
  const g = C.length;
  return g >= 3 ? A ? [...C.slice(0, -3), C[g - 3] * C[g - 2], C[g - 1]] : [...C.slice(0, -3), C[g - 3], C[g - 2] * C[g - 1]] : !A && g === 1 && C[0] > 1 ? [C[0], 1] : null;
}
function tR({ x: C, filter: A, convInfo: g, backend: I, bias: B = null, preluActivationWeights: Q = null, leakyreluAlpha: E = 0, activation: i = null }) {
  const o = C.shape, t = I.texData.get(C.dataId), e = g.inChannels, s = o[0] * o[1] * o[2], a = g.outChannels, r = g.dataFormat === "channelsLast";
  let h;
  const w = [];
  if (Q != null) {
    const G = xe(Q.shape, r);
    G != null && (Q = MA({ inputs: { x: Q }, backend: I, attrs: { shape: G } }), w.push(Q));
  }
  if (B != null) {
    const G = xe(B.shape, r);
    G != null && (B = MA({ inputs: { x: B }, backend: I, attrs: { shape: G } }), w.push(B));
  }
  if (!((s === 1 || a === 1) && e > gR) && t.isPacked && r && t.texture != null && o[2] % 2 != 0 && Zg(t.shape.slice(-3), o.slice(-3))) {
    const G = o[0] * o[1] * (o[2] + 1), D = { dataId: C.dataId, shape: [1, G, g.inChannels], dtype: C.dtype }, l = t.shape;
    t.shape = t.shape.slice(), t.shape[t.shape.length - 2]++, f(Le(t.shape, D.shape), () => `packed reshape ${t.shape} to ${D.shape} isn't free`);
    const d = MA({ inputs: { x: A }, backend: I, attrs: { shape: [1, g.inChannels, g.outChannels] } });
    w.push(d);
    const N = He({ a: D, b: d, backend: I, transposeA: !1, transposeB: !1, bias: B, activation: i, preluActivationWeights: Q, leakyreluAlpha: E }), k = I.texData.get(N.dataId);
    f(k.isPacked, () => "batchMatMul result is expected to be packed"), t.shape = l, k.shape = g.outShape, h = kC({ inputs: { x: N }, backend: I }), h.shape = g.outShape, w.push(N);
  } else {
    const G = g.outHeight * g.outWidth, D = MA({ inputs: { x: C }, backend: I, attrs: { shape: r ? [g.batchSize, G, g.inChannels] : [g.batchSize, g.inChannels, G] } }), l = MA({ inputs: { x: A }, backend: I, attrs: { shape: [1, g.inChannels, g.outChannels] } }), d = He({ a: r ? D : l, b: r ? l : D, transposeA: !r, transposeB: !1, backend: I, bias: B, activation: i, preluActivationWeights: Q, leakyreluAlpha: E });
    h = MA({ inputs: { x: d }, backend: I, attrs: { shape: g.outShape } }), w.push(D), w.push(l), w.push(d);
  }
  for (const G of w)
    I.disposeIntermediateTensorInfo(G);
  return h;
}
function eR({ x: C, filter: A, convInfo: g, backend: I, bias: B = null, preluActivationWeights: Q = null, leakyreluAlpha: E = 0, activation: i = null }) {
  const { filterWidth: o, filterHeight: t, inChannels: e, outWidth: s, outHeight: a, dataFormat: r } = g, h = r === "channelsLast", w = o * t * e, G = a * s, D = [g.batchSize, w, G], l = [];
  if (Q != null) {
    const P = xe(Q.shape, h);
    P != null && (Q = MA({ inputs: { x: Q }, backend: I, attrs: { shape: P } }), l.push(Q));
  }
  if (B != null) {
    const P = xe(B.shape, h);
    P != null && (B = MA({ inputs: { x: B }, backend: I, attrs: { shape: P } }), l.push(B));
  }
  const d = MA({ inputs: { x: A }, backend: I, attrs: { shape: [1, w, cA(A.shape) / w] } });
  l.push(d);
  const N = new nf(D, g), k = [C.shape, [g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inChannels], [g.filterWidth * g.inChannels], [g.outWidth]], p = I.runWebGLProgram(N, [C], "float32", k), Y = MA({ inputs: { x: p }, backend: I, attrs: { shape: D } });
  l.push(p), l.push(Y);
  const M = B != null, L = Q != null, m = i === "leakyrelu", x = i ? Co(i, !0) : null, T = new AR(h ? Y.shape : d.shape, h ? d.shape : Y.shape, h ? [g.batchSize, G, g.outChannels] : [g.batchSize, g.outChannels, G], !0, !1, M, x, L, m), Z = h ? [Y, d] : [d, Y];
  if (B && Z.push(B), L && Z.push(Q), m) {
    const P = I.makeTensorInfo([], "float32", yQ(E, "float32"));
    Z.push(P), l.push(P);
  }
  const $ = I.runWebGLProgram(T, Z, "float32"), AA = MA({ inputs: { x: $ }, backend: I, attrs: { shape: g.outShape } });
  l.push($);
  for (const P of l)
    I.disposeIntermediateTensorInfo(P);
  return AA;
}
const rf = { kernelName: $e, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q } = A, { strides: E, pad: i, dataFormat: o, dilations: t, dimRoundingMode: e } = I, s = $B(o), a = zI(B.shape, Q.shape, E, t, i, e, !1, s);
  let r;
  if (a.filterHeight !== 1 || a.filterWidth !== 1 || a.dilationHeight !== 1 || a.dilationWidth !== 1 || a.strideHeight !== 1 || a.strideWidth !== 1 || a.padInfo.type !== "SAME" && a.padInfo.type !== "VALID")
    if (a.strideWidth <= 2 && s === "channelsLast" && aA().getBool("WEBGL_EXP_CONV")) {
      const w = new oR(a), G = [[a.padInfo.top, a.padInfo.left], [a.strideHeight, a.strideWidth], [a.dilationHeight, a.dilationWidth], [a.inHeight, a.inWidth]];
      r = g.runWebGLProgram(w, [B, Q], "float32", G);
    } else if (aA().getBool("WEBGL_CONV_IM2COL"))
      r = eR({ x: B, filter: Q, convInfo: a, backend: g });
    else {
      const w = new iR(a);
      r = g.runWebGLProgram(w, [B, Q], "float32");
    }
  else
    r = tR({ x: B, filter: Q, convInfo: a, backend: g });
  const h = MA({ inputs: { x: r }, backend: g, attrs: { shape: a.outShape } });
  return g.disposeIntermediateTensorInfo(r), h;
} };
class hf {
  constructor(A) {
    this.variableNames = ["x", "dy"], this.outputShape = A.filterShape;
    const g = A.strideHeight, I = A.strideWidth, B = A.padInfo.top, Q = A.padInfo.left, E = A.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${A.batchSize}; b++) {
          for (int yR = 0; yR < ${A.outHeight}; yR++) {
            int xR = wR + yR * ${g} - ${B};

            if (xR < 0 || xR >= ${A.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${A.outWidth}; yC++) {
              int xC = wC + yC * ${I} - ${Q};

              if (xC < 0 || xC >= ${A.inWidth}) {
                continue;
              }

              ${E ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Df {
  constructor(A) {
    this.variableNames = ["dy", "W"], this.outputShape = A.inShape;
    const g = A.filterHeight, I = A.filterWidth, B = A.strideHeight, Q = A.strideWidth, E = A.dataFormat === "channelsLast", i = g - 1 - A.padInfo.top, o = I - 1 - A.padInfo.left, t = E ? 1 : 2, e = E ? 2 : 3, s = E ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${s}];

        ivec2 dyCorner = ivec2(coords[${t}], coords[${e}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${g}; wR++) {
          float dyR = float(dyRCorner + wR) / ${B}.0;

          if (dyR < 0.0 || dyR >= ${A.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${g} - 1 - wR;

          for (int wC = 0; wC < ${I}; wC++) {
            float dyC = float(dyCCorner + wC) / ${Q}.0;

            if (dyC < 0.0 || dyC >= ${A.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${I} - 1 - wC;

            for (int d2 = 0; d2 < ${A.outChannels}; d2++) {

              if (${E}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class cf {
  constructor(A) {
    this.variableNames = ["x", "dy"], this.outputShape = A.filterShape;
    const g = A.strideDepth, I = A.strideHeight, B = A.strideWidth, Q = A.padInfo.front, E = A.padInfo.top, i = A.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${A.batchSize}; b++) {
          for (int yF = 0; yF < ${A.outDepth}; yF++) {
            int xF = wF + yF * ${g} - ${Q};

            if (xF < 0 || xF >= ${A.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${A.outHeight}; yR++) {
              int xR = wR + yR * ${I} - ${E};

              if (xR < 0 || xR >= ${A.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${A.outWidth}; yC++) {
                int xC = wC + yC * ${B} - ${i};

                if (xC < 0 || xC >= ${A.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class wf {
  constructor(A) {
    this.variableNames = ["dy", "W"], this.outputShape = A.inShape;
    const g = A.filterDepth, I = A.filterHeight, B = A.filterWidth, Q = A.strideDepth, E = A.strideHeight, i = A.strideWidth, o = g - 1 - A.padInfo.front, t = I - 1 - A.padInfo.top, e = B - 1 - A.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${o}, ${t}, ${e});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${g}; wF++) {
          float dyF = float(dyFCorner + wF) / ${Q}.0;

          if (dyF < 0.0 || dyF >= ${A.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${g} - 1 - wF;

          for (int wR = 0; wR < ${I}; wR++) {
            float dyR = float(dyRCorner + wR) / ${E}.0;

            if (dyR < 0.0 || dyR >= ${A.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${I} - 1 - wR;

            for (int wC = 0; wC < ${B}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${A.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${B} - 1 - wC;

              for (int d2 = 0; d2 < ${A.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
const lf = { kernelName: Kr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, dy: Q } = A, { strides: E, pad: i, dataFormat: o, dimRoundingMode: t, filterShape: e } = I, s = $B(o), a = zI(B.shape, e, E, 1, i, t, !1, s), r = new hf(a);
  return g.runWebGLProgram(r, [B, Q], "float32");
} };
class Gf {
  constructor(A) {
    this.variableNames = ["dy", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "strides", type: "vec2" }], this.outputShape = A.inShape, this.enableShapeUniforms = CC(this.outputShape.length);
    const g = A.filterHeight, I = A.filterWidth, B = g - 1 - A.padInfo.top, Q = I - 1 - A.padInfo.left;
    this.userCode = `
      const ivec2 pads = ivec2(${B}, ${Q});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${g}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${A.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${g} - 1 - wR;

          for (int wC = 0; wC < ${I}; wC++) {
            int wCPerm = ${I} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${A.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${A.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${A.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${A.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${A.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
  }
}
const yf = { kernelName: _e, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, filter: Q } = A, { inputShape: E, strides: i, pad: o, dataFormat: t, dimRoundingMode: e } = I, s = $B(t), a = zI(E, Q.shape, i, 1, o, e, !1, s);
  if (aA().getBool("WEBGL_PACK") && s === "channelsLast") {
    const r = [[a.strideHeight, a.strideWidth]], h = new Gf(a);
    return g.runWebGLProgram(h, [B, Q], "float32", r);
  }
  {
    const r = new Df(a);
    return g.runWebGLProgram(r, [B, Q], "float32");
  }
} }, df = { kernelName: As, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q } = A, { strides: E, pad: i, dilations: o } = I, t = dQ(B.shape, Q.shape, E, o, i), e = new af(t);
  return g.runWebGLProgram(e, [B, Q], "float32");
} }, Ff = { kernelName: Sr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, dy: Q } = A, { strides: E, pad: i, filterShape: o } = I, t = dQ(B.shape, o, E, 1, i), e = new cf(t);
  return g.runWebGLProgram(e, [B, Q], "float32");
} }, Rf = { kernelName: pr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, filter: Q } = A, { pad: E, strides: i, inputShape: o } = I, t = dQ(o, Q.shape, i, 1, E), e = new wf(t);
  return g.runWebGLProgram(e, [B, Q], "float32");
} }, Nf = bg({ opSnippet: ni + `
  return cos(x);
`, packedOpSnippet: `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${cE}
  return result;
` }), uf = { kernelName: co, backendName: "webgl", kernelFunc: Nf }, kf = bg({ opSnippet: `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
` }), Kf = { kernelName: wo, backendName: "webgl", kernelFunc: kf };
class Sf {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [E, i, o, t] = A, [e] = g, [s, a] = I;
    this.outputShape = [e, s, a, t];
    const r = B === "bilinear" ? 1 : 0, [h, w] = [i - 1 + ".0", o - 1 + ".0"], [G, D, l] = s > 1 ? ["" + (i - 1) / (s - 1), "(y2-y1) * height_ratio", `y1*${h} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${h}`], [d, N, k] = a > 1 ? ["" + (o - 1) / (a - 1), "(x2-x1) * width_ratio", `x1*${w} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${w}`];
    this.userCode = `
      const float height_ratio = float(${G});
      const float width_ratio = float(${d});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${E}) {
          return;
        }

        float height_scale = ${D};
        float width_scale = ${N};

        float in_y = ${l};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${Q}));
          return;
        }
        float in_x = ${k};
        if( in_x < 0.0 || in_x > ${w} ) {
          setOutput(float(${Q}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${r} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}
const pf = { kernelName: Ur, backendName: "webgl", kernelFunc: (C) => {
  const { inputs: A, backend: g, attrs: I } = C, { image: B, boxes: Q, boxInd: E } = A, { cropSize: i, method: o, extrapolationValue: t } = I, e = new Sf(B.shape, Q.shape, i, o, t);
  return g.runWebGLProgram(e, [B, Q, E], "float32");
} };
var Qo;
(function(C) {
  C.Prod = "*", C.Sum = "+";
})(Qo || (Qo = {}));
class jw {
  constructor(A, g, I, B) {
    this.op = A, this.outputShape = g, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const Q = this.outputShape.length, E = this.op === Qo.Prod ? "1.0" : "0.0", i = I ? E : `getX(${$w(Q, "coords", this.op)})`, o = this.outputShape[this.outputShape.length - 1];
    let t = "", e = "";
    I ? (t = B ? "end != " + (o - 1) : "end != 0", e = B ? "end + 1" : "end - 1") : (t = B ? `end + pow2 < ${o}` : "end >= pow2", e = B ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${AI(Q)} coords = getOutputCoords();
        int end = ${_w(Q, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${t}) {
          int idx = ${e};
          ${_w(Q, "coords", this.op)} = idx;
          val ${this.op}= getX(${$w(Q, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function $w(C, A, g) {
  if (C === 1)
    return `${A}`;
  if (C === 2)
    return `${A}.x, ${A}.y`;
  if (C === 3)
    return `${A}.x, ${A}.y, ${A}.z`;
  if (C === 4)
    return `${A}.x, ${A}.y, ${A}.z, ${A}.w`;
  throw new Error(`Cumulative ${g} for rank ${C} is not yet supported`);
}
function _w(C, A, g) {
  if (C === 1)
    return `${A}`;
  if (C === 2)
    return `${A}.y`;
  if (C === 3)
    return `${A}.z`;
  if (C === 4)
    return `${A}.w`;
  throw new Error(`Cumulative ${g} for rank ${C} is not yet supported`);
}
function sR(C, A, g, I, B, Q) {
  const E = A.shape.length, i = GI([I], E);
  let o = A;
  i != null && (o = sC({ inputs: { x: A }, backend: g, attrs: { perm: i } }));
  const t = KI(1, E)[0];
  if (t !== E - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${A.shape.length - 1} but got axis=${I}`);
  const e = o.shape[t];
  let s = kC({ inputs: { x: o }, backend: g });
  for (let a = 0; a <= Math.ceil(Math.log2(e)) - 1; a++) {
    const r = new jw(C, o.shape, !1, Q), h = [[a]], w = s;
    s = g.runWebGLProgram(r, [s], s.dtype, h), g.disposeIntermediateTensorInfo(w);
  }
  if (B) {
    const a = new jw(C, o.shape, B, Q), r = s;
    s = g.runWebGLProgram(a, [s], s.dtype), g.disposeIntermediateTensorInfo(r);
  }
  if (i != null) {
    const a = sC({ inputs: { x: s }, backend: g, attrs: { perm: FQ(i) } });
    return g.disposeIntermediateTensorInfo(s), g.disposeIntermediateTensorInfo(o), a;
  }
  return s;
}
const Mf = { kernelName: Mr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, exclusive: E, reverse: i } = I;
  return sR(Qo.Prod, B, g, Q, E, i);
} }, Uf = { kernelName: gs, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, exclusive: E, reverse: i } = I;
  return sR(Qo.Sum, B, g, Q, E, i);
} }, Yf = { kernelName: Yr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, weights: Q } = A, { size: E, binaryOutput: i } = I;
  if (B.shape.length === 1) {
    const o = g.readSync(B.dataId), t = g.readSync(Q.dataId), e = ZF(o, t, Q.dtype, Q.shape, E);
    return g.makeTensorInfo([E], Q.dtype, e);
  }
  if (B.shape.length === 2) {
    const o = g.bufferSync(B), t = g.bufferSync(Q), e = TY(o, t, E, i);
    return g.makeTensorInfo(e.shape, Q.dtype, e.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${B.shape.length}.`);
} };
class Jf {
  constructor(A, g, I) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = A, this.blockSize = g, this.dataFormat = I, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${g};
      int offset_h = imod(h, ${g});
      int in_w = w / ${g};
      int offset_w = imod(w, ${g});
      int offset_d = (offset_h * ${g} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
const ff = { kernelName: Jr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { blockSize: Q, dataFormat: E } = I, i = B.shape[0], o = (E === "NHWC" ? B.shape[1] : B.shape[2]) * Q, t = (E === "NHWC" ? B.shape[2] : B.shape[3]) * Q, e = (E === "NHWC" ? B.shape[3] : B.shape[1]) / (Q * Q), s = new Jf(E === "NHWC" ? [i, o, t, e] : [i, e, o, t], Q, E);
  return g.runWebGLProgram(s, [B], B.dtype);
} };
class aR {
  constructor(A, g = !1, I = null, B = !1, Q = !1) {
    this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = A.outShape, this.enableShapeUniforms = CC(this.outputShape.length);
    const E = A.filterHeight, i = A.filterWidth, o = A.outChannels / A.inChannels;
    let t = "", e = "";
    I && (t = B ? `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${I}
        }` : Q ? `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${I}
        }` : `
          float activation(float x) {
            ${I}
          }
        `, e = "result = activation(result);");
    const s = g ? "result += getBiasAtOutCoords();" : "";
    g && this.variableNames.push("bias"), B && this.variableNames.push("preluActivationWeights"), Q && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${t}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${E}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${s}
        ${e}
        setOutput(result);
      }
    `;
  }
}
class nR {
  constructor(A, g = !1, I = null, B = !1, Q = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = A.outShape, this.enableShapeUniforms = CC(this.outputShape.length);
    const E = A.outChannels / A.inChannels, i = A.padInfo.left, o = A.strideWidth, t = A.dilationWidth, e = A.filterHeight, s = A.filterWidth, a = s;
    let r = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let D = 0; D < s; D++)
      r += `
          vec4 xTexelC${2 * D};
          int xTexelC${2 * D}Ready;
          vec4 xTexelC${2 * D + 1};
          int xTexelC${2 * D + 1}Ready;
          vec4 xC${D};`;
    r += `
    for (int r = 0; r < ${e}; r++) {
      `;
    for (let D = 0; D < s; D++)
      r += `
          xTexelC${2 * D} = vec4(0.0);
          xTexelC${2 * D}Ready = 0;
          xTexelC${2 * D + 1} = vec4(0.0);
          xTexelC${2 * D + 1}Ready = 0;
          xC${D} = vec4(0.0);`;
    r += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let D = 0; D < (a + 1) / 2; D++) {
      const l = 2 * D;
      if (r += `
          xC = xCCorner + ${l * t};
          `, o === 1) {
        if (l < s && (i % 2 == 1 ? (r += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${l}Ready == 0) {
                  xTexelC${l} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${l}.zw = vec2(0.0);
                  }
                  xTexelC${l}Ready = 1;
                }
              `, r += t === 1 && l > 0 ? `
                xC${l} = vec4(xTexelC${l - 2}.zw, xTexelC${l}.xy);
                ` : `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${l} = vec4(previous.zw, xTexelC${l}.xy);
                  } else {
                    xC${l} = vec4(0.0, 0.0, xTexelC${l}.xy);
                  }
                  `) : r += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${l}Ready == 0) {
                  xTexelC${l} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${l}.zw = vec2(0.0);
                  }
                  xTexelC${l}Ready = 1;
                }

                xC${l} = xTexelC${l};
                `, l + 1 < s)) {
          const d = i % 2 == 0 ? hr(t) : t;
          t % 2 == 0 && i % 2 == 1 || t % 2 != 0 && i % 2 != 1 ? (r += `
                  xCOffset = xC + imod(pads[1], 2) + ${d};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${l + 1}Ready == 0) {
                    xTexelC${l + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${l + 1}.zw = vec2(0.0);
                    }
                    xTexelC${l + 1}Ready = 1;
                  }
                  `, r += t > 1 ? `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${l + 1} = vec4(previous.zw, xTexelC${l + 1}.xy);
                    } else {
                     xC${l + 1} = vec4(0.0, 0.0, xTexelC${l + 1}.xy);
                    }
                    ` : `
                    xC${l + 1} = vec4(xTexelC${l}.zw, xTexelC${l + 1}.xy);
                    `) : r += d === 1 ? `
                    xC${l + 1} = xTexelC${l};
                    ` : `
                    xCOffset = xC + ${d};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${l + 1}Ready == 0) {
                      xTexelC${l + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${l + 1}.zw = vec2(0.0);
                      }
                      xTexelC${l + 1}Ready = 1;
                    }

                    xC${l + 1} = xTexelC${l + 1};
                    `;
        }
      } else
        l < s && (i % 2 == 1 ? (r += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${l}Ready == 0) {
                  xTexelC${l} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${l}.zw = vec2(0.0);
                  }
                  xTexelC${l}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${l + 1}Ready == 0) {
                  xTexelC${l + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${l + 1}.zw = vec2(0.0);
                  }
                  xTexelC${l + 1}Ready = 1;
                }

                xC${l} = vec4(xTexelC${l}.zw, xTexelC${l + 1}.zw);
              `, l + 1 < s && (r += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${l + 1} = vec4(xTexelC${l + 1}.xy, final.xy);
                `)) : (r += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${l}Ready == 0) {
                  xTexelC${l} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${l}.zw = vec2(0.0);
                  }
                  xTexelC${l}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${l + 1}Ready == 0) {
                  xTexelC${l + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${l + 1}.zw = vec2(0.);
                  }
                  xTexelC${l + 1}Ready = 1;
                }

                xC${l} = vec4(
                  xTexelC${l}.xy, xTexelC${l + 1}.xy);
              `, l + 1 < s && (r += `
                  xC${l + 1} = vec4(xTexelC${l}.zw, xTexelC${l + 1}.zw);
                `)));
      l < s && (r += `
            wTexel = getW(r, ${l}, d1, q);
            dotProd += xC${l} * vec4(wTexel.xz, wTexel.xz);
          `, l + 1 < s && (r += `
              wTexel = getW(r, ${l + 1}, d1, q);
              dotProd += xC${l + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    r += `
    }
  `, r += `
      }
    `;
    let h = "", w = "";
    I && (h = B ? `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${I}
        }` : Q ? `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${I}
        }` : `vec4 activation(vec4 x) {
          ${I}
        }`, w = "result = activation(result);");
    const G = g ? "result += getBiasAtOutCoords();" : "";
    g && this.variableNames.push("bias"), B && this.variableNames.push("preluActivationWeights"), Q && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${E};
        int q = d2 - d1 * ${E};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${r}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${G}
        ${w}
        setOutput(result);
      }
    `;
  }
}
const Lf = { kernelName: Is, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q } = A, { strides: E, pad: i, dilations: o, dimRoundingMode: t } = I;
  let e = o;
  e == null && (e = [1, 1]), f(IC(E, e), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${E} and dilations '${e}'`);
  const s = zI(B.shape, Q.shape, E, e, i, t, !0);
  let a;
  a = aA().getBool("WEBGL_PACK_DEPTHWISECONV") && s.strideWidth <= 2 && s.outChannels / s.inChannels == 1 ? new nR(s) : new aR(s);
  const r = [[s.padInfo.top, s.padInfo.left], [s.strideHeight, s.strideWidth], [s.dilationHeight, s.dilationWidth], [s.inHeight, s.inWidth]];
  return g.runWebGLProgram(a, [B, Q], "float32", r);
} };
class mf {
  constructor(A) {
    this.variableNames = ["x", "dy"], this.outputShape = A.filterShape;
    const g = A.strideHeight, I = A.strideWidth, B = A.padInfo.top, Q = A.padInfo.left, E = A.outChannels / A.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${E} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${A.batchSize}; b++) {
          for (int yR = 0; yR < ${A.outHeight}; yR++) {
            int xR = wR + yR * ${g} - ${B};

            if (xR < 0 || xR >= ${A.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${A.outWidth}; yC++) {
              int xC = wC + yC * ${I} - ${Q};

              if (xC < 0 || xC >= ${A.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class bf {
  constructor(A) {
    this.variableNames = ["dy", "W"], this.outputShape = A.inShape;
    const g = A.filterHeight, I = A.filterWidth, B = A.strideHeight, Q = A.strideWidth, E = g - 1 - A.padInfo.top, i = I - 1 - A.padInfo.left, o = A.outChannels / A.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${E}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${g}; wR++) {
          float dyR = float(dyRCorner + wR) / ${B}.0;

          if (dyR < 0.0 || dyR >= ${A.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${g} - 1 - wR;

          for (int wC = 0; wC < ${I}; wC++) {
            float dyC = float(dyCCorner + wC) / ${Q}.0;

            if (dyC < 0.0 || dyC >= ${A.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${I} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
const Hf = { kernelName: fr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, dy: Q } = A, { strides: E, dilations: i, pad: o, dimRoundingMode: t, filterShape: e } = I, s = zI(B.shape, e, E, i, o, t, !0), a = new mf(s);
  return g.runWebGLProgram(a, [B, Q], "float32");
} }, xf = { kernelName: Lr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, filter: Q } = A, { strides: E, dilations: i, pad: o, dimRoundingMode: t, inputShape: e } = I, s = zI(e, Q.shape, E, i, o, t, !0), a = new bf(s);
  return g.runWebGLProgram(a, [B, Q], "float32");
} };
class qf {
  constructor(A) {
    this.variableNames = ["X"], this.outputShape = [A, A], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}
const Vf = { kernelName: pl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { x: I } = A, B = [...I.shape, ...I.shape], Q = cA(I.shape), E = MA({ inputs: { x: I }, backend: g, attrs: { shape: [Q] } }), i = new qf(Q), o = g.runWebGLProgram(i, [E], E.dtype), t = MA({ inputs: { x: o }, backend: g, attrs: { shape: B } });
  return g.disposeIntermediateTensorInfo(E), g.disposeIntermediateTensorInfo(o), t;
} };
class Wf {
  constructor(A) {
    this.variableNames = ["x", "W"], this.outputShape = A.outShape;
    const { inHeight: g, inWidth: I, padInfo: B, strideHeight: Q, strideWidth: E, filterHeight: i, filterWidth: o, dilationHeight: t, dilationWidth: e } = A, { top: s, left: a } = B;
    this.userCode = `
      const ivec2 strides = ivec2(${Q}, ${E});
      const ivec2 pads = ivec2(${s}, ${a});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${t};

          if (hIn >= 0 && hIn < ${g}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${e};

              if (wIn >= 0 && wIn < ${I}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}
const Tf = { kernelName: Cs, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q } = A, { strides: E, pad: i, dilations: o } = I, t = Qt(B.shape, Q.shape, E, i, "NHWC", o);
  let e;
  const s = new Wf(t);
  e = g.runWebGLProgram(s, [B, Q], "float32");
  const a = MA({ inputs: { x: e }, backend: g, attrs: { shape: t.outShape } });
  return g.disposeIntermediateTensorInfo(e), a;
} }, Zf = { kernelName: Ml, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { equation: B } = I, Q = A, { allDims: E, summedDims: i, idDims: o } = Ph(B, Q.length);
  jh(E.length, o, Q);
  const { path: t, steps: e } = $h(i, o), s = e.length;
  let a = null, r = E.length;
  const h = [];
  for (let w = 0; w < s; ++w) {
    for (const G of e[w]) {
      const { permutationIndices: D, expandDims: l } = zh(r, o[G]);
      let d;
      _h(D) ? d = Q[G] : (d = sC({ inputs: { x: Q[G] }, backend: g, attrs: { perm: D } }), h.push(d));
      const N = d.shape.slice();
      for (let k = 0; k < l.length; ++k)
        N.splice(l[k], 0, 1);
      Zg(d.shape, N) || (d = MA({ inputs: { x: d }, backend: g, attrs: { shape: N } }), h.push(d)), a === null ? a = d : (a = dD({ inputs: { a: d, b: a }, backend: g }), h.push(a));
    }
    w < s - 1 && (t[w] >= 0 && (a = ia({ inputs: { x: a }, backend: g, attrs: { axis: t[w] - (E.length - r), keepDims: !1 } }), h.push(a)), r--);
  }
  for (const w of h)
    w !== a && g.disposeIntermediateTensorInfo(w);
  return a;
} }, Xf = bg({ opSnippet: "return (x >= 0.0) ? x : (exp(x) - 1.0);", packedOpSnippet: `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
` }), Of = { kernelName: Go, backendName: "webgl", kernelFunc: Xf }, vf = { kernelName: mr, backendName: "webgl", kernelFunc: (C) => {
  const { inputs: A, backend: g } = C, { dy: I, y: B } = A, Q = aA().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new ai(`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, I.shape, B.shape) : new tE("return (b >= 0.0) ? a : a * (b + 1.0);", I.shape, B.shape);
  return g.runWebGLProgram(Q, [I, B], I.dtype);
} }, Pf = $I({ opSnippet: "return float(a == b);", packedOpSnippet: `
  return vec4(equal(a, b));
`, dtype: "bool", cpuKernelImpl: PY }), zf = { kernelName: Bs, backendName: "webgl", kernelFunc: Pf }, jf = bg({ opSnippet: `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${hy};
  float a1 = ${Dy};
  float a2 = ${cy};
  float a3 = ${wy};
  float a4 = ${ly};
  float a5 = ${Gy};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
` }), $f = { kernelName: yo, backendName: "webgl", kernelFunc: jf }, rR = bg({ opSnippet: ni + `
  return exp(x);
`, packedOpSnippet: `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, cpuKernelImpl: zY, dtype: "float32" }), _f = { kernelName: Fo, backendName: "webgl", kernelFunc: rR };
function ar(C) {
  const { inputs: A, attrs: g, backend: I } = C, { dim: B } = g, { input: Q } = A, E = Q.shape.length, i = Q.shape.slice();
  let o = B;
  return B < 0 && (f(-(E + 1) <= B, () => `Axis must be in the interval [${-(E + 1)}, ${E}]`), o = E + B + 1), i.splice(o, 0, 1), MA({ inputs: { x: Q }, backend: I, attrs: { shape: i } });
}
const AL = { kernelName: Qs, backendName: "webgl", kernelFunc: ar }, Al = "return exp(x) - 1.0;", gL = bg({ opSnippet: Al, packedOpSnippet: Al, cpuKernelImpl: jY }), IL = { kernelName: Ro, backendName: "webgl", kernelFunc: gL };
class gl {
  constructor(A, g, I) {
    this.variableNames = ["real", "imag"];
    const B = g[1];
    this.outputShape = g;
    const Q = I ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, E = I ? `${B}.0` : "1.0";
    let i;
    if (A === "real")
      i = "return real * expR - imag * expI;";
    else {
      if (A !== "imag")
        throw new Error(`FFT component must be either "real" or "imag", got ${A}.`);
      i = "return real * expI + imag * expR;";
    }
    this.userCode = `
      const float exponentMultiplier = ${Q};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${B});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${B}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${E};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}
function hR(C, A, g) {
  const I = g.texData.get(C.dataId), B = cA(C.shape), Q = C.shape[C.shape.length - 1], E = MA({ inputs: { x: C }, backend: g, attrs: { shape: [B / Q, Q] } }), i = E.shape, o = new gl("real", i, A), t = new gl("imag", i, A), e = [{ dataId: I.complexTensorInfos.real.dataId, dtype: I.complexTensorInfos.real.dtype, shape: i }, { dataId: I.complexTensorInfos.imag.dataId, dtype: I.complexTensorInfos.imag.dtype, shape: i }], s = g.runWebGLProgram(o, e, "float32"), a = g.runWebGLProgram(t, e, "float32"), r = uQ({ inputs: { real: s, imag: a }, backend: g });
  g.disposeIntermediateTensorInfo(s), g.disposeIntermediateTensorInfo(a);
  const h = MA({ inputs: { x: r }, backend: g, attrs: { shape: C.shape } });
  return g.disposeIntermediateTensorInfo(E), g.disposeIntermediateTensorInfo(r), h;
}
const CL = { kernelName: br, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { input: I } = A;
  return hR(I, !1, g);
} };
class BL {
  constructor(A, g) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = A, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}
function lt(C) {
  const { backend: A, attrs: g } = C, { shape: I, value: B } = g;
  let { dtype: Q } = g;
  if (Q = Q || Bi(B), Q === "string") {
    const E = NI(Q, cA(I));
    return E.fill(B), A.makeTensorInfo(I, Q, E);
  }
  {
    const E = new BL(I, B), i = [[B]];
    return A.runWebGLProgram(E, [], Q, i);
  }
}
const QL = { kernelName: Hr, backendName: "webgl", kernelFunc: lt };
class EL {
  constructor(A) {
    this.variableNames = ["Image"], this.outputShape = [];
    const g = A[2];
    this.outputShape = A, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${g} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${g}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
const iL = { kernelName: xr, backendName: "webgl", kernelFunc: ({ inputs: C, backend: A }) => {
  const { image: g } = C, I = A, B = new EL(g.shape);
  return I.runWebGLProgram(B, [g], g.dtype);
} }, Il = "return floor(x);", oL = bg({ opSnippet: Il, packedOpSnippet: Il, cpuKernelImpl: $Y }), tL = { kernelName: No, backendName: "webgl", kernelFunc: oL }, eL = $I({ opSnippet: `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, packedOpSnippet: `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, dtype: "int32" }), sL = { kernelName: uo, backendName: "webgl", kernelFunc: eL };
class aL {
  constructor(A) {
    this.variableNames = ["A"];
    const g = iC(), [I, B] = A;
    this.outputShape = A, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${B}.0, ${I}.0);

        vec4 values = ${g.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}
class nL {
  constructor(A) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0;
    const g = iC(), [I, B] = A;
    this.outputShape = A, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${B}.0, ${I}.0);
            vec4 values = ${g.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${g.output} = result;
      }
    `;
  }
}
const rL = { kernelName: Gn, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C;
  let { pixels: B } = A;
  const { numChannels: Q } = I, E = typeof HTMLVideoElement < "u" && B instanceof HTMLVideoElement, i = typeof HTMLImageElement < "u" && B instanceof HTMLImageElement, [o, t] = E ? [B.videoWidth, B.videoHeight] : [B.width, B.height], e = [t, o], s = [t, o, Q];
  if (i || E) {
    const w = aA().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    uE != null && w === Wa || (Wa = w, uE = document.createElement("canvas").getContext("2d", { willReadFrequently: Wa })), uE.canvas.width = o, uE.canvas.height = t, uE.drawImage(B, 0, 0, o, t), B = uE.canvas;
  }
  const a = g.makeTensorInfo(e, "int32");
  g.texData.get(a.dataId).usage = YC.PIXELS, g.gpgpu.uploadPixelDataToTexture(g.getTexture(a.dataId), B);
  const r = aA().getBool("WEBGL_PACK") ? new nL(s) : new aL(s), h = g.runWebGLProgram(r, [a], "int32");
  return g.disposeData(a.dataId), h;
} };
let uE, Wa = aA().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
const hL = { kernelName: te, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q, bias: E, preluActivationWeights: i } = A, { strides: o, pad: t, dataFormat: e, dilations: s, dimRoundingMode: a, activation: r, leakyreluAlpha: h } = I, w = $B(e), G = zI(B.shape, Q.shape, o, s, t, a, !1, w);
  let D;
  const l = [], d = E != null, N = i != null, k = r === "leakyrelu", p = () => {
    const M = [B, Q], L = (m, x) => {
      if (x === "NCHW" && m.shape.length === 1 && m.shape[0] !== 1) {
        const T = MA({ inputs: { x: m }, backend: g, attrs: { shape: [m.shape[0], 1, 1] } });
        return l.push(T), T;
      }
      return m;
    };
    if (d && M.push(L(E, e)), N && M.push(L(i, e)), k) {
      const m = g.makeTensorInfo([], "float32", yQ(h, "float32"));
      M.push(m), l.push(m);
    }
    return M;
  };
  if (G.filterHeight !== 1 || G.filterWidth !== 1 || G.dilationHeight !== 1 || G.dilationWidth !== 1 || G.strideHeight !== 1 || G.strideWidth !== 1 || G.padInfo.type !== "SAME" && G.padInfo.type !== "VALID")
    if (G.strideWidth <= 2 && w === "channelsLast" && aA().getBool("WEBGL_EXP_CONV")) {
      const M = r ? Co(r, !0) : null, L = new oR(G, d, M, N, k), m = [[G.padInfo.top, G.padInfo.left], [G.strideHeight, G.strideWidth], [G.dilationHeight, G.dilationWidth], [G.inHeight, G.inWidth]], x = p();
      D = g.runWebGLProgram(L, x, "float32", m);
    } else if (aA().getBool("WEBGL_CONV_IM2COL"))
      D = eR({ x: B, filter: Q, convInfo: G, backend: g, bias: E, activation: r, preluActivationWeights: i, leakyreluAlpha: h });
    else {
      const M = r ? Co(r, !1) : null, L = new iR(G, d, M, N, k), m = p();
      D = g.runWebGLProgram(L, m, "float32");
    }
  else
    D = tR({ x: B, filter: Q, convInfo: G, backend: g, bias: E, activation: r, preluActivationWeights: i, leakyreluAlpha: h });
  const Y = MA({ inputs: { x: D }, backend: g, attrs: { shape: G.outShape } });
  return l.push(D), l.forEach((M) => g.disposeIntermediateTensorInfo(M)), Y;
} }, DL = { kernelName: zl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, filter: Q, bias: E, preluActivationWeights: i } = A, { strides: o, pad: t, dilations: e, dimRoundingMode: s, activation: a, leakyreluAlpha: r } = I, h = [];
  let w = e;
  w == null && (w = [1, 1]), f(IC(o, w), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${w}'`);
  const G = zI(B.shape, Q.shape, o, w, t, s, !0), D = aA().getBool("WEBGL_PACK_DEPTHWISECONV") && G.strideWidth <= 2 && G.outChannels / G.inChannels == 1, l = a ? Co(a, D) : null, d = [B, Q], N = E != null, k = i != null, p = a === "leakyrelu";
  if (N && d.push(E), k && d.push(i), p) {
    const m = g.makeTensorInfo([], "float32", yQ(r, "float32"));
    d.push(m), h.push(m);
  }
  let Y;
  Y = D ? new nR(G, N, l, k, p) : new aR(G, N, l, k, p);
  const M = [[G.padInfo.top, G.padInfo.left], [G.strideHeight, G.strideWidth], [G.dilationHeight, G.dilationWidth], [G.inHeight, G.inWidth]], L = g.runWebGLProgram(Y, d, "float32", M);
  return h.forEach((m) => g.disposeIntermediateTensorInfo(m)), L;
} };
class cL {
  constructor(A, g, I, B) {
    this.sliceDim = A, this.strides = g, this.paramsShape = B, this.variableNames = ["x", "indices"], this.outputShape = I;
    const Q = AI(I.length);
    let E = `
    int index;`;
    for (let i = 0; i < this.sliceDim; i++)
      E += `
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;
    this.userCode = `
         void main() {
          ${Q} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${E}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}
const wL = { kernelName: Ul, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { params: I, indices: B } = A, Q = B.shape, E = Q[Q.length - 1], i = cA(I.shape), [o, t, e, s] = Lh(I, B), a = MA({ inputs: { x: B }, backend: g, attrs: { shape: [t, E] } }), r = MA({ inputs: { x: I }, backend: g, attrs: { shape: [cA(I.shape) / e, e] } });
  if (g.shouldExecuteOnCPU([I, B]) || I.dtype === "string") {
    const D = g.readSync(B.dataId), l = g.bufferSync(I), d = _Y(D, l, I.dtype, t, E, e, s, I.shape, i);
    return g.makeTensorInfo(o, I.dtype, d.values);
  }
  const h = new cL(E, s, [t, e], I.shape), w = g.runWebGLProgram(h, [r, a], r.dtype), G = MA({ inputs: { x: w }, backend: g, attrs: { shape: o } });
  return g.disposeIntermediateTensorInfo(a), g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(w), G;
} };
class lL {
  constructor(A, g) {
    this.variableNames = ["A", "indices"], this.outputShape = g, this.rank = g.length;
    const I = AI(this.rank), B = function(Q, E) {
      const i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [];
      for (let t = 0; t < Q.length; t++)
        t === 2 ? o.push("index") : o.push(`${i[t]}`);
      return o.join();
    }(A);
    this.userCode = `
      void main() {
        ${I} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${A[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${B}));
      }
    `;
  }
}
function DR(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, indices: Q } = A, { axis: E, batchDims: i } = I, o = Kg(E, B.shape)[0];
  if (aA().get("DEBUG")) {
    const l = g.readSync(Q.dataId), d = B.shape[o];
    for (let N = 0; N < l.length; ++N) {
      const k = l[N];
      f(k <= d - 1 && k >= 0, () => `GatherV2: the index value ${k} is not in [0, ${d - 1}]`);
    }
  }
  const t = gD(B, Q, o, i), e = cA(Q.shape), s = [], a = MA({ inputs: { x: B }, backend: g, attrs: { shape: [t.batchSize, t.outerSize, t.dimSize, t.sliceSize] } }), r = MA({ inputs: { x: Q }, backend: g, attrs: { shape: [t.batchSize, e / t.batchSize] } });
  s.push(a), s.push(r);
  const h = [t.batchSize, t.outerSize, e / t.batchSize, t.sliceSize];
  if (g.shouldExecuteOnCPU([B, Q]) || B.dtype === "string") {
    const l = g.bufferSync(r), d = g.bufferSync(a), N = AJ(d, l, h);
    return s.forEach((k) => g.disposeIntermediateTensorInfo(k)), g.makeTensorInfo(t.outputShape, N.dtype, N.values);
  }
  const w = new lL(a.shape, h), G = g.runWebGLProgram(w, [a, r], a.dtype);
  s.push(G);
  const D = MA({ inputs: { x: G }, backend: g, attrs: { shape: t.outputShape } });
  return s.forEach((l) => g.disposeIntermediateTensorInfo(l)), D;
}
const yL = { kernelName: is, backendName: "webgl", kernelFunc: DR }, dL = $I({ opSnippet: "return float(a > b);", packedOpSnippet: `
  return vec4(greaterThan(a, b));
`, cpuKernelImpl: gJ, dtype: "bool" }), FL = { kernelName: os, backendName: "webgl", kernelFunc: dL }, RL = $I({ opSnippet: "return float(a >= b);", packedOpSnippet: `
  return vec4(greaterThanEqual(a, b));
`, dtype: "bool", cpuKernelImpl: IJ }), NL = { kernelName: ko, backendName: "webgl", kernelFunc: RL }, uL = { kernelName: qr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { input: I } = A;
  return hR(I, !0, g);
} }, kL = bg({ opSnippet: "return float(!isnan(x) && !isinf(x));", dtype: "bool" }), KL = { kernelName: So, backendName: "webgl", kernelFunc: kL }, SL = bg({ opSnippet: "return float(isinf(x));", dtype: "bool" }), pL = { kernelName: po, backendName: "webgl", kernelFunc: SL }, ML = bg({ opSnippet: "return float(isnan(x));", dtype: "bool" }), UL = { kernelName: Mo, backendName: "webgl", kernelFunc: ML }, YL = $I({ opSnippet: "return float(a < b);", packedOpSnippet: `
  return vec4(lessThan(a, b));
`, cpuKernelImpl: CJ, dtype: "bool" }), JL = { kernelName: es, backendName: "webgl", kernelFunc: YL }, fL = $I({ opSnippet: "return float(a <= b);", packedOpSnippet: `
  return vec4(lessThanEqual(a, b));
`, cpuKernelImpl: BJ, dtype: "bool" }), LL = { kernelName: ss, backendName: "webgl", kernelFunc: fL }, mL = { kernelName: Yl, backendName: "webgl", kernelFunc: function(C) {
  const { backend: A, attrs: g } = C, { start: I, stop: B, num: Q } = g, E = QJ(I, B, Q);
  return A.makeTensorInfo([E.length], "float32", E);
} }, bL = bg({ opSnippet: ni + `
  return x < 0.0 ? 0./0. : log(x);
`, packedOpSnippet: `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, cpuKernelImpl: EJ }), HL = { kernelName: Uo, backendName: "webgl", kernelFunc: bL }, xL = bg({ opSnippet: ni + `
  return log(1.0 + x);
` }), qL = { kernelName: Yo, backendName: "webgl", kernelFunc: xL }, VL = $I({ opSnippet: "return float(a >= 1.0 && b >= 1.0);", packedOpSnippet: `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, dtype: "bool" }), WL = { kernelName: as, backendName: "webgl", kernelFunc: VL }, TL = bg({ opSnippet: "return float(!(x >= 1.0));" }), ZL = { kernelName: ns, backendName: "webgl", kernelFunc: TL }, XL = $I({ opSnippet: "return float(a >= 1.0 || b >= 1.0);", packedOpSnippet: `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, dtype: "bool" }), OL = { kernelName: rs, backendName: "webgl", kernelFunc: XL };
class vL {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["x"], this.outputShape = [];
    const E = g, i = A[3] - 1;
    let o;
    this.outputShape = A;
    const t = `float(${I}) + float(${B}) * sum`;
    o = Q === 0.5 ? `inversesqrt(${t})` : Q === 1 ? `1.0/(${t})` : `exp(log(${t}) * float(-${Q}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${E}; j <= ${E}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${o};
        setOutput(val);
      }
    `;
  }
}
class PL {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
    const E = g, i = A[3] - 1;
    let o;
    this.outputShape = A;
    const t = `float(${I}) + float(${B}) * sum`;
    o = Q === 0.5 ? `inversesqrt(${t})` : Q === 1 ? `1.0/(${t})` : `exp(log(${t}) * float(-${Q}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${E};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${E}; j <= ${E}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${o};
        setOutput(result);
      }
    `;
  }
}
const zL = { kernelName: hs, backendName: "webgl", kernelFunc: (C) => {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { depthRadius: Q, bias: E, alpha: i, beta: o } = I, t = aA().getBool("WEBGL_PACK_NORMALIZATION") ? new PL(B.shape, Q, E, i, o) : new vL(B.shape, Q, E, i, o);
  return g.runWebGLProgram(t, [B], B.dtype);
} };
class jL {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = A, this.depth = A[3], this.depthRadius = g, this.bias = I, this.alpha = B, this.beta = Q, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${g})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${g} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${B}) * norm + float(${I});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${B})
                * float(${Q})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${Q});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}
const $L = { kernelName: Wr, backendName: "webgl", kernelFunc: (C) => {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, y: Q, dy: E } = A, { depthRadius: i, bias: o, alpha: t, beta: e } = I, s = new jL(B.shape, i, o, t, e);
  return g.runWebGLProgram(s, [B, Q, E], B.dtype);
} };
function cR(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { reductionIndices: Q, keepDims: E } = I, i = B.shape.length, o = Kg(Q, B.shape);
  let t = o;
  const e = GI(t, i), s = e != null, a = g.shouldExecuteOnCPU([B]);
  let r = B;
  if (s) {
    if (a) {
      const l = g.texData.get(r.dataId).values, d = new Array(i);
      for (let k = 0; k < d.length; k++)
        d[k] = B.shape[e[k]];
      const N = GD(l, B.shape, B.dtype, e, d);
      r = g.makeTensorInfo(d, B.dtype), g.texData.get(r.dataId).values = N;
    } else
      r = Ea(B, e, g);
    t = KI(t.length, i);
  }
  jI("max", t, i);
  const [h, w] = OI(r.shape, t);
  let G, D = h;
  if (E && (D = YI(h, o)), a) {
    const l = g.texData.get(r.dataId).values, d = iJ(l, cA(w), D, B.dtype);
    G = g.makeTensorInfo(D, B.dtype), g.texData.get(G.dataId).values = d;
  } else
    G = function(l, d, N, k) {
      const p = cA(d), Y = MA({ inputs: { x: l }, attrs: { shape: [cA(l.shape) / p, p] }, backend: k }), M = wE(Y, l.dtype, "max", k), L = MA({ inputs: { x: M }, attrs: { shape: N }, backend: k });
      return k.disposeIntermediateTensorInfo(Y), k.disposeIntermediateTensorInfo(M), L;
    }(r, w, D, g);
  return s && g.disposeIntermediateTensorInfo(r), G;
}
const _L = { kernelName: Ds, backendName: "webgl", kernelFunc: cR }, Am = $I({ opSnippet: yD + `
  return max(a, b);
`, packedOpSnippet: `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + cE + `
  return result;
`, cpuKernelImpl: oJ }), gm = { kernelName: Jo, backendName: "webgl", kernelFunc: Am }, Im = { kernelName: cs, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A;
  ct(B, "maxPool");
  const { filterSize: Q, strides: E, pad: i, dimRoundingMode: o } = I;
  f(IC(E, 1), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${E} and dilations '1'`);
  const t = _C(B.shape, Q, E, 1, i, o);
  if (t.filterWidth === 1 && t.filterHeight === 1 && Zg(t.inShape, t.outShape))
    return kC({ inputs: { x: B }, backend: g });
  const e = new Bo(t, "max", !1);
  return g.runWebGLProgram(e, [B], B.dtype);
} }, Cm = { kernelName: ws, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { filterSize: Q, strides: E, pad: i, dataFormat: o, dimRoundingMode: t } = I, e = jB(B.shape, Q, E, [1, 1, 1], i, t, o), s = new FD(e, "max", !1);
  return g.runWebGLProgram(s, [B], B.dtype);
} };
class Bm {
  constructor(A) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = A.inShape;
    const g = A.strideHeight, I = A.strideWidth, B = A.dilationHeight, Q = A.effectiveFilterHeight, E = A.effectiveFilterWidth, i = Q - 1 - A.padInfo.top, o = E - 1 - A.padInfo.left, t = Q * E - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${Q};
          wR += ${B}) {
          float dyR = float(dyRCorner + wR) / ${g}.0;

          if (dyR < 0.0 || dyR >= ${A.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${E}; wC++) {
            float dyC = float(dyCCorner + wC) / ${I}.0;

            if (dyC < 0.0 || dyC >= ${A.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${t} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${E} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Qm {
  constructor(A) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = A.inShape;
    const g = A.strideDepth, I = A.strideHeight, B = A.strideWidth, Q = A.dilationDepth, E = A.dilationHeight, i = A.dilationWidth, o = A.effectiveFilterDepth, t = A.effectiveFilterHeight, e = A.effectiveFilterWidth, s = o - 1 - A.padInfo.front, a = t - 1 - A.padInfo.top, r = e - 1 - A.padInfo.left, h = o * t * e - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${s}, ${a}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${Q}) {
          float dyD = float(dyDCorner + wD) / ${g}.0;

          if (dyD < 0.0 || dyD >= ${A.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${t};
              wR += ${E}) {
            float dyR = float(dyRCorner + wR) / ${I}.0;

            if (dyR < 0.0 || dyR >= ${A.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${e};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${B}.0;

              if (dyC < 0.0 || dyC >= ${A.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${t} * ${e} +
                  wR * ${e} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
const Em = { kernelName: Zr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q } = A, E = Q, { filterSize: i, strides: o, pad: t, dimRoundingMode: e } = I, s = jB(E.shape, i, o, [1, 1, 1], t, e), a = new FD(s, "max", !0), r = g.runWebGLProgram(a, [E], E.dtype), h = new Qm(s), w = g.runWebGLProgram(h, [B, r], E.dtype);
  return g.disposeIntermediateTensorInfo(r), w;
} }, im = { kernelName: Tr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { dy: B, input: Q, output: E } = A, i = Q;
  ct([Q, E], "maxPoolGrad");
  const { filterSize: o, strides: t, pad: e, dimRoundingMode: s } = I, a = _C(i.shape, o, t, 1, e, s), r = new Bo(a, "max", !0), h = g.runWebGLProgram(r, [i], i.dtype), w = new Bm(a), G = g.runWebGLProgram(w, [B, h], i.dtype);
  return g.disposeIntermediateTensorInfo(h), G;
} }, om = { kernelName: Jl, backendName: "webgl", kernelFunc: ({ inputs: C, attrs: A, backend: g }) => {
  const { x: I } = C, { filterSize: B, strides: Q, pad: E, includeBatchInIndex: i } = A, o = g;
  f(I.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${I.shape.length}.`);
  const t = [1, 1];
  f(IC(Q, t), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${Q} and dilations '${t}'`);
  const e = _C(I.shape, B, Q, t, E), [s, a] = function(r, h, w, G) {
    let D = new Bo(w, "max", !1);
    const l = G.runWebGLProgram(D, [r], "float32");
    return D = new Bo(w, "max", !0, !0, h), [l, G.runWebGLProgram(D, [r], "float32")];
  }(I, i, e, o);
  return [s, a];
} }, tm = { kernelName: ls, backendName: "webgl", kernelFunc: ({ inputs: C, attrs: A, backend: g }) => {
  const { x: I } = C, { keepDims: B, axis: Q } = A, E = g, i = I.shape.length, o = Kg(Q, I.shape);
  let t = o;
  const e = GI(t, i), s = e != null, a = E.shouldExecuteOnCPU([I]), r = [];
  let h = I;
  if (s) {
    if (a) {
      const d = E.texData.get(h.dataId).values, N = new Array(i);
      for (let p = 0; p < N.length; p++)
        N[p] = I.shape[e[p]];
      const k = GD(d, I.shape, I.dtype, e, N);
      h = E.makeTensorInfo(N, I.dtype), E.texData.get(h.dataId).values = k;
    } else
      h = Ea(I, e, E);
    r.push(h), t = KI(t.length, i);
  }
  jI("sum", t, i);
  const [w, G] = OI(h.shape, t);
  let D = w;
  B && (D = YI(w, o));
  const l = function(d, N, k, p) {
    const Y = cA(N), M = MA({ inputs: { x: d }, attrs: { shape: [cA(d.shape) / Y, Y] }, backend: p }), L = wE(M, "float32", "mean", p), m = MA({ inputs: { x: L }, attrs: { shape: k }, backend: p });
    return p.disposeIntermediateTensorInfo(M), p.disposeIntermediateTensorInfo(L), m;
  }(h, G, D, E);
  for (const d of r)
    E.disposeIntermediateTensorInfo(d);
  return l;
} }, em = { kernelName: Gs, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I, i = B.shape.length, o = Kg(Q, B.shape);
  let t = o;
  const e = GI(t, i);
  let s = B;
  e != null && (s = sC({ inputs: { x: B }, backend: g, attrs: { perm: e } }), t = KI(t.length, B.shape.length)), jI("min", t, i);
  const [a, r] = OI(s.shape, t), h = MA({ inputs: { x: s }, backend: g, attrs: { shape: [-1, cA(r)] } }), w = wE(h, h.dtype, "min", g);
  let G;
  return E ? G = MA({ inputs: { x: w }, backend: g, attrs: { shape: YI(a, o) } }) : G = MA({ inputs: { x: w }, backend: g, attrs: { shape: a } }), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), e != null && g.disposeIntermediateTensorInfo(s), G;
} }, sm = $I({ opSnippet: yD + `
  return min(a, b);
`, packedOpSnippet: `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + cE + `
  return result;
`, cpuKernelImpl: tJ }), am = { kernelName: fo, backendName: "webgl", kernelFunc: sm };
class nm {
  constructor(A, g, I) {
    this.variableNames = ["x"], this.outputShape = g.map((e, s) => e[0] + A[s] + e[1]);
    const B = A.length, Q = AI(B), E = g.map((e) => e[0]).join(","), i = g.map((e, s) => e[0] + A[s]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, B), t = I === "reflect" ? 0 : 1;
    this.userCode = B !== 1 ? `
      ${Q} start = ${Q}(${E});
      ${Q} end = ${Q}(${i});

      void main() {
        ${Q} outC = getOutputCoords();
        for (int i = 0; i < ${B}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${t};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${t};
          }
        }
        ${Q} coords = outC - start;
        setOutput(getX(${o}));
      }
    ` : `
        int start = ${E};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${t};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${t};
          }
          setOutput(getX(outC - start));
        }
      `;
  }
}
class rm {
  constructor(A, g, I) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = g.map((h, w) => h[0] + A[w] + h[1]);
    const B = A.length, Q = AI(B), E = g.map((h) => h[0]).join(","), i = g.map((h, w) => h[0] + A[w]).join(","), o = oC("rc", B), t = oC("source", B), e = `${o[B - 1]} < ${this.outputShape[B - 1]}`, s = B === 1 ? "source" : `vec2(${t.slice(-2).join()})`, a = I === "reflect" ? 0 : 1;
    let r = "";
    if (B === 1) {
      const h = `
        ${Q} source = rc;
        if (source < start) {
          source = start * 2 - source - ${a};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${a};
        }
        source -= start;
      `;
      r = `
        ${Q} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${t.join()}), ${s});
        ${o[B - 1]} += 1;
        if(${e}) {
          ${h}
          result[1] = getChannel(getX(${t.join()}), ${s});
        }
      `;
    } else {
      const h = `
        ${Q} source = rc;
        ${Q} lt = ${Q}(lessThan(source, start));
        ${Q} gte = ${Q}(greaterThanEqual(source, end));
        ${Q} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${a}) +
                gte * ((end - 1) * 2 - source + ${a});
        source -= start;
      `;
      r = `
        ${Q} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${t.join()}), ${s});
        ${o[B - 1]} += 1;
        if(${e}) {
          ${h}
          result[1] = getChannel(getX(${t.join()}), ${s});
        }
        rc = outputLoc;
        ${o[B - 2]} += 1;
        if(${o[B - 2]} < ${this.outputShape[B - 2]}) {
          ${h}
          result[2] = getChannel(getX(${t.join()}), ${s});
          ${o[B - 1]} += 1;
          if(${e}) {
            ${h}
            result[3] = getChannel(getX(${t.join()}), ${s});
          }
        }
      `;
    }
    this.userCode = `
      const ${Q} start = ${Q}(${E});
      const ${Q} end = ${Q}(${i});

      void main() {
        ${Q} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${r}
        setOutput(result);
      }
    `;
  }
}
const hm = { kernelName: ys, backendName: "webgl", kernelFunc: ({ inputs: C, backend: A, attrs: g }) => {
  const { x: I } = C, { paddings: B, mode: Q } = g, E = aA().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new rm(I.shape, B, Q) : new nm(I.shape, B, Q);
  return A.runWebGLProgram(E, [I], I.dtype);
} }, Dm = $I({ opSnippet: `if (b == 0.0) return NAN;
  return mod(a, b);`, packedOpSnippet: `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + cE + `
  return result;
` }), cm = { kernelName: Lo, backendName: "webgl", kernelFunc: Dm };
class wm {
  constructor(A, g, I) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [A, I], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${g - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${g - 1}));
      }
    `;
  }
}
const wR = $I({ opSnippet: `
if (a == b) {
  return 1.0;
};
return a / b;`, packedOpSnippet: `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, checkOutOfBounds: !0 }), lm = { kernelName: lo, backendName: "webgl", kernelFunc: wR }, Cl = "return a - b;", lR = $I({ opSnippet: Cl, packedOpSnippet: Cl, supportsComplex: !0, cpuKernelImpl: pJ }), Gm = { kernelName: $o, backendName: "webgl", kernelFunc: lR };
function GR(C) {
  const { inputs: A, backend: g, attrs: I } = C, { logits: B } = A, { dim: Q } = I, E = Kg([Q], B.shape), i = cR({ inputs: { x: B }, backend: g, attrs: { reductionIndices: E, keepDims: !1 } }), o = YI(i.shape, E), t = MA({ inputs: { x: i }, backend: g, attrs: { shape: o } }), e = lR({ inputs: { a: B, b: t }, backend: g }), s = rR({ inputs: { x: e }, backend: g }), a = ia({ inputs: { x: s }, backend: g, attrs: { axis: E, keepDims: !1 } }), r = MA({ inputs: { x: a }, backend: g, attrs: { shape: o } }), h = wR({ inputs: { a: s, b: r }, backend: g });
  return g.disposeIntermediateTensorInfo(i), g.disposeIntermediateTensorInfo(t), g.disposeIntermediateTensorInfo(e), g.disposeIntermediateTensorInfo(s), g.disposeIntermediateTensorInfo(a), g.disposeIntermediateTensorInfo(r), h;
}
const ym = { kernelName: Hs, backendName: "webgl", kernelFunc: GR }, dm = { kernelName: fl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { logits: B } = A, { numSamples: Q, seed: E, normalized: i } = I, o = i ? B : GR({ inputs: { logits: B }, backend: g, attrs: { dim: B.shape.length - 1 } }), t = o.shape[0], e = o.shape[1], s = new wm(t, e, Q), a = [[E]], r = g.runWebGLProgram(s, [o], "int32", a);
  return i || g.disposeIntermediateTensorInfo(o), r;
} }, Fm = gB + `
  return -x;
`, Rm = { kernelName: ds, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { x: I } = A;
  if (g.shouldExecuteOnCPU([I])) {
    const Q = g.texData.get(I.dataId), [E, i] = sJ(Q.values, I.shape, I.dtype);
    return g.makeTensorInfo(i, I.dtype, E);
  }
  let B;
  return B = aA().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? new tQ(I.shape, `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`) : new kB(I.shape, Fm), g.runWebGLProgram(B, [I], I.dtype);
} }, Nm = Mh, um = { kernelName: Xr, backendName: "webgl", kernelFunc: function(C) {
  SC("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: A, backend: g, attrs: I } = C, { boxes: B, scores: Q } = A, { maxOutputSize: E, iouThreshold: i, scoreThreshold: o } = I, t = g.readSync(B.dataId), e = g.readSync(Q.dataId), { selectedIndices: s } = Nm(t, e, E, i, o);
  return g.makeTensorInfo([s.length], "int32", new Int32Array(s));
} }, km = Uh, Km = { kernelName: Or, backendName: "webgl", kernelFunc: function(C) {
  SC("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: A, backend: g, attrs: I } = C, { boxes: B, scores: Q } = A, { maxOutputSize: E, iouThreshold: i, scoreThreshold: o, padToMaxOutputSize: t } = I, e = g.readSync(B.dataId), s = g.readSync(Q.dataId), { selectedIndices: a, validOutputs: r } = km(e, s, E, i, o, t);
  return [g.makeTensorInfo([a.length], "int32", new Int32Array(a)), g.makeTensorInfo([], "int32", new Int32Array([r]))];
} }, Sm = Yh, pm = { kernelName: vr, backendName: "webgl", kernelFunc: function(C) {
  SC("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: A, backend: g, attrs: I } = C, { boxes: B, scores: Q } = A, { maxOutputSize: E, iouThreshold: i, scoreThreshold: o, softNmsSigma: t } = I, e = g.readSync(B.dataId), s = g.readSync(Q.dataId), a = E, r = i, h = o, w = t, { selectedIndices: G, selectedScores: D } = Sm(e, s, a, r, h, w);
  return [g.makeTensorInfo([G.length], "int32", new Int32Array(G)), g.makeTensorInfo([D.length], "float32", new Float32Array(D))];
} };
class Mm {
  constructor(A, g, I, B) {
    this.variableNames = ["indices"], this.outputShape = [A, g], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${B}), float(${I}),
                      float(index == coords.y)));
      }
    `;
  }
}
const Um = { kernelName: Ns, backendName: "webgl", kernelFunc: (C) => {
  const { inputs: A, backend: g, attrs: I } = C, { indices: B } = A, { dtype: Q, depth: E, onValue: i, offValue: o } = I, t = cA(B.shape), e = new Mm(t, E, i, o), s = MA({ inputs: { x: B }, backend: g, attrs: { shape: [t] } }), a = g.runWebGLProgram(e, [s], Q);
  g.disposeIntermediateTensorInfo(s);
  const r = MA({ inputs: { x: a }, backend: g, attrs: { shape: [...B.shape, E] } });
  return g.disposeIntermediateTensorInfo(a), r;
} };
function qe(C) {
  const { inputs: A, backend: g } = C, { x: I } = A;
  if (I.dtype === "complex64") {
    const B = wt({ inputs: { input: I }, backend: g }), Q = qe({ inputs: { x: B }, backend: g }), E = oa({ inputs: { input: I }, backend: g }), i = qe({ inputs: { x: E }, backend: g }), o = uQ({ inputs: { real: Q, imag: i }, backend: g });
    return g.disposeIntermediateTensorInfo(B), g.disposeIntermediateTensorInfo(Q), g.disposeIntermediateTensorInfo(E), g.disposeIntermediateTensorInfo(i), o;
  }
  return lt({ attrs: { shape: I.shape, dtype: I.dtype, value: I.dtype === "string" ? "" : 0 }, backend: g });
}
const Ym = { kernelName: Vs, backendName: "webgl", kernelFunc: qe }, Jm = { kernelName: Rs, backendName: "webgl", kernelFunc: function C(A) {
  const { inputs: g, backend: I } = A, { x: B } = g;
  if (B.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (B.dtype === "complex64") {
    const Q = wt({ inputs: { input: B }, backend: I }), E = C({ inputs: { x: Q }, backend: I }), i = oa({ inputs: { input: B }, backend: I }), o = qe({ inputs: { x: i }, backend: I }), t = uQ({ inputs: { real: E, imag: o }, backend: I });
    return I.disposeIntermediateTensorInfo(Q), I.disposeIntermediateTensorInfo(E), I.disposeIntermediateTensorInfo(i), I.disposeIntermediateTensorInfo(o), t;
  }
  return lt({ attrs: { shape: B.shape, dtype: B.dtype, value: 1 }, backend: I });
} }, fm = { kernelName: us, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { axis: B } = I;
  if (A.length === 1)
    return ar({ inputs: { input: A[0] }, backend: g, attrs: { dim: B } });
  const Q = A[0].shape, E = A[0].dtype;
  A.forEach((t) => {
    Dr(Q, t.shape, "All tensors passed to stack must have matching shapes"), f(E === t.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], o = ER({ inputs: A.map((t) => {
    const e = ar({ inputs: { input: t }, backend: g, attrs: { dim: B } });
    return i.push(e), e;
  }), backend: g, attrs: { axis: B } });
  return i.forEach((t) => g.disposeIntermediateTensorInfo(t)), o;
} };
class Lm {
  constructor(A, g, I) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = g.map((t, e) => t[0] + A[e] + t[1]);
    const B = A.length, Q = AI(B), E = g.map((t) => t[0]).join(","), i = g.map((t, e) => t[0] + A[e]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, B);
    this.userCode = B !== 1 ? `
      ${Q} start = ${Q}(${E});
      ${Q} end = ${Q}(${i});

      void main() {
        ${Q} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${Q} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    ` : `
        int start = ${E};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
  }
}
class mm {
  constructor(A, g, I) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = g.map((w, G) => w[0] + A[G] + w[1]);
    const B = A.length, Q = AI(B), E = g.map((w) => w[0]).join(","), i = g.map((w, G) => w[0] + A[G]).join(","), o = oC("rc", B), t = oC("source", B), e = `${o[B - 1]} < ${this.outputShape[B - 1]}`, s = B === 1 ? "source" : `vec2(${t.slice(-2).join()})`, a = [`${Q} rc = outputLoc;`, `${o[B - 1]} += 1;
       if(${e}) {
      `, B === 1 ? "" : `}
       rc = outputLoc;
       ${o[B - 2]} += 1;
       if(${o[B - 2]} < ${this.outputShape[B - 2]}) {`, B === 1 ? "" : `  ${o[B - 1]} += 1;
         if(${e}) {`], r = B === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let h = "";
    for (let w = 0, G = B === 1 ? 2 : 4; w < G; w++)
      h += `
        ${a[w]}
        if (${r}) {
          result[${w}] = float(value);
        } else {
          ${Q} source = rc - start;
          result[${w}] = getChannel(getX(${t.join()}), ${s});
        }
      `;
    h += B === 1 ? "} " : "}}", this.userCode = `
      const ${Q} start = ${Q}(${E});
      const ${Q} end = ${Q}(${i});

      void main() {
        ${Q} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `;
  }
}
const yR = (C) => {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { paddings: Q, constantValue: E } = I;
  if (cA(B.shape) === 0) {
    const t = Q.map((e, s) => e[0] + B.shape[s] + e[1]);
    return lt({ backend: g, attrs: { shape: t, value: E, dtype: B.dtype } });
  }
  const i = aA().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new mm(B.shape, Q, E) : new Lm(B.shape, Q, E), o = [[E]];
  return g.runWebGLProgram(i, [B], B.dtype, o);
}, bm = { kernelName: ks, backendName: "webgl", kernelFunc: yR }, Hm = $I({ opSnippet: `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, packedOpSnippet: `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + cE + `
  return result;
` }), xm = { kernelName: bo, backendName: "webgl", kernelFunc: Hm }, qm = { kernelName: Ss, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { axis: Q, keepDims: E } = I, i = B.shape.length, o = [], t = Kg(Q, B.shape);
  let e = t;
  const s = GI(e, i);
  let a, r = B;
  if (s != null && (r = sC({ inputs: { x: B }, backend: g, attrs: { perm: s } }), e = KI(e.length, i), o.push(r)), jI("prod", e, i), g.shouldExecuteOnCPU([r])) {
    const h = g.texData.get(r.dataId).values, { outVals: w, outShape: G, outDtype: D } = nJ(r.shape, r.dtype, h, e);
    a = g.makeTensorInfo(G, D, w);
  } else {
    const [h, w] = OI(r.shape, e), G = cA(w), D = MA({ inputs: { x: r }, backend: g, attrs: { shape: [-1, G] } }), l = wE(D, Eh(B.dtype), "prod", g);
    a = MA({ inputs: { x: l }, backend: g, attrs: { shape: h } }), o.push(D), o.push(l);
  }
  if (E) {
    o.push(a);
    const h = YI(a.shape, t);
    a = MA({ inputs: { x: a }, backend: g, attrs: { shape: h } });
  }
  return o.forEach((h) => g.disposeIntermediateTensorInfo(h)), a;
} }, Vm = { kernelName: Ll, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { paramsNestedSplits: B, paramsDenseValues: Q, indices: E } = A, { outputRaggedRank: i } = I, o = B.map((D) => g.readSync(D.dataId)), t = B.map((D) => D.shape), e = g.readSync(Q.dataId), s = g.readSync(E.dataId), [a, r, h] = rJ(o, t, e, Q.shape, Q.dtype, s, E.shape, i), w = a.map((D) => g.makeTensorInfo([D.length], "int32", D)), G = g.makeTensorInfo(h, Q.dtype, r);
  return w.concat([G]);
} }, Wm = { kernelName: ml, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { starts: I, limits: B, deltas: Q } = A, E = g.readSync(I.dataId), i = g.readSync(B.dataId), o = g.readSync(Q.dataId), [t, e] = hJ(E, I.shape, I.dtype, i, B.shape, o, Q.shape);
  return [g.makeTensorInfo([t.length], "int32", t), g.makeTensorInfo([e.length], I.dtype, e)];
} }, Tm = { kernelName: bl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { shape: B, values: Q, defaultValue: E, rowPartitionTensors: i } = A, { rowPartitionTypes: o } = I, t = g.readSync(B.dataId), e = g.readSync(Q.dataId), s = g.readSync(E.dataId), a = i.map((G) => g.readSync(G.dataId)), r = i.map((G) => G.shape), [h, w] = DJ(t, B.shape, e, Q.shape, Q.dtype, s, E.shape, a, r, o);
  return g.makeTensorInfo(h, Q.dtype, w);
} }, dR = (C) => {
  const { backend: A, attrs: g } = C, { start: I, stop: B, step: Q, dtype: E } = g, i = cJ(I, B, Q, E);
  return A.makeTensorInfo([i.length], E, i);
}, Zm = { kernelName: Pr, backendName: "webgl", kernelFunc: dR }, Xm = bg({ opSnippet: "return 1.0 / x;" }), Om = { kernelName: Ho, backendName: "webgl", kernelFunc: Xm }, vm = bg({ opSnippet: gB + `
  return (x < 0.0) ? 0.0 : x;
`, packedOpSnippet: `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
` }), Pm = { kernelName: xo, backendName: "webgl", kernelFunc: vm }, zm = bg({ opSnippet: gB + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, packedOpSnippet: `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
` }), jm = { kernelName: qo, backendName: "webgl", kernelFunc: zm };
class $m {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["A"], this.outputShape = [];
    const [E, i, o, t] = A;
    this.outputShape = [E, g, I, t];
    const e = [B && g > 1 ? i - 1 : i, B && I > 1 ? o - 1 : o], s = [B && g > 1 ? g - 1 : g, B && I > 1 ? I - 1 : I];
    let a;
    a = Q ? "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${e[0] / s[0]},
          ${e[1] / s[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}
class _m {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [E, i, o, t] = A;
    this.outputShape = [E, g, I, t];
    const e = [B && g > 1 ? i - 1 : i, B && I > 1 ? o - 1 : o], s = [B && g > 1 ? g - 1 : g, B && I > 1 ? I - 1 : I];
    let a;
    a = Q ? "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${e[0] / s[0]},
          ${e[1] / s[1]},
          ${e[1] / s[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${t - 1};
        bool hasNextRow = coords.z < ${I - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
const Ab = { kernelName: Us, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B } = A, { alignCorners: Q, halfPixelCenters: E, size: i } = I, [o, t] = i, e = aA().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new _m(B.shape, o, t, Q, E) : new $m(B.shape, o, t, Q, E);
  return g.runWebGLProgram(e, [B], "float32");
} };
class gb {
  constructor(A, g, I) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = g;
    const [, B, Q] = g, [, E, i] = A, o = [I && E > 1 ? B - 1 : B, I && i > 1 ? Q - 1 : Q], t = [I && E > 1 ? E - 1 : E, I && i > 1 ? i - 1 : i], e = o[0] / t[0], s = o[1] / t[1], a = 1 / e, r = 1 / s, h = 2 * Math.ceil(a) + 2, w = 2 * Math.ceil(r) + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${e});
        const float widthScale = float(${s});

        const float invHeightScale = float(${a});
        const float invWidthScale = float(${r});

        const int winHeight = int(${h});
        const int winWidth = int(${w});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${E}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${B - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${Q - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
const Ib = { kernelName: $r, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B, dy: Q } = A, { alignCorners: E } = I, i = new gb(Q.shape, B.shape, E);
  return g.runWebGLProgram(i, [Q], Q.dtype);
} };
class Cb {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["A"], this.outputShape = [];
    const [E, i, o, t] = A;
    this.outputShape = [E, g, I, t];
    const e = [B && g > 1 ? i - 1 : i, B && I > 1 ? o - 1 : o], s = [B && g > 1 ? g - 1 : g, B && I > 1 ? I - 1 : I], a = B ? "0.5" : "0.0";
    let r;
    r = Q ? "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${e[0] / s[0]},
          ${e[1] / s[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${r};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${a})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}
class Bb {
  constructor(A, g, I, B, Q) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [E, i, o, t] = A;
    this.outputShape = [E, g, I, t];
    const e = [B && g > 1 ? i - 1 : i, B && I > 1 ? o - 1 : o], s = [B && g > 1 ? g - 1 : g, B && I > 1 ? I - 1 : I], a = B ? "0.5" : "0.0";
    let r;
    r = Q ? "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${e[0] / s[0]},
          ${e[1] / s[1]},
          ${e[1] / s[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${r};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${a})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${t - 1};
        bool hasNextRow = coords.z < ${I - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
const Qb = { kernelName: Ms, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B } = A, { alignCorners: Q, halfPixelCenters: E, size: i } = I, [o, t] = i, e = aA().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Bb(B.shape, o, t, Q, E) : new Cb(B.shape, o, t, Q, E);
  return g.runWebGLProgram(e, [B], B.dtype);
} };
class Eb {
  constructor(A, g, I) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = g;
    const [, B, Q] = g, [, E, i] = A, o = [I && E > 1 ? B - 1 : B, I && i > 1 ? Q - 1 : Q], t = [I && E > 1 ? E - 1 : E, I && i > 1 ? i - 1 : i], e = o[0] / t[0], s = o[1] / t[1], a = 1 / e, r = 1 / s, h = 2 * Math.ceil(a) + 2, w = 2 * Math.ceil(r) + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${e});
        const float widthScale = float(${s});

        const float invHeightScale = float(${a});
        const float invWidthScale = float(${r});

        const int winHeight = int(${h});
        const int winWidth = int(${w});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${E}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${t[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${t[1]}));

            int sourceNearestRow = int(min(
                float(int(${B}) - 1),
                ${I} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${Q}) - 1),
                ${I} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
const ib = { kernelName: jr, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { images: B, dy: Q } = A, { alignCorners: E } = I, i = new Eb(Q.shape, B.shape, E);
  return g.runWebGLProgram(i, [Q], Q.dtype);
} };
class ob {
  constructor(A, g) {
    this.variableNames = ["x"];
    const I = A.length;
    if (I > 4)
      throw new Error(`WebGL backend: Reverse of rank-${I} tensor is not yet supported`);
    if (this.outputShape = A, I === 1)
      return void (this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${A[0]} - coord - 1));
        }
      `);
    const B = A.map((E, i) => ((o) => g.indexOf(o) !== -1 && A[o] !== 1 ? `${A[o]} - coords[${o}] - 1` : `coords[${o}]`)(i)).join(","), Q = AI(I);
    this.userCode = `
      void main() {
        ${Q} coords = getOutputCoords();
        setOutput(getX(${B}));
      }
    `;
  }
}
class tb {
  constructor(A, g) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0;
    const I = A.length;
    if (I > 4)
      throw new Error(`WebGL backend: Reverse of rank-${I} tensor is not yet supported`);
    this.outputShape = A;
    const B = oC("rc", I), Q = `${B[I - 1]} + 1 < ${this.outputShape[I - 1]}`, E = `${B[I - 2]} + 1 < ${this.outputShape[I - 2]}`, i = AI(I);
    function o(t) {
      const e = A.map((s, a) => function(r, h) {
        return g.indexOf(r) !== -1 && A[r] !== 1 ? `${A[r]} - ${h[r]} - 1` : `${h[r]}`;
      }(a, t));
      return `getChannel(getX(${e.join(",")}), vec2(${e.slice(-2).join(",")}))`;
    }
    this.userCode = I === 1 ? `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${A[0]} - rc - 1),
            ${A[0]} - rc - 1);
          if(${Q}){
              result.g = getChannel(getX(${A[0]} - (rc  + 1) - 1),
                ${A[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${function(t) {
      return o(t);
    }(B.slice())};
          if(${Q}){
            result.g = ${function(t) {
      return t[I - 1] = "(" + t[I - 1] + " + 1)", o(t);
    }(B.slice())};
          }
          if(${E}) {
            result.b = ${function(t) {
      return t[I - 2] = "(" + t[I - 2] + " + 1)", o(t);
    }(B.slice())};
            if(${Q}) {
              result.a = ${function(t) {
      return t[I - 1] = "(" + t[I - 1] + " + 1)", t[I - 2] = "(" + t[I - 2] + " + 1)", o(t);
    }(B.slice())};
            }
          }
          setOutput(result);
        }
    `;
  }
}
const eb = { kernelName: Ys, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { dims: Q } = I, E = B.shape.length, i = Kg(Q, B.shape);
  if (E === 0)
    return kC({ inputs: { x: B }, backend: g });
  const o = aA().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new tb(B.shape, i) : new ob(B.shape, i);
  return g.runWebGLProgram(o, [B], B.dtype);
} };
class sb {
  constructor(A, g) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const I = A[1], B = A[2];
    this.outputShape = A;
    let Q = "";
    Q = typeof g == "number" ? `float outputValue = ${g.toFixed(2)};` : `
        vec3 fill = vec3(${g.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${Q}
          if(coordX >= 0 && coordX < ${B} && coordY >= 0 && coordY < ${I}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
const ab = { kernelName: Bh, backendName: "webgl", kernelFunc: ({ inputs: C, attrs: A, backend: g }) => {
  const { image: I } = C, { radians: B, fillValue: Q, center: E } = A, i = g, o = new sb(I.shape, Q), [t, e] = Th(E, I.shape[1], I.shape[2]), s = [[t, e, Math.sin(B), Math.cos(B)]];
  return i.runWebGLProgram(o, [I], I.dtype, s);
} }, nb = bg({ opSnippet: `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
` }), rb = { kernelName: Vo, backendName: "webgl", kernelFunc: nb }, hb = bg({ opSnippet: "return inversesqrt(x);", cpuKernelImpl: wJ }), Db = { kernelName: Wo, backendName: "webgl", kernelFunc: hb };
class RD {
  constructor(A, g, I, B, Q, E, i = !0, o = !1) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = E;
    const t = AI(Q.length), e = AI(E.length);
    let s = "";
    I === 1 ? s = "i" : I === 2 && (s = "i, j");
    const a = `getIndices(${s})`;
    let r = "";
    B === 1 ? r = "i" : B === 2 && (r = "i, coords[1]");
    const h = `getUpdates(${r})`;
    let w = "";
    o && (w = "coords[0], coords[1]");
    const G = `getDefaultValue(${w})`, D = g > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${t} strides = ${t}(${Q});

        void main() {
          ${e} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${A}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${g}; j++) {
              int index = round(${a});
              flattenedIndex += index * ${D};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${h};
              found = true;
            }
          }
          setOutput(mix(${G}, sum, float(found)));
        }
      `;
  }
}
class cb {
  constructor(A, g, I, B, Q, E, i = !0, o = !1) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = E;
    const t = AI(Q.length), e = AI(E.length);
    let s = "";
    I === 1 ? s = "i" : I === 2 && (s = "i, j");
    const a = `getIndices(${s})`;
    let r = "";
    B === 1 ? r = "i" : B === 2 && (r = "i, coords[1]");
    const h = `getUpdates(${r})`;
    let w = "";
    o && (w = "coords[0], coords[1]");
    const G = `getDefaultValue(${w})`, D = g > 1 ? "strides[j]" : "strides", l = g > 1 ? "strides[j + 1]" : "strides";
    this.userCode = `
        ${t} strides = ${t}(${Q});

        void main() {
          ${e} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${A}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${g}; j+=2) {
              ivec4 index = round(${a});
              flattenedIndex += index.xz * ${D};
              if (j + 1 < ${g}) {
                flattenedIndex += index.yw * ${l};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${h};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${G}, sum, found));
        }
      `;
  }
}
const wb = { kernelName: Hl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { indices: B, updates: Q } = A, { shape: E } = I, { sliceRank: i, numUpdates: o, sliceSize: t, strides: e, outputSize: s } = hE(0, B, E), a = [s / t, t];
  if (s === 0)
    return g.makeTensorInfo(E, B.dtype);
  const r = MA({ inputs: { x: B }, backend: g, attrs: { shape: [o, i] } }), h = MA({ inputs: { x: Q }, backend: g, attrs: { shape: [o, t] } }), w = g.makeTensorInfo([], "float32", new Float32Array([0]));
  let G;
  G = aA().getBool("WEBGL_PACK") ? new cb(o, i, r.shape.length, h.shape.length, e, a) : new RD(o, i, r.shape.length, h.shape.length, e, a);
  const D = g.runWebGLProgram(G, [h, r, w], h.dtype), l = MA({ inputs: { x: D }, backend: g, attrs: { shape: E } });
  return g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(D), g.disposeIntermediateTensorInfo(w), l;
} };
class lb {
  constructor(A, g, I, B) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [A, I];
    const Q = `for (int i = 0; i < ${Math.ceil(Math.log2(g + 1))}; ++i) { if (left >= right) break;`, E = aA().getNumber("WEBGL_VERSION") === 2 ? "while (left < right) {" : Q, i = B === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${E}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${i} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}
const Gb = { kernelName: ql, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { sortedSequence: B, values: Q } = A, { side: E } = I, i = new lb(B.shape[0], B.shape[1], Q.shape[1], E), o = [[B.shape[1]]];
  return g.runWebGLProgram(i, [B, Q], "int32", o);
} };
class yb {
  constructor(A, g, I) {
    let B, Q;
    if (this.variableNames = ["c", "a", "b"], this.outputShape = g, I > 4)
      throw Error(`Where for rank ${I} is not yet supported`);
    if (I === 1)
      Q = "resRC", B = "resRC";
    else {
      const i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [], t = [];
      for (let e = 0; e < g.length; e++)
        t.push(`${i[e]}`), e < A && o.push(`${i[e]}`);
      B = o.join(), Q = t.join();
    }
    const E = AI(I);
    this.userCode = `
      void main() {
        ${E} resRC = getOutputCoords();
        float cVal = getC(${B});
        if (cVal >= 1.0) {
          setOutput(getA(${Q}));
        } else {
          setOutput(getB(${Q}));
        }
      }
    `;
  }
}
const db = { kernelName: Js, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { condition: I, t: B, e: Q } = A, E = new yb(I.shape.length, B.shape, B.shape.length);
  return g.runWebGLProgram(E, [I, B, Q], NC(B.dtype, Q.dtype));
} }, Fb = bg({ opSnippet: `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = 1.7580993408473768;
  float scale = ${Oh};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
` }), Rb = { kernelName: To, backendName: "webgl", kernelFunc: Fb }, Nb = bg({ opSnippet: ni + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, packedOpSnippet: `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, cpuKernelImpl: GJ }), ub = { kernelName: vo, backendName: "webgl", kernelFunc: Nb }, kb = bg({ opSnippet: `
  if (isnan(x)) { return 0.0; }
  return sign(x);
` }), Kb = { kernelName: Oo, backendName: "webgl", kernelFunc: kb }, Sb = bg({ opSnippet: ni + `
  return sin(x);
`, packedOpSnippet: `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${cE}
  return result;
` }), pb = { kernelName: Zo, backendName: "webgl", kernelFunc: Sb }, Mb = bg({ opSnippet: `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
` }), Ub = { kernelName: Xo, backendName: "webgl", kernelFunc: Mb }, Yb = bg({ opSnippet: `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
` }), Jb = { kernelName: Po, backendName: "webgl", kernelFunc: Yb }, fb = { kernelName: ms, backendName: "webgl", kernelFunc: (C) => {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { blockShape: Q, paddings: E } = I;
  f(B.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const i = Q.reduce((D, l) => D * l), o = [[0, 0]];
  o.push(...E);
  for (let D = 1 + Q.length; D < B.shape.length; ++D)
    o.push([0, 0]);
  const t = [], e = yR({ inputs: { x: B }, backend: g, attrs: { paddings: o, constantValue: 0 } }), s = tt(e.shape, Q, i, !1), a = et(s.length, Q.length, !1), r = st(e.shape, Q, i, !1), h = MA({ inputs: { x: e }, backend: g, attrs: { shape: s } }), w = sC({ inputs: { x: h }, backend: g, attrs: { perm: a } }), G = MA({ inputs: { x: w }, backend: g, attrs: { shape: r } });
  return t.push(e), t.push(h), t.push(w), t.forEach((D) => g.disposeIntermediateTensorInfo(D)), G;
} }, Lb = { kernelName: Vl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { indices: I, values: B, denseShape: Q, defaultValue: E } = A;
  if (Q.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${Q.shape}`);
  if (I.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${I.shape}`);
  if (B.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${B.shape}`);
  if (E.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${E.shape}`);
  const i = g.readSync(I.dataId), o = g.readSync(B.dataId), t = g.readSync(Q.dataId), e = g.readSync(E.dataId)[0], [s, a, r, h, w] = dJ(i, I.shape, I.dtype, o, B.dtype, t, e);
  return [g.makeTensorInfo(a, I.dtype, s), g.makeTensorInfo([a[0]], B.dtype, r), g.makeTensorInfo([h.length], "bool", new Uint8Array(h.map((G) => Number(G)))), g.makeTensorInfo([w.length], I.dtype, new Int32Array(w))];
} }, mb = { kernelName: Wl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { inputIndices: I, inputShape: B, newShape: Q } = A;
  if (I.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${I.shape}`);
  if (B.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${B.shape}`);
  if (Q.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${Q.shape}`);
  const E = Array.from(g.readSync(B.dataId)), i = g.readSync(I.dataId), o = Array.from(g.readSync(Q.dataId)), [t, e, s] = FJ(i, I.shape, I.dtype, E, o);
  return [g.makeTensorInfo(e, I.dtype, t), g.makeTensorInfo([s.length], Q.dtype, new Int32Array(s))];
} }, bb = { kernelName: Tl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { data: I, indices: B, segmentIds: Q } = A;
  if (I.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (B.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${B.shape}`);
  if (Q.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${Q.shape}`);
  const E = g.readSync(I.dataId), i = g.readSync(B.dataId), o = g.readSync(Q.dataId), [t, e] = OF(E, I.shape, I.dtype, i, o, !0);
  return g.makeTensorInfo(e, I.dtype, t);
} }, Hb = { kernelName: Zl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g } = C, { data: I, indices: B, segmentIds: Q } = A;
  if (I.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (B.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${B.shape}`);
  if (Q.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${Q.shape}`);
  const E = g.readSync(I.dataId), i = g.readSync(B.dataId), o = g.readSync(Q.dataId), [t, e] = OF(E, I.shape, I.dtype, i, o);
  return g.makeTensorInfo(e, I.dtype, t);
} }, xb = { kernelName: Xl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { sparseIndices: B, sparseValues: Q, defaultValue: E } = A, { outputShape: i } = I, { sliceRank: o, numUpdates: t, sliceSize: e, strides: s, outputSize: a } = hE(0, B, i);
  if (Q.dtype === "string") {
    const G = g.bufferSync(B), D = g.bufferSync(Q), l = rQ(g.readSync(E.dataId)[0]), d = lJ(G, D, i, a, e, t, o, s, l, !1);
    return g.makeTensorInfo(i, d.dtype, d.values);
  }
  const r = new RD(t, o, B.shape.length, Q.shape.length, s, [a, 1], !1), h = g.runWebGLProgram(r, [Q, B, E], Q.dtype), w = MA({ inputs: { x: h }, backend: g, attrs: { shape: i } });
  return g.disposeIntermediateTensorInfo(h), w;
} }, qb = { kernelName: bs, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { numOrSizeSplits: Q, axis: E } = I, i = Kg(E, B.shape)[0], o = AD(B, Q, i), t = B.shape.length, e = new Array(t).fill(0), s = B.shape.slice();
  return o.map((a) => {
    const r = [...s];
    r[i] = a;
    const h = ri({ inputs: { x: B }, backend: g, attrs: { begin: e, size: r } });
    return e[i] += a, h;
  });
} }, Bl = "return sqrt(x);", Vb = bg({ opSnippet: Bl, packedOpSnippet: Bl, cpuKernelImpl: RJ }), Wb = { kernelName: zo, backendName: "webgl", kernelFunc: Vb }, Tb = { kernelName: _r, backendName: "webgl", kernelFunc: bg({ opSnippet: "return x * x;" }) }, Ql = "return (a - b) * (a - b);", Zb = $I({ opSnippet: Ql, packedOpSnippet: Ql }), Xb = { kernelName: jo, backendName: "webgl", kernelFunc: Zb }, Ob = { kernelName: ln, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A;
  if (B.dtype !== "string")
    throw new Error("Input must be of datatype string");
  const Q = vB(g.readSync(B.dataId)), E = NJ(Q, "string", I);
  return g.makeTensorInfo(B.shape, "string", E);
} }, vb = { kernelName: It, backendName: "webgl", kernelFunc: function({ inputs: C, attrs: A, backend: g }) {
  const { x: I } = C, B = gB + `
    return x > 0.0 ? 1.0 : float(${A.alpha});
  `, Q = new kB(I.shape, B);
  return g.runWebGLProgram(Q, [I], I.dtype);
} };
class Pb {
  constructor(A, g, I) {
    this.variableNames = ["x"], this.outputShape = I;
    const B = I.length, Q = AI(I.length), E = AI(I.length);
    let i = "";
    if (B === 1)
      i = "coords * strides + begin";
    else {
      let o = 0;
      i = I.map((t, e) => (o++, I.length === 1 ? `coords * strides[${e}] + begin[${e}]` : `coords[${o - 1}] * strides[${e}] + begin[${e}]`)).join(",");
    }
    this.userCode = `
      ${Q} begin = ${Q}(${A});
      ${Q} strides = ${Q}(${g});

      void main() {
        ${E} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
}
const zb = { kernelName: Ah, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { begin: Q, end: E, strides: i, beginMask: o, endMask: t, ellipsisMask: e, newAxisMask: s, shrinkAxisMask: a } = I, { finalShapeSparse: r, finalShape: h, isIdentity: w, sliceDim0: G, isSimpleSlice: D, begin: l, end: d, strides: N } = qh(B.shape, Q, E, i, o, t, e, s, a);
  let k;
  if (w)
    k = MA({ inputs: { x: B }, backend: g, attrs: { shape: h } });
  else if (G || D) {
    f(B.shape.length >= 1, () => `Input must have rank at least 1, got: ${B.shape.length}`);
    const Y = bh(l, d, N), M = ri({ inputs: { x: B }, backend: g, attrs: { begin: l, size: Y } });
    k = MA({ inputs: { x: M }, backend: g, attrs: { shape: h } }), g.disposeIntermediateTensorInfo(M);
  } else if (g.shouldExecuteOnCPU([B])) {
    const Y = g.readSync(B.dataId), M = Sg(B.shape, B.dtype, Y), L = uJ(r, M, N, l);
    k = g.makeTensorInfo(h, B.dtype, L.values);
  } else {
    const Y = new Pb(l, N, r);
    k = g.runWebGLProgram(Y, [B], B.dtype);
  }
  const p = MA({ inputs: { x: k }, backend: g, attrs: { shape: h } });
  return g.disposeIntermediateTensorInfo(k), p;
} }, jb = { kernelName: Ol, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { separator: B, nGramWidths: Q, leftPad: E, rightPad: i, padWidth: o, preserveShortSequences: t } = I, { data: e, dataSplits: s } = A, a = g.readSync(e.dataId), r = g.readSync(s.dataId), [h, w] = kJ(a, r, B, Q, E, i, o, t);
  return [g.makeTensorInfo([h.length], "string", h), g.makeTensorInfo(s.shape, "int32", w)];
} }, $b = { kernelName: vl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { skipEmpty: B } = I, { input: Q, delimiter: E } = A;
  if (Q.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (Q.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${Q.shape}`);
  if (E.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${E.shape}`);
  const i = g.readSync(Q.dataId), o = g.readSync(E.dataId)[0], [t, e, s] = KJ(i, o, B), a = e.length;
  return [g.makeTensorInfo([a, 2], "int32", t), g.makeTensorInfo([a], "string", e), g.makeTensorInfo([2], "int32", new Int32Array(s))];
} }, _b = { kernelName: Pl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { numBuckets: B } = I, { input: Q } = A;
  if (Q.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (B <= 0)
    throw new Error("Number of buckets must be at least 1");
  const E = g.readSync(Q.dataId), i = SJ(E, B);
  return g.makeTensorInfo(Q.shape, "int32", i);
} }, AH = bg({ opSnippet: "return tan(x);" }), gH = { kernelName: _o, backendName: "webgl", kernelFunc: AH }, IH = bg({ opSnippet: `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
` }), CH = { kernelName: At, backendName: "webgl", kernelFunc: IH }, BH = { kernelName: xl, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { tensor: B, indices: Q, updates: E } = A, { sliceRank: i, numUpdates: o, sliceSize: t, strides: e, outputSize: s } = hE(0, Q, B.shape), a = [s / t, t];
  if (s === 0)
    return g.makeTensorInfo(B.shape, Q.dtype);
  const r = MA({ inputs: { x: Q }, backend: g, attrs: { shape: [o, i] } }), h = MA({ inputs: { x: E }, backend: g, attrs: { shape: [o, t] } }), w = MA({ inputs: { x: B }, backend: g, attrs: { shape: a } }), G = new RD(o, i, r.shape.length, h.shape.length, e, a, !1, !0), D = g.runWebGLProgram(G, [h, r, w], w.dtype), l = MA({ inputs: { x: D }, backend: g, attrs: { shape: B.shape } });
  return g.disposeIntermediateTensorInfo(r), g.disposeIntermediateTensorInfo(h), g.disposeIntermediateTensorInfo(w), g.disposeIntermediateTensorInfo(D), l;
} };
class QH {
  constructor(A, g) {
    this.variableNames = ["A"];
    const I = new Array(A.length);
    for (let E = 0; E < I.length; E++)
      I[E] = A[E] * g[E];
    this.outputShape = I, this.rank = I.length;
    const B = AI(this.rank), Q = function(E) {
      const i = E.length;
      if (i > 5)
        throw Error(`Tile for rank ${i} is not yet supported`);
      if (i === 1)
        return `imod(resRC, ${E[0]})`;
      const o = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], t = [];
      for (let e = 0; e < E.length; e++)
        t.push(`imod(${o[e]}, ${E[e]})`);
      return t.join();
    }(A);
    this.userCode = `
      void main() {
        ${B} resRC = getOutputCoords();
        setOutput(getA(${Q}));
      }
    `;
  }
}
function FR(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { reps: Q } = I;
  if (B.dtype === "string" || B.shape.length > 5) {
    const i = g.readSync(B.dataId), o = B.dtype === "string" ? i.map((s) => rQ(s)) : i, t = Sg(B.shape, B.dtype, o), e = MJ(t, Q);
    return g.makeTensorInfo(e.shape, e.dtype, e.values);
  }
  const E = new QH(B.shape, Q);
  return g.runWebGLProgram(E, [B], B.dtype);
}
const EH = { kernelName: gt, backendName: "webgl", kernelFunc: FR };
class iH {
  constructor(A) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = A, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class oH {
  constructor(A) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = A, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}
function LQ(C, A) {
  A !== null && C.disposeIntermediateTensorInfo(A);
}
function El(C) {
  let A = 1;
  for (; A < C; )
    A *= 2;
  return A;
}
const tH = { kernelName: gh, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B } = A, { k: Q, sorted: E } = I, i = aA().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), o = aA().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), t = B.shape, e = t[t.length - 1];
  if (g.shouldExecuteOnCPU([B]) || e < i || Q > o) {
    const L = g.readSync(B.dataId), [m, x] = UJ(L, t, B.dtype, Q, E);
    return [g.makeTensorInfo(m.shape, m.dtype, m.values), g.makeTensorInfo(x.shape, x.dtype, x.values)];
  }
  if (Q === 0)
    return t[t.length - 1] = 0, [g.makeTensorInfo(t, B.dtype, []), g.makeTensorInfo(t, "int32", [])];
  if (e === 1)
    return [B, lt({ attrs: { shape: t, dtype: "int32", value: 0 }, backend: g })];
  const s = g.texData.get(B.dataId), a = s !== null && s.isPacked, r = a ? g.unpackTensor(B) : B, h = cA(t) / e, w = MA({ inputs: { x: r }, attrs: { shape: [h, e] }, backend: g });
  a && LQ(g, r);
  const G = El(Q), D = El(e);
  let l = null;
  const d = () => l === null ? [w, w] : [w, l], N = (L, m, x) => {
    const T = d(), Z = new iH(x), $ = [[e], [l === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [L], [m]], AA = l;
    l = g.runWebGLProgram(Z, T, "int32", $), LQ(g, AA);
  };
  for (let L = 1; L < G; L *= 2) {
    const m = 2 * L;
    for (let x = L; x >= 1; x /= 2)
      N(m, x, [h, D]);
  }
  for (let L = D; L > G; L /= 2) {
    const m = d(), x = new oH([h, L / 2]), T = [[e], [l === null ? 1 : 0], [G]], Z = l;
    l = g.runWebGLProgram(x, m, "int32", T), LQ(g, Z);
    const $ = G / 2, AA = 2 * $;
    for (let P = $; P >= 1; P /= 2)
      N(AA, P, l.shape);
  }
  let k = l;
  l = ri({ inputs: { x: l }, backend: g, attrs: { begin: 0, size: [h, Q] } }), LQ(g, k);
  let p = DR({ inputs: { x: w, indices: l }, backend: g, attrs: { axis: 1, batchDims: 1 } });
  LQ(g, w);
  const Y = t.slice(0, -1);
  Y.push(Q), k = l, l = MA({ inputs: { x: l }, attrs: { shape: Y }, backend: g }), LQ(g, k);
  const M = p;
  return p = MA({ inputs: { x: p }, attrs: { shape: Y }, backend: g }), LQ(g, M), [p, l];
} };
class eH {
  constructor(A, g, I, B, Q, E) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = E;
    const i = I === "nearest" ? 1 : 2;
    let o;
    switch (B) {
      case "constant":
      default:
        o = 1;
        break;
      case "reflect":
        o = 2;
        break;
      case "wrap":
        o = 3;
        break;
      case "nearest":
        o = 4;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${o} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${A} && 0 <= coordX && coordX < ${g}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${Q});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${Q});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${g}));
                float mapY = mapCoord(inY, float(${A}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}
const sH = { kernelName: Ih, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { image: B, transforms: Q } = A, { interpolation: E, fillMode: i, fillValue: o, outputShape: t } = I, [e, s, a, r] = B.shape, [h, w] = t ?? [s, a], G = new eH(s, a, E, i, o, [e, h, w, r]);
  return g.runWebGLProgram(G, [B, Q], "float32");
} }, aH = { kernelName: Ch, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, attrs: g, backend: I } = C, { axis: B } = g, { x: Q } = A;
  ct(Q, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const E = I.readSync(Q.dataId), { outputValues: i, outputShape: o, indices: t } = YJ(E, B, Q.shape, Q.dtype);
  return [I.makeTensorInfo(o, Q.dtype, i), I.makeTensorInfo([t.length], "int32", t)];
} }, nH = { kernelName: xs, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { value: B } = A;
  let { axis: Q } = I;
  Q < 0 && (Q += B.shape.length);
  const E = B, i = E.shape.length, o = B.shape[Q], t = new Array(i - 1);
  let e = 0;
  for (let w = 0; w < i; w++)
    w !== Q && (t[e++] = E.shape[w]);
  const s = [], a = new Array(i).fill(0), r = E.shape.slice();
  r[Q] = 1;
  const h = new Array(o);
  for (let w = 0; w < h.length; w++) {
    a[Q] = w;
    const G = ri({ inputs: { x: E }, backend: g, attrs: { begin: a, size: r } }), D = MA({ inputs: { x: G }, backend: g, attrs: { shape: t } });
    h[w] = D, s.push(G);
  }
  return s.forEach((w) => g.disposeIntermediateTensorInfo(w)), h;
} };
class rH {
  constructor(A, g) {
    this.variableNames = ["x", "segmentIds"];
    const I = A.windowSize, B = A.batchSize, Q = A.inSize, E = A.numSegments, i = E * Math.ceil(Q / I);
    this.outputShape = [B, i];
    const o = 4 * Math.floor(I / 4), t = I % 4, e = `
        sumValue += dot(values, segFilter);
    `;
    let s = "";
    Q % I > 0 && (s = `
        if (inIdx < 0 || inIdx >= ${Q}) {
          return initializationValue;
        }
      `);
    let a = "";
    Q % I > 0 && (a = `
        if (inIdx < 0 || inIdx >= ${Q}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = 0.0;

      float getValue(int batch, int inIdx) {
        ${s}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${a}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${E})) * float(${I}));
        int currentSeg = int(mod(float(outIdx), float(${E})));

        float sumValue = 0.0;

        for (int i = 0; i < ${o}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${e}
        }

        int inIdx = inOffset + ${o};
        if (${t === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${e}
        } else if (${t === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${e}
        } else if (${t === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${e}
        }
        setOutput(sumValue);
      }
    `;
  }
}
const hH = { kernelName: qs, backendName: "webgl", kernelFunc: function(C) {
  const { inputs: A, backend: g, attrs: I } = C, { x: B, segmentIds: Q } = A, { numSegments: E } = I, i = B.shape.length, o = [];
  let t = 0;
  const e = GI([t], i);
  let s = B;
  e != null && (s = sC({ inputs: { x: B }, backend: g, attrs: { perm: e } }), o.push(s), t = KI(1, i)[0]);
  const a = my(s.shape, t, E), r = cA([s.shape[t]]), h = MA({ inputs: { x: s }, backend: g, attrs: { shape: [-1, r] } });
  o.push(h);
  const w = Eh(B.dtype), G = (d, N, k, p, Y) => {
    const M = d.shape[0], L = d.shape[1], m = Ly(L, Y), x = new rH({ windowSize: m, inSize: L, batchSize: M, numSegments: Y }, N), T = g.compileAndRun(x, [d, k], p);
    if (o.push(T), T.shape[1] === Y)
      return T;
    const Z = dR({ backend: g, attrs: { start: 0, stop: Y, step: 1, dtype: "float32" } }), $ = FR({ inputs: { x: Z }, backend: g, attrs: { reps: [L / m] } });
    return o.push(Z), o.push($), G(T, N, $, p, Y);
  }, D = MA({ inputs: { x: G(h, "unsortedSegmentSum", Q, w, E) }, backend: g, attrs: { shape: a } });
  let l = D;
  if (e != null) {
    o.push(D);
    const d = FQ(e);
    l = sC({ inputs: { x: l }, backend: g, attrs: { perm: d } });
  }
  return o.forEach((d) => g.disposeIntermediateTensorInfo(d)), l;
} }, DH = [E2, i2, t2, s2, n2, D2, c2, w2, y2, d2, R2, u2, K2, p2, U2, Y2, J2, m2, b2, H2, V2, X2, O2, v2, P2, _2, gf, Bf, zJ, Ef, sf, rf, lf, yf, df, Ff, Rf, uf, Kf, pf, Mf, Uf, Yf, ff, Lf, Hf, xf, Vf, Tf, Zf, Of, vf, zf, $f, _f, AL, IL, CL, QL, iL, tL, sL, rL, hL, DL, wL, yL, FL, NL, PJ, uL, ef, KL, pL, UL, jJ, JL, LL, mL, HL, qL, WL, ZL, OL, zL, $L, _L, gm, Im, Cm, Em, im, om, tm, em, am, hm, cm, dm, _J, Rm, um, Km, pm, z2, Um, Jm, fm, bm, xm, $J, qm, Vm, Wm, Tm, Zm, j2, lm, Om, Pm, jm, A2, Ab, Ib, Qb, ib, eb, ab, rb, Db, wb, Gb, db, Rb, ub, Kb, pb, Ub, Z2, ym, Jb, fb, Lb, mb, bb, Hb, xb, qb, Wb, Tb, Xb, Ob, vb, zb, jb, $b, _b, Gm, B2, gH, CH, BH, EH, tH, sH, Q2, aH, nH, hH, Ym];
for (const C of DH)
  KC(C);
const RR = "", il = typeof window < "u" && window.Blob && new Blob([atob(RR)], { type: "text/javascript;charset=utf-8" });
function cH() {
  let C;
  try {
    if (C = il && (window.URL || window.webkitURL).createObjectURL(il), !C)
      throw "";
    return new Worker(C);
  } catch {
    return new Worker("data:application/javascript;base64," + RR);
  } finally {
    C && (window.URL || window.webkitURL).revokeObjectURL(C);
  }
}
const wH = (C, A, g, I) => {
  const { x: B, y: Q, z: E } = ((i, o, t, e) => ({ x: i[0][0] * o + i[0][1] * t + i[0][3], y: i[1][0] * o + i[1][1] * t + i[1][3], z: i[2][0] * o + i[2][1] * t + i[2][3] }))(C, A, g);
  return { x: B / E, y: Q / E };
}, lH = 1e3;
class GH {
  constructor(A, g, I, B, Q, E = !1) {
    this.markerDimensions = A, this.trackingDataList = g, this.projectionTransform = I, this.debugMode = E, this.trackingKeyframeList = [];
    for (let o = 0; o < g.length; o++)
      this.trackingKeyframeList.push(g[o][1]);
    let i = 0;
    for (let o = 0; o < this.trackingKeyframeList.length; o++)
      i = Math.max(i, this.trackingKeyframeList[o].points.length);
    this.featurePointsListT = [], this.imagePixelsListT = [], this.imagePropertiesListT = [];
    for (let o = 0; o < this.trackingKeyframeList.length; o++) {
      const { featurePoints: t, imagePixels: e, imageProperties: s } = this._prebuild(this.trackingKeyframeList[o], i);
      this.featurePointsListT[o] = t, this.imagePixelsListT[o] = e, this.imagePropertiesListT[o] = s;
    }
    this.kernelCaches = {};
  }
  dummyRun(A) {
    let g = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]];
    for (let I = 0; I < this.featurePointsListT.length; I++)
      this.track(A, g, I);
  }
  track(A, g, I) {
    let B = {};
    const Q = (E = this.projectionTransform, i = g, [[E[0][0] * i[0][0] + E[0][2] * i[2][0], E[0][0] * i[0][1] + E[0][2] * i[2][1], E[0][0] * i[0][2] + E[0][2] * i[2][2], E[0][0] * i[0][3] + E[0][2] * i[2][3]], [E[1][1] * i[1][0] + E[1][2] * i[2][0], E[1][1] * i[1][1] + E[1][2] * i[2][1], E[1][1] * i[1][2] + E[1][2] * i[2][2], E[1][1] * i[1][3] + E[1][2] * i[2][3]], [i[2][0], i[2][1], i[2][2], i[2][3]]]);
    var E, i;
    const o = this._buildAdjustedModelViewTransform(Q);
    this.markerDimensions[I][0], this.markerDimensions[I][1], this.trackingKeyframeList[I].width, this.trackingKeyframeList[I].height;
    const t = this.featurePointsListT[I], e = this.imagePixelsListT[I], s = this.imagePropertiesListT[I], a = this._computeProjection(o, A, I), { matchingPointsT: r, simT: h } = this._computeMatching(t, e, s, a), w = r.arraySync(), G = h.arraySync(), D = this.trackingKeyframeList[I], l = [], d = [], N = [];
    for (let k = 0; k < w.length; k++)
      if (G[k] > 0.8 && k < D.points.length) {
        N.push(k);
        const p = wH(Q, w[k][0], w[k][1]);
        d.push(p), l.push({ x: D.points[k].x / D.scale, y: D.points[k].y / D.scale, z: 0 });
      }
    return this.debugMode && (B = { projectedImage: a.arraySync(), matchingPoints: r.arraySync(), goodTrack: N, trackedPoints: d }), o.dispose(), a.dispose(), r.dispose(), h.dispose(), { worldCoords: l, screenCoords: d, debugExtra: B };
  }
  _computeMatching(A, g, I, B) {
    const Q = B.shape[0], E = B.shape[1], i = A.shape[0];
    if (!this.kernelCaches.computeMatching) {
      const o = { variableNames: ["features", "markerPixels", "markerProperties", "targetPixels"], outputShape: [i, 441], userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int searchOffsetIndex = coords[1];

	    int markerWidth = int(getMarkerProperties(0));
	    int markerHeight = int(getMarkerProperties(1));
	    float markerScale = getMarkerProperties(2);

	    int searchOffsetX = imod(searchOffsetIndex, 21) * 1;
	    int searchOffsetY = searchOffsetIndex / 21 * 1;

	    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);
	    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);

	    int sx = sCenterX + searchOffsetX - 10;
	    int sy = sCenterY + searchOffsetY - 10;

	    if (sx < 6 || sx >= (${E} - 6) || sy < 6 || sy >= (${Q} - 6)) {
	      setOutput(-2.);
	    }
	    else {
	      float sumPoint = 0.;
	      float sumPointSquare = 0.;
	      float sumTemplate = 0.;
	      float sumTemplateSquare = 0.;
	      float sumPointTemplate = 0.;

	      for (int templateOffsetY = 0; templateOffsetY < 13; templateOffsetY++) {
		for (int templateOffsetX = 0; templateOffsetX < 13; templateOffsetX++) {
		  int fx2 = sCenterX + templateOffsetX - 6;
		  int fy2 = sCenterY + templateOffsetY - 6;

		  int sx2 = sx + templateOffsetX - 6;
		  int sy2 = sy + templateOffsetY - 6;

		  int markerPixelIndex = fy2 * markerWidth + fx2;
		  float markerPixel = getMarkerPixels(markerPixelIndex);
		  float targetPixel = getTargetPixels(sy2, sx2);

		  sumTemplate += markerPixel;
		  sumTemplateSquare += markerPixel * markerPixel;
		  sumPoint += targetPixel;
		  sumPointSquare += targetPixel * targetPixel;
		  sumPointTemplate += targetPixel * markerPixel;
		}
	      }

	      // Normalized cross-correlation
	      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)
	      float count = float(13 * 13);
	      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);
	      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);

	      if (pointVariance < 0.0000001) {
		setOutput(-3.);
	      } else if (templateVariance < 0.0000001) {
		//setOutput(sumTemplate);
		setOutput(-4.);
	      } else {
		sumPointTemplate -= sumPoint / count * sumTemplate;
		float sim = sumPointTemplate / pointVariance / templateVariance;
		setOutput(sim);
	      }
	    }
	  }
	` }, t = { variableNames: ["featurePoints", "markerProperties", "maxIndex"], outputShape: [i, 2], userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float markerScale = getMarkerProperties(2);

	    int featureIndex = coords[0];

	    int maxIndex = int(getMaxIndex(featureIndex));
	    int searchLocationIndex = maxIndex / 441;
	    int searchOffsetIndex = imod(maxIndex, 441);

	    if (coords[1] == 0) {
	      int searchOffsetX = imod(searchOffsetIndex, 21) * 1;
	      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - 10) / markerScale);
	    }
	    else if (coords[1] == 1) {
	      int searchOffsetY = searchOffsetIndex / 21 * 1;
	      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - 10) / markerScale);
	    }
	  }
	` }, e = { variableNames: ["sims", "maxIndex"], outputShape: [i], userCode: `
	  void main() {
	    int featureIndex = getOutputCoords();
	    int maxIndex = int(getMaxIndex(featureIndex));
	    setOutput(getSims(featureIndex, maxIndex));
	  }
	` };
      this.kernelCaches.computeMatching = [o, t, e];
    }
    return IA(() => {
      const o = this.kernelCaches.computeMatching, t = this._compileAndRun(o[0], [A, g, I, B]), e = t.argMax(1);
      return { matchingPointsT: this._compileAndRun(o[1], [A, I, e]), simT: this._compileAndRun(o[2], [t, e]) };
    });
  }
  _computeProjection(A, g, I) {
    const B = this.trackingKeyframeList[I].width, Q = this.trackingKeyframeList[I].height, E = this.trackingKeyframeList[I].scale, i = B + "-" + Q + "-" + E;
    if (this.kernelCaches.computeProjection || (this.kernelCaches.computeProjection = {}), !this.kernelCaches.computeProjection[i]) {
      const o = { variableNames: ["M", "pixel"], outputShape: [Q, B], userCode: `
	  void main() {
	      ivec2 coords = getOutputCoords();

	      float m00 = getM(0, 0) * 1000.;
	      float m01 = getM(0, 1) * 1000.;
	      float m03 = getM(0, 3) * 1000.;
	      float m10 = getM(1, 0) * 1000.;
	      float m11 = getM(1, 1) * 1000.;
	      float m13 = getM(1, 3) * 1000.;
	      float m20 = getM(2, 0) * 1000.;
	      float m21 = getM(2, 1) * 1000.;
	      float m23 = getM(2, 3) * 1000.;

	      float y = float(coords[0]) / float(${E});
	      float x = float(coords[1]) / float(${E});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux)));
	    }
	` };
      this.kernelCaches.computeProjection[i] = o;
    }
    return IA(() => {
      const o = this.kernelCaches.computeProjection[i];
      return this._compileAndRun(o, [A, g]);
    });
  }
  _buildAdjustedModelViewTransform(A) {
    return IA(() => {
      let g = [];
      for (let I = 0; I < A.length; I++) {
        g.push([]);
        for (let B = 0; B < A[I].length; B++)
          g[I].push(A[I][B] / lH);
      }
      return pC(g, [3, 4]);
    });
  }
  _prebuild(A, g) {
    return IA(() => {
      const I = A.scale, B = [];
      for (let i = 0; i < g; i++)
        i < A.points.length ? B.push([A.points[i].x / I, A.points[i].y / I]) : B.push([-1, -1]);
      const Q = pC(A.data, [A.width * A.height]), E = pC([A.width, A.height, A.scale], [3]);
      return { featurePoints: pC(B, [B.length, 2], "float32"), imagePixels: Q, imageProperties: E };
    });
  }
  _compileAndRun(A, g) {
    const I = iQ().compileAndRun(A, g);
    return EI().makeTensorFromDataId(I.dataId, I.shape, I.dtype);
  }
}
const zt = [{ sigma: 0.55, points: [[-1, 0], [-0.5, -0.866025], [0.5, -0.866025], [1, -0], [0.5, 0.866025], [-0.5, 0.866025]] }, { sigma: 0.475, points: [[0, 0.930969], [-0.806243, 0.465485], [-0.806243, -0.465485], [-0, -0.930969], [0.806243, -0.465485], [0.806243, 0.465485]] }, { sigma: 0.4, points: [[0.847306, -0], [0.423653, 0.733789], [-0.423653, 0.733789], [-0.847306, 0], [-0.423653, -0.733789], [0.423653, -0.733789]] }, { sigma: 0.325, points: [[-0, -0.741094], [0.641806, -0.370547], [0.641806, 0.370547], [0, 0.741094], [-0.641806, 0.370547], [-0.641806, -0.370547]] }, { sigma: 0.25, points: [[-0.595502, 0], [-0.297751, -0.51572], [0.297751, -0.51572], [0.595502, -0], [0.297751, 0.51572], [-0.297751, 0.51572]] }, { sigma: 0.175, points: [[0, 0.362783], [-0.314179, 0.181391], [-0.314179, -0.181391], [-0, -0.362783], [0.314179, -0.181391], [0.314179, 0.181391]] }, { sigma: 0.1, points: [[0, 0]] }], eE = [];
for (let C = 0; C < zt.length; C++) {
  const A = zt[C].sigma;
  for (let g = 0; g < zt[C].points.length; g++) {
    const I = zt[C].points[g];
    eE.push([A, I[0], I[1]]);
  }
}
const Ta = {}, yH = { kernelName: "BinomialFilter", backendName: "webgl", kernelFunc: (C) => {
  const A = C.inputs.image, g = C.backend, [I, B] = function(i) {
    const o = i.shape[1], t = i.shape[0], e = "w" + o + "h" + t;
    if (!Ta.hasOwnProperty(e)) {
      const s = { variableNames: ["p"], outputShape: [t, o], userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0], coords[1]-2);
          sum += getP(coords[0], coords[1]-1) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0], coords[1]+1) * 4.;
          sum += getP(coords[0], coords[1]+2);
          setOutput(sum);
        }
      ` }, a = { variableNames: ["p"], outputShape: [t, o], userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0]-2, coords[1]);
          sum += getP(coords[0]-1, coords[1]) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0]+1, coords[1]) * 4.;
          sum += getP(coords[0]+2, coords[1]);
          sum /= 256.;
          setOutput(sum);
        }
      ` };
      Ta[e] = [s, a];
    }
    return Ta[e];
  }(A), Q = g.runWebGLProgram(I, [A], A.dtype), E = g.runWebGLProgram(B, [Q], A.dtype);
  return g.disposeIntermediateTensorInfo(Q), E;
} }, Za = {}, dH = { kernelName: "BuildExtremas", backendName: "webgl", kernelFunc: (C) => {
  let { image0: A, image1: g, image2: I } = C.inputs;
  const B = C.backend, Q = function(E) {
    const i = E.shape[1], o = E.shape[0], t = "w" + i + "h" + o;
    if (!Za.hasOwnProperty(t)) {
      const e = { variableNames: ["image0", "image1", "image2"], outputShape: [o, i], userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          int y = coords[0];
          int x = coords[1];

          float value = getImage1(y, x);

          // Step 1: find local maxima/minima
          if (value * value < 9.) {
            setOutput(0.);
            return;
          }
          if (y < 7 || y > ${o - 1 - 7}) {
            setOutput(0.);
            return;
          }
          if (x < 7 || x > ${i - 1 - 7}) {
            setOutput(0.);
            return;
          }

          bool isMax = true;
          bool isMin = true;
          for (int dy = -1; dy <= 1; dy++) {
            for (int dx = -1; dx <= 1; dx++) {
              float value0 = getImage0(y+dy, x+dx);
              float value1 = getImage1(y+dy, x+dx);
              float value2 = getImage2(y+dy, x+dx);

        if (value < value0 || value < value1 || value < value2) {
          isMax = false;
        }
        if (value > value0 || value > value1 || value > value2) {
          isMin = false;
        }
            }
          }

          if (!isMax && !isMin) {
            setOutput(0.);
            return;
          }

          // compute edge score and reject based on threshold
          float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);
          float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);
          float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));

          float det = (dxx * dyy) - (dxy * dxy);

          if (abs(det) < 0.0001) { // determinant undefined. no solution
            setOutput(0.);
            return;
          }

          float edgeScore = (dxx + dyy) * (dxx + dyy) / det;

          if (abs(edgeScore) >= 6.25 ) {
            setOutput(0.);
            return;
          }
          setOutput(getImage1(y,x));
        }
      ` };
      Za[t] = e;
    }
    return Za[t];
  }(g);
  return A = EI().runKernel("DownsampleBilinear", { image: A }), I = EI().runKernel("UpsampleBilinear", { image: I, targetImage: g }), B.runWebGLProgram(Q, [A, g, I], g.dtype);
} }, Xa = {}, FH = { kernelName: "ComputeExtremaAngles", backendName: "webgl", kernelFunc: (C) => {
  const { histograms: A } = C.inputs, g = C.backend, I = function(B) {
    const Q = B.shape[0];
    if (!Xa.hasOwnProperty(Q)) {
      const E = { variableNames: ["histogram"], outputShape: [B.shape[0]], userCode: `
            void main() {
                int featureIndex = getOutputCoords();

                int maxIndex = 0;
                for (int i = 1; i < 36; i++) {
                    if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {
                        maxIndex = i;
                    }
                }

                int prev = imod(maxIndex - 1 + 36, 36);
                int next = imod(maxIndex + 1, 36);

                /**
                 * Fit a quatratic to 3 points. The system of equations is:
                 *
                 * y0 = A*x0^2 + B*x0 + C
                 * y1 = A*x1^2 + B*x1 + C
                 * y2 = A*x2^2 + B*x2 + C
                 *
                 * This system of equations is solved for A,B,C.
                 */
                float p10 = float(maxIndex - 1);
                float p11 = getHistogram(featureIndex, prev);
                float p20 = float(maxIndex);
                float p21 = getHistogram(featureIndex, maxIndex);
                float p30 = float(maxIndex + 1);
                float p31 = getHistogram(featureIndex, next);

                float d1 = (p30-p20)*(p30-p10);
                float d2 = (p10-p20)*(p30-p10);
                float d3 = p10-p20;

                // If any of the denominators are zero then, just use maxIndex.
                    float fbin = float(maxIndex);
                if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {
                float a = p10*p10;
                float b = p20*p20;

                // Solve for the coefficients A,B,C
                float A = ((p31-p21)/d1)-((p11-p21)/d2);
                float B = ((p11-p21)+(A*(b-a)))/d3;
                float C = p11-(A*a)-(B*p10);
                fbin = -B / (2. * A);
                }

                float an = 2.0 *${Math.PI} * (fbin + 0.5) / 36. - ${Math.PI};
                setOutput(an);
            }
            ` };
      Xa[Q] = E;
    }
    return Xa[Q];
  }(A);
  return g.runWebGLProgram(I, [A], A.dtype);
} }, Oa = {}, RH = { kernelName: "ComputeExtremaFreak", backendName: "webgl", kernelFunc: (C) => {
  const { gaussianImagesT: A, prunedExtremas: g, prunedExtremasAngles: I, freakPointsT: B, pyramidImagesLength: Q } = C.inputs, E = C.backend, i = function(o, t) {
    const e = `${o}|${t.shape[0]}`;
    if (!Oa.hasOwnProperty(e)) {
      const s = [];
      for (let h = 1; h < o; h++)
        s.push("image" + h);
      let a = "float getPixel(int octave, int y, int x) {";
      for (let h = 1; h < o; h++)
        a += `
  if (octave == ${h}) {
	return getImage${h}(y, x);
  }
`;
      a += "}";
      const r = { variableNames: [...s, "extrema", "angles", "freakPoints"], outputShape: [t.shape[0], eE.length], userCode: `
  ${a}
  void main() {
	ivec2 coords = getOutputCoords();
	int featureIndex = coords[0];
	int freakIndex = coords[1];

	float freakSigma = getFreakPoints(freakIndex, 0);
	float freakX = getFreakPoints(freakIndex, 1);
	float freakY = getFreakPoints(freakIndex, 2);

	int octave = int(getExtrema(featureIndex, 1));
	float inputY = getExtrema(featureIndex, 2);
	float inputX = getExtrema(featureIndex, 3);
	float inputAngle = getAngles(featureIndex);
	float cos = 7. * cos(inputAngle);
	float sin = 7. * sin(inputAngle);

	float yp = inputY + freakX * sin + freakY * cos;
	float xp = inputX + freakX * cos + freakY * -sin;

	int x0 = int(floor(xp));
	int x1 = x0 + 1;
	int y0 = int(floor(yp));
	int y1 = y0 + 1;

	float f1 = getPixel(octave, y0, x0);
	float f2 = getPixel(octave, y0, x1);
	float f3 = getPixel(octave, y1, x0);
	float f4 = getPixel(octave, y1, x1);

	float x1f = float(x1);
	float y1f = float(y1);
	float x0f = float(x0);
	float y0f = float(y0);

	// ratio for interpolation between four neighbouring points
	float value = (x1f - xp) * (y1f - yp) * f1
		+ (xp - x0f) * (y1f - yp) * f2
		+ (x1f - xp) * (yp - y0f) * f3
		+ (xp - x0f) * (yp - y0f) * f4;

	setOutput(value);
  }
` };
      Oa[e] = r;
    }
    return Oa[e];
  }(Q, g);
  return E.runWebGLProgram(i, [...A, g, I, B], "float32");
} }, NR = (eE.length - 1) * eE.length / 2, NH = Math.ceil(NR / 8), va = {}, uH = { kernelName: "ComputeFreakDescriptors", backendName: "webgl", kernelFunc: (C) => {
  const { extremaFreaks: A, positionT: g } = C.inputs, { backend: I } = C, B = function(Q) {
    const E = `${Q.shape[0]}`;
    if (!va.hasOwnProperty(E)) {
      const i = { variableNames: ["freak", "p"], outputShape: [Q.shape[0], NH], userCode: `
  void main() {
    ivec2 coords = getOutputCoords();
    int featureIndex = coords[0];
    int descIndex = coords[1] * 8;

    int sum = 0;
    for (int i = 0; i < 8; i++) {
      if (descIndex + i >= ${NR}) {
        continue;
      }

      int p1 = int(getP(descIndex + i, 0));
      int p2 = int(getP(descIndex + i, 1));

      float v1 = getFreak(featureIndex, p1);
      float v2 = getFreak(featureIndex, p2);

      if (v1 < v2 + 0.01) {
        sum += int(pow(2.0, float(7 - i)));
      }
    }
    setOutput(float(sum));
  }
` };
      va[E] = i;
    }
    return va[E];
  }(A);
  return I.runWebGLProgram(B, [A, g], "int32");
} }, Pa = {}, kH = { kernelName: "ComputeLocalization", backendName: "webgl", kernelFunc: (C) => {
  const { prunedExtremasList: A, dogPyramidImagesT: g } = C.inputs, I = C.backend, B = function(E, i) {
    const o = `${E}|${i}`;
    if (!Pa.hasOwnProperty(o)) {
      const t = [];
      let e = "float getPixel(int octave, int y, int x) {";
      for (let s = 1; s < E; s++)
        t.push("image" + s), e += `
				if (octave == ${s}) {
					return getImage${s}(y, x);
				}
			`;
      e += "}", Pa[o] = { variableNames: [...t, "extrema"], outputShape: [i, 3, 3], userCode: `
			${e}

			void main() {
				ivec3 coords = getOutputCoords();
				int featureIndex = coords[0];
				float score = getExtrema(featureIndex, 0);
				if (score == 0.0) {
					return;
				}

				int dy = coords[1]-1;
				int dx = coords[2]-1;
				int octave = int(getExtrema(featureIndex, 1));
				int y = int(getExtrema(featureIndex, 2));
				int x = int(getExtrema(featureIndex, 3));
				setOutput(getPixel(octave, y+dy, x+dx));
			}
			` };
    }
    return Pa[o];
  }(g.length, A.length), Q = pC(A, [A.length, A[0].length], "int32");
  return I.runWebGLProgram(B, [...g.slice(1), Q], g[0].dtype);
} }, KH = 36, za = {}, SH = { kernelName: "ComputeOrientationHistograms", backendName: "webgl", kernelFunc: (C) => {
  const { gaussianImagesT: A, prunedExtremasT: g, radialPropertiesT: I, pyramidImagesLength: B } = C.inputs, Q = C.backend, [E, i] = function(e, s, a) {
    const r = `${a}|${e.shape[0]}|${s.shape[0]}`;
    if (!za.hasOwnProperty(r)) {
      const h = [];
      for (let l = 1; l < a; l++)
        h.push("image" + l);
      let w = "float getPixel(int octave, int y, int x) {";
      for (let l = 1; l < a; l++)
        w += `
            if (octave == ${l}) {
                return getImage${l}(y, x);
            }
            `;
      w += "}";
      const G = { variableNames: [...h, "extrema", "radial"], outputShape: [e.shape[0], s.shape[0], 2], userCode: `
                ${w}

                void main() {
                    ivec3 coords = getOutputCoords();
                    int featureIndex = coords[0];
                    int radialIndex = coords[1];
                    int propertyIndex = coords[2];

                    int radialY = int(getRadial(radialIndex, 0));
                    int radialX = int(getRadial(radialIndex, 1));
                    float radialW = getRadial(radialIndex, 2);

                    int octave = int(getExtrema(featureIndex, 1));
                    int y = int(getExtrema(featureIndex, 2));
                    int x = int(getExtrema(featureIndex, 3));

                    int xp = x + radialX;
                    int yp = y + radialY;

                    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);
                    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);

                    if (propertyIndex == 0) {
                    // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0

                    float angle = atan(dy, dx) + ${Math.PI};
                    float fbin = angle * 36. * 0.159154943091895;
                    setOutput(fbin);
                    return;
                    }

                    if (propertyIndex == 1) {
                        float mag = sqrt(dx * dx + dy * dy);
                        float magnitude = radialW * mag;
                        setOutput(magnitude);
                        return;
                    }
                }

                ` }, D = { variableNames: ["fbinMag"], outputShape: [e.shape[0], KH], userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int featureIndex = coords[0];
                int binIndex = coords[1];

                float sum = 0.;
                for (int i = 0; i < ${s.shape[0]}; i++) {
                    float fbin = getFbinMag(featureIndex, i, 0);
                    int bin = int(floor(fbin - 0.5));
                    int b1 = imod(bin + 36, 36);
                    int b2 = imod(bin + 1 + 36, 36);

                    if (b1 == binIndex || b2 == binIndex) {
                        float magnitude = getFbinMag(featureIndex, i, 1);
                        float w2 = fbin - float(bin) - 0.5;
                        float w1 = w2 * -1. + 1.;

                        if (b1 == binIndex) {
                            sum += w1 * magnitude;
                        }
                        if (b2 == binIndex) {
                            sum += w2 * magnitude;
                        }
                    }
                }
                setOutput(sum);
            }
            ` };
      za[r] = [G, D];
    }
    return za[r];
  }(g, I, B), o = Q.runWebGLProgram(E, [...A, g, I], I.dtype), t = Q.runWebGLProgram(i, [o], I.dtype);
  return Q.disposeIntermediateTensorInfo(o), t;
} }, ja = {}, pH = { kernelName: "DownsampleBilinear", backendName: "webgl", kernelFunc: (C) => {
  const A = C.inputs.image, g = C.backend, I = function(B) {
    const Q = B.shape[1], E = B.shape[0], i = "w" + Q + "h" + E;
    if (!ja.hasOwnProperty(i)) {
      const o = { variableNames: ["p"], outputShape: [Math.floor(E / 2), Math.floor(Q / 2)], userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int y = coords[0] * 2;
                int x = coords[1] * 2;

                float sum = getP(y, x) * 0.25;
                sum += getP(y+1,x) * 0.25;
                sum += getP(y, x+1) * 0.25;
                sum += getP(y+1,x+1) * 0.25;
                setOutput(sum);
            }
            ` };
      ja[i] = o;
    }
    return ja[i];
  }(A);
  return g.runWebGLProgram(I, [A], A.dtype);
} }, MH = { kernelName: "ExtremaReduction", backendName: "webgl", kernelFunc: (C) => {
  const { extremasResultT: A } = C.inputs, g = C.backend, I = A.shape[0], B = A.shape[1], Q = { variableNames: ["extrema"], outputShape: [Math.floor(I / 2), Math.floor(B / 2)], userCode: `
		  void main() {
			ivec2 coords = getOutputCoords();
			int y = coords[0] * 2;
			int x = coords[1] * 2;

			float location = 0.0;
			float values = getExtrema(y, x);

			if (getExtrema(y+1, x) != 0.0) {
			  location = 1.0;
		  values = getExtrema(y+1, x);
			}
			else if (getExtrema(y, x+1) != 0.0) {
			  location = 2.0;
		  values = getExtrema(y, x+1);
			}
			else if (getExtrema(y+1, x+1) != 0.0) {
			  location = 3.0;
		  values = getExtrema(y+1, x+1);
			}

			if (values < 0.0) {
			  setOutput(location * -1000.0 + values);
			} else {
			  setOutput(location * 1000.0 + values);
			}
		  }
		` };
  return g.runWebGLProgram(Q, [A], A.dtype);
} }, $a = {}, UH = { kernelName: "SmoothHistograms", backendName: "webgl", kernelFunc: (C) => {
  let { histograms: A } = C.inputs;
  const g = C.backend, I = function(B) {
    const Q = `h${B.shape[0]}`;
    if (!$a.hasOwnProperty(Q)) {
      const E = { variableNames: ["histogram"], outputShape: [B.shape[0], 36], userCode: `
            void main() {
                ivec2 coords = getOutputCoords();

                int featureIndex = coords[0];
                int binIndex = coords[1];

                int prevBin = imod(binIndex - 1 + 36, 36);
                int nextBin = imod(binIndex + 1, 36);
                float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);

                setOutput(result);
            }
            ` };
      $a[Q] = E;
    }
    return $a[Q];
  }(A);
  for (let B = 0; B < 5; B++) {
    const Q = A;
    A = g.runWebGLProgram(I, [A], A.dtype), B > 0 && g.disposeIntermediateTensorInfo(Q);
  }
  return A;
} }, _a = {}, YH = { kernelName: "UpsampleBilinear", backendName: "webgl", kernelFunc: (C) => {
  const { image: A, targetImage: g } = C.inputs, I = C.backend, B = function(Q, E) {
    const i = E.shape[1], o = E.shape[0], t = "w" + i + "h" + o;
    if (!_a.hasOwnProperty(t)) {
      const e = { variableNames: ["p"], outputShape: [o, i], userCode: `
              void main() {
                ivec2 coords = getOutputCoords();
                int j = coords[0];
                int i = coords[1];

                float sj = 0.5 * float(j) - 0.25;
                float si = 0.5 * float(i) - 0.25;

                float sj0 = floor(sj);
                float sj1 = ceil(sj);
                float si0 = floor(si);
                float si1 = ceil(si);

                int sj0I = int(sj0);
                int sj1I = int(sj1);
                int si0I = int(si0);
                int si1I = int(si1);

                float sum = 0.0;
                sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
                sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
                sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
                sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
                setOutput(sum);
              }
            ` };
      _a[t] = e;
    }
    return _a[t];
  }(0, g);
  return I.runWebGLProgram(B, [A], A.dtype);
} };
KC(yH), KC(dH), KC(FH), KC(RH), KC(uH), KC(kH), KC(SH), KC(pH), KC(MH), KC(UH), KC(YH);
eE.length, eE.length;
class uR {
  constructor(A, g, I = !1) {
    this.debugMode = I, this.width = A, this.height = g;
    let B = 0;
    for (; A >= 8 && g >= 8 && (A /= 2, g /= 2, B++, B !== 5); )
      ;
    this.numOctaves = B, this.tensorCaches = {}, this.kernelCaches = {};
  }
  detectImageData(A) {
    const g = new Uint8ClampedArray(4 * A.length);
    for (let B = 0; B < A.length; B++)
      g[4 * B] = A[B], g[4 * B + 1] = A[B], g[4 * B + 2] = A[B], g[4 * B + 3] = 255;
    const I = new ImageData(g, this.width, this.height);
    return this.detect(I);
  }
  detect(A) {
    let g = null;
    const I = [];
    for (let D = 0; D < this.numOctaves; D++) {
      let l, d;
      l = D === 0 ? this._applyFilter(A) : this._downsampleBilinear(I[D - 1][I[D - 1].length - 1]), d = this._applyFilter(l), I.push([l, d]);
    }
    const B = [];
    for (let D = 0; D < this.numOctaves; D++) {
      let l = this._differenceImageBinomial(I[D][0], I[D][1]);
      B.push(l);
    }
    const Q = [];
    for (let D = 1; D < this.numOctaves - 1; D++) {
      const l = this._buildExtremas(B[D - 1], B[D], B[D + 1]);
      Q.push(l);
    }
    const E = this._applyPrune(Q), i = this._computeLocalization(E, B), o = this._computeOrientationHistograms(i, I), t = this._smoothHistograms(o), e = this._computeExtremaAngles(t), s = this._computeExtremaFreak(I, i, e), a = this._computeFreakDescriptors(s), r = i.arraySync(), h = e.arraySync(), w = a.arraySync();
    this.debugMode && (g = { pyramidImages: I.map((D) => D.map((l) => l.arraySync())), dogPyramidImages: B.map((D) => D ? D.arraySync() : null), extremasResults: Q.map((D) => D.arraySync()), extremaAngles: e.arraySync(), prunedExtremas: E, localizedExtremas: i.arraySync() }), I.forEach((D) => D.forEach((l) => l.dispose())), B.forEach((D) => D && D.dispose()), Q.forEach((D) => D.dispose()), i.dispose(), o.dispose(), t.dispose(), e.dispose(), s.dispose(), a.dispose();
    const G = [];
    for (let D = 0; D < r.length; D++) {
      if (r[D][0] == 0)
        continue;
      const l = [];
      for (let M = 0; M < w[D].length; M += 4) {
        let L = 16777216 * w[D][M] + 65536 * w[D][M + 1] + 256 * w[D][M + 2] + w[D][M + 3];
        l.push(L);
      }
      const d = r[D][1], N = r[D][2], k = r[D][3] * Math.pow(2, d) + Math.pow(2, d - 1) - 0.5, p = N * Math.pow(2, d) + Math.pow(2, d - 1) - 0.5, Y = Math.pow(2, d);
      G.push({ maxima: r[D][0] > 0, x: k, y: p, scale: Y, angle: h[D], descriptors: l });
    }
    return { featurePoints: G, debugExtra: g };
  }
  _computeFreakDescriptors(A) {
    if (!this.tensorCaches.computeFreakDescriptors) {
      const I = [], B = [];
      for (let i = 0; i < A.shape[1]; i++)
        for (let o = i + 1; o < A.shape[1]; o++)
          I.push(i), B.push(o);
      const Q = pC(I, [I.length]).cast("int32"), E = pC(B, [B.length]).cast("int32");
      this.tensorCaches.computeFreakDescriptors = { positionT: JC(xB([Q, E], 1)) };
    }
    const { positionT: g } = this.tensorCaches.computeFreakDescriptors;
    return IA(() => EI().runKernel("ComputeFreakDescriptors", { extremaFreaks: A, positionT: g }));
  }
  _computeExtremaFreak(A, g, I) {
    this.tensorCaches._computeExtremaFreak || IA(() => {
      const E = pC(eE);
      this.tensorCaches._computeExtremaFreak = { freakPointsT: JC(E) };
    });
    const { freakPointsT: B } = this.tensorCaches._computeExtremaFreak, Q = [];
    for (let E = 1; E < A.length; E++)
      Q.push(A[E][1]);
    return IA(() => EI().runKernel("ComputeExtremaFreak", { gaussianImagesT: Q, prunedExtremas: g, prunedExtremasAngles: I, freakPointsT: B, pyramidImagesLength: A.length }));
  }
  _computeExtremaAngles(A) {
    return IA(() => EI().runKernel("ComputeExtremaAngles", { histograms: A }));
  }
  _computeOrientationHistograms(A, g) {
    const I = [];
    for (let Q = 1; Q < g.length; Q++)
      I.push(g[Q][1]);
    this.tensorCaches.orientationHistograms || IA(() => {
      const Q = Math.ceil(4.5), E = [];
      for (let i = -Q; i <= Q; i++)
        for (let o = -Q; o <= Q; o++) {
          const t = o * o + i * i;
          if (t <= 20.25) {
            const e = -0.05555555555555555 * t;
            let s = 0.0013888888 * (720 + e * (720 + e * (360 + e * (120 + e * (30 + e * (6 + e))))));
            E.push([i, o, s]);
          }
        }
      this.tensorCaches.orientationHistograms = { radialPropertiesT: JC(pC(E, [E.length, 3])) };
    });
    const { radialPropertiesT: B } = this.tensorCaches.orientationHistograms;
    return IA(() => EI().runKernel("ComputeOrientationHistograms", { gaussianImagesT: I, prunedExtremasT: A, radialPropertiesT: B, pyramidImagesLength: g.length }));
  }
  _smoothHistograms(A) {
    return IA(() => EI().runKernel("SmoothHistograms", { histograms: A }));
  }
  _computeLocalization(A, g) {
    return IA(() => {
      const I = EI().runKernel("ComputeLocalization", { prunedExtremasList: A, dogPyramidImagesT: g }).arraySync(), B = [];
      for (let E = 0; E < I.length; E++) {
        B.push([]);
        for (let i = 0; i < I[E].length; i++)
          B[E].push([]);
      }
      const Q = [];
      for (let E = 0; E < A.length; E++)
        Q[E] = [A[E][0], A[E][1], A[E][2], A[E][3]];
      for (let E = 0; E < Q.length; E++) {
        if (Q[E][0] === 0)
          continue;
        const i = I[E], o = 0.5 * (i[1][2] - i[1][0]), t = 0.5 * (i[2][1] - i[0][1]), e = i[1][2] + i[1][0] - 2 * i[1][1], s = i[2][1] + i[0][1] - 2 * i[1][1], a = 0.25 * (i[0][0] + i[2][2] - i[0][2] - i[2][0]), r = e * s - a * a, h = (s * -o + -a * -t) / r, w = (-a * -o + e * -t) / r, G = Q[E][2] + w, D = Q[E][3] + h;
        Math.abs(r) < 1e-4 || (Q[E][2] = G, Q[E][3] = D);
      }
      return pC(Q, [Q.length, Q[0].length], "float32");
    });
  }
  _applyPrune(A) {
    const g = [], I = [];
    for (let Q = 0; Q < 100; Q++) {
      I.push([]), g.push([]);
      for (let E = 0; E < 5; E++)
        I[Q].push([0, 0, 0, 0]), g[Q].push(0);
    }
    IA(() => {
      for (let Q = 0; Q < A.length; Q++) {
        const E = EI().runKernel("ExtremaReduction", { extremasResultT: A[Q] }), i = Q + 1, o = E.arraySync(), t = E.shape[0], e = E.shape[1], s = 2 * e / 10, a = 2 * t / 10;
        for (let r = 0; r < t; r++)
          for (let h = 0; h < e; h++) {
            const w = o[r][h];
            if (w == 0)
              continue;
            const G = w % 1e3, D = Math.floor(Math.abs(w) / 1e3), l = 2 * h + (D === 2 || D === 3 ? 1 : 0), d = 2 * r + (D === 1 || D === 3 ? 1 : 0), N = Math.floor(l / s), k = 10 * Math.floor(d / a) + N, p = Math.abs(G);
            let Y = 5;
            for (; Y >= 1 && p > g[k][Y - 1]; )
              Y -= 1;
            if (Y < 5) {
              for (let M = 4; M >= Y + 1; M--)
                g[k][M] = g[k][M - 1], I[k][M][0] = I[k][M - 1][0], I[k][M][1] = I[k][M - 1][1], I[k][M][2] = I[k][M - 1][2], I[k][M][3] = I[k][M - 1][3];
              g[k][Y] = p, I[k][Y][0] = G, I[k][Y][1] = i, I[k][Y][2] = d, I[k][Y][3] = l;
            }
          }
      }
    });
    const B = [];
    for (let Q = 0; Q < 100; Q++)
      for (let E = 0; E < 5; E++)
        B.push(I[Q][E]);
    return B;
  }
  _buildExtremas(A, g, I) {
    return IA(() => EI().runKernel("BuildExtremas", { image0: A, image1: g, image2: I }));
  }
  _differenceImageBinomial(A, g) {
    return IA(() => A.sub(g));
  }
  _applyFilter(A) {
    return IA(() => EI().runKernel("BinomialFilter", { image: A }));
  }
  _downsampleBilinear(A) {
    return IA(() => EI().runKernel("DownsampleBilinear", { image: A }));
  }
  _compileAndRun(A, g) {
    const I = iQ().compileAndRun(A, g);
    return EI().makeTensorFromDataId(I.dataId, I.shape, I.dtype);
  }
  _runWebGLProgram(A, g, I) {
    const B = iQ().runWebGLProgram(A, g, I);
    return EI().makeTensorFromDataId(B.dataId, B.shape, B.dtype);
  }
}
class JH {
  constructor(A, g, I = !1) {
    this.debugMode = I, this.width = A, this.height = g;
    let B = Math.min(A, g) / 2, Q = Math.pow(2, Math.round(Math.log(B) / Math.log(2)));
    this.cropSize = Q, this.detector = new uR(Q, Q, I), this.kernelCaches = {}, this.lastRandomIndex = 4;
  }
  detect(A) {
    const g = Math.floor(this.height / 2 - this.cropSize / 2), I = Math.floor(this.width / 2 - this.cropSize / 2), B = this._detect(A, I, g);
    return this.debugMode && (B.debugExtra.crop = { startX: I, startY: g, cropSize: this.cropSize }), B;
  }
  detectMoving(A) {
    const g = this.lastRandomIndex % 3, I = Math.floor(this.lastRandomIndex / 3);
    let B = Math.floor(this.height / 2 - this.cropSize + I * this.cropSize / 2), Q = Math.floor(this.width / 2 - this.cropSize + g * this.cropSize / 2);
    return Q < 0 && (Q = 0), B < 0 && (B = 0), Q >= this.width - this.cropSize && (Q = this.width - this.cropSize - 1), B >= this.height - this.cropSize && (B = this.height - this.cropSize - 1), this.lastRandomIndex = (this.lastRandomIndex + 1) % 9, this._detect(A, Q, B);
  }
  _detect(A, g, I) {
    const B = A.slice([I, g], [this.cropSize, this.cropSize]), { featurePoints: Q, debugExtra: E } = this.detector.detect(B);
    return Q.forEach((i) => {
      i.x += g, i.y += I;
    }), this.debugMode && (E.projectedImage = B.arraySync()), B.dispose(), { featurePoints: Q, debugExtra: E };
  }
}
const kR = ({ image: C, ratio: A }) => {
  const g = Math.round(C.width * A), I = Math.round(C.height * A), B = new Uint8Array(g * I);
  for (let Q = 0; Q < g; Q++) {
    let E = Math.round(1 * Q / A), i = Math.round(1 * (Q + 1) / A) - 1;
    i >= C.width && (i = C.width - 1);
    for (let o = 0; o < I; o++) {
      let t = Math.round(1 * o / A), e = Math.round(1 * (o + 1) / A) - 1;
      e >= C.height && (e = C.height - 1);
      let s = 0, a = 0;
      for (let r = E; r <= i; r++)
        for (let h = t; h <= e; h++)
          s += 1 * C.data[h * C.width + r], a += 1;
      B[o * g + Q] = Math.floor(s / a);
    }
  }
  return { data: B, width: g, height: I };
}, fH = (C) => {
  const A = [];
  let g = 100 / Math.min(C.width, C.height);
  for (; ; )
    if (A.push(g), g *= Math.pow(2, 1 / 3), g >= 0.95) {
      g = 1;
      break;
    }
  A.push(g), A.reverse();
  const I = [];
  for (let B = 0; B < A.length; B++)
    C.width, A[B], C.height, A[B], I.push(Object.assign(kR({ image: C, ratio: A[B] }), { scale: A[B] }));
  return I;
}, LH = (C) => {
  const A = Math.min(C.width, C.height), g = [], I = [];
  g.push(256 / A), g.push(128 / A);
  for (let B = 0; B < g.length; B++)
    I.push(Object.assign(kR({ image: C, ratio: g[B] }), { scale: g[B] }));
  return I;
}, mH = (C) => {
  const { v1: A, v2: g } = C;
  let I = 0;
  for (let B = 0; B < A.length; B++) {
    let Q = (A[B] ^ g[B]) >>> 0;
    I += bH(Q);
  }
  return I;
}, bH = (C) => {
  var A = C - (C >> 1 & 1431655765);
  return A = ((A = ((A = ((A = (A >> 2 & 858993459) + (858993459 & A)) >> 4) + A & 252645135) >> 8) + A & 16711935) >> 16) + A & 65535;
}, HH = () => ({ seed: 1234, arrayShuffle(C) {
  const { arr: A, sampleSize: g } = C;
  for (let I = 0; I < g; I++) {
    this.seed = (214013 * this.seed + 2531011) % (1 << 31);
    let B = this.seed >> 16 & 32767;
    B %= A.length;
    let Q = A[I];
    A[I] = A[B], A[B] = Q;
  }
}, nextInt(C) {
  this.seed = (214013 * this.seed + 2531011) % (1 << 31);
  let A = this.seed >> 16 & 32767;
  return A %= C, A;
} }), ol = ({ points: C }) => {
  const A = [];
  for (let I = 0; I < C.length; I++)
    A.push(I);
  const g = HH();
  return { rootNode: KR({ points: C, pointIndexes: A, centerPointIndex: null, randomizer: g }) };
}, KR = (C) => {
  const { points: A, pointIndexes: g, centerPointIndex: I, randomizer: B } = C;
  let Q = !1;
  (g.length <= 8 || g.length <= 16) && (Q = !0);
  const E = {};
  if (!Q) {
    const o = ((t) => {
      const { points: e, pointIndexes: s, randomizer: a } = t, r = [];
      for (let D = 0; D < s.length; D++)
        r.push(D);
      let h = Number.MAX_SAFE_INTEGER, w = -1;
      const G = [];
      for (let D = 0; D < 128; D++) {
        a.arrayShuffle({ arr: r, sampleSize: 8 });
        let l = 0;
        const d = [];
        for (let N = 0; N < s.length; N++) {
          let k = Number.MAX_SAFE_INTEGER;
          for (let p = 0; p < 8; p++) {
            const Y = s[r[p]], M = mH({ v1: e[s[N]].descriptors, v2: e[Y].descriptors });
            M < k && (d[N] = r[p], k = M);
          }
          l += k;
        }
        G.push(d), l < h && (h = l, w = D);
      }
      return G[w];
    })({ points: A, pointIndexes: g, randomizer: B });
    for (let t = 0; t < o.length; t++)
      E[g[o[t]]] === void 0 && (E[g[o[t]]] = []), E[g[o[t]]].push(g[t]);
  }
  Object.keys(E).length === 1 && (Q = !0);
  const i = { centerPointIndex: I };
  if (Q) {
    i.leaf = !0, i.pointIndexes = [];
    for (let o = 0; o < g.length; o++)
      i.pointIndexes.push(g[o]);
    return i;
  }
  return i.leaf = !1, i.children = [], Object.keys(E).forEach((o) => {
    i.children.push(KR({ points: A, pointIndexes: E[o], centerPointIndex: o, randomizer: B }));
  }), i;
};
var An, gn, In, qQ = 4294967295;
function SR(C, A, g) {
  var I = Math.floor(g / 4294967296), B = g;
  C.setUint32(A, I), C.setUint32(A + 4, B);
}
function pR(C, A) {
  return 4294967296 * C.getInt32(A) + C.getUint32(A + 4);
}
var ta = (typeof process > "u" || ((An = process == null ? void 0 : process.env) === null || An === void 0 ? void 0 : An.TEXT_ENCODING) !== "never") && typeof TextEncoder < "u" && typeof TextDecoder < "u";
function tl(C) {
  for (var A = C.length, g = 0, I = 0; I < A; ) {
    var B = C.charCodeAt(I++);
    if (4294967168 & B)
      if (!(4294965248 & B))
        g += 2;
      else {
        if (B >= 55296 && B <= 56319 && I < A) {
          var Q = C.charCodeAt(I);
          (64512 & Q) == 56320 && (++I, B = ((1023 & B) << 10) + (1023 & Q) + 65536);
        }
        g += 4294901760 & B ? 4 : 3;
      }
    else
      g++;
  }
  return g;
}
var jt = ta ? new TextEncoder() : void 0, xH = ta ? typeof process < "u" && ((gn = process == null ? void 0 : process.env) === null || gn === void 0 ? void 0 : gn.TEXT_ENCODING) !== "force" ? 200 : 0 : qQ, qH = jt != null && jt.encodeInto ? function(C, A, g) {
  jt.encodeInto(C, A.subarray(g));
} : function(C, A, g) {
  A.set(jt.encode(C), g);
};
function MR(C, A, g) {
  for (var I = A, B = I + g, Q = [], E = ""; I < B; ) {
    var i = C[I++];
    if (!(128 & i))
      Q.push(i);
    else if ((224 & i) == 192) {
      var o = 63 & C[I++];
      Q.push((31 & i) << 6 | o);
    } else if ((240 & i) == 224) {
      o = 63 & C[I++];
      var t = 63 & C[I++];
      Q.push((31 & i) << 12 | o << 6 | t);
    } else if ((248 & i) == 240) {
      var e = (7 & i) << 18 | (o = 63 & C[I++]) << 12 | (t = 63 & C[I++]) << 6 | 63 & C[I++];
      e > 65535 && (e -= 65536, Q.push(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), Q.push(e);
    } else
      Q.push(i);
    Q.length >= 4096 && (E += String.fromCharCode.apply(String, Q), Q.length = 0);
  }
  return Q.length > 0 && (E += String.fromCharCode.apply(String, Q)), E;
}
var VH = ta ? new TextDecoder() : null, WH = ta ? typeof process < "u" && ((In = process == null ? void 0 : process.env) === null || In === void 0 ? void 0 : In.TEXT_DECODER) !== "force" ? 200 : 0 : qQ, $t, _t = function(C, A) {
  this.type = C, this.data = A;
}, TH = globalThis && globalThis.__extends || ($t = function(C, A) {
  return $t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(g, I) {
    g.__proto__ = I;
  } || function(g, I) {
    for (var B in I)
      Object.prototype.hasOwnProperty.call(I, B) && (g[B] = I[B]);
  }, $t(C, A);
}, function(C, A) {
  if (typeof A != "function" && A !== null)
    throw new TypeError("Class extends value " + String(A) + " is not a constructor or null");
  function g() {
    this.constructor = C;
  }
  $t(C, A), C.prototype = A === null ? Object.create(A) : (g.prototype = A.prototype, new g());
}), lB = function(C) {
  function A(g) {
    var I = C.call(this, g) || this, B = Object.create(A.prototype);
    return Object.setPrototypeOf(I, B), Object.defineProperty(I, "name", { configurable: !0, enumerable: !1, value: A.name }), I;
  }
  return TH(A, C), A;
}(Error), ZH = 4294967295, XH = 17179869183, OH = { type: -1, encode: function(C) {
  var A, g, I, B;
  return C instanceof Date ? function(Q) {
    var E, i = Q.sec, o = Q.nsec;
    if (i >= 0 && o >= 0 && i <= XH) {
      if (o === 0 && i <= ZH) {
        var t = new Uint8Array(4);
        return (E = new DataView(t.buffer)).setUint32(0, i), t;
      }
      var e = i / 4294967296, s = 4294967295 & i;
      return t = new Uint8Array(8), (E = new DataView(t.buffer)).setUint32(0, o << 2 | 3 & e), E.setUint32(4, s), t;
    }
    return t = new Uint8Array(12), (E = new DataView(t.buffer)).setUint32(0, o), SR(E, 4, i), t;
  }((A = C.getTime(), g = Math.floor(A / 1e3), I = 1e6 * (A - 1e3 * g), B = Math.floor(I / 1e9), { sec: g + B, nsec: I - 1e9 * B })) : null;
}, decode: function(C) {
  var A = function(g) {
    var I = new DataView(g.buffer, g.byteOffset, g.byteLength);
    switch (g.byteLength) {
      case 4:
        return { sec: I.getUint32(0), nsec: 0 };
      case 8:
        var B = I.getUint32(0);
        return { sec: 4294967296 * (3 & B) + I.getUint32(4), nsec: B >>> 2 };
      case 12:
        return { sec: pR(I, 4), nsec: I.getUint32(0) };
      default:
        throw new lB("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(g.length));
    }
  }(C);
  return new Date(1e3 * A.sec + A.nsec / 1e6);
} }, UR = function() {
  function C() {
    this.builtInEncoders = [], this.builtInDecoders = [], this.encoders = [], this.decoders = [], this.register(OH);
  }
  return C.prototype.register = function(A) {
    var g = A.type, I = A.encode, B = A.decode;
    if (g >= 0)
      this.encoders[g] = I, this.decoders[g] = B;
    else {
      var Q = 1 + g;
      this.builtInEncoders[Q] = I, this.builtInDecoders[Q] = B;
    }
  }, C.prototype.tryToEncode = function(A, g) {
    for (var I = 0; I < this.builtInEncoders.length; I++)
      if ((B = this.builtInEncoders[I]) != null && (Q = B(A, g)) != null)
        return new _t(-1 - I, Q);
    for (I = 0; I < this.encoders.length; I++) {
      var B, Q;
      if ((B = this.encoders[I]) != null && (Q = B(A, g)) != null)
        return new _t(I, Q);
    }
    return A instanceof _t ? A : null;
  }, C.prototype.decode = function(A, g, I) {
    var B = g < 0 ? this.builtInDecoders[-1 - g] : this.decoders[g];
    return B ? B(A, g, I) : new _t(g, A);
  }, C.defaultCodec = new C(), C;
}();
function Qe(C) {
  return C instanceof Uint8Array ? C : ArrayBuffer.isView(C) ? new Uint8Array(C.buffer, C.byteOffset, C.byteLength) : C instanceof ArrayBuffer ? new Uint8Array(C) : Uint8Array.from(C);
}
var vH = function() {
  function C(A, g, I, B, Q, E, i, o) {
    A === void 0 && (A = UR.defaultCodec), g === void 0 && (g = void 0), I === void 0 && (I = 100), B === void 0 && (B = 2048), Q === void 0 && (Q = !1), E === void 0 && (E = !1), i === void 0 && (i = !1), o === void 0 && (o = !1), this.extensionCodec = A, this.context = g, this.maxDepth = I, this.initialBufferSize = B, this.sortKeys = Q, this.forceFloat32 = E, this.ignoreUndefined = i, this.forceIntegerToFloat = o, this.pos = 0, this.view = new DataView(new ArrayBuffer(this.initialBufferSize)), this.bytes = new Uint8Array(this.view.buffer);
  }
  return C.prototype.reinitializeState = function() {
    this.pos = 0;
  }, C.prototype.encodeSharedRef = function(A) {
    return this.reinitializeState(), this.doEncode(A, 1), this.bytes.subarray(0, this.pos);
  }, C.prototype.encode = function(A) {
    return this.reinitializeState(), this.doEncode(A, 1), this.bytes.slice(0, this.pos);
  }, C.prototype.doEncode = function(A, g) {
    if (g > this.maxDepth)
      throw new Error("Too deep objects in depth ".concat(g));
    A == null ? this.encodeNil() : typeof A == "boolean" ? this.encodeBoolean(A) : typeof A == "number" ? this.encodeNumber(A) : typeof A == "string" ? this.encodeString(A) : this.encodeObject(A, g);
  }, C.prototype.ensureBufferSizeToWrite = function(A) {
    var g = this.pos + A;
    this.view.byteLength < g && this.resizeBuffer(2 * g);
  }, C.prototype.resizeBuffer = function(A) {
    var g = new ArrayBuffer(A), I = new Uint8Array(g), B = new DataView(g);
    I.set(this.bytes), this.view = B, this.bytes = I;
  }, C.prototype.encodeNil = function() {
    this.writeU8(192);
  }, C.prototype.encodeBoolean = function(A) {
    A === !1 ? this.writeU8(194) : this.writeU8(195);
  }, C.prototype.encodeNumber = function(A) {
    Number.isSafeInteger(A) && !this.forceIntegerToFloat ? A >= 0 ? A < 128 ? this.writeU8(A) : A < 256 ? (this.writeU8(204), this.writeU8(A)) : A < 65536 ? (this.writeU8(205), this.writeU16(A)) : A < 4294967296 ? (this.writeU8(206), this.writeU32(A)) : (this.writeU8(207), this.writeU64(A)) : A >= -32 ? this.writeU8(224 | A + 32) : A >= -128 ? (this.writeU8(208), this.writeI8(A)) : A >= -32768 ? (this.writeU8(209), this.writeI16(A)) : A >= -2147483648 ? (this.writeU8(210), this.writeI32(A)) : (this.writeU8(211), this.writeI64(A)) : this.forceFloat32 ? (this.writeU8(202), this.writeF32(A)) : (this.writeU8(203), this.writeF64(A));
  }, C.prototype.writeStringHeader = function(A) {
    if (A < 32)
      this.writeU8(160 + A);
    else if (A < 256)
      this.writeU8(217), this.writeU8(A);
    else if (A < 65536)
      this.writeU8(218), this.writeU16(A);
    else {
      if (!(A < 4294967296))
        throw new Error("Too long string: ".concat(A, " bytes in UTF-8"));
      this.writeU8(219), this.writeU32(A);
    }
  }, C.prototype.encodeString = function(A) {
    if (A.length > xH) {
      var g = tl(A);
      this.ensureBufferSizeToWrite(5 + g), this.writeStringHeader(g), qH(A, this.bytes, this.pos), this.pos += g;
    } else
      g = tl(A), this.ensureBufferSizeToWrite(5 + g), this.writeStringHeader(g), function(I, B, Q) {
        for (var E = I.length, i = Q, o = 0; o < E; ) {
          var t = I.charCodeAt(o++);
          if (4294967168 & t) {
            if (!(4294965248 & t))
              B[i++] = t >> 6 & 31 | 192;
            else {
              if (t >= 55296 && t <= 56319 && o < E) {
                var e = I.charCodeAt(o);
                (64512 & e) == 56320 && (++o, t = ((1023 & t) << 10) + (1023 & e) + 65536);
              }
              4294901760 & t ? (B[i++] = t >> 18 & 7 | 240, B[i++] = t >> 12 & 63 | 128, B[i++] = t >> 6 & 63 | 128) : (B[i++] = t >> 12 & 15 | 224, B[i++] = t >> 6 & 63 | 128);
            }
            B[i++] = 63 & t | 128;
          } else
            B[i++] = t;
        }
      }(A, this.bytes, this.pos), this.pos += g;
  }, C.prototype.encodeObject = function(A, g) {
    var I = this.extensionCodec.tryToEncode(A, this.context);
    if (I != null)
      this.encodeExtension(I);
    else if (Array.isArray(A))
      this.encodeArray(A, g);
    else if (ArrayBuffer.isView(A))
      this.encodeBinary(A);
    else {
      if (typeof A != "object")
        throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(A)));
      this.encodeMap(A, g);
    }
  }, C.prototype.encodeBinary = function(A) {
    var g = A.byteLength;
    if (g < 256)
      this.writeU8(196), this.writeU8(g);
    else if (g < 65536)
      this.writeU8(197), this.writeU16(g);
    else {
      if (!(g < 4294967296))
        throw new Error("Too large binary: ".concat(g));
      this.writeU8(198), this.writeU32(g);
    }
    var I = Qe(A);
    this.writeU8a(I);
  }, C.prototype.encodeArray = function(A, g) {
    var I = A.length;
    if (I < 16)
      this.writeU8(144 + I);
    else if (I < 65536)
      this.writeU8(220), this.writeU16(I);
    else {
      if (!(I < 4294967296))
        throw new Error("Too large array: ".concat(I));
      this.writeU8(221), this.writeU32(I);
    }
    for (var B = 0, Q = A; B < Q.length; B++) {
      var E = Q[B];
      this.doEncode(E, g + 1);
    }
  }, C.prototype.countWithoutUndefined = function(A, g) {
    for (var I = 0, B = 0, Q = g; B < Q.length; B++)
      A[Q[B]] !== void 0 && I++;
    return I;
  }, C.prototype.encodeMap = function(A, g) {
    var I = Object.keys(A);
    this.sortKeys && I.sort();
    var B = this.ignoreUndefined ? this.countWithoutUndefined(A, I) : I.length;
    if (B < 16)
      this.writeU8(128 + B);
    else if (B < 65536)
      this.writeU8(222), this.writeU16(B);
    else {
      if (!(B < 4294967296))
        throw new Error("Too large map object: ".concat(B));
      this.writeU8(223), this.writeU32(B);
    }
    for (var Q = 0, E = I; Q < E.length; Q++) {
      var i = E[Q], o = A[i];
      this.ignoreUndefined && o === void 0 || (this.encodeString(i), this.doEncode(o, g + 1));
    }
  }, C.prototype.encodeExtension = function(A) {
    var g = A.data.length;
    if (g === 1)
      this.writeU8(212);
    else if (g === 2)
      this.writeU8(213);
    else if (g === 4)
      this.writeU8(214);
    else if (g === 8)
      this.writeU8(215);
    else if (g === 16)
      this.writeU8(216);
    else if (g < 256)
      this.writeU8(199), this.writeU8(g);
    else if (g < 65536)
      this.writeU8(200), this.writeU16(g);
    else {
      if (!(g < 4294967296))
        throw new Error("Too large extension object: ".concat(g));
      this.writeU8(201), this.writeU32(g);
    }
    this.writeI8(A.type), this.writeU8a(A.data);
  }, C.prototype.writeU8 = function(A) {
    this.ensureBufferSizeToWrite(1), this.view.setUint8(this.pos, A), this.pos++;
  }, C.prototype.writeU8a = function(A) {
    var g = A.length;
    this.ensureBufferSizeToWrite(g), this.bytes.set(A, this.pos), this.pos += g;
  }, C.prototype.writeI8 = function(A) {
    this.ensureBufferSizeToWrite(1), this.view.setInt8(this.pos, A), this.pos++;
  }, C.prototype.writeU16 = function(A) {
    this.ensureBufferSizeToWrite(2), this.view.setUint16(this.pos, A), this.pos += 2;
  }, C.prototype.writeI16 = function(A) {
    this.ensureBufferSizeToWrite(2), this.view.setInt16(this.pos, A), this.pos += 2;
  }, C.prototype.writeU32 = function(A) {
    this.ensureBufferSizeToWrite(4), this.view.setUint32(this.pos, A), this.pos += 4;
  }, C.prototype.writeI32 = function(A) {
    this.ensureBufferSizeToWrite(4), this.view.setInt32(this.pos, A), this.pos += 4;
  }, C.prototype.writeF32 = function(A) {
    this.ensureBufferSizeToWrite(4), this.view.setFloat32(this.pos, A), this.pos += 4;
  }, C.prototype.writeF64 = function(A) {
    this.ensureBufferSizeToWrite(8), this.view.setFloat64(this.pos, A), this.pos += 8;
  }, C.prototype.writeU64 = function(A) {
    this.ensureBufferSizeToWrite(8), function(g, I, B) {
      var Q = B / 4294967296, E = B;
      g.setUint32(I, Q), g.setUint32(I + 4, E);
    }(this.view, this.pos, A), this.pos += 8;
  }, C.prototype.writeI64 = function(A) {
    this.ensureBufferSizeToWrite(8), SR(this.view, this.pos, A), this.pos += 8;
  }, C;
}(), PH = {};
function Cn(C) {
  return "".concat(C < 0 ? "-" : "", "0x").concat(Math.abs(C).toString(16).padStart(2, "0"));
}
var zH = function() {
  function C(A, g) {
    A === void 0 && (A = 16), g === void 0 && (g = 16), this.maxKeyLength = A, this.maxLengthPerKey = g, this.hit = 0, this.miss = 0, this.caches = [];
    for (var I = 0; I < this.maxKeyLength; I++)
      this.caches.push([]);
  }
  return C.prototype.canBeCached = function(A) {
    return A > 0 && A <= this.maxKeyLength;
  }, C.prototype.find = function(A, g, I) {
    A:
      for (var B = 0, Q = this.caches[I - 1]; B < Q.length; B++) {
        for (var E = Q[B], i = E.bytes, o = 0; o < I; o++)
          if (i[o] !== A[g + o])
            continue A;
        return E.str;
      }
    return null;
  }, C.prototype.store = function(A, g) {
    var I = this.caches[A.length - 1], B = { bytes: A, str: g };
    I.length >= this.maxLengthPerKey ? I[Math.random() * I.length | 0] = B : I.push(B);
  }, C.prototype.decode = function(A, g, I) {
    var B = this.find(A, g, I);
    if (B != null)
      return this.hit++, B;
    this.miss++;
    var Q = MR(A, g, I), E = Uint8Array.prototype.slice.call(A, g, g + I);
    return this.store(E, Q), Q;
  }, C;
}(), jH = globalThis && globalThis.__awaiter || function(C, A, g, I) {
  return new (g || (g = Promise))(function(B, Q) {
    function E(t) {
      try {
        o(I.next(t));
      } catch (e) {
        Q(e);
      }
    }
    function i(t) {
      try {
        o(I.throw(t));
      } catch (e) {
        Q(e);
      }
    }
    function o(t) {
      var e;
      t.done ? B(t.value) : (e = t.value, e instanceof g ? e : new g(function(s) {
        s(e);
      })).then(E, i);
    }
    o((I = I.apply(C, A || [])).next());
  });
}, Bn = globalThis && globalThis.__generator || function(C, A) {
  var g, I, B, Q, E = { label: 0, sent: function() {
    if (1 & B[0])
      throw B[1];
    return B[1];
  }, trys: [], ops: [] };
  return Q = { next: i(0), throw: i(1), return: i(2) }, typeof Symbol == "function" && (Q[Symbol.iterator] = function() {
    return this;
  }), Q;
  function i(o) {
    return function(t) {
      return function(e) {
        if (g)
          throw new TypeError("Generator is already executing.");
        for (; E; )
          try {
            if (g = 1, I && (B = 2 & e[0] ? I.return : e[0] ? I.throw || ((B = I.return) && B.call(I), 0) : I.next) && !(B = B.call(I, e[1])).done)
              return B;
            switch (I = 0, B && (e = [2 & e[0], B.value]), e[0]) {
              case 0:
              case 1:
                B = e;
                break;
              case 4:
                return E.label++, { value: e[1], done: !1 };
              case 5:
                E.label++, I = e[1], e = [0];
                continue;
              case 7:
                e = E.ops.pop(), E.trys.pop();
                continue;
              default:
                if (B = E.trys, !((B = B.length > 0 && B[B.length - 1]) || e[0] !== 6 && e[0] !== 2)) {
                  E = 0;
                  continue;
                }
                if (e[0] === 3 && (!B || e[1] > B[0] && e[1] < B[3])) {
                  E.label = e[1];
                  break;
                }
                if (e[0] === 6 && E.label < B[1]) {
                  E.label = B[1], B = e;
                  break;
                }
                if (B && E.label < B[2]) {
                  E.label = B[2], E.ops.push(e);
                  break;
                }
                B[2] && E.ops.pop(), E.trys.pop();
                continue;
            }
            e = A.call(C, E);
          } catch (s) {
            e = [6, s], I = 0;
          } finally {
            g = B = 0;
          }
        if (5 & e[0])
          throw e[1];
        return { value: e[0] ? e[1] : void 0, done: !0 };
      }([o, t]);
    };
  }
}, el = globalThis && globalThis.__asyncValues || function(C) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var A, g = C[Symbol.asyncIterator];
  return g ? g.call(C) : (C = typeof __values == "function" ? __values(C) : C[Symbol.iterator](), A = {}, I("next"), I("throw"), I("return"), A[Symbol.asyncIterator] = function() {
    return this;
  }, A);
  function I(B) {
    A[B] = C[B] && function(Q) {
      return new Promise(function(E, i) {
        (function(o, t, e, s) {
          Promise.resolve(s).then(function(a) {
            o({ value: a, done: e });
          }, t);
        })(E, i, (Q = C[B](Q)).done, Q.value);
      });
    };
  }
}, TE = globalThis && globalThis.__await || function(C) {
  return this instanceof TE ? (this.v = C, this) : new TE(C);
}, $H = globalThis && globalThis.__asyncGenerator || function(C, A, g) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var I, B = g.apply(C, A || []), Q = [];
  return I = {}, E("next"), E("throw"), E("return"), I[Symbol.asyncIterator] = function() {
    return this;
  }, I;
  function E(s) {
    B[s] && (I[s] = function(a) {
      return new Promise(function(r, h) {
        Q.push([s, a, r, h]) > 1 || i(s, a);
      });
    });
  }
  function i(s, a) {
    try {
      (r = B[s](a)).value instanceof TE ? Promise.resolve(r.value.v).then(o, t) : e(Q[0][2], r);
    } catch (h) {
      e(Q[0][3], h);
    }
    var r;
  }
  function o(s) {
    i("next", s);
  }
  function t(s) {
    i("throw", s);
  }
  function e(s, a) {
    s(a), Q.shift(), Q.length && i(Q[0][0], Q[0][1]);
  }
}, ND = new DataView(new ArrayBuffer(0)), _H = new Uint8Array(ND.buffer), nr = function() {
  try {
    ND.getInt8(0);
  } catch (C) {
    return C.constructor;
  }
  throw new Error("never reached");
}(), sl = new nr("Insufficient data"), A1 = new zH(), g1 = function() {
  function C(A, g, I, B, Q, E, i, o) {
    A === void 0 && (A = UR.defaultCodec), g === void 0 && (g = void 0), I === void 0 && (I = qQ), B === void 0 && (B = qQ), Q === void 0 && (Q = qQ), E === void 0 && (E = qQ), i === void 0 && (i = qQ), o === void 0 && (o = A1), this.extensionCodec = A, this.context = g, this.maxStrLength = I, this.maxBinLength = B, this.maxArrayLength = Q, this.maxMapLength = E, this.maxExtLength = i, this.keyDecoder = o, this.totalPos = 0, this.pos = 0, this.view = ND, this.bytes = _H, this.headByte = -1, this.stack = [];
  }
  return C.prototype.reinitializeState = function() {
    this.totalPos = 0, this.headByte = -1, this.stack.length = 0;
  }, C.prototype.setBuffer = function(A) {
    this.bytes = Qe(A), this.view = function(g) {
      if (g instanceof ArrayBuffer)
        return new DataView(g);
      var I = Qe(g);
      return new DataView(I.buffer, I.byteOffset, I.byteLength);
    }(this.bytes), this.pos = 0;
  }, C.prototype.appendBuffer = function(A) {
    if (this.headByte !== -1 || this.hasRemaining(1)) {
      var g = this.bytes.subarray(this.pos), I = Qe(A), B = new Uint8Array(g.length + I.length);
      B.set(g), B.set(I, g.length), this.setBuffer(B);
    } else
      this.setBuffer(A);
  }, C.prototype.hasRemaining = function(A) {
    return this.view.byteLength - this.pos >= A;
  }, C.prototype.createExtraByteError = function(A) {
    var g = this.view, I = this.pos;
    return new RangeError("Extra ".concat(g.byteLength - I, " of ").concat(g.byteLength, " byte(s) found at buffer[").concat(A, "]"));
  }, C.prototype.decode = function(A) {
    this.reinitializeState(), this.setBuffer(A);
    var g = this.doDecodeSync();
    if (this.hasRemaining(1))
      throw this.createExtraByteError(this.pos);
    return g;
  }, C.prototype.decodeMulti = function(A) {
    return Bn(this, function(g) {
      switch (g.label) {
        case 0:
          this.reinitializeState(), this.setBuffer(A), g.label = 1;
        case 1:
          return this.hasRemaining(1) ? [4, this.doDecodeSync()] : [3, 3];
        case 2:
          return g.sent(), [3, 1];
        case 3:
          return [2];
      }
    });
  }, C.prototype.decodeAsync = function(A) {
    var g, I, B, Q;
    return jH(this, void 0, void 0, function() {
      var E, i, o, t, e, s, a, r;
      return Bn(this, function(h) {
        switch (h.label) {
          case 0:
            E = !1, h.label = 1;
          case 1:
            h.trys.push([1, 6, 7, 12]), g = el(A), h.label = 2;
          case 2:
            return [4, g.next()];
          case 3:
            if ((I = h.sent()).done)
              return [3, 5];
            if (o = I.value, E)
              throw this.createExtraByteError(this.totalPos);
            this.appendBuffer(o);
            try {
              i = this.doDecodeSync(), E = !0;
            } catch (w) {
              if (!(w instanceof nr))
                throw w;
            }
            this.totalPos += this.pos, h.label = 4;
          case 4:
            return [3, 2];
          case 5:
            return [3, 12];
          case 6:
            return t = h.sent(), B = { error: t }, [3, 12];
          case 7:
            return h.trys.push([7, , 10, 11]), I && !I.done && (Q = g.return) ? [4, Q.call(g)] : [3, 9];
          case 8:
            h.sent(), h.label = 9;
          case 9:
            return [3, 11];
          case 10:
            if (B)
              throw B.error;
            return [7];
          case 11:
            return [7];
          case 12:
            if (E) {
              if (this.hasRemaining(1))
                throw this.createExtraByteError(this.totalPos);
              return [2, i];
            }
            throw s = (e = this).headByte, a = e.pos, r = e.totalPos, new RangeError("Insufficient data in parsing ".concat(Cn(s), " at ").concat(r, " (").concat(a, " in the current buffer)"));
        }
      });
    });
  }, C.prototype.decodeArrayStream = function(A) {
    return this.decodeMultiAsync(A, !0);
  }, C.prototype.decodeStream = function(A) {
    return this.decodeMultiAsync(A, !1);
  }, C.prototype.decodeMultiAsync = function(A, g) {
    return $H(this, arguments, function() {
      var I, B, Q, E, i, o, t, e, s;
      return Bn(this, function(a) {
        switch (a.label) {
          case 0:
            I = g, B = -1, a.label = 1;
          case 1:
            a.trys.push([1, 13, 14, 19]), Q = el(A), a.label = 2;
          case 2:
            return [4, TE(Q.next())];
          case 3:
            if ((E = a.sent()).done)
              return [3, 12];
            if (i = E.value, g && B === 0)
              throw this.createExtraByteError(this.totalPos);
            this.appendBuffer(i), I && (B = this.readArraySize(), I = !1, this.complete()), a.label = 4;
          case 4:
            a.trys.push([4, 9, , 10]), a.label = 5;
          case 5:
            return [4, TE(this.doDecodeSync())];
          case 6:
            return [4, a.sent()];
          case 7:
            return a.sent(), --B == 0 ? [3, 8] : [3, 5];
          case 8:
            return [3, 10];
          case 9:
            if (!((o = a.sent()) instanceof nr))
              throw o;
            return [3, 10];
          case 10:
            this.totalPos += this.pos, a.label = 11;
          case 11:
            return [3, 2];
          case 12:
            return [3, 19];
          case 13:
            return t = a.sent(), e = { error: t }, [3, 19];
          case 14:
            return a.trys.push([14, , 17, 18]), E && !E.done && (s = Q.return) ? [4, TE(s.call(Q))] : [3, 16];
          case 15:
            a.sent(), a.label = 16;
          case 16:
            return [3, 18];
          case 17:
            if (e)
              throw e.error;
            return [7];
          case 18:
            return [7];
          case 19:
            return [2];
        }
      });
    });
  }, C.prototype.doDecodeSync = function() {
    A:
      for (; ; ) {
        var A = this.readHeadByte(), g = void 0;
        if (A >= 224)
          g = A - 256;
        else if (A < 192)
          if (A < 128)
            g = A;
          else if (A < 144) {
            if ((B = A - 128) !== 0) {
              this.pushMapState(B), this.complete();
              continue A;
            }
            g = {};
          } else if (A < 160) {
            if ((B = A - 144) !== 0) {
              this.pushArrayState(B), this.complete();
              continue A;
            }
            g = [];
          } else {
            var I = A - 160;
            g = this.decodeUtf8String(I, 0);
          }
        else if (A === 192)
          g = null;
        else if (A === 194)
          g = !1;
        else if (A === 195)
          g = !0;
        else if (A === 202)
          g = this.readF32();
        else if (A === 203)
          g = this.readF64();
        else if (A === 204)
          g = this.readU8();
        else if (A === 205)
          g = this.readU16();
        else if (A === 206)
          g = this.readU32();
        else if (A === 207)
          g = this.readU64();
        else if (A === 208)
          g = this.readI8();
        else if (A === 209)
          g = this.readI16();
        else if (A === 210)
          g = this.readI32();
        else if (A === 211)
          g = this.readI64();
        else if (A === 217)
          I = this.lookU8(), g = this.decodeUtf8String(I, 1);
        else if (A === 218)
          I = this.lookU16(), g = this.decodeUtf8String(I, 2);
        else if (A === 219)
          I = this.lookU32(), g = this.decodeUtf8String(I, 4);
        else if (A === 220) {
          if ((B = this.readU16()) !== 0) {
            this.pushArrayState(B), this.complete();
            continue A;
          }
          g = [];
        } else if (A === 221) {
          if ((B = this.readU32()) !== 0) {
            this.pushArrayState(B), this.complete();
            continue A;
          }
          g = [];
        } else if (A === 222) {
          if ((B = this.readU16()) !== 0) {
            this.pushMapState(B), this.complete();
            continue A;
          }
          g = {};
        } else if (A === 223) {
          if ((B = this.readU32()) !== 0) {
            this.pushMapState(B), this.complete();
            continue A;
          }
          g = {};
        } else if (A === 196) {
          var B = this.lookU8();
          g = this.decodeBinary(B, 1);
        } else if (A === 197)
          B = this.lookU16(), g = this.decodeBinary(B, 2);
        else if (A === 198)
          B = this.lookU32(), g = this.decodeBinary(B, 4);
        else if (A === 212)
          g = this.decodeExtension(1, 0);
        else if (A === 213)
          g = this.decodeExtension(2, 0);
        else if (A === 214)
          g = this.decodeExtension(4, 0);
        else if (A === 215)
          g = this.decodeExtension(8, 0);
        else if (A === 216)
          g = this.decodeExtension(16, 0);
        else if (A === 199)
          B = this.lookU8(), g = this.decodeExtension(B, 1);
        else if (A === 200)
          B = this.lookU16(), g = this.decodeExtension(B, 2);
        else {
          if (A !== 201)
            throw new lB("Unrecognized type byte: ".concat(Cn(A)));
          B = this.lookU32(), g = this.decodeExtension(B, 4);
        }
        this.complete();
        for (var Q = this.stack; Q.length > 0; ) {
          var E = Q[Q.length - 1];
          if (E.type === 0) {
            if (E.array[E.position] = g, E.position++, E.position !== E.size)
              continue A;
            Q.pop(), g = E.array;
          } else {
            if (E.type === 1) {
              if (i = void 0, (i = typeof g) != "string" && i !== "number")
                throw new lB("The type of key must be string or number but " + typeof g);
              if (g === "__proto__")
                throw new lB("The key __proto__ is not allowed");
              E.key = g, E.type = 2;
              continue A;
            }
            if (E.map[E.key] = g, E.readCount++, E.readCount !== E.size) {
              E.key = null, E.type = 1;
              continue A;
            }
            Q.pop(), g = E.map;
          }
        }
        return g;
      }
    var i;
  }, C.prototype.readHeadByte = function() {
    return this.headByte === -1 && (this.headByte = this.readU8()), this.headByte;
  }, C.prototype.complete = function() {
    this.headByte = -1;
  }, C.prototype.readArraySize = function() {
    var A = this.readHeadByte();
    switch (A) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default:
        if (A < 160)
          return A - 144;
        throw new lB("Unrecognized array type byte: ".concat(Cn(A)));
    }
  }, C.prototype.pushMapState = function(A) {
    if (A > this.maxMapLength)
      throw new lB("Max length exceeded: map length (".concat(A, ") > maxMapLengthLength (").concat(this.maxMapLength, ")"));
    this.stack.push({ type: 1, size: A, key: null, readCount: 0, map: {} });
  }, C.prototype.pushArrayState = function(A) {
    if (A > this.maxArrayLength)
      throw new lB("Max length exceeded: array length (".concat(A, ") > maxArrayLength (").concat(this.maxArrayLength, ")"));
    this.stack.push({ type: 0, size: A, array: new Array(A), position: 0 });
  }, C.prototype.decodeUtf8String = function(A, g) {
    var I;
    if (A > this.maxStrLength)
      throw new lB("Max length exceeded: UTF-8 byte length (".concat(A, ") > maxStrLength (").concat(this.maxStrLength, ")"));
    if (this.bytes.byteLength < this.pos + g + A)
      throw sl;
    var B, Q = this.pos + g;
    return B = this.stateIsMapKey() && (!((I = this.keyDecoder) === null || I === void 0) && I.canBeCached(A)) ? this.keyDecoder.decode(this.bytes, Q, A) : A > WH ? function(E, i, o) {
      var t = E.subarray(i, i + o);
      return VH.decode(t);
    }(this.bytes, Q, A) : MR(this.bytes, Q, A), this.pos += g + A, B;
  }, C.prototype.stateIsMapKey = function() {
    return this.stack.length > 0 && this.stack[this.stack.length - 1].type === 1;
  }, C.prototype.decodeBinary = function(A, g) {
    if (A > this.maxBinLength)
      throw new lB("Max length exceeded: bin length (".concat(A, ") > maxBinLength (").concat(this.maxBinLength, ")"));
    if (!this.hasRemaining(A + g))
      throw sl;
    var I = this.pos + g, B = this.bytes.subarray(I, I + A);
    return this.pos += g + A, B;
  }, C.prototype.decodeExtension = function(A, g) {
    if (A > this.maxExtLength)
      throw new lB("Max length exceeded: ext length (".concat(A, ") > maxExtLength (").concat(this.maxExtLength, ")"));
    var I = this.view.getInt8(this.pos + g), B = this.decodeBinary(A, g + 1);
    return this.extensionCodec.decode(B, I, this.context);
  }, C.prototype.lookU8 = function() {
    return this.view.getUint8(this.pos);
  }, C.prototype.lookU16 = function() {
    return this.view.getUint16(this.pos);
  }, C.prototype.lookU32 = function() {
    return this.view.getUint32(this.pos);
  }, C.prototype.readU8 = function() {
    var A = this.view.getUint8(this.pos);
    return this.pos++, A;
  }, C.prototype.readI8 = function() {
    var A = this.view.getInt8(this.pos);
    return this.pos++, A;
  }, C.prototype.readU16 = function() {
    var A = this.view.getUint16(this.pos);
    return this.pos += 2, A;
  }, C.prototype.readI16 = function() {
    var A = this.view.getInt16(this.pos);
    return this.pos += 2, A;
  }, C.prototype.readU32 = function() {
    var A = this.view.getUint32(this.pos);
    return this.pos += 4, A;
  }, C.prototype.readI32 = function() {
    var A = this.view.getInt32(this.pos);
    return this.pos += 4, A;
  }, C.prototype.readU64 = function() {
    var A, g, I = (A = this.view, g = this.pos, 4294967296 * A.getUint32(g) + A.getUint32(g + 4));
    return this.pos += 8, I;
  }, C.prototype.readI64 = function() {
    var A = pR(this.view, this.pos);
    return this.pos += 8, A;
  }, C.prototype.readF32 = function() {
    var A = this.view.getFloat32(this.pos);
    return this.pos += 4, A;
  }, C.prototype.readF64 = function() {
    var A = this.view.getFloat64(this.pos);
    return this.pos += 8, A;
  }, C;
}(), I1 = {};
class C1 {
  constructor() {
    this.data = null;
  }
  compileImageTargets(A, g) {
    return new Promise(async (I, B) => {
      const Q = [];
      for (let t = 0; t < A.length; t++) {
        const e = A[t], s = this.createProcessCanvas(e).getContext("2d");
        s.drawImage(e, 0, 0, e.width, e.height);
        const a = s.getImageData(0, 0, e.width, e.height), r = new Uint8Array(e.width * e.height);
        for (let w = 0; w < r.length; w++) {
          const G = 4 * w;
          r[w] = Math.floor((a.data[G] + a.data[G + 1] + a.data[G + 2]) / 3);
        }
        const h = { data: r, height: e.height, width: e.width };
        Q.push(h);
      }
      const E = 50 / Q.length;
      let i = 0;
      this.data = [];
      for (let t = 0; t < Q.length; t++) {
        const e = Q[t], s = fH(e), a = E / s.length, r = await B1(s, () => {
          i += a, g(i);
        });
        this.data.push({ targetImage: e, imageList: s, matchingData: r });
      }
      for (let t = 0; t < Q.length; t++) {
        const e = LH(Q[t]);
        this.data[t].trackingImageList = e;
      }
      const o = await this.compileTrack({ progressCallback: g, targetImages: Q, basePercent: 50 });
      for (let t = 0; t < Q.length; t++)
        this.data[t].trackingData = o[t];
      I(this.data);
    });
  }
  exportData() {
    const A = [];
    for (let B = 0; B < this.data.length; B++)
      A.push({ targetImage: { width: this.data[B].targetImage.width, height: this.data[B].targetImage.height }, trackingData: this.data[B].trackingData, matchingData: this.data[B].matchingData });
    var g, I;
    return g = { v: 2, dataList: A }, I === void 0 && (I = PH), new vH(I.extensionCodec, I.context, I.maxDepth, I.initialBufferSize, I.sortKeys, I.forceFloat32, I.ignoreUndefined, I.forceIntegerToFloat).encodeSharedRef(g);
  }
  importData(A) {
    const g = function(B, Q) {
      return Q === void 0 && (Q = I1), new g1(Q.extensionCodec, Q.context, Q.maxStrLength, Q.maxBinLength, Q.maxArrayLength, Q.maxMapLength, Q.maxExtLength).decode(B);
    }(new Uint8Array(A));
    if (!g.v || g.v !== 2)
      return console.error("Your compiled .mind might be outdated. Please recompile"), [];
    const { dataList: I } = g;
    this.data = [];
    for (let B = 0; B < I.length; B++)
      this.data.push({ targetImage: I[B].targetImage, trackingData: I[B].trackingData, matchingData: I[B].matchingData });
    return this.data;
  }
  createProcessCanvas(A) {
    console.warn("missing createProcessCanvas implementation");
  }
  compileTrack({ progressCallback: A, targetImages: g, basePercent: I }) {
    console.warn("missing compileTrack implementation");
  }
}
const B1 = async (C, A) => {
  const g = [];
  for (let I = 0; I < C.length; I++) {
    const B = C[I], Q = new uR(B.width, B.height);
    await zs(), IA(() => {
      const E = pC(B.data, [B.data.length], "float32").reshape([B.height, B.width]), { featurePoints: i } = Q.detect(E), o = i.filter((a) => a.maxima), t = i.filter((a) => !a.maxima), e = ol({ points: o }), s = ol({ points: t });
      g.push({ maximaPoints: o, minimaPoints: t, maximaPointsCluster: e, minimaPointsCluster: s, width: B.width, height: B.height, scale: B.scale }), A(I);
    });
  }
  return g;
}, YR = "KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2NsYXNzIEZ7Y29uc3RydWN0b3IoYSx0LGkpe3RoaXMuY3Vtc3VtPVtdO2ZvcihsZXQgZT0wO2U8aTtlKyspe3RoaXMuY3Vtc3VtLnB1c2goW10pO2ZvcihsZXQgcz0wO3M8dDtzKyspdGhpcy5jdW1zdW1bZV0ucHVzaCgwKX10aGlzLmN1bXN1bVswXVswXT1hWzBdO2ZvcihsZXQgZT0xO2U8dDtlKyspdGhpcy5jdW1zdW1bMF1bZV09dGhpcy5jdW1zdW1bMF1bZS0xXSthW2VdO2ZvcihsZXQgZT0xO2U8aTtlKyspdGhpcy5jdW1zdW1bZV1bMF09dGhpcy5jdW1zdW1bZS0xXVswXSthW2UqdF07Zm9yKGxldCBlPTE7ZTxpO2UrKylmb3IobGV0IHM9MTtzPHQ7cysrKXRoaXMuY3Vtc3VtW2VdW3NdPWFbZSp0K3NdK3RoaXMuY3Vtc3VtW2UtMV1bc10rdGhpcy5jdW1zdW1bZV1bcy0xXS10aGlzLmN1bXN1bVtlLTFdW3MtMV19cXVlcnkoYSx0LGksZSl7bGV0IHM9dGhpcy5jdW1zdW1bZV1baV07cmV0dXJuIHQ+MCYmKHMtPXRoaXMuY3Vtc3VtW3QtMV1baV0pLGE+MCYmKHMtPXRoaXMuY3Vtc3VtW2VdW2EtMV0pLGE+MCYmdD4wJiYocys9dGhpcy5jdW1zdW1bdC0xXVthLTFdKSxzfX1jb25zdCBJPWw9Pntjb25zdHtkYXRhOmEsd2lkdGg6dCxoZWlnaHQ6aSxzY2FsZTplfT1sLHM9W3QqaV07Zm9yKGxldCByPTA7cjxzLmxlbmd0aDtyKyspc1tyXT0hMTtjb25zdCBoPW5ldyBGbG9hdDMyQXJyYXkoYS5sZW5ndGgpO2ZvcihsZXQgcj0wO3I8dDtyKyspaFtyXT0tMSxoW3QqKGktMSkrcl09LTE7Zm9yKGxldCByPTA7cjxpO3IrKyloW3IqdF09LTEsaFtyKnQrdC0xXT0tMTtmb3IobGV0IHI9MTtyPHQtMTtyKyspZm9yKGxldCBuPTE7bjxpLTE7bisrKXtsZXQgYz1yK3Qqbix3PTAsdT0wO2ZvcihsZXQgZD0tMTtkPD0xO2QrKyl3Kz1hW2MrdCpkKzFdLWFbYyt0KmQtMV0sdSs9YVtjK3QrZF0tYVtjLXQrZF07dy89NzY4LHUvPTc2OCxoW2NdPU1hdGguc3FydCgodyp3K3UqdSkvMil9Y29uc3Qgbz1uZXcgVWludDMyQXJyYXkoMWUzKTtmb3IobGV0IHI9MDtyPDFlMztyKyspb1tyXT0wO2NvbnN0IFM9Wy0xLDEsLXQsdF07Zm9yKGxldCByPTE7cjx0LTE7cisrKWZvcihsZXQgbj0xO248aS0xO24rKyl7bGV0IGM9cit0Km4sdz0hMDtmb3IobGV0IHU9MDt1PFMubGVuZ3RoO3UrKylpZihoW2NdPD1oW2MrU1t1XV0pe3c9ITE7YnJlYWt9aWYodyl7bGV0IHU9TWF0aC5mbG9vcigxZTMqaFtjXSk7dT45OTkmJih1PTk5OSksdTwwJiYodT0wKSxvW3VdKz0xLHNbY109ITB9fWNvbnN0IEQ9LjAyKnQqaTtsZXQgZz05OTksVD0wO2Zvcig7Zz49MCYmKFQrPW9bZ10sIShUPkQpKTspZy0tO2ZvcihsZXQgcj0wO3I8cy5sZW5ndGg7cisrKXNbcl0mJjFlMypoW3JdPGcmJihzW3JdPSExKTtjb25zdCBtPVtdO2ZvcihsZXQgcj0wO3I8YS5sZW5ndGg7cisrKW1bcl09YVtyXSphW3JdO2NvbnN0IE09bmV3IEYoYSx0LGkpLGI9bmV3IEYobSx0LGkpLEM9bmV3IEZsb2F0MzJBcnJheShhLmxlbmd0aCk7Zm9yKGxldCByPTA7cjx0O3IrKylmb3IobGV0IG49MDtuPGk7bisrKXtjb25zdCBjPW4qdCtyO2lmKCFzW2NdKXtDW2NdPTE7Y29udGludWV9Y29uc3Qgdz1VKHtpbWFnZTpsLGN4OnIsY3k6bixzZFRocmVzaDo1LGltYWdlRGF0YUN1bXN1bTpNLGltYWdlRGF0YVNxckN1bXN1bTpifSk7aWYodz09PW51bGwpe0NbY109MTtjb250aW51ZX1sZXQgdT0tMTtmb3IobGV0IGQ9LTEwO2Q8PTEwO2QrKyl7Zm9yKGxldCBmPS0xMDtmPD0xMDtmKyspe2lmKGYqZitkKmQ8PTQpY29udGludWU7Y29uc3QgcT1qKHtpbWFnZTpsLGN4OnIrZixjeTpuK2Qsdmxlbjp3LHR4OnIsdHk6bixpbWFnZURhdGFDdW1zdW06TSxpbWFnZURhdGFTcXJDdW1zdW06Yn0pO2lmKHEhPT1udWxsJiZxPnUmJih1PXEsdT4uOTUpKWJyZWFrfWlmKHU+Ljk1KWJyZWFrfUNbY109dX1yZXR1cm4gTyh7aW1hZ2U6bCxmZWF0dXJlTWFwOkMsdGVtcGxhdGVTaXplOjYsc2VhcmNoU2l6ZToyLG9jY1NpemU6MTYsbWF4U2ltVGhyZXNoOi45LG1pblNpbVRocmVzaDouMixzZFRocmVzaDo4LGltYWdlRGF0YUN1bXN1bTpNLGltYWdlRGF0YVNxckN1bXN1bTpifSl9LE89bD0+e2xldHtpbWFnZTphLGZlYXR1cmVNYXA6dCx0ZW1wbGF0ZVNpemU6aSxzZWFyY2hTaXplOmUsb2NjU2l6ZTpzLG1heFNpbVRocmVzaDpoLG1pblNpbVRocmVzaDpvLHNkVGhyZXNoOlMsaW1hZ2VEYXRhQ3Vtc3VtOkQsaW1hZ2VEYXRhU3FyQ3Vtc3VtOmd9PWw7Y29uc3R7ZGF0YTpULHdpZHRoOm0saGVpZ2h0Ok0sc2NhbGU6Yn09YTtzPU1hdGguZmxvb3IoTWF0aC5taW4oYS53aWR0aCxhLmhlaWdodCkvMTApO2NvbnN0IEM9MyooMippKzEpLHI9TWF0aC5mbG9vcihtL0MpLG49TWF0aC5mbG9vcihNL0MpO2xldCBjPU1hdGguZmxvb3IobS9zKSpNYXRoLmZsb29yKE0vcykrcipuO2NvbnN0IHc9W10sdT1uZXcgRmxvYXQzMkFycmF5KFQubGVuZ3RoKTtmb3IobGV0IGY9MDtmPHUubGVuZ3RoO2YrKyl1W2ZdPXRbZl07bGV0IGQ9MDtmb3IoO2Q8Yzspe2xldCBmPWgscT0tMSx4PS0xO2ZvcihsZXQgeT0wO3k8TTt5KyspZm9yKGxldCBwPTA7cDxtO3ArKyl1W3kqbStwXTxmJiYoZj11W3kqbStwXSxxPXAseD15KTtpZihxPT09LTEpYnJlYWs7Y29uc3Qgdj1VKHtpbWFnZTphLGN4OnEsY3k6eCxzZFRocmVzaDowLGltYWdlRGF0YUN1bXN1bTpELGltYWdlRGF0YVNxckN1bXN1bTpnfSk7aWYodj09PW51bGwpe3VbeCptK3FdPTE7Y29udGludWV9aWYodi8oMippKzEpPFMpe3VbeCptK3FdPTE7Y29udGludWV9bGV0IGs9MSx6PS0xO2ZvcihsZXQgeT0tZTt5PD1lO3krKyl7Zm9yKGxldCBwPS1lO3A8PWU7cCsrKXtpZihwKnAreSp5PmUqZXx8cD09PTAmJnk9PT0wKWNvbnRpbnVlO2NvbnN0IEE9aih7aW1hZ2U6YSx2bGVuOnYsY3g6cStwLGN5OngreSx0eDpxLHR5OngsaW1hZ2VEYXRhQ3Vtc3VtOkQsaW1hZ2VEYXRhU3FyQ3Vtc3VtOmd9KTtpZihBIT09bnVsbCYmKEE8ayYmKGs9QSxrPG8mJms8Zil8fEE+eiYmKHo9QSx6Pi45OSkpKWJyZWFrfWlmKGs8byYmazxmfHx6Pi45OSlicmVha31pZihrPG8mJms8Znx8ej4uOTkpdVt4Km0rcV09MTtlbHNle3cucHVzaCh7eDpxLHk6eH0pLGQrPTE7Zm9yKGxldCB5PS1zO3k8PXM7eSsrKWZvcihsZXQgcD0tcztwPD1zO3ArKyl4K3k8MHx8eCt5Pj1NfHxxK3A8MHx8cStwPj1tfHwodVsoeCt5KSptKyhxK3ApXT0xKX19cmV0dXJuIHd9LFU9KHtpbWFnZTpsLGN4OmEsY3k6dCxzZFRocmVzaDppLGltYWdlRGF0YUN1bXN1bTplLGltYWdlRGF0YVNxckN1bXN1bTpzfSk9PntpZihhLTY8MHx8YSs2Pj1sLndpZHRofHx0LTY8MHx8dCs2Pj1sLmhlaWdodClyZXR1cm4gbnVsbDtsZXQgaD1lLnF1ZXJ5KGEtNix0LTYsYSs2LHQrNik7aC89MTY5O2xldCBvPXMucXVlcnkoYS02LHQtNixhKzYsdCs2KTtyZXR1cm4gby09MipoKmUucXVlcnkoYS02LHQtNixhKzYsdCs2KSxvKz0xNjkqaCpoLG8vMTY5PGkqaT9udWxsOihvPU1hdGguc3FydChvKSxvKX0saj1sPT57Y29uc3R7aW1hZ2U6YSxjeDp0LGN5OmksdmxlbjplLHR4OnMsdHk6aCxpbWFnZURhdGFDdW1zdW06byxpbWFnZURhdGFTcXJDdW1zdW06U309bCx7ZGF0YTpELHdpZHRoOmcsaGVpZ2h0OlR9PWE7aWYodC02PDB8fHQrNj49Z3x8aS02PDB8fGkrNj49VClyZXR1cm4gbnVsbDtjb25zdCBtPTEzO2xldCBNPW8ucXVlcnkodC02LGktNix0KzYsaSs2KSxiPVMucXVlcnkodC02LGktNix0KzYsaSs2KSxDPTAscj0oaS02KSpnKyh0LTYpLG49KGgtNikqZysocy02KSxjPWctbTtmb3IobGV0IGQ9MDtkPG07ZCsrKXtmb3IobGV0IGY9MDtmPG07ZisrKUMrPURbcl0qRFtuXSxyKz0xLG4rPTE7cis9YyxuKz1jfWxldCB3PW8ucXVlcnkocy02LGgtNixzKzYsaCs2KTt3Lz0xNjksQy09dypNO2xldCB1PWItTSpNLzE2OTtyZXR1cm4gdT09MD9udWxsOih1PU1hdGguc3FydCh1KSwxKkMvKGUqdSkpfSxCPShsLGEpPT57Y29uc3QgdD1bXTtmb3IobGV0IGk9MDtpPGwubGVuZ3RoO2krKyl7Y29uc3QgZT1sW2ldLHM9SShlKSxoPXtkYXRhOmUuZGF0YSxzY2FsZTplLnNjYWxlLHdpZHRoOmUud2lkdGgsaGVpZ2h0OmUuaGVpZ2h0LHBvaW50czpzfTt0LnB1c2goaCksYShpKX1yZXR1cm4gdH0sRT0oe2ltYWdlOmwscmF0aW86YX0pPT57Y29uc3QgdD1NYXRoLnJvdW5kKGwud2lkdGgqYSksaT1NYXRoLnJvdW5kKGwuaGVpZ2h0KmEpLGU9bmV3IFVpbnQ4QXJyYXkodCppKTtmb3IobGV0IHM9MDtzPHQ7cysrKXtsZXQgaD1NYXRoLnJvdW5kKDEqcy9hKSxvPU1hdGgucm91bmQoMSoocysxKS9hKS0xO28+PWwud2lkdGgmJihvPWwud2lkdGgtMSk7Zm9yKGxldCBTPTA7UzxpO1MrKyl7bGV0IEQ9TWF0aC5yb3VuZCgxKlMvYSksZz1NYXRoLnJvdW5kKDEqKFMrMSkvYSktMTtnPj1sLmhlaWdodCYmKGc9bC5oZWlnaHQtMSk7bGV0IFQ9MCxtPTA7Zm9yKGxldCBNPWg7TTw9bztNKyspZm9yKGxldCBiPUQ7Yjw9ZztiKyspVCs9MSpsLmRhdGFbYipsLndpZHRoK01dLG0rPTE7ZVtTKnQrc109TWF0aC5mbG9vcihUL20pfX1yZXR1cm57ZGF0YTplLHdpZHRoOnQsaGVpZ2h0Oml9fSxHPWw9Pntjb25zdCBhPU1hdGgubWluKGwud2lkdGgsbC5oZWlnaHQpLHQ9W10saT1bXTt0LnB1c2goMjU2L2EpLHQucHVzaCgxMjgvYSk7Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspaS5wdXNoKE9iamVjdC5hc3NpZ24oRSh7aW1hZ2U6bCxyYXRpbzp0W2VdfSkse3NjYWxlOnRbZV19KSk7cmV0dXJuIGl9O29ubWVzc2FnZT1sPT57Y29uc3R7ZGF0YTphfT1sO2lmKGEudHlwZT09PSJjb21waWxlIil7Y29uc3R7dGFyZ2V0SW1hZ2VzOnR9PWEsaT0xMDAvdC5sZW5ndGg7bGV0IGU9MDtjb25zdCBzPVtdO2ZvcihsZXQgaD0wO2g8dC5sZW5ndGg7aCsrKXtjb25zdCBvPXRbaF0sUz1HKG8pLEQ9aS9TLmxlbmd0aCxnPUIoUyxUPT57ZSs9RCxwb3N0TWVzc2FnZSh7dHlwZToicHJvZ3Jlc3MiLHBlcmNlbnQ6ZX0pfSk7cy5wdXNoKGcpfXBvc3RNZXNzYWdlKHt0eXBlOiJjb21waWxlRG9uZSIsbGlzdDpzfSl9fX0pKCk7Cg==", al = typeof window < "u" && window.Blob && new Blob([atob(YR)], { type: "text/javascript;charset=utf-8" });
function Q1() {
  let C;
  try {
    if (C = al && (window.URL || window.webkitURL).createObjectURL(al), !C)
      throw "";
    return new Worker(C);
  } catch {
    return new Worker("data:application/javascript;base64," + YR);
  } finally {
    C && (window.URL || window.webkitURL).revokeObjectURL(C);
  }
}
class E1 extends C1 {
  createProcessCanvas(A) {
    const g = document.createElement("canvas");
    return g.width = A.width, g.height = A.height, g;
  }
  compileTrack({ progressCallback: A, targetImages: g, basePercent: I }) {
    return new Promise((B, Q) => {
      const E = new Q1();
      E.onmessage = (i) => {
        i.data.type === "progress" ? A(I + i.data.percent * I / 100) : i.data.type === "compileDone" && B(i.data.list);
      }, E.postMessage({ type: "compile", targetImages: g });
    });
  }
}
class i1 {
  constructor(A, g) {
    this.width = A, this.height = g, this.texShape = [g, A];
    const I = document.createElement("canvas").getContext("2d");
    I.canvas.width = A, I.canvas.height = g, this.context = I, this.program = this.buildProgram(A, g);
    const B = iQ();
    this.tempPixelHandle = B.makeTensorInfo(this.texShape, "float32"), B.texData.get(this.tempPixelHandle.dataId).usage = 2;
  }
  _loadInput(A) {
    return IA(() => {
      let g = Ak(A);
      return g = g.mean(2), g;
    });
  }
  loadInput(A) {
    const g = this.context;
    if (g.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height), A.width === this.height && A.height === this.width) {
      let B = this.context.canvas.width / 2, Q = this.context.canvas.height / 2, E = 90;
      g.save(), g.translate(B, Q), g.rotate(E * Math.PI / 180), g.drawImage(A, -A.width / 2, -A.height / 2), g.restore();
    } else
      this.context.drawImage(A, 0, 0, A.width, A.height);
    const I = iQ();
    return I.gpgpu.uploadPixelDataToTexture(I.getTexture(this.tempPixelHandle.dataId), this.context.canvas), this._compileAndRun(this.program, [this.tempPixelHandle]);
  }
  buildProgram(A, g) {
    const I = aA().getNumber("WEBGL_VERSION") === 2 ? "texture" : "texture2D";
    return { variableNames: ["A"], outputShape: this.texShape, userCode: `
	void main() {
	  ivec2 coords = getOutputCoords();
	  int texR = coords[0];
	  int texC = coords[1];
	  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${A}.0, ${g}.0);

	  vec4 values = ${I}(A, uv);
	  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);
	}
      ` };
  }
  _compileAndRun(A, g) {
    const I = iQ().compileAndRun(A, g);
    return EI().makeTensorFromDataId(I.dataId, I.shape, I.dtype);
  }
  _runWebGLProgram(A, g, I) {
    const B = iQ().runWebGLProgram(A, g, I);
    return EI().makeTensorFromDataId(B.dataId, B.shape, B.dtype);
  }
}
const Qn = { memory: ne, nextFrame: zs };
class o1 {
  constructor({ inputWidth: A, inputHeight: g, onUpdate: I = null, debugMode: B = !1, maxTrack: Q = 1, warmupTolerance: E = null, missTolerance: i = null, filterMinCF: o = null, filterBeta: t = null }) {
    this.inputWidth = A, this.inputHeight = g, this.maxTrack = Q, this.filterMinCF = o === null ? 1e-3 : o, this.filterBeta = t === null ? 1e3 : t, this.warmupTolerance = E === null ? 5 : E, this.missTolerance = i === null ? 5 : i, this.cropDetector = new JH(this.inputWidth, this.inputHeight, B), this.inputLoader = new i1(this.inputWidth, this.inputHeight), this.markerDimensions = null, this.onUpdate = I, this.debugMode = B, this.processingVideo = !1, this.interestedTargetIndex = -1, this.trackingStates = [];
    const e = 45 * Math.PI / 180, s = this.inputHeight / 2 / Math.tan(e / 2);
    this.projectionTransform = [[s, 0, this.inputWidth / 2], [0, s, this.inputHeight / 2], [0, 0, 1]], this.projectionMatrix = this._glProjectionMatrix({ projectionTransform: this.projectionTransform, width: this.inputWidth, height: this.inputHeight, near: 10, far: 1e5 }), this.worker = new cH(), this.workerMatchDone = null, this.workerTrackDone = null, this.worker.onmessage = (a) => {
      a.data.type === "matchDone" && this.workerMatchDone !== null && this.workerMatchDone(a.data), a.data.type === "trackUpdateDone" && this.workerTrackDone !== null && this.workerTrackDone(a.data);
    };
  }
  showTFStats() {
    console.log(Qn.memory().numTensors), console.table(Qn.memory());
  }
  addImageTargets(A) {
    return new Promise(async (g, I) => {
      const B = await fetch(A), Q = await B.arrayBuffer();
      g(this.addImageTargetsFromBuffer(Q));
    });
  }
  addImageTargetsFromBuffer(A) {
    const g = new E1().importData(A), I = [], B = [], Q = [];
    for (let E = 0; E < g.length; E++)
      B.push(g[E].matchingData), I.push(g[E].trackingData), Q.push([g[E].targetImage.width, g[E].targetImage.height]);
    return this.tracker = new GH(Q, I, this.projectionTransform, this.inputWidth, this.inputHeight, this.debugMode), this.worker.postMessage({ type: "setup", inputWidth: this.inputWidth, inputHeight: this.inputHeight, projectionTransform: this.projectionTransform, debugMode: this.debugMode, matchingDataList: B }), this.markerDimensions = Q, { dimensions: Q, matchingDataList: B, trackingDataList: I };
  }
  dispose() {
    this.stopProcessVideo(), this.worker.postMessage({ type: "dispose" });
  }
  dummyRun(A) {
    const g = this.inputLoader.loadInput(A);
    this.cropDetector.detect(g), this.tracker.dummyRun(g), g.dispose();
  }
  getProjectionMatrix() {
    return this.projectionMatrix;
  }
  getRotatedZ90Matrix(A) {
    return [-A[1], A[0], A[2], A[3], -A[5], A[4], A[6], A[7], -A[9], A[8], A[10], A[11], -A[13], A[12], A[14], A[15]];
  }
  getWorldMatrix(A, g) {
    return this._glModelViewMatrix(A, g);
  }
  async _detectAndMatch(A, g) {
    const { featurePoints: I } = this.cropDetector.detectMoving(A), { targetIndex: B, modelViewTransform: Q } = await this._workerMatch(I, g);
    return { targetIndex: B, modelViewTransform: Q };
  }
  async _trackAndUpdate(A, g, I) {
    const { worldCoords: B, screenCoords: Q } = this.tracker.track(A, g, I);
    return B.length < 4 ? null : await this._workerTrackUpdate(g, { worldCoords: B, screenCoords: Q });
  }
  processVideo(A) {
    if (!this.processingVideo) {
      this.processingVideo = !0, this.trackingStates = [];
      for (let g = 0; g < this.markerDimensions.length; g++)
        this.trackingStates.push({ showing: !1, isTracking: !1, currentModelViewTransform: null, trackCount: 0, trackMiss: 0, filter: new Ie({ minCutOff: this.filterMinCF, beta: this.filterBeta }) });
      (async () => {
        for (; this.processingVideo; ) {
          const g = this.inputLoader.loadInput(A);
          if (this.trackingStates.reduce((I, B) => I + (B.isTracking ? 1 : 0), 0) < this.maxTrack) {
            const I = [];
            for (let E = 0; E < this.trackingStates.length; E++)
              this.trackingStates[E].isTracking !== !0 && (this.interestedTargetIndex !== -1 && this.interestedTargetIndex !== E || I.push(E));
            const { targetIndex: B, modelViewTransform: Q } = await this._detectAndMatch(g, I);
            B !== -1 && (this.trackingStates[B].isTracking = !0, this.trackingStates[B].currentModelViewTransform = Q);
          }
          for (let I = 0; I < this.trackingStates.length; I++) {
            const B = this.trackingStates[I];
            if (B.isTracking) {
              let Q = await this._trackAndUpdate(g, B.currentModelViewTransform, I);
              Q === null ? B.isTracking = !1 : B.currentModelViewTransform = Q;
            }
            if (B.showing || B.isTracking && (B.trackMiss = 0, B.trackCount += 1, B.trackCount > this.warmupTolerance && (B.showing = !0, B.trackingMatrix = null, B.filter.reset())), B.showing && (B.isTracking ? B.trackMiss = 0 : (B.trackCount = 0, B.trackMiss += 1, B.trackMiss > this.missTolerance && (B.showing = !1, B.trackingMatrix = null, this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: I, worldMatrix: null })))), B.showing) {
              const Q = this._glModelViewMatrix(B.currentModelViewTransform, I);
              B.trackingMatrix = B.filter.filter(Date.now(), Q);
              let E = [];
              for (let i = 0; i < B.trackingMatrix.length; i++)
                E[i] = B.trackingMatrix[i];
              A.width === this.inputHeight && A.height === this.inputWidth && (E = this.getRotatedZ90Matrix(E)), this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: I, worldMatrix: E });
            }
          }
          g.dispose(), this.onUpdate && this.onUpdate({ type: "processDone" }), await Qn.nextFrame();
        }
      })();
    }
  }
  stopProcessVideo() {
    this.processingVideo = !1;
  }
  async detect(A) {
    const g = this.inputLoader.loadInput(A), { featurePoints: I, debugExtra: B } = await this.cropDetector.detect(g);
    return g.dispose(), { featurePoints: I, debugExtra: B };
  }
  async match(A, g) {
    const { modelViewTransform: I, debugExtra: B } = await this._workerMatch(A, [g]);
    return { modelViewTransform: I, debugExtra: B };
  }
  async track(A, g, I) {
    const B = this.inputLoader.loadInput(A), Q = this.tracker.track(B, g, I);
    return B.dispose(), Q;
  }
  async trackUpdate(A, g) {
    return g.worldCoords.length < 4 ? null : await this._workerTrackUpdate(A, g);
  }
  _workerMatch(A, g) {
    return new Promise(async (I, B) => {
      this.workerMatchDone = (Q) => {
        I({ targetIndex: Q.targetIndex, modelViewTransform: Q.modelViewTransform, debugExtra: Q.debugExtra });
      }, this.worker.postMessage({ type: "match", featurePoints: A, targetIndexes: g });
    });
  }
  _workerTrackUpdate(A, g) {
    return new Promise(async (I, B) => {
      this.workerTrackDone = (i) => {
        I(i.modelViewTransform);
      };
      const { worldCoords: Q, screenCoords: E } = g;
      this.worker.postMessage({ type: "trackUpdate", modelViewTransform: A, worldCoords: Q, screenCoords: E });
    });
  }
  _glModelViewMatrix(A, g) {
    const I = this.markerDimensions[g][1];
    return [A[0][0], -A[1][0], -A[2][0], 0, -A[0][1], A[1][1], A[2][1], 0, -A[0][2], A[1][2], A[2][2], 0, A[0][1] * I + A[0][3], -(A[1][1] * I + A[1][3]), -(A[2][1] * I + A[2][3]), 1];
  }
  _glProjectionMatrix({ projectionTransform: A, width: g, height: I, near: B, far: Q }) {
    const E = [[2 * A[0][0] / g, 0, -(2 * A[0][2] / g - 1), 0], [0, 2 * A[1][1] / I, -(2 * A[1][2] / I - 1), 0], [0, 0, -(Q + B) / (Q - B), -2 * Q * B / (Q - B)], [0, 0, -1, 0]], i = [];
    for (let o = 0; o < 4; o++)
      for (let t = 0; t < 4; t++)
        i.push(E[t][o]);
    return i;
  }
}
const JR = Ve(!1), fR = Ve({}), uD = Ve(), kD = Ve(!0), t1 = nl(({ children: C, autoplay: A, imageTargets: g, maxTrack: I, filterMinCF: B = null, filterBeta: Q = null, warmupTolerance: E = null, missTolerance: i = null, flipUserCamera: o = !0, onReady: t = null, onError: e = null }, s) => {
  const [a, r] = la(!g), h = ZE(null), [w, G] = la(!1), D = ZE(null), { camera: l } = xR(), d = ft(JR), N = ft(fR), k = ft(uD), p = ft(kD), { width: Y, height: M } = function() {
    const [Z, $] = la({ width: void 0, height: void 0 });
    return JE(() => {
      function AA() {
        const P = document.getElementById("layout") || window;
        $({ width: P.innerWidth || P.clientWidth, height: P.innerHeight || P.clientHeight });
      }
      return window.addEventListener("resize", AA), AA(), () => window.removeEventListener("resize", AA);
    }, []), Z;
  }();
  JE(() => p(o), [o, p]), JE(() => {
    d(!!g);
  }, [g, d]);
  const L = Ga(() => {
    h.current && h.current.video.addEventListener("loadedmetadata", () => {
      console.log("loadedmetadata"), G(!0);
    });
  }, [h]), m = Ga(async () => {
    if (console.log("startTracking"), w) {
      let Z;
      if (console.log("ready"), g) {
        console.log(g), Z = new o1({ inputWidth: h.current.video.videoWidth, inputHeight: h.current.video.videoHeight, debugMode: !0, maxTrack: I, filterMinCF: B, filterBeta: Q, missTolerance: i, warmupTolerance: E });
        const $ = Z.getProjectionMatrix();
        l.fov = 2 * Math.atan(1 / $[5]) * 180 / Math.PI, l.near = $[14] / ($[10] - 1), l.far = $[14] / ($[10] + 1), l.updateProjectionMatrix();
        const { dimensions: AA } = await Z.addImageTargets(g), P = AA.map(([_, QA]) => new En().compose(new HD(_ / 2, _ / 2 + (QA - _) / 2), new VR(), new HD(_, _, _)));
        Z.onUpdate = ({ type: _, targetIndex: QA, worldMatrix: tA }) => {
          _ === "updateMatrix" && N((O) => ({ ...O, [QA]: tA !== null ? new En().fromArray([...tA]).multiply(P[QA]).toArray() : null }));
        };
      } else {
        Z = new class {
          constructor({ onUpdate: QA = null, filterMinCF: tA = null, filterBeta: O = null }) {
            this.customFaceGeometries = [], this.estimator = null, this.lastEstimateResult = null, this.filterMinCF = tA === null ? 1e-3 : tA, this.filterBeta = O === null ? 1 : O, this.onUpdate = QA, this.landmarkFilters = [];
            for (let rA = 0; rA < bB.length; rA++)
              this.landmarkFilters[rA] = new Ie({ minCutOff: this.filterMinCF, beta: this.filterBeta });
            this.faceMatrixFilter = new Ie({ minCutOff: this.filterMinCF, beta: this.filterBeta }), this.faceScaleFilter = new Ie({ minCutOff: this.filterMinCF, beta: this.filterBeta });
          }
          async setup(QA) {
            await (async () => !!ll || new Promise((tA, O) => {
              yl.push(tA);
            }))(), this.faceMeshHelper = new PR(QA);
          }
          onInputResized(QA) {
            this.estimator = new zR(QA);
          }
          getCameraParams() {
            return { fov: 180 * this.estimator.fov / Math.PI, aspect: this.estimator.frameWidth / this.estimator.frameHeight, near: this.estimator.near, far: this.estimator.far };
          }
          async dummyRun(QA) {
            await this.faceMeshHelper.detect(QA);
          }
          processVideo(QA) {
            if (this.processingVideo)
              return;
            this.processingVideo = !0;
            const tA = async () => {
              const O = await this.faceMeshHelper.detect(QA);
              if (O.multiFaceLandmarks.length === 0) {
                this.lastEstimateResult = null, this.onUpdate({ hasFace: !1 });
                for (let rA = 0; rA < this.landmarkFilters.length; rA++)
                  this.landmarkFilters[rA].reset();
                this.faceMatrixFilter.reset(), this.faceScaleFilter.reset();
              } else {
                const rA = O.multiFaceLandmarks[0].map((DA) => [DA.x, DA.y, DA.z]), eA = this.estimator.estimate(rA);
                if (this.lastEstimateResult === null)
                  this.lastEstimateResult = eA;
                else {
                  const DA = this.lastEstimateResult.metricLandmarks;
                  this.lastEstimateResult.faceMatrix, this.lastEstimateResult.faceScale;
                  const GA = [];
                  for (let pA = 0; pA < DA.length; pA++)
                    GA[pA] = this.landmarkFilters[pA].filter(Date.now(), eA.metricLandmarks[pA]);
                  const NA = this.faceMatrixFilter.filter(Date.now(), eA.faceMatrix), UA = this.faceScaleFilter.filter(Date.now(), [eA.faceScale]);
                  this.lastEstimateResult = { metricLandmarks: GA, faceMatrix: NA, faceScale: UA[0] };
                }
                this.onUpdate && this.onUpdate({ hasFace: !0, estimateResult: this.lastEstimateResult });
                for (let DA = 0; DA < this.customFaceGeometries.length; DA++)
                  this.customFaceGeometries[DA].updatePositions(eA.metricLandmarks);
              }
              this.processingVideo && window.requestAnimationFrame(tA);
            };
            window.requestAnimationFrame(tA);
          }
          stopProcessVideo() {
            this.processingVideo = !1;
          }
          createThreeFaceGeometry(QA) {
            const tA = jR(QA);
            return this.customFaceGeometries.push(tA), tA;
          }
          getLandmarkMatrix(QA) {
            const { metricLandmarks: tA, faceMatrix: O, faceScale: rA } = this.lastEstimateResult, eA = O, DA = rA, GA = [tA[QA][0], tA[QA][1], tA[QA][2]];
            return [eA[0] * DA, eA[1] * DA, eA[2] * DA, eA[0] * GA[0] + eA[1] * GA[1] + eA[2] * GA[2] + eA[3], eA[4] * DA, eA[5] * DA, eA[6] * DA, eA[4] * GA[0] + eA[5] * GA[1] + eA[6] * GA[2] + eA[7], eA[8] * DA, eA[9] * DA, eA[10] * DA, eA[8] * GA[0] + eA[9] * GA[1] + eA[10] * GA[2] + eA[11], eA[12] * DA, eA[13] * DA, eA[14] * DA, eA[12] * GA[0] + eA[13] * GA[1] + eA[14] * GA[2] + eA[15]];
          }
        }({ filterMinCF: B, filterBeta: Q }), Z.onUpdate = ({ hasFace: QA, estimateResult: tA }) => k(QA ? tA : null), Z.onInputResized(h.current.video), await Z.setup(o);
        const { fov: $, aspect: AA, near: P, far: _ } = Z.getCameraParams();
        l.fov = $, l.aspect = AA, l.near = P, l.far = _, l.updateProjectionMatrix();
      }
      await Z.dummyRun(h.current.video), Z.processVideo(h.current.video), D.current = Z, t && t();
    }
  }, [w, g, t, I, B, Q, i, E, l, N, k]), x = Ga(() => {
    D.current && D.current.stopProcessVideo();
  }, [D]);
  rl(s, () => ({ startTracking: m, stopTracking: x, switchCamera: () => {
    const Z = D.current && D.current.processingVideo;
    Z && x(), G(!1), r(($) => !$), Z && m();
  } }), [m, x]), JE(() => {
    w && A && m();
  }, [A, w, m]);
  const T = hl(() => {
    var Z, $;
    return { width: "auto", maxWidth: "none", height: "inherit", marginLeft: `${(($ = (Z = h.current) == null ? void 0 : Z.video) == null ? void 0 : $.clientWidth) > 0 && w ? parseInt((Y - h.current.video.clientWidth) / 2) : 0}px` };
  }, [Y, w, h]);
  return hC.jsxs(hC.Fragment, { children: [hC.jsx(WR, { fullscreen: !0, zIndexRange: [-1, -1], calculatePosition: () => [0, 0], style: { top: 0, left: 0 }, children: hC.jsx(TR, { ref: h, onUserMedia: L, onUserMediaError: (Z) => {
    e && e(Z);
  }, height: M, width: Y, videoConstraints: { facingMode: a ? "user" : "environment" }, style: T, mirrored: a && o, id: "three-video" }) }), C] });
}), D1 = nl(({ children: C, autoplay: A = !0, imageTargets: g, maxTrack: I = 1, filterMinCF: B, filterBeta: Q, warmupTolerance: E, missTolerance: i, flipUserCamera: o = !0, onReady: t, onError: e, ...s }, a) => {
  const r = ZE(null), h = ZE(null);
  return rl(a, () => ({ startTracking: () => {
    var w;
    return (w = h == null ? void 0 : h.current) == null ? void 0 : w.startTracking();
  }, stopTracking: () => {
    var w;
    return (w = h == null ? void 0 : h.current) == null ? void 0 : w.stopTracking();
  }, switchCamera: () => {
    var w;
    return (w = h == null ? void 0 : h.current) == null ? void 0 : w.switchCamera();
  }, current: r.current })), hC.jsx(qR, { style: { position: "absolute", minWidth: "100%", minHeight: "100%" }, ...s, ref: r, children: hC.jsx(HR, { fallback: null, children: hC.jsx(t1, { autoplay: A, imageTargets: g, maxTrack: I, filterMinCF: B, filterBeta: Q, warmupTolerance: E, missTolerance: i, flipUserCamera: o, onReady: t, onError: e, ref: h, children: C }) }) });
}), c1 = ({ children: C, target: A = 0, onAnchorFound: g, onAnchorLost: I, ...B }) => {
  const Q = ZE(), E = fE(fR), i = fE(JR), o = fE(uD), t = fE(kD);
  return JE(() => {
    if (Q.current)
      if (i)
        E[A] ? (Q.current.visible !== !0 && g && g(), Q.current.visible = !0, Q.current.matrix = new En().fromArray(E[A])) : (Q.current.visible !== !1 && I && I(), Q.current.visible = !1);
      else if (o) {
        Q.current.visible !== !0 && g && g(), Q.current.visible = !0;
        const e = o.faceMatrix, s = o.faceScale, a = [o.metricLandmarks[A][0], o.metricLandmarks[A][1], o.metricLandmarks[A][2]];
        Q.current.matrix.set(e[0] * s, e[1] * s, e[2] * s, e[0] * a[0] + e[1] * a[1] + e[2] * a[2] + e[3], e[4] * s, e[5] * s, e[6] * s, e[4] * a[0] + e[5] * a[1] + e[6] * a[2] + e[7], e[8] * s, e[9] * s, e[10] * s, e[8] * a[0] + e[9] * a[1] + e[10] * a[2] + e[11], e[12] * s, e[13] * s, e[14] * s, e[12] * a[0] + e[13] * a[1] + e[14] * a[2] + e[15]);
      } else
        Q.current.visible !== !1 && I && I(), Q.current.visible = !1;
  }, [E, A, g, I, i, o]), hC.jsx("group", { scale: [t ? -1 : 1, 1, 1], children: hC.jsx("group", { ref: Q, visible: !1, matrixAutoUpdate: !1, ...B, children: C }) });
}, w1 = ({ children: C, onFaceFound: A, onFaceLost: g, ...I }) => {
  const B = ZE(), Q = fE(uD), E = fE(kD), [i, o, t] = hl(() => {
    const e = new Float32Array(3 * LB.length), s = new Float32Array(2 * LB.length), a = new Uint32Array(Dl);
    for (let r = 0; r < LB.length; r++)
      s[2 * r] = LB[r][0], s[2 * r + 1] = LB[r][1];
    return [e, s, a];
  }, []);
  return JE(() => {
    if (B.current)
      if (Q) {
        B.current.visible !== !0 && A && A(), B.current.visible = !0, B.current.matrix.set(...Q.faceMatrix);
        for (let e = 0; e < LB.length; e++)
          B.current.geometry.attributes.position.set(Q.metricLandmarks[e], 3 * e);
        B.current.geometry.attributes.position.needsUpdate = !0, B.current.geometry.computeVertexNormals();
      } else
        B.current.visible !== !1 && g && g(), B.current.visible = !1;
  }, [A, g, Q]), hC.jsx("group", { scale: [E ? -1 : 1, 1, 1], children: hC.jsxs("mesh", { ref: B, visible: !1, matrixAutoUpdate: !1, ...I, children: [hC.jsxs("bufferGeometry", { attach: "geometry", children: [hC.jsx("bufferAttribute", { attach: "index", array: t, count: t.length, itemSize: 1 }), hC.jsx("bufferAttribute", { attach: "attributes-position", count: i.length / 3, itemSize: 3, array: i }), hC.jsx("bufferAttribute", { attach: "attributes-uv", count: o.length / 2, itemSize: 2, array: o })] }), C] }) });
};
export {
  c1 as ARAnchor,
  w1 as ARFaceMesh,
  D1 as ARView
};
